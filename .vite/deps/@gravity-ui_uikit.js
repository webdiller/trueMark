import {
  invariant
} from "./chunk-KDZ7CXOI.js";
import {
  require_react_dom
} from "./chunk-JGD6IGJ4.js";
import {
  require_jsx_runtime
} from "./chunk-67WGWSRF.js";
import {
  require_react
} from "./chunk-2CLD7BNN.js";
import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@bem-react/classname/build/classname.development.js
var require_classname_development = __commonJS({
  "node_modules/@bem-react/classname/build/classname.development.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function withNaming2(preset2) {
      var nameSpace = preset2.n || "";
      var modValueDelimiter = preset2.v || preset2.m;
      function stringify(b119, e, m, mix) {
        var entityName = e ? nameSpace + b119 + preset2.e + e : nameSpace + b119;
        var className = entityName;
        if (m) {
          var modPrefix = " " + className + preset2.m;
          for (var k in m) {
            if (m.hasOwnProperty(k)) {
              var modVal = m[k];
              if (modVal === true) {
                className += modPrefix + k;
              } else if (modVal) {
                className += modPrefix + k + modValueDelimiter + modVal;
              }
            }
          }
        }
        if (mix !== void 0) {
          mix = Array.isArray(mix) ? mix : [mix];
          for (var i = 0, len = mix.length; i < len; i++) {
            var value = mix[i];
            if (!value || typeof value.valueOf() !== "string")
              continue;
            var mixes = value.valueOf().split(" ");
            for (var j = 0; j < mixes.length; j++) {
              var val = mixes[j];
              if (val !== entityName) {
                className += " " + val;
              }
            }
          }
        }
        return className;
      }
      return function cnGenerator(b119, e) {
        return function(elemOrMods, elemModsOrBlockMix, elemMix) {
          if (typeof elemOrMods === "string") {
            if (typeof elemModsOrBlockMix === "string" || Array.isArray(elemModsOrBlockMix)) {
              return stringify(b119, elemOrMods, void 0, elemModsOrBlockMix);
            }
            return stringify(b119, elemOrMods, elemModsOrBlockMix, elemMix);
          }
          return stringify(b119, e, elemOrMods, elemModsOrBlockMix);
        };
      };
    }
    var cn5 = withNaming2({
      e: "-",
      m: "_"
    });
    exports.cn = cn5;
    exports.withNaming = withNaming2;
  }
});

// node_modules/@bem-react/classname/index.js
var require_classname = __commonJS({
  "node_modules/@bem-react/classname/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_classname_development();
    }
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index3 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index3, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      return index3 < 0 ? void 0 : data[index3][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index3][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject2;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject2 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction2(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction2;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject2 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue2;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue2 = require_getValue();
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size5 = data.size;
      data.set(key, value);
      this.size += data.size == size5 ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index3 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index3];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index3 = -1, length = source.length;
      array || (array = Array(length));
      while (++index3 < length) {
        array[index3] = source[index3];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject2 = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject3(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject3;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index3 = -1, length = props.length;
      while (++index3 < length) {
        var key = props[index3];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index3 = -1, result = Array(n);
      while (++index3 < n) {
        result[index3] = iteratee(index3);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject2 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction2 = require_isFunction();
    var isObject2 = require_isObject();
    var isPlainObject3 = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject3(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction2(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject2 = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply3(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply3;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply3 = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start3, transform) {
      start3 = nativeMax(start3 === void 0 ? func.length - 1 : start3, 0);
      return function() {
        var args = arguments, index3 = -1, length = nativeMax(args.length - start3, 0), array = Array(length);
        while (++index3 < length) {
          array[index3] = args[start3 + index3];
        }
        index3 = -1;
        var otherArgs = Array(start3 + 1);
        while (++index3 < start3) {
          otherArgs[index3] = args[index3];
        }
        otherArgs[start3] = transform(array);
        return apply3(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count3 = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count3 >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count3 = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start3) {
      return setToString(overRest(func, start3, identity), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject2 = require_isObject();
    function isIterateeCall(value, index3, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index3;
      if (type == "number" ? isArrayLike(object) && isIndex(index3, object.length) : type == "string" && index3 in object) {
        return eq(object[index3], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index3 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index3 < length) {
          var source = sources[index3];
          if (source) {
            assigner(object, source, index3, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index3 = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index3 < length) {
        result[index3] = iteratee(array[index3], index3, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString2;
  }
});

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports, module) {
    function baseSlice(array, start3, end2) {
      var index3 = -1, length = array.length;
      if (start3 < 0) {
        start3 = -start3 > length ? 0 : length + start3;
      }
      end2 = end2 > length ? length : end2;
      if (end2 < 0) {
        end2 += length;
      }
      length = start3 > end2 ? 0 : end2 - start3 >>> 0;
      start3 >>>= 0;
      var result = Array(length);
      while (++index3 < length) {
        result[index3] = array[index3 + start3];
      }
      return result;
    }
    module.exports = baseSlice;
  }
});

// node_modules/lodash/_castSlice.js
var require_castSlice = __commonJS({
  "node_modules/lodash/_castSlice.js"(exports, module) {
    var baseSlice = require_baseSlice();
    function castSlice(array, start3, end2) {
      var length = array.length;
      end2 = end2 === void 0 ? length : end2;
      return !start3 && end2 >= length ? array : baseSlice(array, start3, end2);
    }
    module.exports = castSlice;
  }
});

// node_modules/lodash/_hasUnicode.js
var require_hasUnicode = __commonJS({
  "node_modules/lodash/_hasUnicode.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    module.exports = hasUnicode;
  }
});

// node_modules/lodash/_asciiToArray.js
var require_asciiToArray = __commonJS({
  "node_modules/lodash/_asciiToArray.js"(exports, module) {
    function asciiToArray(string) {
      return string.split("");
    }
    module.exports = asciiToArray;
  }
});

// node_modules/lodash/_unicodeToArray.js
var require_unicodeToArray = __commonJS({
  "node_modules/lodash/_unicodeToArray.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    module.exports = unicodeToArray;
  }
});

// node_modules/lodash/_stringToArray.js
var require_stringToArray = __commonJS({
  "node_modules/lodash/_stringToArray.js"(exports, module) {
    var asciiToArray = require_asciiToArray();
    var hasUnicode = require_hasUnicode();
    var unicodeToArray = require_unicodeToArray();
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    module.exports = stringToArray;
  }
});

// node_modules/lodash/_createCaseFirst.js
var require_createCaseFirst = __commonJS({
  "node_modules/lodash/_createCaseFirst.js"(exports, module) {
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var stringToArray = require_stringToArray();
    var toString2 = require_toString();
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString2(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    module.exports = createCaseFirst;
  }
});

// node_modules/lodash/upperFirst.js
var require_upperFirst = __commonJS({
  "node_modules/lodash/upperFirst.js"(exports, module) {
    var createCaseFirst = require_createCaseFirst();
    var upperFirst = createCaseFirst("toUpperCase");
    module.exports = upperFirst;
  }
});

// node_modules/lodash/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/lodash/capitalize.js"(exports, module) {
    var toString2 = require_toString();
    var upperFirst = require_upperFirst();
    function capitalize2(string) {
      return upperFirst(toString2(string).toLowerCase());
    }
    module.exports = capitalize2;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values3) {
      var index3 = -1, length = values3 == null ? 0 : values3.length;
      this.__data__ = new MapCache();
      while (++index3 < length) {
        this.add(values3[index3]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index3 = -1, length = array == null ? 0 : array.length;
      while (++index3 < length) {
        if (predicate(array[index3], index3, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index3 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index3 < arrLength) {
        var arrValue = array[index3], othValue = other[index3];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index3, other, array, stack) : customizer(arrValue, othValue, index3, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map) {
      var index3 = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index3] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index3 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index3] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values3) {
      var index3 = -1, length = values3.length, offset6 = array.length;
      while (++index3 < length) {
        array[offset6 + index3] = values3[index3];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index3 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index3 < length) {
        var value = array[index3];
        if (predicate(value, index3, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index3 = objLength;
      while (index3--) {
        var key = objProps[index3];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index3 < objLength) {
        key = objProps[index3];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap2 = getNative(root, "WeakMap");
    module.exports = WeakMap2;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index3 = matchData.length, length = index3, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index3--) {
        var data = matchData[index3];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index3 < length) {
        data = matchData[index3];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject2 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject2(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match2, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString2 = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString2(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index3 = 0, length = path.length;
      while (object != null && index3 < length) {
        object = object[toKey(path[index3++])];
      }
      return index3 && index3 == length ? object : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet = require_baseGet();
    function get3(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get3;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module) {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module) {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);
      var index3 = -1, length = path.length, result = false;
      while (++index3 < length) {
        var key = toKey(path[index3]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index3 != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    module.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    module.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get3 = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get3(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index3 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index3-- : ++index3 < length) {
        if (predicate(array[index3], index3, array)) {
          return index3;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array, value, fromIndex) {
      var index3 = fromIndex - 1, length = array.length;
      while (++index3 < length) {
        if (array[index3] === value) {
          return index3;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    function arrayIncludesWith(array, value, comparator) {
      var index3 = -1, length = array == null ? 0 : array.length;
      while (++index3 < length) {
        if (comparator(value, array[index3])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop7() {
    }
    module.exports = noop7;
  }
});

// node_modules/lodash/_createSet.js
var require_createSet = __commonJS({
  "node_modules/lodash/_createSet.js"(exports, module) {
    var Set2 = require_Set();
    var noop7 = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop7 : function(values3) {
      return new Set2(values3);
    };
    module.exports = createSet;
  }
});

// node_modules/lodash/_baseUniq.js
var require_baseUniq = __commonJS({
  "node_modules/lodash/_baseUniq.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array, iteratee, comparator) {
      var index3 = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index3 < length) {
          var value = array[index3], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseUniq;
  }
});

// node_modules/lodash/uniqBy.js
var require_uniqBy = __commonJS({
  "node_modules/lodash/uniqBy.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var baseUniq = require_baseUniq();
    function uniqBy2(array, iteratee) {
      return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
    }
    module.exports = uniqBy2;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index3 = string.length;
      while (index3-- && reWhitespace.test(string.charAt(index3))) {
      }
      return index3;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject2 = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/lodash/toFinite.js
var require_toFinite = __commonJS({
  "node_modules/lodash/toFinite.js"(exports, module) {
    var toNumber = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module.exports = toFinite;
  }
});

// node_modules/lodash/toInteger.js
var require_toInteger = __commonJS({
  "node_modules/lodash/toInteger.js"(exports, module) {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module.exports = toInteger;
  }
});

// node_modules/lodash/_createRound.js
var require_createRound = __commonJS({
  "node_modules/lodash/_createRound.js"(exports, module) {
    var root = require_root();
    var toInteger = require_toInteger();
    var toNumber = require_toNumber();
    var toString2 = require_toString();
    var nativeIsFinite = root.isFinite;
    var nativeMin = Math.min;
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          var pair = (toString2(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
          pair = (toString2(value) + "e").split("e");
          return +(pair[0] + "e" + (+pair[1] - precision));
        }
        return func(number);
      };
    }
    module.exports = createRound;
  }
});

// node_modules/lodash/round.js
var require_round = __commonJS({
  "node_modules/lodash/round.js"(exports, module) {
    var createRound = require_createRound();
    var round3 = createRound("round");
    module.exports = round3;
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now2 = function() {
      return root.Date.now();
    };
    module.exports = now2;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module) {
    var isObject2 = require_isObject();
    var now2 = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce2(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now2();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush3() {
        return timerId === void 0 ? result : trailingEdge(now2());
      }
      function debounced() {
        var time = now2(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush3;
      return debounced;
    }
    module.exports = debounce2;
  }
});

// node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "node_modules/lodash/throttle.js"(exports, module) {
    var debounce2 = require_debounce();
    var isObject2 = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject2(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce2(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module.exports = throttle2;
  }
});

// node_modules/lodash/_arrayAggregator.js
var require_arrayAggregator = __commonJS({
  "node_modules/lodash/_arrayAggregator.js"(exports, module) {
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index3 = -1, length = array == null ? 0 : array.length;
      while (++index3 < length) {
        var value = array[index3];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    module.exports = arrayAggregator;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports, module) {
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    module.exports = baseForOwn;
  }
});

// node_modules/lodash/_createBaseEach.js
var require_createBaseEach = __commonJS({
  "node_modules/lodash/_createBaseEach.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index3 = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index3-- : ++index3 < length) {
          if (iteratee(iterable[index3], index3, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    module.exports = createBaseEach;
  }
});

// node_modules/lodash/_baseEach.js
var require_baseEach = __commonJS({
  "node_modules/lodash/_baseEach.js"(exports, module) {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module.exports = baseEach;
  }
});

// node_modules/lodash/_baseAggregator.js
var require_baseAggregator = __commonJS({
  "node_modules/lodash/_baseAggregator.js"(exports, module) {
    var baseEach = require_baseEach();
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection2) {
        setter(accumulator, value, iteratee(value), collection2);
      });
      return accumulator;
    }
    module.exports = baseAggregator;
  }
});

// node_modules/lodash/_createAggregator.js
var require_createAggregator = __commonJS({
  "node_modules/lodash/_createAggregator.js"(exports, module) {
    var arrayAggregator = require_arrayAggregator();
    var baseAggregator = require_baseAggregator();
    var baseIteratee = require_baseIteratee();
    var isArray = require_isArray();
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
      };
    }
    module.exports = createAggregator;
  }
});

// node_modules/lodash/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/lodash/groupBy.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var createAggregator = require_createAggregator();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var groupBy2 = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });
    module.exports = groupBy2;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment32 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer2(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement4(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment32;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement4;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error3;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error3 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error3 = ex;
            }
            if (error3 && !(error3 instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error3 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error3 instanceof Error && !(error3.message in loggedTypeFailures)) {
              loggedTypeFailures[error3.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error3.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement12, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate2) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate2(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate2(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error3 = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error3 instanceof Error) {
              return error3;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement12(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is2(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error3 = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error3 instanceof Error) {
                return error3;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate2(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createNodeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          if (!isNode2(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error3 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error3) {
              return error3;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys2 = assign({}, props[propName], shapeTypes);
          for (var key in allKeys2) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error3 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error3) {
              return error3;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode2);
            }
            if (propValue === null || isValidElement12(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode2(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode2(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual7(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual7;
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  }
});

// node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType2(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment32 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer2(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement4(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment32;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement4;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-redux/node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "node_modules/react-redux/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  }
});

// node_modules/lodash/_baseRange.js
var require_baseRange = __commonJS({
  "node_modules/lodash/_baseRange.js"(exports, module) {
    var nativeCeil = Math.ceil;
    var nativeMax = Math.max;
    function baseRange(start3, end2, step, fromRight) {
      var index3 = -1, length = nativeMax(nativeCeil((end2 - start3) / (step || 1)), 0), result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index3] = start3;
        start3 += step;
      }
      return result;
    }
    module.exports = baseRange;
  }
});

// node_modules/lodash/_createRange.js
var require_createRange = __commonJS({
  "node_modules/lodash/_createRange.js"(exports, module) {
    var baseRange = require_baseRange();
    var isIterateeCall = require_isIterateeCall();
    var toFinite = require_toFinite();
    function createRange(fromRight) {
      return function(start3, end2, step) {
        if (step && typeof step != "number" && isIterateeCall(start3, end2, step)) {
          end2 = step = void 0;
        }
        start3 = toFinite(start3);
        if (end2 === void 0) {
          end2 = start3;
          start3 = 0;
        } else {
          end2 = toFinite(end2);
        }
        step = step === void 0 ? start3 < end2 ? 1 : -1 : toFinite(step);
        return baseRange(start3, end2, step, fromRight);
      };
    }
    module.exports = createRange;
  }
});

// node_modules/lodash/range.js
var require_range = __commonJS({
  "node_modules/lodash/range.js"(exports, module) {
    var createRange = require_createRange();
    var range = createRange();
    module.exports = range;
  }
});

// node_modules/lodash/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/lodash/isEmpty.js"(exports, module) {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLike = require_isArrayLike();
    var isBuffer = require_isBuffer();
    var isPrototype = require_isPrototype();
    var isTypedArray = require_isTypedArray();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function isEmpty2(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }
    module.exports = isEmpty2;
  }
});

// node_modules/lodash/uniq.js
var require_uniq = __commonJS({
  "node_modules/lodash/uniq.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniq2(array) {
      return array && array.length ? baseUniq(array) : [];
    }
    module.exports = uniq2;
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames3() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames3.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames3.default = classNames3;
        module.exports = classNames3;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames3;
        });
      } else {
        window.classNames = classNames3;
      }
    })();
  }
});

// node_modules/lodash/_baseHas.js
var require_baseHas = __commonJS({
  "node_modules/lodash/_baseHas.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }
    module.exports = baseHas;
  }
});

// node_modules/lodash/has.js
var require_has2 = __commonJS({
  "node_modules/lodash/has.js"(exports, module) {
    var baseHas = require_baseHas();
    var hasPath = require_hasPath();
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }
    module.exports = has;
  }
});

// node_modules/lodash/isNumber.js
var require_isNumber = __commonJS({
  "node_modules/lodash/isNumber.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var numberTag = "[object Number]";
    function isNumber(value) {
      return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
    }
    module.exports = isNumber;
  }
});

// node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array, values3, iteratee, comparator) {
      var index3 = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values3.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values3 = arrayMap(values3, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values3.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values3 = new SetCache(values3);
      }
      outer:
        while (++index3 < length) {
          var value = array[index3], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values3[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values3, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index3 = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index3 < length) {
        var value = array[index3];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/difference.js
var require_difference = __commonJS({
  "node_modules/lodash/difference.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var difference = baseRest(function(array, values3) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference;
  }
});

// node_modules/lodash/union.js
var require_union = __commonJS({
  "node_modules/lodash/union.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var baseUniq = require_baseUniq();
    var isArrayLikeObject = require_isArrayLikeObject();
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    module.exports = union;
  }
});

// node_modules/lodash/without.js
var require_without = __commonJS({
  "node_modules/lodash/without.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var without = baseRest(function(array, values3) {
      return isArrayLikeObject(array) ? baseDifference(array, values3) : [];
    });
    module.exports = without;
  }
});

// node_modules/lodash/isString.js
var require_isString = __commonJS({
  "node_modules/lodash/isString.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module) {
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module.exports = last;
  }
});

// node_modules/blueimp-md5/js/md5.js
var require_md5 = __commonJS({
  "node_modules/blueimp-md5/js/md5.js"(exports, module) {
    (function($) {
      "use strict";
      function safeAdd(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      }
      function bitRotateLeft(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
      }
      function md5cmn(q, a, b119, x, s, t) {
        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b119);
      }
      function md5ff(a, b119, c, d, x, s, t) {
        return md5cmn(b119 & c | ~b119 & d, a, b119, x, s, t);
      }
      function md5gg(a, b119, c, d, x, s, t) {
        return md5cmn(b119 & d | c & ~d, a, b119, x, s, t);
      }
      function md5hh(a, b119, c, d, x, s, t) {
        return md5cmn(b119 ^ c ^ d, a, b119, x, s, t);
      }
      function md5ii(a, b119, c, d, x, s, t) {
        return md5cmn(c ^ (b119 | ~d), a, b119, x, s, t);
      }
      function binlMD5(x, len) {
        x[len >> 5] |= 128 << len % 32;
        x[(len + 64 >>> 9 << 4) + 14] = len;
        var i;
        var olda;
        var oldb;
        var oldc;
        var oldd;
        var a = 1732584193;
        var b119 = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (i = 0; i < x.length; i += 16) {
          olda = a;
          oldb = b119;
          oldc = c;
          oldd = d;
          a = md5ff(a, b119, c, d, x[i], 7, -680876936);
          d = md5ff(d, a, b119, c, x[i + 1], 12, -389564586);
          c = md5ff(c, d, a, b119, x[i + 2], 17, 606105819);
          b119 = md5ff(b119, c, d, a, x[i + 3], 22, -1044525330);
          a = md5ff(a, b119, c, d, x[i + 4], 7, -176418897);
          d = md5ff(d, a, b119, c, x[i + 5], 12, 1200080426);
          c = md5ff(c, d, a, b119, x[i + 6], 17, -1473231341);
          b119 = md5ff(b119, c, d, a, x[i + 7], 22, -45705983);
          a = md5ff(a, b119, c, d, x[i + 8], 7, 1770035416);
          d = md5ff(d, a, b119, c, x[i + 9], 12, -1958414417);
          c = md5ff(c, d, a, b119, x[i + 10], 17, -42063);
          b119 = md5ff(b119, c, d, a, x[i + 11], 22, -1990404162);
          a = md5ff(a, b119, c, d, x[i + 12], 7, 1804603682);
          d = md5ff(d, a, b119, c, x[i + 13], 12, -40341101);
          c = md5ff(c, d, a, b119, x[i + 14], 17, -1502002290);
          b119 = md5ff(b119, c, d, a, x[i + 15], 22, 1236535329);
          a = md5gg(a, b119, c, d, x[i + 1], 5, -165796510);
          d = md5gg(d, a, b119, c, x[i + 6], 9, -1069501632);
          c = md5gg(c, d, a, b119, x[i + 11], 14, 643717713);
          b119 = md5gg(b119, c, d, a, x[i], 20, -373897302);
          a = md5gg(a, b119, c, d, x[i + 5], 5, -701558691);
          d = md5gg(d, a, b119, c, x[i + 10], 9, 38016083);
          c = md5gg(c, d, a, b119, x[i + 15], 14, -660478335);
          b119 = md5gg(b119, c, d, a, x[i + 4], 20, -405537848);
          a = md5gg(a, b119, c, d, x[i + 9], 5, 568446438);
          d = md5gg(d, a, b119, c, x[i + 14], 9, -1019803690);
          c = md5gg(c, d, a, b119, x[i + 3], 14, -187363961);
          b119 = md5gg(b119, c, d, a, x[i + 8], 20, 1163531501);
          a = md5gg(a, b119, c, d, x[i + 13], 5, -1444681467);
          d = md5gg(d, a, b119, c, x[i + 2], 9, -51403784);
          c = md5gg(c, d, a, b119, x[i + 7], 14, 1735328473);
          b119 = md5gg(b119, c, d, a, x[i + 12], 20, -1926607734);
          a = md5hh(a, b119, c, d, x[i + 5], 4, -378558);
          d = md5hh(d, a, b119, c, x[i + 8], 11, -2022574463);
          c = md5hh(c, d, a, b119, x[i + 11], 16, 1839030562);
          b119 = md5hh(b119, c, d, a, x[i + 14], 23, -35309556);
          a = md5hh(a, b119, c, d, x[i + 1], 4, -1530992060);
          d = md5hh(d, a, b119, c, x[i + 4], 11, 1272893353);
          c = md5hh(c, d, a, b119, x[i + 7], 16, -155497632);
          b119 = md5hh(b119, c, d, a, x[i + 10], 23, -1094730640);
          a = md5hh(a, b119, c, d, x[i + 13], 4, 681279174);
          d = md5hh(d, a, b119, c, x[i], 11, -358537222);
          c = md5hh(c, d, a, b119, x[i + 3], 16, -722521979);
          b119 = md5hh(b119, c, d, a, x[i + 6], 23, 76029189);
          a = md5hh(a, b119, c, d, x[i + 9], 4, -640364487);
          d = md5hh(d, a, b119, c, x[i + 12], 11, -421815835);
          c = md5hh(c, d, a, b119, x[i + 15], 16, 530742520);
          b119 = md5hh(b119, c, d, a, x[i + 2], 23, -995338651);
          a = md5ii(a, b119, c, d, x[i], 6, -198630844);
          d = md5ii(d, a, b119, c, x[i + 7], 10, 1126891415);
          c = md5ii(c, d, a, b119, x[i + 14], 15, -1416354905);
          b119 = md5ii(b119, c, d, a, x[i + 5], 21, -57434055);
          a = md5ii(a, b119, c, d, x[i + 12], 6, 1700485571);
          d = md5ii(d, a, b119, c, x[i + 3], 10, -1894986606);
          c = md5ii(c, d, a, b119, x[i + 10], 15, -1051523);
          b119 = md5ii(b119, c, d, a, x[i + 1], 21, -2054922799);
          a = md5ii(a, b119, c, d, x[i + 8], 6, 1873313359);
          d = md5ii(d, a, b119, c, x[i + 15], 10, -30611744);
          c = md5ii(c, d, a, b119, x[i + 6], 15, -1560198380);
          b119 = md5ii(b119, c, d, a, x[i + 13], 21, 1309151649);
          a = md5ii(a, b119, c, d, x[i + 4], 6, -145523070);
          d = md5ii(d, a, b119, c, x[i + 11], 10, -1120210379);
          c = md5ii(c, d, a, b119, x[i + 2], 15, 718787259);
          b119 = md5ii(b119, c, d, a, x[i + 9], 21, -343485551);
          a = safeAdd(a, olda);
          b119 = safeAdd(b119, oldb);
          c = safeAdd(c, oldc);
          d = safeAdd(d, oldd);
        }
        return [a, b119, c, d];
      }
      function binl2rstr(input) {
        var i;
        var output = "";
        var length32 = input.length * 32;
        for (i = 0; i < length32; i += 8) {
          output += String.fromCharCode(input[i >> 5] >>> i % 32 & 255);
        }
        return output;
      }
      function rstr2binl(input) {
        var i;
        var output = [];
        output[(input.length >> 2) - 1] = void 0;
        for (i = 0; i < output.length; i += 1) {
          output[i] = 0;
        }
        var length8 = input.length * 8;
        for (i = 0; i < length8; i += 8) {
          output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << i % 32;
        }
        return output;
      }
      function rstrMD5(s) {
        return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
      }
      function rstrHMACMD5(key, data) {
        var i;
        var bkey = rstr2binl(key);
        var ipad = [];
        var opad = [];
        var hash;
        ipad[15] = opad[15] = void 0;
        if (bkey.length > 16) {
          bkey = binlMD5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
          ipad[i] = bkey[i] ^ 909522486;
          opad[i] = bkey[i] ^ 1549556828;
        }
        hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));
      }
      function rstr2hex(input) {
        var hexTab = "0123456789abcdef";
        var output = "";
        var x;
        var i;
        for (i = 0; i < input.length; i += 1) {
          x = input.charCodeAt(i);
          output += hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15);
        }
        return output;
      }
      function str2rstrUTF8(input) {
        return unescape(encodeURIComponent(input));
      }
      function rawMD5(s) {
        return rstrMD5(str2rstrUTF8(s));
      }
      function hexMD5(s) {
        return rstr2hex(rawMD5(s));
      }
      function rawHMACMD5(k, d) {
        return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
      }
      function hexHMACMD5(k, d) {
        return rstr2hex(rawHMACMD5(k, d));
      }
      function md52(string, key, raw) {
        if (!key) {
          if (!raw) {
            return hexMD5(string);
          }
          return rawMD5(string);
        }
        if (!raw) {
          return hexHMACMD5(key, string);
        }
        return rawHMACMD5(key, string);
      }
      if (typeof define === "function" && define.amd) {
        define(function() {
          return md52;
        });
      } else if (typeof module === "object" && module.exports) {
        module.exports = md52;
      } else {
        $.md5 = md52;
      }
    })(exports);
  }
});

// node_modules/@gravity-ui/uikit/build/esm/utils/configure.js
var Lang;
(function(Lang2) {
  Lang2["Ru"] = "ru";
  Lang2["En"] = "en";
})(Lang || (Lang = {}));
var subs = [];
var config = {
  lang: Lang.En,
  fallbackLang: Lang.En
};
var configure = (newConfig) => {
  Object.assign(config, newConfig);
  subs.forEach((sub) => {
    sub(config);
  });
};
var subscribeConfigure = (sub) => {
  subs.push(sub);
  return () => {
    subs = subs.filter((item) => item !== sub);
  };
};
var getConfig = () => config;

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/MobileContext.js
var React = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/cn.js
var import_classname = __toESM(require_classname(), 1);
var NAMESPACE = "g-";
var cn = (0, import_classname.withNaming)({ e: "__", m: "_" });
var block = (0, import_classname.withNaming)({ n: NAMESPACE, e: "__", m: "_" });
function modsClassName(className) {
  return className.split(/\s(.*)/)[1];
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/constants.js
var Platform;
(function(Platform2) {
  Platform2["IOS"] = "ios";
  Platform2["ANDROID"] = "android";
  Platform2["BROWSER"] = "browser";
})(Platform || (Platform = {}));
var b = block("root");
var rootMobileClassName = b({ mobile: true }).split(/\s+/)[1];

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/MobileContext.js
var initialValue = {
  mobile: false,
  platform: Platform.BROWSER,
  useHistory: () => ({ action: "", replace() {
  }, push() {
  }, goBack() {
  } }),
  useLocation: () => ({ pathname: "", search: "", hash: "" })
};
var MobileContext = React.createContext(initialValue);

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/MobileProvider.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
function useHistoryMock() {
  return { action: "", replace() {
  }, push() {
  }, goBack() {
  } };
}
function useLocationMock() {
  return { pathname: "", search: "", hash: "" };
}
function MobileProvider({ mobile = false, platform: platform2 = Platform.BROWSER, useHistory = useHistoryMock, useLocation = useLocationMock, children: children2 }) {
  const useHistoryFunction = React2.useCallback(function useHistoryFunction2() {
    const { goBack, back, ...props } = useHistory();
    let goBackFunction;
    if (typeof goBack === "function") {
      goBackFunction = goBack;
    } else if (typeof back === "function") {
      goBackFunction = back;
    } else {
      goBackFunction = () => {
      };
    }
    return {
      ...props,
      goBack: goBackFunction
    };
  }, [useHistory]);
  React2.useEffect(() => {
    document.body.classList.toggle(rootMobileClassName, mobile);
  }, [rootMobileClassName, mobile]);
  const contextValue = React2.useMemo(() => {
    return {
      mobile,
      platform: platform2,
      useLocation,
      useHistory: useHistoryFunction
    };
  }, [mobile, platform2, useLocation, useHistoryFunction]);
  return (0, import_jsx_runtime.jsx)(MobileContext.Provider, { value: contextValue, children: children2 });
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/useMobile.js
var React3 = __toESM(require_react(), 1);
function useMobile() {
  return React3.useContext(MobileContext).mobile;
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/usePlatform.js
var React4 = __toESM(require_react(), 1);
function usePlatform() {
  return React4.useContext(MobileContext).platform;
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/withMobile.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React5 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/getComponentName.js
function getComponentName(Component13) {
  return Component13.displayName || Component13.name || "Component";
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/withMobile.js
function withMobile(WrappedComponent) {
  var _a;
  const componentName = getComponentName(WrappedComponent);
  return _a = class extends React5.Component {
    render() {
      return (0, import_jsx_runtime2.jsx)(WrappedComponent, { ...this.props, mobile: this.context.mobile, platform: this.context.platform, useHistory: this.context.useHistory, useLocation: this.context.useLocation });
    }
  }, __publicField(_a, "displayName", `withMobile(${componentName})`), __publicField(_a, "contextType", MobileContext), _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeContext.js
var React6 = __toESM(require_react(), 1);
var ThemeContext = React6.createContext(void 0);
ThemeContext.displayName = "ThemeContext";

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeProvider.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var React12 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/LayoutProvider/LayoutProvider.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var React9 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/contexts/LayoutContext.js
var React7 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/constants.js
var CSS_SIZE_EXCEPTION = {
  "0.5": "half"
};
var DEFAULT_LAYOUT_THEME = {
  breakpoints: {
    s: 576,
    m: 768,
    l: 1080,
    xl: 1200,
    xxl: 1400,
    xxxl: 1920
  },
  spaceBaseSize: 4,
  components: {
    container: {
      gutters: "3",
      media: {
        l: {
          gutters: "5"
        }
      }
    }
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/contexts/LayoutContext.js
var LayoutContext = React7.createContext({
  theme: DEFAULT_LAYOUT_THEME,
  activeMediaQuery: "s"
});

// node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useCurrentActiveMediaQuery.js
var React8 = __toESM(require_react(), 1);
var mockMediaQueryList = {
  media: "",
  matches: false,
  onchange: () => {
  },
  addListener: () => {
  },
  removeListener: () => {
  },
  addEventListener: () => {
  },
  removeEventListener: () => {
  },
  dispatchEvent: (_) => true
};
var makeCurrentActiveMediaExpressions = (mediaToValue) => ({
  s: `(max-width: ${mediaToValue.m - 1}px)`,
  m: `(min-width: ${mediaToValue.m}px) and (max-width: ${mediaToValue.l - 1}px)`,
  l: `(min-width: ${mediaToValue.l}px) and (max-width: ${mediaToValue.xl - 1}px)`,
  xl: `(min-width: ${mediaToValue.xl}px) and (max-width: ${mediaToValue.xxl - 1}px)`,
  xxl: `(min-width: ${mediaToValue.xxl}px) and (max-width: ${mediaToValue.xxxl - 1}px)`,
  xxxl: `(min-width: ${mediaToValue.xxxl}px)`
});
var safeMatchMedia = (query) => {
  if (typeof window === "undefined" || typeof window.matchMedia !== "function") {
    return mockMediaQueryList;
  }
  return window.matchMedia(query);
};
var Queries = class {
  constructor(breakpointsMap) {
    __publicField(this, "queryListsDecl", []);
    const mediaToExpressionMap = makeCurrentActiveMediaExpressions(breakpointsMap);
    this.queryListsDecl = [
      // order important here
      ["s", safeMatchMedia(mediaToExpressionMap.s)],
      ["m", safeMatchMedia(mediaToExpressionMap.m)],
      ["l", safeMatchMedia(mediaToExpressionMap.l)],
      ["xl", safeMatchMedia(mediaToExpressionMap.xl)],
      ["xxl", safeMatchMedia(mediaToExpressionMap.xxl)],
      ["xxxl", safeMatchMedia(mediaToExpressionMap.xxxl)]
    ];
  }
  getCurrentActiveMedia() {
    const activeMedia = this.queryListsDecl.find(([_, queryList]) => queryList.matches);
    if (!activeMedia) {
      return "s";
    }
    return activeMedia[0];
  }
  addListeners(fn) {
    this.queryListsDecl.forEach(([_, queryList]) => queryList.addEventListener("change", fn));
  }
  removeListeners(fn) {
    this.queryListsDecl.forEach(([_, queryList]) => queryList.removeEventListener("change", fn));
  }
};
var useCurrentActiveMediaQuery = (breakpointsMap, initialMediaQuery = "s") => {
  const [state, _setState] = React8.useState(initialMediaQuery);
  React8.useLayoutEffect(() => {
    const queries = new Queries(breakpointsMap);
    const setState = () => {
      _setState(queries.getCurrentActiveMedia());
    };
    queries.addListeners(setState);
    setState();
    return () => {
      queries.removeListeners(setState);
    };
  }, [breakpointsMap]);
  return state;
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/utils/overrideLayoutTheme.js
var import_merge = __toESM(require_merge(), 1);
function overrideLayoutTheme({ theme, override }) {
  return (0, import_merge.default)(theme, override);
}

// node_modules/@gravity-ui/uikit/build/esm/components/layout/LayoutProvider/LayoutProvider.js
function PrivateLayoutProvider({ children: children2, config: override, initialMediaQuery }) {
  const parentContext = React9.useContext(LayoutContext);
  const theme = React9.useMemo(() => overrideLayoutTheme({ theme: parentContext.theme, override }), [override, parentContext.theme]);
  const activeMediaQuery = useCurrentActiveMediaQuery(theme.breakpoints, initialMediaQuery);
  const value = React9.useMemo(() => ({ activeMediaQuery, theme }), [activeMediaQuery, theme]);
  return (0, import_jsx_runtime3.jsx)(LayoutContext.Provider, { value, children: children2 });
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeSettingsContext.js
var React10 = __toESM(require_react(), 1);
var ThemeSettingsContext = React10.createContext(void 0);
ThemeSettingsContext.displayName = "ThemeSettingsContext";

// node_modules/@gravity-ui/uikit/build/esm/components/theme/constants.js
var DEFAULT_THEME = "system";
var DEFAULT_LIGHT_THEME = "light";
var DEFAULT_DARK_THEME = "dark";
var LIGHT_THEMES = ["light", "light-hc"];
var DARK_THEMES = ["dark", "dark-hc"];
var THEMES = [...LIGHT_THEMES, ...DARK_THEMES];
var ROOT_CLASSNAME = "root";
var DEFAULT_DIRECTION = "ltr";

// node_modules/@gravity-ui/uikit/build/esm/components/theme/dom-helpers.js
var b2 = block(ROOT_CLASSNAME);
var rootClassName = b2();
function updateBodyClassName({ theme, className, prevClassName }) {
  const bodyEl = document.body;
  if (!bodyEl) {
    return;
  }
  if (!bodyEl.classList.contains(rootClassName)) {
    bodyEl.classList.add(rootClassName);
  }
  if (prevClassName) {
    const parsedPrevCustomRootClassNames = prevClassName.split(" ");
    parsedPrevCustomRootClassNames.forEach((cls5) => {
      if (cls5) {
        bodyEl.classList.remove(cls5);
      }
    });
  }
  if (className) {
    const parsedCustomRootClassNames = className.split(" ");
    parsedCustomRootClassNames.forEach((cls5) => {
      if (cls5 && !bodyEl.classList.contains(cls5)) {
        bodyEl.classList.add(cls5);
      }
    });
  }
  [...bodyEl.classList].forEach((cls5) => {
    if (cls5.startsWith(modsClassName(b2({ theme: true })))) {
      bodyEl.classList.remove(cls5);
    }
  });
  bodyEl.classList.add(modsClassName(b2({ theme })));
}
function updateBodyDirection(direction) {
  const bodyEl = document.body;
  if (direction === DEFAULT_DIRECTION) {
    bodyEl.removeAttribute("dir");
  } else {
    bodyEl.setAttribute("dir", direction);
  }
}
var supportsMatchMedia = typeof window !== "undefined" && typeof window.matchMedia === "function";
var getDarkMediaMatch = () => window.matchMedia("(prefers-color-scheme: dark)");
function getSystemTheme() {
  if (supportsMatchMedia) {
    return getDarkMediaMatch().matches ? "dark" : "light";
  } else {
    return "light";
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useSystemTheme.js
var React11 = __toESM(require_react(), 1);
function addListener(matcher, handler) {
  const isLegacyMethod = typeof matcher.addEventListener !== "function";
  if (isLegacyMethod) {
    matcher.addListener(handler);
  } else {
    matcher.addEventListener("change", handler);
  }
  return () => {
    if (isLegacyMethod) {
      matcher.removeListener(handler);
    } else {
      matcher.removeEventListener("change", handler);
    }
  };
}
function useSystemTheme() {
  const [theme, setTheme] = React11.useState(getSystemTheme());
  React11.useEffect(() => {
    if (!supportsMatchMedia) {
      return void 0;
    }
    function onChange(event) {
      setTheme(event.matches ? "dark" : "light");
    }
    const matcher = getDarkMediaMatch();
    const unsubscribe = addListener(matcher, onChange);
    return () => unsubscribe();
  }, []);
  return theme;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeProvider.js
var b3 = block(ROOT_CLASSNAME);
function ThemeProvider({ theme: themeProp, systemLightTheme: systemLightThemeProp, systemDarkTheme: systemDarkThemeProp, direction: directionProp, scoped: scopedProp = false, rootClassName: rootClassName2 = "", children: children2, layout }) {
  const parentThemeState = React12.useContext(ThemeContext);
  const systemThemeState = React12.useContext(ThemeSettingsContext);
  const hasParentProvider = parentThemeState !== void 0;
  const scoped = hasParentProvider || scopedProp;
  const parentTheme = (parentThemeState == null ? void 0 : parentThemeState.theme) ?? DEFAULT_THEME;
  const theme = themeProp ?? parentTheme;
  const systemLightTheme = systemLightThemeProp ?? (systemThemeState == null ? void 0 : systemThemeState.systemLightTheme) ?? DEFAULT_LIGHT_THEME;
  const systemDarkTheme = systemDarkThemeProp ?? (systemThemeState == null ? void 0 : systemThemeState.systemDarkTheme) ?? DEFAULT_DARK_THEME;
  const parentDirection = (parentThemeState == null ? void 0 : parentThemeState.direction) ?? DEFAULT_DIRECTION;
  const direction = directionProp ?? parentDirection;
  const systemTheme = useSystemTheme() === "light" ? systemLightTheme : systemDarkTheme;
  const themeValue = theme === "system" ? systemTheme : theme;
  const prevRootClassName = React12.useRef("");
  React12.useLayoutEffect(() => {
    if (!scoped) {
      updateBodyClassName({
        theme: themeValue,
        className: rootClassName2,
        prevClassName: prevRootClassName.current
      });
      updateBodyDirection(direction);
      prevRootClassName.current = rootClassName2;
    }
  }, [scoped, themeValue, direction, rootClassName2]);
  const contextValue = React12.useMemo(() => ({
    theme,
    themeValue,
    direction,
    scoped
  }), [theme, themeValue, direction, scoped]);
  const themeSettingsContext = React12.useMemo(() => ({ systemLightTheme, systemDarkTheme }), [systemLightTheme, systemDarkTheme]);
  return (0, import_jsx_runtime4.jsx)(PrivateLayoutProvider, { ...layout, children: (0, import_jsx_runtime4.jsx)(ThemeContext.Provider, { value: contextValue, children: (0, import_jsx_runtime4.jsx)(ThemeSettingsContext.Provider, { value: themeSettingsContext, children: scoped ? (0, import_jsx_runtime4.jsx)("div", { className: b3({ theme: themeValue }, rootClassName2), dir: direction, children: children2 }) : children2 }) }) });
}
ThemeProvider.displayName = "ThemeProvider";

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useThemeContext.js
var React13 = __toESM(require_react(), 1);
function useThemeContext() {
  const state = React13.useContext(ThemeContext);
  if (state === void 0) {
    throw new Error("useTheme* hooks must be used within ThemeProvider");
  }
  return state;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useTheme.js
function useTheme() {
  return useThemeContext().theme;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useThemeValue.js
function useThemeValue() {
  return useThemeContext().themeValue;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useThemeSettings.js
var React14 = __toESM(require_react(), 1);
function useThemeSettings() {
  const settings = React14.useContext(ThemeSettingsContext);
  if (settings === void 0) {
    throw new Error("useThemeSettings must be used within ThemeProvider");
  }
  return settings;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/getThemeType.js
function getThemeType(theme) {
  return DARK_THEMES.includes(theme) ? "dark" : "light";
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useThemeType.js
function useThemeType() {
  return getThemeType(useThemeValue());
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useDirection.js
function useDirection() {
  return useThemeContext().direction;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/withTheme.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
function withTheme(WrappedComponent) {
  const componentName = getComponentName(WrappedComponent);
  const component = function WithThemeComponent(props) {
    const theme = useTheme();
    return (0, import_jsx_runtime5.jsx)(WrappedComponent, { ...props, theme });
  };
  component.displayName = `withTheme(${componentName})`;
  return component;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/withThemeValue.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
function withThemeValue(WrappedComponent) {
  const componentName = getComponentName(WrappedComponent);
  const component = function WithThemeValueComponent(props) {
    const themeValue = useThemeValue();
    return (0, import_jsx_runtime6.jsx)(WrappedComponent, { ...props, themeValue });
  };
  component.displayName = `withThemeValue(${componentName})`;
  return component;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/withDirection.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function withDirection(WrappedComponent) {
  const componentName = getComponentName(WrappedComponent);
  const component = function WithDirectionComponent(props) {
    const direction = useDirection();
    return (0, import_jsx_runtime7.jsx)(WrappedComponent, { ...props, direction });
  };
  component.displayName = `withDirection(${componentName})`;
  return component;
}

// node_modules/@gravity-ui/uikit/build/esm/components/ActionTooltip/ActionTooltip.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var React42 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/Hotkey.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var React15 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/filterDOMProps.js
var DOMPropNames = /* @__PURE__ */ new Set(["id"]);
var labelablePropNames = /* @__PURE__ */ new Set([
  "aria-label",
  "aria-labelledby",
  "aria-describedby",
  "aria-details"
]);
var propRe = /^(data-.*)$/;
function filterDOMProps(props, options = {}) {
  const { labelable, propNames } = options;
  const filteredProps = {};
  for (const prop in props) {
    if (Object.prototype.hasOwnProperty.call(props, prop) && (DOMPropNames.has(prop) || labelable && labelablePropNames.has(prop) || (propNames == null ? void 0 : propNames.has(prop)) || propRe.test(prop))) {
      filteredProps[prop] = props[prop];
    }
  }
  return filteredProps;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/definitions.js
var PcNormalizeMap = {
  arrowup: "up",
  arrowdown: "down",
  arrowleft: "left",
  arrowright: "right",
  esc: "escape",
  return: "enter",
  mod: "ctrl",
  control: "ctrl",
  opt: "alt",
  option: "alt",
  cmd: "ctrl",
  command: "ctrl"
};
var MacNormalizeMap = {
  arrowup: "up",
  arrowdown: "down",
  arrowleft: "left",
  arrowright: "right",
  esc: "escape",
  enter: "return",
  mod: "command",
  ctrl: "control",
  alt: "option",
  opt: "option",
  cmd: "command"
};
var PcDisplayName = {
  up: "↑",
  down: "↓",
  left: "←",
  right: "→",
  escape: "Esc",
  plus: "＋",
  enter: "Enter",
  ctrl: "Ctrl",
  alt: "Alt",
  shift: "Shift",
  tab: "Tab",
  backspace: "Backspace"
};
var MacDisplayName = {
  up: "▲",
  down: "▼",
  left: "◀",
  right: "▶",
  escape: "⎋",
  plus: "＋",
  return: "⏎",
  command: "⌘",
  option: "⌥",
  control: "⌃",
  shift: "⇧",
  backspace: "⌫",
  tab: "⇥"
};
var PcKeyPriority = {
  shift: 200,
  alt: 300,
  ctrl: 400
};
var MacKeyPriority = {
  command: 100,
  shift: 200,
  option: 300,
  control: 400
};
var defsByPlatform = {
  pc: {
    NormalizeMap: PcNormalizeMap,
    Priority: PcKeyPriority,
    DisplayName: PcDisplayName
  },
  mac: {
    NormalizeMap: MacNormalizeMap,
    Priority: MacKeyPriority,
    DisplayName: MacDisplayName
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/parse.js
var import_capitalize = __toESM(require_capitalize(), 1);
var import_uniqBy = __toESM(require_uniqBy(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/utils.js
var isMac = () => typeof navigator !== "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
function split(val, separator) {
  return val.trim().split(separator).filter(Boolean);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/parse.js
var GROUPS_SEPARATOR = /\s/;
var KEYS_SEPARATOR = "+";
function parseKeyGroups(defs, value) {
  return split(value, GROUPS_SEPARATOR).map((keys) => (0, import_uniqBy.default)(
    split(keys, KEYS_SEPARATOR).map(keyParser(defs)).sort((a, b119) => b119.priority - a.priority),
    // high to low
    (key) => key.id
  ).map(renderKey));
}
function keyParser(defs) {
  return function(raw) {
    const keyId = getKeyId(defs, raw);
    return {
      raw,
      id: keyId,
      priority: defs.Priority[keyId] ?? 0,
      displayName: defs.DisplayName[keyId]
    };
  };
}
function getKeyId(defs, val) {
  val = val.toLowerCase();
  return defs.NormalizeMap[val] ?? val;
}
function renderKey(key) {
  return key.displayName ?? (0, import_capitalize.default)(key.id);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/Hotkey.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/Hotkey.css";
var b4 = block("hotkey");
var Spaces = {
  BetweenGroups: String.fromCharCode(160),
  // &nbsp;
  BetweenKeys: String.fromCharCode(8239)
  // Narrow No-Break Space
};
var Hotkey = React15.forwardRef(function Hotkey2(props, ref2) {
  const { value, platform: platform2, view = "light", qa, style: style3, className, ...restProps } = props;
  const groups = parseHotkeys(value, { platform: platform2 });
  const content = [];
  let hasGroups = false;
  groups.forEach((keys, groupIdx) => {
    if (keys.length === 0)
      return;
    if (hasGroups) {
      content.push(Spaces.BetweenGroups);
    } else {
      hasGroups = true;
    }
    keys.forEach((key, keyIdx) => {
      const isFirstKey = keyIdx === 0;
      if (!isFirstKey) {
        content.push(Spaces.BetweenKeys, (0, import_jsx_runtime8.jsx)("span", { className: b4("plus"), children: "+" }, `${key}_${groupIdx}_${keyIdx}_plus`), Spaces.BetweenKeys);
      }
      content.push((0, import_jsx_runtime8.jsx)("kbd", { children: key }, `${key}_${groupIdx}_${keyIdx}`));
    });
  });
  if (content.length === 0)
    return null;
  return (0, import_jsx_runtime8.jsx)("kbd", { ...filterDOMProps(restProps, { labelable: true }), ref: ref2, style: style3, "data-qa": qa, className: b4({ view }, className), children: content });
});
function parseHotkeys(value, opts) {
  const platform2 = opts.platform ?? (isMac() ? "mac" : "pc");
  const defs = defsByPlatform[platform2];
  return parseKeyGroups(defs, value);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Tooltip/Tooltip.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var React41 = __toESM(require_react(), 1);

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
var React18 = __toESM(require_react(), 1);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs
var React16 = __toESM(require_react(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start3, value, end2) {
  return max(start3, min(value, end2));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a, b119) {
  return a.tabIndex === b119.tabIndex ? a.documentOrder - b119.documentOrder : a.tabIndex - b119.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var focusable = function focusable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorFocusable.bind(null, options),
      flatten: true,
      getShadowRoot: options.getShadowRoot
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
  }
  return candidates;
};
var isTabbable = function isTabbable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, candidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorTabbable(options, node);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");

// node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isAndroid() {
  const re = /android/i;
  return re.test(getPlatform()) || re.test(getUserAgent());
}
function isMac2() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isJSDOM() {
  return getUserAgent().includes("jsdom/");
}
var FOCUSABLE_ATTRIBUTE = "data-floating-ui-focusable";
var TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
var ARROW_LEFT = "ArrowLeft";
var ARROW_RIGHT = "ArrowRight";
var ARROW_UP = "ArrowUp";
var ARROW_DOWN = "ArrowDown";
function activeElement(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {
    var _activeElement;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot(rootNode)) {
    let next = child;
    while (next) {
      if (parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    }
  }
  return false;
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
function isEventTargetWithin(event, node) {
  if (node == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node);
  }
  const e = event;
  return e.target != null && node.contains(e.target);
}
function isRootElement(element) {
  return element.matches("html,body");
}
function getDocument(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
function isTypeableElement(element) {
  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);
}
function isTypeableCombobox(element) {
  if (!element) return false;
  return element.getAttribute("role") === "combobox" && isTypeableElement(element);
}
function matchesFocusVisible(element) {
  if (!element || isJSDOM()) return true;
  try {
    return element.matches(":focus-visible");
  } catch (_e) {
    return true;
  }
}
function getFloatingFocusElement(floatingElement) {
  if (!floatingElement) {
    return null;
  }
  return floatingElement.hasAttribute(FOCUSABLE_ATTRIBUTE) ? floatingElement : floatingElement.querySelector("[" + FOCUSABLE_ATTRIBUTE + "]") || floatingElement;
}
function getNodeChildren(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n) => {
        var _node$context2;
        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getDeepestNode(nodes, id) {
  let deepestNodeId;
  let maxDepth = -1;
  function findDeepest(nodeId, depth) {
    if (depth > maxDepth) {
      deepestNodeId = nodeId;
      maxDepth = depth;
    }
    const children2 = getNodeChildren(nodes, nodeId);
    children2.forEach((child) => {
      findDeepest(child.id, depth + 1);
    });
  }
  findDeepest(id, 0);
  return nodes.find((node) => node.id === deepestNodeId);
}
function getNodeAncestors(nodes, id) {
  var _nodes$find;
  let allAncestors = [];
  let currentParentId = (_nodes$find = nodes.find((node) => node.id === id)) == null ? void 0 : _nodes$find.parentId;
  while (currentParentId) {
    const currentNode = nodes.find((node) => node.id === currentParentId);
    currentParentId = currentNode == null ? void 0 : currentNode.parentId;
    if (currentNode) {
      allAncestors = allAncestors.concat(currentNode);
    }
  }
  return allAncestors;
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}
function isReactEvent(event) {
  return "nativeEvent" in event;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  if (isAndroid() && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  if (isJSDOM()) return false;
  return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "touch";
}
function isMouseLikePointerType(pointerType, strict) {
  const values3 = ["mouse", "pen"];
  if (!strict) {
    values3.push("", void 0);
  }
  return values3.includes(pointerType);
}
var isClient = typeof document !== "undefined";
var noop = function noop2() {
};
var index = isClient ? import_react.useLayoutEffect : noop;
var SafeReact = {
  ...React16
};
function useLatestRef(value) {
  const ref2 = React16.useRef(value);
  index(() => {
    ref2.current = value;
  });
  return ref2;
}
var useInsertionEffect = SafeReact.useInsertionEffect;
var useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
function useEffectEvent(callback) {
  const ref2 = React16.useRef(() => {
    if (true) {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref2.current = callback;
  });
  return React16.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref2.current == null ? void 0 : ref2.current(...args);
  }, []);
}
function isDifferentGridRow(index3, cols, prevRow) {
  return Math.floor(index3 / cols) !== prevRow;
}
function isIndexOutOfListBounds(listRef, index3) {
  return index3 < 0 || index3 >= listRef.current.length;
}
function getMinListIndex(listRef, disabledIndices) {
  return findNonDisabledListIndex(listRef, {
    disabledIndices
  });
}
function getMaxListIndex(listRef, disabledIndices) {
  return findNonDisabledListIndex(listRef, {
    decrement: true,
    startingIndex: listRef.current.length,
    disabledIndices
  });
}
function findNonDisabledListIndex(listRef, _temp) {
  let {
    startingIndex = -1,
    decrement = false,
    disabledIndices,
    amount = 1
  } = _temp === void 0 ? {} : _temp;
  let index3 = startingIndex;
  do {
    index3 += decrement ? -amount : amount;
  } while (index3 >= 0 && index3 <= listRef.current.length - 1 && isListIndexDisabled(listRef, index3, disabledIndices));
  return index3;
}
function getGridNavigatedIndex(listRef, _ref) {
  let {
    event,
    orientation,
    loop,
    rtl,
    cols,
    disabledIndices,
    minIndex,
    maxIndex,
    prevIndex,
    stopEvent: stop = false
  } = _ref;
  let nextIndex = prevIndex;
  if (event.key === ARROW_UP) {
    stop && stopEvent(event);
    if (prevIndex === -1) {
      nextIndex = maxIndex;
    } else {
      nextIndex = findNonDisabledListIndex(listRef, {
        startingIndex: nextIndex,
        amount: cols,
        decrement: true,
        disabledIndices
      });
      if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {
        const col = prevIndex % cols;
        const maxCol = maxIndex % cols;
        const offset6 = maxIndex - (maxCol - col);
        if (maxCol === col) {
          nextIndex = maxIndex;
        } else {
          nextIndex = maxCol > col ? offset6 : offset6 - cols;
        }
      }
    }
    if (isIndexOutOfListBounds(listRef, nextIndex)) {
      nextIndex = prevIndex;
    }
  }
  if (event.key === ARROW_DOWN) {
    stop && stopEvent(event);
    if (prevIndex === -1) {
      nextIndex = minIndex;
    } else {
      nextIndex = findNonDisabledListIndex(listRef, {
        startingIndex: prevIndex,
        amount: cols,
        disabledIndices
      });
      if (loop && prevIndex + cols > maxIndex) {
        nextIndex = findNonDisabledListIndex(listRef, {
          startingIndex: prevIndex % cols - cols,
          amount: cols,
          disabledIndices
        });
      }
    }
    if (isIndexOutOfListBounds(listRef, nextIndex)) {
      nextIndex = prevIndex;
    }
  }
  if (orientation === "both") {
    const prevRow = floor(prevIndex / cols);
    if (event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT)) {
      stop && stopEvent(event);
      if (prevIndex % cols !== cols - 1) {
        nextIndex = findNonDisabledListIndex(listRef, {
          startingIndex: prevIndex,
          disabledIndices
        });
        if (loop && isDifferentGridRow(nextIndex, cols, prevRow)) {
          nextIndex = findNonDisabledListIndex(listRef, {
            startingIndex: prevIndex - prevIndex % cols - 1,
            disabledIndices
          });
        }
      } else if (loop) {
        nextIndex = findNonDisabledListIndex(listRef, {
          startingIndex: prevIndex - prevIndex % cols - 1,
          disabledIndices
        });
      }
      if (isDifferentGridRow(nextIndex, cols, prevRow)) {
        nextIndex = prevIndex;
      }
    }
    if (event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT)) {
      stop && stopEvent(event);
      if (prevIndex % cols !== 0) {
        nextIndex = findNonDisabledListIndex(listRef, {
          startingIndex: prevIndex,
          decrement: true,
          disabledIndices
        });
        if (loop && isDifferentGridRow(nextIndex, cols, prevRow)) {
          nextIndex = findNonDisabledListIndex(listRef, {
            startingIndex: prevIndex + (cols - prevIndex % cols),
            decrement: true,
            disabledIndices
          });
        }
      } else if (loop) {
        nextIndex = findNonDisabledListIndex(listRef, {
          startingIndex: prevIndex + (cols - prevIndex % cols),
          decrement: true,
          disabledIndices
        });
      }
      if (isDifferentGridRow(nextIndex, cols, prevRow)) {
        nextIndex = prevIndex;
      }
    }
    const lastRow = floor(maxIndex / cols) === prevRow;
    if (isIndexOutOfListBounds(listRef, nextIndex)) {
      if (loop && lastRow) {
        nextIndex = event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT) ? maxIndex : findNonDisabledListIndex(listRef, {
          startingIndex: prevIndex - prevIndex % cols - 1,
          disabledIndices
        });
      } else {
        nextIndex = prevIndex;
      }
    }
  }
  return nextIndex;
}
function createGridCellMap(sizes, cols, dense) {
  const cellMap = [];
  let startIndex = 0;
  sizes.forEach((_ref2, index3) => {
    let {
      width,
      height
    } = _ref2;
    if (width > cols) {
      if (true) {
        throw new Error("[Floating UI]: Invalid grid - item width at index " + index3 + " is greater than grid columns");
      }
    }
    let itemPlaced = false;
    if (dense) {
      startIndex = 0;
    }
    while (!itemPlaced) {
      const targetCells = [];
      for (let i = 0; i < width; i++) {
        for (let j = 0; j < height; j++) {
          targetCells.push(startIndex + i + j * cols);
        }
      }
      if (startIndex % cols + width <= cols && targetCells.every((cell) => cellMap[cell] == null)) {
        targetCells.forEach((cell) => {
          cellMap[cell] = index3;
        });
        itemPlaced = true;
      } else {
        startIndex++;
      }
    }
  });
  return [...cellMap];
}
function getGridCellIndexOfCorner(index3, sizes, cellMap, cols, corner) {
  if (index3 === -1) return -1;
  const firstCellIndex = cellMap.indexOf(index3);
  const sizeItem = sizes[index3];
  switch (corner) {
    case "tl":
      return firstCellIndex;
    case "tr":
      if (!sizeItem) {
        return firstCellIndex;
      }
      return firstCellIndex + sizeItem.width - 1;
    case "bl":
      if (!sizeItem) {
        return firstCellIndex;
      }
      return firstCellIndex + (sizeItem.height - 1) * cols;
    case "br":
      return cellMap.lastIndexOf(index3);
  }
}
function getGridCellIndices(indices, cellMap) {
  return cellMap.flatMap((index3, cellIndex) => indices.includes(index3) ? [cellIndex] : []);
}
function isListIndexDisabled(listRef, index3, disabledIndices) {
  if (typeof disabledIndices === "function") {
    return disabledIndices(index3);
  } else if (disabledIndices) {
    return disabledIndices.includes(index3);
  }
  const element = listRef.current[index3];
  return element == null || element.hasAttribute("disabled") || element.getAttribute("aria-disabled") === "true";
}
var getTabbableOptions = () => ({
  getShadowRoot: true,
  displayCheck: (
    // JSDOM does not support the `tabbable` library. To solve this we can
    // check if `ResizeObserver` is a real function (not polyfilled), which
    // determines if the current environment is JSDOM-like.
    typeof ResizeObserver === "function" && ResizeObserver.toString().includes("[native code]") ? "full" : "none"
  )
});
function getTabbableIn(container, dir) {
  const list = tabbable(container, getTabbableOptions());
  const len = list.length;
  if (len === 0) return;
  const active = activeElement(getDocument(container));
  const index3 = list.indexOf(active);
  const nextIndex = index3 === -1 ? dir === 1 ? 0 : len - 1 : index3 + dir;
  return list[nextIndex];
}
function getNextTabbable(referenceElement) {
  return getTabbableIn(getDocument(referenceElement).body, 1) || referenceElement;
}
function getPreviousTabbable(referenceElement) {
  return getTabbableIn(getDocument(referenceElement).body, -1) || referenceElement;
}
function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
  const tabbableElements = tabbable(container, getTabbableOptions());
  tabbableElements.forEach((element) => {
    element.dataset.tabindex = element.getAttribute("tabindex") || "";
    element.setAttribute("tabindex", "-1");
  });
}
function enableFocusInside(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  elements.forEach((element) => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  });
}

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var ReactDOM2 = __toESM(require_react_dom(), 1);

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config3) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config3;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset6 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset6 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset6,
        centerOffset: center - offset6 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
var autoPlacement = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "autoPlacement",
    options,
    async fn(state) {
      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
      const {
        rects,
        middlewareData,
        placement,
        platform: platform2,
        elements
      } = state;
      const {
        crossAxis = false,
        alignment,
        allowedPlacements = placements,
        autoAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      const placements$1 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
      const currentPlacement = placements$1[currentIndex];
      if (currentPlacement == null) {
        return {};
      }
      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
      if (placement !== currentPlacement) {
        return {
          reset: {
            placement: placements$1[0]
          }
        };
      }
      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
      const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements$1[currentIndex + 1];
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByMostSpace = allOverflows.map((d) => {
        const alignment2 = getAlignment(d.placement);
        return [d.placement, alignment2 && crossAxis ? (
          // Check along the mainAxis and main crossAxis side.
          d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0)
        ) : (
          // Check only the mainAxis.
          d.overflows[0]
        ), d.overflows];
      }).sort((a, b119) => a[1] - b119[1]);
      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d) => d[2].slice(
        0,
        // Aligned placements should not check their opposite crossAxis
        // side.
        getAlignment(d[0]) ? 2 : 3
      ).every((v) => v <= 0));
      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
      if (resetPlacement !== placement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
          if (!ignoreCrossAxisOverflow || // We leave the current main axis only if every placement on that axis
          // overflows the main axis.
          overflowsData.every((d) => d.overflows[0] > 0 && getSideAxis(d.placement) === initialSideAxis)) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b119) => a.overflows[1] - b119.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b119) => a[1] - b119[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};
var limitShift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset6 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset6, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
var size = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply: apply3 = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply3({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll3, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll3.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y = htmlRect.top + scroll3.scrollTop;
  return {
    x,
    y
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll3 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll3 = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll3, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll3.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll3.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll3 = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll3.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll3.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll3 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  function setLeftRTLScrollbarOffset() {
    offsets.x = getWindowScrollBarX(documentElement);
  }
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll3 = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      setLeftRTLScrollbarOffset();
    }
  }
  if (isFixed && !isOffsetParentAnElement && documentElement) {
    setLeftRTLScrollbarOffset();
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll3) : createCoords(0);
  const x = rect.left + scroll3.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll3.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a, b119) {
  return a.x === b119.x && a.y === b119.y && a.width === b119.width && a.height === b119.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup2() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup2();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (_e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup2;
}
function autoUpdate(reference, floating, update2, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update2, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update2);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update2) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update2();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update2();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update2();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update2);
      ancestorResize && ancestor.removeEventListener("resize", update2);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var autoPlacement2 = autoPlacement;
var shift2 = shift;
var flip2 = flip;
var size2 = size;
var arrow2 = arrow;
var limitShift2 = limitShift;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React17 = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var isClient2 = typeof document !== "undefined";
var noop3 = function noop4() {
};
var index2 = isClient2 ? import_react2.useLayoutEffect : noop3;
function deepEqual(a, b119) {
  if (a === b119) {
    return true;
  }
  if (typeof a !== typeof b119) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b119.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b119 && typeof a === "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b119.length) return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b119[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b119).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b119, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b119[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b119 !== b119;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef2(value) {
  const ref2 = React17.useRef(value);
  index2(() => {
    ref2.current = value;
  });
  return ref2;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React17.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React17.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React17.useState(null);
  const [_floating, _setFloating] = React17.useState(null);
  const setReference = React17.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React17.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React17.useRef(null);
  const floatingRef = React17.useRef(null);
  const dataRef = React17.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef2(whileElementsMounted);
  const platformRef = useLatestRef2(platform2);
  const openRef = useLatestRef2(open);
  const update2 = React17.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config3 = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config3.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config3).then((data2) => {
      const fullData = {
        ...data2,
        // The floating element's position may be recomputed while it's closed
        // but still mounted (such as when transitioning out). To ensure
        // `isPositioned` will be `false` initially on the next open, avoid
        // setting it to `true` when `open === false` (must be specified).
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index2(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React17.useRef(false);
  index2(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index2(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update2);
      }
      update2();
    }
  }, [referenceEl, floatingEl, update2, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React17.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React17.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React17.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React17.useMemo(() => ({
    ...data,
    update: update2,
    refs,
    elements,
    floatingStyles
  }), [data, update2, refs, elements, floatingStyles]);
}
var arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var limitShift3 = (options, deps) => ({
  ...limitShift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var size3 = (options, deps) => ({
  ...size2(options),
  options: [options, deps]
});
var autoPlacement3 = (options, deps) => ({
  ...autoPlacement2(options),
  options: [options, deps]
});
var arrow3 = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
function useMergeRefs(refs) {
  const cleanupRef = React18.useRef(void 0);
  const refEffect = React18.useCallback((instance) => {
    const cleanups = refs.map((ref2) => {
      if (ref2 == null) {
        return;
      }
      if (typeof ref2 === "function") {
        const refCallback = ref2;
        const refCleanup = refCallback(instance);
        return typeof refCleanup === "function" ? refCleanup : () => {
          refCallback(null);
        };
      }
      ref2.current = instance;
      return () => {
        ref2.current = null;
      };
    });
    return () => {
      cleanups.forEach((refCleanup) => refCleanup == null ? void 0 : refCleanup());
    };
  }, refs);
  return React18.useMemo(() => {
    if (refs.every((ref2) => ref2 == null)) {
      return null;
    }
    return (value) => {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) {
        cleanupRef.current = refEffect(value);
      }
    };
  }, refs);
}
function sortByDocumentPosition(a, b119) {
  const position3 = a.compareDocumentPosition(b119);
  if (position3 & Node.DOCUMENT_POSITION_FOLLOWING || position3 & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    return -1;
  }
  if (position3 & Node.DOCUMENT_POSITION_PRECEDING || position3 & Node.DOCUMENT_POSITION_CONTAINS) {
    return 1;
  }
  return 0;
}
var FloatingListContext = React18.createContext({
  register: () => {
  },
  unregister: () => {
  },
  map: /* @__PURE__ */ new Map(),
  elementsRef: {
    current: []
  }
});
function FloatingList(props) {
  const {
    children: children2,
    elementsRef,
    labelsRef
  } = props;
  const [nodes, setNodes] = React18.useState(() => /* @__PURE__ */ new Set());
  const register = React18.useCallback((node) => {
    setNodes((prevSet) => new Set(prevSet).add(node));
  }, []);
  const unregister = React18.useCallback((node) => {
    setNodes((prevSet) => {
      const set = new Set(prevSet);
      set.delete(node);
      return set;
    });
  }, []);
  const map = React18.useMemo(() => {
    const newMap = /* @__PURE__ */ new Map();
    const sortedNodes = Array.from(nodes.keys()).sort(sortByDocumentPosition);
    sortedNodes.forEach((node, index3) => {
      newMap.set(node, index3);
    });
    return newMap;
  }, [nodes]);
  return (0, import_jsx_runtime9.jsx)(FloatingListContext.Provider, {
    value: React18.useMemo(() => ({
      register,
      unregister,
      map,
      elementsRef,
      labelsRef
    }), [register, unregister, map, elementsRef, labelsRef]),
    children: children2
  });
}
function useListItem(props) {
  if (props === void 0) {
    props = {};
  }
  const {
    label
  } = props;
  const {
    register,
    unregister,
    map,
    elementsRef,
    labelsRef
  } = React18.useContext(FloatingListContext);
  const [index3, setIndex] = React18.useState(null);
  const componentRef = React18.useRef(null);
  const ref2 = React18.useCallback((node) => {
    componentRef.current = node;
    if (index3 !== null) {
      elementsRef.current[index3] = node;
      if (labelsRef) {
        var _node$textContent;
        const isLabelDefined = label !== void 0;
        labelsRef.current[index3] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;
      }
    }
  }, [index3, elementsRef, labelsRef, label]);
  index(() => {
    const node = componentRef.current;
    if (node) {
      register(node);
      return () => {
        unregister(node);
      };
    }
  }, [register, unregister]);
  index(() => {
    const index4 = componentRef.current ? map.get(componentRef.current) : null;
    if (index4 != null) {
      setIndex(index4);
    }
  }, [map]);
  return React18.useMemo(() => ({
    ref: ref2,
    index: index3 == null ? -1 : index3
  }), [index3, ref2]);
}
var FOCUSABLE_ATTRIBUTE2 = "data-floating-ui-focusable";
var ACTIVE_KEY = "active";
var SELECTED_KEY = "selected";
var ARROW_LEFT2 = "ArrowLeft";
var ARROW_RIGHT2 = "ArrowRight";
var ARROW_UP2 = "ArrowUp";
var ARROW_DOWN2 = "ArrowDown";
function renderJsx(render, computedProps) {
  if (typeof render === "function") {
    return render(computedProps);
  }
  if (render) {
    return React18.cloneElement(render, computedProps);
  }
  return (0, import_jsx_runtime9.jsx)("div", {
    ...computedProps
  });
}
var CompositeContext = React18.createContext({
  activeIndex: 0,
  onNavigate: () => {
  }
});
var horizontalKeys = [ARROW_LEFT2, ARROW_RIGHT2];
var verticalKeys = [ARROW_UP2, ARROW_DOWN2];
var allKeys = [...horizontalKeys, ...verticalKeys];
var Composite = React18.forwardRef(function Composite2(props, forwardedRef) {
  const {
    render,
    orientation = "both",
    loop = true,
    rtl = false,
    cols = 1,
    disabledIndices,
    activeIndex: externalActiveIndex,
    onNavigate: externalSetActiveIndex,
    itemSizes,
    dense = false,
    ...domProps
  } = props;
  const [internalActiveIndex, internalSetActiveIndex] = React18.useState(0);
  const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;
  const onNavigate = useEffectEvent(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);
  const elementsRef = React18.useRef([]);
  const renderElementProps = render && typeof render !== "function" ? render.props : {};
  const contextValue = React18.useMemo(() => ({
    activeIndex,
    onNavigate
  }), [activeIndex, onNavigate]);
  const isGrid = cols > 1;
  function handleKeyDown(event) {
    if (!allKeys.includes(event.key)) return;
    let nextIndex = activeIndex;
    const minIndex = getMinListIndex(elementsRef, disabledIndices);
    const maxIndex = getMaxListIndex(elementsRef, disabledIndices);
    const horizontalEndKey = rtl ? ARROW_LEFT2 : ARROW_RIGHT2;
    const horizontalStartKey = rtl ? ARROW_RIGHT2 : ARROW_LEFT2;
    if (isGrid) {
      const sizes = itemSizes || Array.from({
        length: elementsRef.current.length
      }, () => ({
        width: 1,
        height: 1
      }));
      const cellMap = createGridCellMap(sizes, cols, dense);
      const minGridIndex = cellMap.findIndex((index3) => index3 != null && !isListIndexDisabled(elementsRef, index3, disabledIndices));
      const maxGridIndex = cellMap.reduce((foundIndex, index3, cellIndex) => index3 != null && !isListIndexDisabled(elementsRef, index3, disabledIndices) ? cellIndex : foundIndex, -1);
      const maybeNextIndex = cellMap[getGridNavigatedIndex({
        current: cellMap.map((itemIndex) => itemIndex ? elementsRef.current[itemIndex] : null)
      }, {
        event,
        orientation,
        loop,
        rtl,
        cols,
        // treat undefined (empty grid spaces) as disabled indices so we
        // don't end up in them
        disabledIndices: getGridCellIndices([...(typeof disabledIndices !== "function" ? disabledIndices : null) || elementsRef.current.map((_, index3) => isListIndexDisabled(elementsRef, index3, disabledIndices) ? index3 : void 0), void 0], cellMap),
        minIndex: minGridIndex,
        maxIndex: maxGridIndex,
        prevIndex: getGridCellIndexOfCorner(
          activeIndex > maxIndex ? minIndex : activeIndex,
          sizes,
          cellMap,
          cols,
          // use a corner matching the edge closest to the direction we're
          // moving in so we don't end up in the same item. Prefer
          // top/left over bottom/right.
          event.key === ARROW_DOWN2 ? "bl" : event.key === horizontalEndKey ? "tr" : "tl"
        )
      })];
      if (maybeNextIndex != null) {
        nextIndex = maybeNextIndex;
      }
    }
    const toEndKeys = {
      horizontal: [horizontalEndKey],
      vertical: [ARROW_DOWN2],
      both: [horizontalEndKey, ARROW_DOWN2]
    }[orientation];
    const toStartKeys = {
      horizontal: [horizontalStartKey],
      vertical: [ARROW_UP2],
      both: [horizontalStartKey, ARROW_UP2]
    }[orientation];
    const preventedKeys2 = isGrid ? allKeys : {
      horizontal: horizontalKeys,
      vertical: verticalKeys,
      both: allKeys
    }[orientation];
    if (nextIndex === activeIndex && [...toEndKeys, ...toStartKeys].includes(event.key)) {
      if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {
        nextIndex = minIndex;
      } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {
        nextIndex = maxIndex;
      } else {
        nextIndex = findNonDisabledListIndex(elementsRef, {
          startingIndex: nextIndex,
          decrement: toStartKeys.includes(event.key),
          disabledIndices
        });
      }
    }
    if (nextIndex !== activeIndex && !isIndexOutOfListBounds(elementsRef, nextIndex)) {
      var _elementsRef$current$;
      event.stopPropagation();
      if (preventedKeys2.includes(event.key)) {
        event.preventDefault();
      }
      onNavigate(nextIndex);
      (_elementsRef$current$ = elementsRef.current[nextIndex]) == null || _elementsRef$current$.focus();
    }
  }
  const computedProps = {
    ...domProps,
    ...renderElementProps,
    ref: forwardedRef,
    "aria-orientation": orientation === "both" ? void 0 : orientation,
    onKeyDown(e) {
      domProps.onKeyDown == null || domProps.onKeyDown(e);
      renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);
      handleKeyDown(e);
    }
  };
  return (0, import_jsx_runtime9.jsx)(CompositeContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime9.jsx)(FloatingList, {
      elementsRef,
      children: renderJsx(render, computedProps)
    })
  });
});
var CompositeItem = React18.forwardRef(function CompositeItem2(props, forwardedRef) {
  const {
    render,
    ...domProps
  } = props;
  const renderElementProps = render && typeof render !== "function" ? render.props : {};
  const {
    activeIndex,
    onNavigate
  } = React18.useContext(CompositeContext);
  const {
    ref: ref2,
    index: index3
  } = useListItem();
  const mergedRef = useMergeRefs([ref2, forwardedRef, renderElementProps.ref]);
  const isActive = activeIndex === index3;
  const computedProps = {
    ...domProps,
    ...renderElementProps,
    ref: mergedRef,
    tabIndex: isActive ? 0 : -1,
    "data-active": isActive ? "" : void 0,
    onFocus(e) {
      domProps.onFocus == null || domProps.onFocus(e);
      renderElementProps.onFocus == null || renderElementProps.onFocus(e);
      onNavigate(index3);
    }
  };
  return renderJsx(render, computedProps);
});
var SafeReact2 = {
  ...React18
};
var serverHandoffComplete = false;
var count = 0;
var genId = () => (
  // Ensure the id is unique with multiple independent versions of Floating UI
  // on <React 18
  "floating-ui-" + Math.random().toString(36).slice(2, 6) + count++
);
function useFloatingId() {
  const [id, setId] = React18.useState(() => serverHandoffComplete ? genId() : void 0);
  index(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React18.useEffect(() => {
    serverHandoffComplete = true;
  }, []);
  return id;
}
var useReactId = SafeReact2.useId;
var useId = useReactId || useFloatingId;
var devMessageSet;
if (true) {
  devMessageSet = /* @__PURE__ */ new Set();
}
function warn() {
  var _devMessageSet;
  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {
    messages[_key] = arguments[_key];
  }
  const message = "Floating UI: " + messages.join(" ");
  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {
    var _devMessageSet2;
    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);
    console.warn(message);
  }
}
function error() {
  var _devMessageSet3;
  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    messages[_key2] = arguments[_key2];
  }
  const message = "Floating UI: " + messages.join(" ");
  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {
    var _devMessageSet4;
    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);
    console.error(message);
  }
}
var FloatingArrow = React18.forwardRef(function FloatingArrow2(props, ref2) {
  const {
    context: {
      placement,
      elements: {
        floating
      },
      middlewareData: {
        arrow: arrow4,
        shift: shift6
      }
    },
    width = 14,
    height = 7,
    tipRadius = 0,
    strokeWidth = 0,
    staticOffset,
    stroke,
    d,
    style: {
      transform,
      ...restStyle
    } = {},
    ...rest
  } = props;
  if (true) {
    if (!ref2) {
      warn("The `ref` prop is required for `FloatingArrow`.");
    }
  }
  const clipPathId = useId();
  const [isRTL2, setIsRTL] = React18.useState(false);
  index(() => {
    if (!floating) return;
    const isRTL3 = getComputedStyle2(floating).direction === "rtl";
    if (isRTL3) {
      setIsRTL(true);
    }
  }, [floating]);
  if (!floating) {
    return null;
  }
  const [side, alignment] = placement.split("-");
  const isVerticalSide = side === "top" || side === "bottom";
  let computedStaticOffset = staticOffset;
  if (isVerticalSide && shift6 != null && shift6.x || !isVerticalSide && shift6 != null && shift6.y) {
    computedStaticOffset = null;
  }
  const computedStrokeWidth = strokeWidth * 2;
  const halfStrokeWidth = computedStrokeWidth / 2;
  const svgX = width / 2 * (tipRadius / -8 + 1);
  const svgY = height / 2 * tipRadius / 4;
  const isCustomShape = !!d;
  const yOffsetProp = computedStaticOffset && alignment === "end" ? "bottom" : "top";
  let xOffsetProp = computedStaticOffset && alignment === "end" ? "right" : "left";
  if (computedStaticOffset && isRTL2) {
    xOffsetProp = alignment === "end" ? "left" : "right";
  }
  const arrowX = (arrow4 == null ? void 0 : arrow4.x) != null ? computedStaticOffset || arrow4.x : "";
  const arrowY = (arrow4 == null ? void 0 : arrow4.y) != null ? computedStaticOffset || arrow4.y : "";
  const dValue = d || "M0,0" + (" H" + width) + (" L" + (width - svgX) + "," + (height - svgY)) + (" Q" + width / 2 + "," + height + " " + svgX + "," + (height - svgY)) + " Z";
  const rotation = {
    top: isCustomShape ? "rotate(180deg)" : "",
    left: isCustomShape ? "rotate(90deg)" : "rotate(-90deg)",
    bottom: isCustomShape ? "" : "rotate(180deg)",
    right: isCustomShape ? "rotate(-90deg)" : "rotate(90deg)"
  }[side];
  return (0, import_jsx_runtime9.jsxs)("svg", {
    ...rest,
    "aria-hidden": true,
    ref: ref2,
    width: isCustomShape ? width : width + computedStrokeWidth,
    height: width,
    viewBox: "0 0 " + width + " " + (height > width ? height : width),
    style: {
      position: "absolute",
      pointerEvents: "none",
      [xOffsetProp]: arrowX,
      [yOffsetProp]: arrowY,
      [side]: isVerticalSide || isCustomShape ? "100%" : "calc(100% - " + computedStrokeWidth / 2 + "px)",
      transform: [rotation, transform].filter((t) => !!t).join(" "),
      ...restStyle
    },
    children: [computedStrokeWidth > 0 && (0, import_jsx_runtime9.jsx)("path", {
      clipPath: "url(#" + clipPathId + ")",
      fill: "none",
      stroke,
      strokeWidth: computedStrokeWidth + (d ? 0 : 1),
      d: dValue
    }), (0, import_jsx_runtime9.jsx)("path", {
      stroke: computedStrokeWidth && !d ? rest.fill : "none",
      d: dValue
    }), (0, import_jsx_runtime9.jsx)("clipPath", {
      id: clipPathId,
      children: (0, import_jsx_runtime9.jsx)("rect", {
        x: -halfStrokeWidth,
        y: halfStrokeWidth * (isCustomShape ? -1 : 1),
        width: width + computedStrokeWidth,
        height: width
      })
    })]
  });
});
function createEventEmitter() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null || _map$get.forEach((listener) => listener(data));
    },
    on(event, listener) {
      if (!map.has(event)) {
        map.set(event, /* @__PURE__ */ new Set());
      }
      map.get(event).add(listener);
    },
    off(event, listener) {
      var _map$get2;
      (_map$get2 = map.get(event)) == null || _map$get2.delete(listener);
    }
  };
}
var FloatingNodeContext = React18.createContext(null);
var FloatingTreeContext = React18.createContext(null);
var useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = React18.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
var useFloatingTree = () => React18.useContext(FloatingTreeContext);
function useFloatingNodeId(customParentId) {
  const id = useId();
  const tree = useFloatingTree();
  const reactParentId = useFloatingParentNodeId();
  const parentId = customParentId || reactParentId;
  index(() => {
    if (!id) return;
    const node = {
      id,
      parentId
    };
    tree == null || tree.addNode(node);
    return () => {
      tree == null || tree.removeNode(node);
    };
  }, [tree, id, parentId]);
  return id;
}
function FloatingNode(props) {
  const {
    children: children2,
    id
  } = props;
  const parentId = useFloatingParentNodeId();
  return (0, import_jsx_runtime9.jsx)(FloatingNodeContext.Provider, {
    value: React18.useMemo(() => ({
      id,
      parentId
    }), [id, parentId]),
    children: children2
  });
}
function FloatingTree(props) {
  const {
    children: children2
  } = props;
  const nodesRef = React18.useRef([]);
  const addNode = React18.useCallback((node) => {
    nodesRef.current = [...nodesRef.current, node];
  }, []);
  const removeNode = React18.useCallback((node) => {
    nodesRef.current = nodesRef.current.filter((n) => n !== node);
  }, []);
  const [events] = React18.useState(() => createEventEmitter());
  return (0, import_jsx_runtime9.jsx)(FloatingTreeContext.Provider, {
    value: React18.useMemo(() => ({
      nodesRef,
      addNode,
      removeNode,
      events
    }), [addNode, removeNode, events]),
    children: children2
  });
}
function createAttribute(name) {
  return "data-floating-ui-" + name;
}
function clearTimeoutIfSet(timeoutRef) {
  if (timeoutRef.current !== -1) {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = -1;
  }
}
var safePolygonIdentifier = createAttribute("safe-polygon");
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  if (typeof value === "function") {
    const result = value();
    if (typeof result === "number") {
      return result;
    }
    return result == null ? void 0 : result[prop];
  }
  return value == null ? void 0 : value[prop];
}
function getRestMs(value) {
  if (typeof value === "function") {
    return value();
  }
  return value;
}
function useHover(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements
  } = context;
  const {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move: move3 = true
  } = props;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef(handleClose);
  const delayRef = useLatestRef(delay);
  const openRef = useLatestRef(open);
  const restMsRef = useLatestRef(restMs);
  const pointerTypeRef = React18.useRef();
  const timeoutRef = React18.useRef(-1);
  const handlerRef = React18.useRef();
  const restTimeoutRef = React18.useRef(-1);
  const blockMouseMoveRef = React18.useRef(true);
  const performedPointerEventsMutationRef = React18.useRef(false);
  const unbindMouseMoveRef = React18.useRef(() => {
  });
  const restTimeoutPendingRef = React18.useRef(false);
  const isHoverOpen = useEffectEvent(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
    return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
  });
  React18.useEffect(() => {
    if (!enabled) return;
    function onOpenChange2(_ref) {
      let {
        open: open2
      } = _ref;
      if (!open2) {
        clearTimeoutIfSet(timeoutRef);
        clearTimeoutIfSet(restTimeoutRef);
        blockMouseMoveRef.current = true;
        restTimeoutPendingRef.current = false;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [enabled, events]);
  React18.useEffect(() => {
    if (!enabled) return;
    if (!handleCloseRef.current) return;
    if (!open) return;
    function onLeave(event) {
      if (isHoverOpen()) {
        onOpenChange(false, event, "hover");
      }
    }
    const html = getDocument(elements.floating).documentElement;
    html.addEventListener("mouseleave", onLeave);
    return () => {
      html.removeEventListener("mouseleave", onLeave);
    };
  }, [elements.floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);
  const closeWithDelay = React18.useCallback(function(event, runElseBranch, reason) {
    if (runElseBranch === void 0) {
      runElseBranch = true;
    }
    if (reason === void 0) {
      reason = "hover";
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeoutIfSet(timeoutRef);
      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);
    } else if (runElseBranch) {
      clearTimeoutIfSet(timeoutRef);
      onOpenChange(false, event, reason);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = useEffectEvent(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = void 0;
  });
  const clearPointerEvents = useEffectEvent(() => {
    if (performedPointerEventsMutationRef.current) {
      const body = getDocument(elements.floating).body;
      body.style.pointerEvents = "";
      body.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  });
  const isClickLikeOpenEvent = useEffectEvent(() => {
    return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
  });
  React18.useEffect(() => {
    if (!enabled) return;
    function onReferenceMouseEnter(event) {
      clearTimeoutIfSet(timeoutRef);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || getRestMs(restMsRef.current) > 0 && !getDelay(delayRef.current, "open")) {
        return;
      }
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = window.setTimeout(() => {
          if (!openRef.current) {
            onOpenChange(true, event, "hover");
          }
        }, openDelay);
      } else if (!open) {
        onOpenChange(true, event, "hover");
      }
    }
    function onReferenceMouseLeave(event) {
      if (isClickLikeOpenEvent()) {
        clearPointerEvents();
        return;
      }
      unbindMouseMoveRef.current();
      const doc = getDocument(elements.floating);
      clearTimeoutIfSet(restTimeoutRef);
      restTimeoutPendingRef.current = false;
      if (handleCloseRef.current && dataRef.current.floatingContext) {
        if (!open) {
          clearTimeoutIfSet(timeoutRef);
        }
        handlerRef.current = handleCloseRef.current({
          ...dataRef.current.floatingContext,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            if (!isClickLikeOpenEvent()) {
              closeWithDelay(event, true, "safe-polygon");
            }
          }
        });
        const handler = handlerRef.current;
        doc.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc.removeEventListener("mousemove", handler);
        };
        return;
      }
      const shouldClose = pointerTypeRef.current === "touch" ? !contains(elements.floating, event.relatedTarget) : true;
      if (shouldClose) {
        closeWithDelay(event);
      }
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent()) return;
      if (!dataRef.current.floatingContext) return;
      handleCloseRef.current == null || handleCloseRef.current({
        ...dataRef.current.floatingContext,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          if (!isClickLikeOpenEvent()) {
            closeWithDelay(event);
          }
        }
      })(event);
    }
    function onFloatingMouseEnter() {
      clearTimeoutIfSet(timeoutRef);
    }
    function onFloatingMouseLeave(event) {
      if (!isClickLikeOpenEvent()) {
        closeWithDelay(event, false);
      }
    }
    if (isElement(elements.domReference)) {
      const reference2 = elements.domReference;
      const floating = elements.floating;
      if (open) {
        reference2.addEventListener("mouseleave", onScrollMouseLeave);
      }
      if (move3) {
        reference2.addEventListener("mousemove", onReferenceMouseEnter, {
          once: true
        });
      }
      reference2.addEventListener("mouseenter", onReferenceMouseEnter);
      reference2.addEventListener("mouseleave", onReferenceMouseLeave);
      if (floating) {
        floating.addEventListener("mouseleave", onScrollMouseLeave);
        floating.addEventListener("mouseenter", onFloatingMouseEnter);
        floating.addEventListener("mouseleave", onFloatingMouseLeave);
      }
      return () => {
        if (open) {
          reference2.removeEventListener("mouseleave", onScrollMouseLeave);
        }
        if (move3) {
          reference2.removeEventListener("mousemove", onReferenceMouseEnter);
        }
        reference2.removeEventListener("mouseenter", onReferenceMouseEnter);
        reference2.removeEventListener("mouseleave", onReferenceMouseLeave);
        if (floating) {
          floating.removeEventListener("mouseleave", onScrollMouseLeave);
          floating.removeEventListener("mouseenter", onFloatingMouseEnter);
          floating.removeEventListener("mouseleave", onFloatingMouseLeave);
        }
      };
    }
  }, [elements, enabled, context, mouseOnly, move3, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, openRef, tree, delayRef, handleCloseRef, dataRef, isClickLikeOpenEvent, restMsRef]);
  index(() => {
    var _handleCloseRef$curre;
    if (!enabled) return;
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && (_handleCloseRef$curre = _handleCloseRef$curre.__options) != null && _handleCloseRef$curre.blockPointerEvents && isHoverOpen()) {
      performedPointerEventsMutationRef.current = true;
      const floatingEl = elements.floating;
      if (isElement(elements.domReference) && floatingEl) {
        var _tree$nodesRef$curren;
        const body = getDocument(elements.floating).body;
        body.setAttribute(safePolygonIdentifier, "");
        const ref2 = elements.domReference;
        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        body.style.pointerEvents = "none";
        ref2.style.pointerEvents = "auto";
        floatingEl.style.pointerEvents = "auto";
        return () => {
          body.style.pointerEvents = "";
          ref2.style.pointerEvents = "";
          floatingEl.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, elements, tree, handleCloseRef, isHoverOpen]);
  index(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
      restTimeoutPendingRef.current = false;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  React18.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeoutIfSet(timeoutRef);
      clearTimeoutIfSet(restTimeoutRef);
      clearPointerEvents();
    };
  }, [enabled, elements.domReference, cleanupMouseMoveHandler, clearPointerEvents]);
  const reference = React18.useMemo(() => {
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      onPointerDown: setPointerRef,
      onPointerEnter: setPointerRef,
      onMouseMove(event) {
        const {
          nativeEvent
        } = event;
        function handleMouseMove() {
          if (!blockMouseMoveRef.current && !openRef.current) {
            onOpenChange(true, nativeEvent, "hover");
          }
        }
        if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current)) {
          return;
        }
        if (open || getRestMs(restMsRef.current) === 0) {
          return;
        }
        if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {
          return;
        }
        clearTimeoutIfSet(restTimeoutRef);
        if (pointerTypeRef.current === "touch") {
          handleMouseMove();
        } else {
          restTimeoutPendingRef.current = true;
          restTimeoutRef.current = window.setTimeout(handleMouseMove, getRestMs(restMsRef.current));
        }
      }
    };
  }, [mouseOnly, onOpenChange, open, openRef, restMsRef]);
  return React18.useMemo(() => enabled ? {
    reference
  } : {}, [enabled, reference]);
}
var NOOP = () => {
};
var FloatingDelayGroupContext = React18.createContext({
  delay: 0,
  initialDelay: 0,
  timeoutMs: 0,
  currentId: null,
  setCurrentId: NOOP,
  setState: NOOP,
  isInstantPhase: false
});
var NextFloatingDelayGroupContext = React18.createContext({
  hasProvider: false,
  timeoutMs: 0,
  delayRef: {
    current: 0
  },
  initialDelayRef: {
    current: 0
  },
  timeoutIdRef: {
    current: -1
  },
  currentIdRef: {
    current: null
  },
  currentContextRef: {
    current: null
  }
});
var rafId = 0;
function enqueueFocus(el, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    preventScroll = false,
    cancelPrevious = true,
    sync = false
  } = options;
  cancelPrevious && cancelAnimationFrame(rafId);
  const exec = () => el == null ? void 0 : el.focus({
    preventScroll
  });
  if (sync) {
    exec();
  } else {
    rafId = requestAnimationFrame(exec);
  }
}
function contains2(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot(rootNode)) {
    let next = child;
    while (next) {
      if (parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    }
  }
  return false;
}
function getTarget2(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
function getDocument2(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
var counters = {
  inert: /* @__PURE__ */ new WeakMap(),
  "aria-hidden": /* @__PURE__ */ new WeakMap(),
  none: /* @__PURE__ */ new WeakMap()
};
function getCounterMap(control) {
  if (control === "inert") return counters.inert;
  if (control === "aria-hidden") return counters["aria-hidden"];
  return counters.none;
}
var uncontrolledElementsSet = /* @__PURE__ */ new WeakSet();
var markerMap = {};
var lockCount$1 = 0;
var supportsInert = () => typeof HTMLElement !== "undefined" && "inert" in HTMLElement.prototype;
var unwrapHost = (node) => node && (node.host || unwrapHost(node.parentNode));
var correctElements = (parent, targets) => targets.map((target) => {
  if (parent.contains(target)) {
    return target;
  }
  const correctedTarget = unwrapHost(target);
  if (parent.contains(correctedTarget)) {
    return correctedTarget;
  }
  return null;
}).filter((x) => x != null);
function applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {
  const markerName = "data-floating-ui-inert";
  const controlAttribute = inert ? "inert" : ariaHidden ? "aria-hidden" : null;
  const avoidElements = correctElements(body, uncorrectedAvoidElements);
  const elementsToKeep = /* @__PURE__ */ new Set();
  const elementsToStop = new Set(avoidElements);
  const hiddenElements = [];
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  const markerCounter = markerMap[markerName];
  avoidElements.forEach(keep);
  deep(body);
  elementsToKeep.clear();
  function keep(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    el.parentNode && keep(el.parentNode);
  }
  function deep(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    [].forEach.call(parent.children, (node) => {
      if (getNodeName(node) === "script") return;
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        const attr2 = controlAttribute ? node.getAttribute(controlAttribute) : null;
        const alreadyHidden = attr2 !== null && attr2 !== "false";
        const counterMap = getCounterMap(controlAttribute);
        const counterValue = (counterMap.get(node) || 0) + 1;
        const markerValue = (markerCounter.get(node) || 0) + 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        hiddenElements.push(node);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledElementsSet.add(node);
        }
        if (markerValue === 1) {
          node.setAttribute(markerName, "");
        }
        if (!alreadyHidden && controlAttribute) {
          node.setAttribute(controlAttribute, controlAttribute === "inert" ? "" : "true");
        }
      }
    });
  }
  lockCount$1++;
  return () => {
    hiddenElements.forEach((element) => {
      const counterMap = getCounterMap(controlAttribute);
      const currentCounterValue = counterMap.get(element) || 0;
      const counterValue = currentCounterValue - 1;
      const markerValue = (markerCounter.get(element) || 0) - 1;
      counterMap.set(element, counterValue);
      markerCounter.set(element, markerValue);
      if (!counterValue) {
        if (!uncontrolledElementsSet.has(element) && controlAttribute) {
          element.removeAttribute(controlAttribute);
        }
        uncontrolledElementsSet.delete(element);
      }
      if (!markerValue) {
        element.removeAttribute(markerName);
      }
    });
    lockCount$1--;
    if (!lockCount$1) {
      counters.inert = /* @__PURE__ */ new WeakMap();
      counters["aria-hidden"] = /* @__PURE__ */ new WeakMap();
      counters.none = /* @__PURE__ */ new WeakMap();
      uncontrolledElementsSet = /* @__PURE__ */ new WeakSet();
      markerMap = {};
    }
  };
}
function markOthers(avoidElements, ariaHidden, inert) {
  if (ariaHidden === void 0) {
    ariaHidden = false;
  }
  if (inert === void 0) {
    inert = false;
  }
  const body = getDocument2(avoidElements[0]).body;
  return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll("[aria-live]"))), body, ariaHidden, inert);
}
var HIDDEN_STYLES = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "fixed",
  whiteSpace: "nowrap",
  width: "1px",
  top: 0,
  left: 0
};
var FocusGuard = React18.forwardRef(function FocusGuard2(props, ref2) {
  const [role, setRole] = React18.useState();
  index(() => {
    if (isSafari()) {
      setRole("button");
    }
  }, []);
  const restProps = {
    ref: ref2,
    tabIndex: 0,
    // Role is only for VoiceOver
    role,
    "aria-hidden": role ? void 0 : true,
    [createAttribute("focus-guard")]: "",
    style: HIDDEN_STYLES
  };
  return (0, import_jsx_runtime9.jsx)("span", {
    ...props,
    ...restProps
  });
});
var PortalContext = React18.createContext(null);
var attr = createAttribute("portal");
function useFloatingPortalNode(props) {
  if (props === void 0) {
    props = {};
  }
  const {
    id,
    root
  } = props;
  const uniqueId = useId();
  const portalContext = usePortalContext();
  const [portalNode, setPortalNode] = React18.useState(null);
  const portalNodeRef = React18.useRef(null);
  index(() => {
    return () => {
      portalNode == null || portalNode.remove();
      queueMicrotask(() => {
        portalNodeRef.current = null;
      });
    };
  }, [portalNode]);
  index(() => {
    if (!uniqueId) return;
    if (portalNodeRef.current) return;
    const existingIdRoot = id ? document.getElementById(id) : null;
    if (!existingIdRoot) return;
    const subRoot = document.createElement("div");
    subRoot.id = uniqueId;
    subRoot.setAttribute(attr, "");
    existingIdRoot.appendChild(subRoot);
    portalNodeRef.current = subRoot;
    setPortalNode(subRoot);
  }, [id, uniqueId]);
  index(() => {
    if (root === null) return;
    if (!uniqueId) return;
    if (portalNodeRef.current) return;
    let container = root || (portalContext == null ? void 0 : portalContext.portalNode);
    if (container && !isElement(container)) container = container.current;
    container = container || document.body;
    let idWrapper = null;
    if (id) {
      idWrapper = document.createElement("div");
      idWrapper.id = id;
      container.appendChild(idWrapper);
    }
    const subRoot = document.createElement("div");
    subRoot.id = uniqueId;
    subRoot.setAttribute(attr, "");
    container = idWrapper || container;
    container.appendChild(subRoot);
    portalNodeRef.current = subRoot;
    setPortalNode(subRoot);
  }, [id, root, uniqueId, portalContext]);
  return portalNode;
}
function FloatingPortal(props) {
  const {
    children: children2,
    id,
    root,
    preserveTabOrder = true
  } = props;
  const portalNode = useFloatingPortalNode({
    id,
    root
  });
  const [focusManagerState, setFocusManagerState] = React18.useState(null);
  const beforeOutsideRef = React18.useRef(null);
  const afterOutsideRef = React18.useRef(null);
  const beforeInsideRef = React18.useRef(null);
  const afterInsideRef = React18.useRef(null);
  const modal = focusManagerState == null ? void 0 : focusManagerState.modal;
  const open = focusManagerState == null ? void 0 : focusManagerState.open;
  const shouldRenderGuards = (
    // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState && // Guards are only for non-modal focus management.
    !focusManagerState.modal && // Don't render if unmount is transitioning.
    focusManagerState.open && preserveTabOrder && !!(root || portalNode)
  );
  React18.useEffect(() => {
    if (!portalNode || !preserveTabOrder || modal) {
      return;
    }
    function onFocus(event) {
      if (portalNode && isOutsideEvent(event)) {
        const focusing = event.type === "focusin";
        const manageFocus = focusing ? enableFocusInside : disableFocusInside;
        manageFocus(portalNode);
      }
    }
    portalNode.addEventListener("focusin", onFocus, true);
    portalNode.addEventListener("focusout", onFocus, true);
    return () => {
      portalNode.removeEventListener("focusin", onFocus, true);
      portalNode.removeEventListener("focusout", onFocus, true);
    };
  }, [portalNode, preserveTabOrder, modal]);
  React18.useEffect(() => {
    if (!portalNode) return;
    if (open) return;
    enableFocusInside(portalNode);
  }, [open, portalNode]);
  return (0, import_jsx_runtime9.jsxs)(PortalContext.Provider, {
    value: React18.useMemo(() => ({
      preserveTabOrder,
      beforeOutsideRef,
      afterOutsideRef,
      beforeInsideRef,
      afterInsideRef,
      portalNode,
      setFocusManagerState
    }), [preserveTabOrder, portalNode]),
    children: [shouldRenderGuards && portalNode && (0, import_jsx_runtime9.jsx)(FocusGuard, {
      "data-type": "outside",
      ref: beforeOutsideRef,
      onFocus: (event) => {
        if (isOutsideEvent(event, portalNode)) {
          var _beforeInsideRef$curr;
          (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();
        } else {
          const domReference = focusManagerState ? focusManagerState.domReference : null;
          const prevTabbable = getPreviousTabbable(domReference);
          prevTabbable == null || prevTabbable.focus();
        }
      }
    }), shouldRenderGuards && portalNode && (0, import_jsx_runtime9.jsx)("span", {
      "aria-owns": portalNode.id,
      style: HIDDEN_STYLES
    }), portalNode && ReactDOM2.createPortal(children2, portalNode), shouldRenderGuards && portalNode && (0, import_jsx_runtime9.jsx)(FocusGuard, {
      "data-type": "outside",
      ref: afterOutsideRef,
      onFocus: (event) => {
        if (isOutsideEvent(event, portalNode)) {
          var _afterInsideRef$curre;
          (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();
        } else {
          const domReference = focusManagerState ? focusManagerState.domReference : null;
          const nextTabbable = getNextTabbable(domReference);
          nextTabbable == null || nextTabbable.focus();
          (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent, "focus-out"));
        }
      }
    })]
  });
}
var usePortalContext = () => React18.useContext(PortalContext);
function useLiteMergeRefs(refs) {
  return React18.useMemo(() => {
    return (value) => {
      refs.forEach((ref2) => {
        if (ref2) {
          ref2.current = value;
        }
      });
    };
  }, refs);
}
var LIST_LIMIT = 20;
var previouslyFocusedElements = [];
function addPreviouslyFocusedElement(element) {
  previouslyFocusedElements = previouslyFocusedElements.filter((el) => el.isConnected);
  if (element && getNodeName(element) !== "body") {
    previouslyFocusedElements.push(element);
    if (previouslyFocusedElements.length > LIST_LIMIT) {
      previouslyFocusedElements = previouslyFocusedElements.slice(-20);
    }
  }
}
function getPreviouslyFocusedElement() {
  return previouslyFocusedElements.slice().reverse().find((el) => el.isConnected);
}
function getFirstTabbableElement(container) {
  const tabbableOptions = getTabbableOptions();
  if (isTabbable(container, tabbableOptions)) {
    return container;
  }
  return tabbable(container, tabbableOptions)[0] || container;
}
function handleTabIndex(floatingFocusElement, orderRef) {
  var _floatingFocusElement;
  if (!orderRef.current.includes("floating") && !((_floatingFocusElement = floatingFocusElement.getAttribute("role")) != null && _floatingFocusElement.includes("dialog"))) {
    return;
  }
  const options = getTabbableOptions();
  const focusableElements = focusable(floatingFocusElement, options);
  const tabbableContent = focusableElements.filter((element) => {
    const dataTabIndex = element.getAttribute("data-tabindex") || "";
    return isTabbable(element, options) || element.hasAttribute("data-tabindex") && !dataTabIndex.startsWith("-");
  });
  const tabIndex = floatingFocusElement.getAttribute("tabindex");
  if (orderRef.current.includes("floating") || tabbableContent.length === 0) {
    if (tabIndex !== "0") {
      floatingFocusElement.setAttribute("tabindex", "0");
    }
  } else if (tabIndex !== "-1" || floatingFocusElement.hasAttribute("data-tabindex") && floatingFocusElement.getAttribute("data-tabindex") !== "-1") {
    floatingFocusElement.setAttribute("tabindex", "-1");
    floatingFocusElement.setAttribute("data-tabindex", "-1");
  }
}
var VisuallyHiddenDismiss = React18.forwardRef(function VisuallyHiddenDismiss2(props, ref2) {
  return (0, import_jsx_runtime9.jsx)("button", {
    ...props,
    type: "button",
    ref: ref2,
    tabIndex: -1,
    style: HIDDEN_STYLES
  });
});
function FloatingFocusManager(props) {
  const {
    context,
    children: children2,
    disabled = false,
    order = ["content"],
    guards: _guards = true,
    initialFocus = 0,
    returnFocus = true,
    restoreFocus = false,
    modal = true,
    visuallyHiddenDismiss = false,
    closeOnFocusOut = true,
    outsideElementsInert = false,
    getInsideElements: _getInsideElements = () => []
  } = props;
  const {
    open,
    onOpenChange,
    events,
    dataRef,
    elements: {
      domReference,
      floating
    }
  } = context;
  const getNodeId = useEffectEvent(() => {
    var _dataRef$current$floa;
    return (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;
  });
  const getInsideElements = useEffectEvent(_getInsideElements);
  const ignoreInitialFocus = typeof initialFocus === "number" && initialFocus < 0;
  const isUntrappedTypeableCombobox = isTypeableCombobox(domReference) && ignoreInitialFocus;
  const inertSupported = supportsInert();
  const guards = inertSupported ? _guards : true;
  const useInert = !guards || inertSupported && outsideElementsInert;
  const orderRef = useLatestRef(order);
  const initialFocusRef = useLatestRef(initialFocus);
  const returnFocusRef = useLatestRef(returnFocus);
  const tree = useFloatingTree();
  const portalContext = usePortalContext();
  const startDismissButtonRef = React18.useRef(null);
  const endDismissButtonRef = React18.useRef(null);
  const preventReturnFocusRef = React18.useRef(false);
  const isPointerDownRef = React18.useRef(false);
  const tabbableIndexRef = React18.useRef(-1);
  const isInsidePortal = portalContext != null;
  const floatingFocusElement = getFloatingFocusElement(floating);
  const getTabbableContent = useEffectEvent(function(container) {
    if (container === void 0) {
      container = floatingFocusElement;
    }
    return container ? tabbable(container, getTabbableOptions()) : [];
  });
  const getTabbableElements = useEffectEvent((container) => {
    const content = getTabbableContent(container);
    return orderRef.current.map((type) => {
      if (domReference && type === "reference") {
        return domReference;
      }
      if (floatingFocusElement && type === "floating") {
        return floatingFocusElement;
      }
      return content;
    }).filter(Boolean).flat();
  });
  React18.useEffect(() => {
    if (disabled) return;
    if (!modal) return;
    function onKeyDown(event) {
      if (event.key === "Tab") {
        if (contains(floatingFocusElement, activeElement(getDocument(floatingFocusElement))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {
          stopEvent(event);
        }
        const els = getTabbableElements();
        const target = getTarget(event);
        if (orderRef.current[0] === "reference" && target === domReference) {
          stopEvent(event);
          if (event.shiftKey) {
            enqueueFocus(els[els.length - 1]);
          } else {
            enqueueFocus(els[1]);
          }
        }
        if (orderRef.current[1] === "floating" && target === floatingFocusElement && event.shiftKey) {
          stopEvent(event);
          enqueueFocus(els[0]);
        }
      }
    }
    const doc = getDocument(floatingFocusElement);
    doc.addEventListener("keydown", onKeyDown);
    return () => {
      doc.removeEventListener("keydown", onKeyDown);
    };
  }, [disabled, domReference, floatingFocusElement, modal, orderRef, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);
  React18.useEffect(() => {
    if (disabled) return;
    if (!floating) return;
    function handleFocusIn(event) {
      const target = getTarget(event);
      const tabbableContent = getTabbableContent();
      const tabbableIndex = tabbableContent.indexOf(target);
      if (tabbableIndex !== -1) {
        tabbableIndexRef.current = tabbableIndex;
      }
    }
    floating.addEventListener("focusin", handleFocusIn);
    return () => {
      floating.removeEventListener("focusin", handleFocusIn);
    };
  }, [disabled, floating, getTabbableContent]);
  React18.useEffect(() => {
    if (disabled) return;
    if (!closeOnFocusOut) return;
    function handlePointerDown() {
      isPointerDownRef.current = true;
      setTimeout(() => {
        isPointerDownRef.current = false;
      });
    }
    function handleFocusOutside(event) {
      const relatedTarget = event.relatedTarget;
      const currentTarget = event.currentTarget;
      const target = getTarget(event);
      queueMicrotask(() => {
        const nodeId = getNodeId();
        const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute("focus-guard")) || tree && (getNodeChildren(tree.nodesRef.current, nodeId).find((node) => {
          var _node$context, _node$context2;
          return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
        }) || getNodeAncestors(tree.nodesRef.current, nodeId).find((node) => {
          var _node$context3, _node$context4, _node$context5;
          return [(_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating, getFloatingFocusElement((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.floating)].includes(relatedTarget) || ((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.domReference) === relatedTarget;
        })));
        if (currentTarget === domReference && floatingFocusElement) {
          handleTabIndex(floatingFocusElement, orderRef);
        }
        if (restoreFocus && currentTarget !== domReference && !(target != null && target.isConnected) && activeElement(getDocument(floatingFocusElement)) === getDocument(floatingFocusElement).body) {
          if (isHTMLElement(floatingFocusElement)) {
            floatingFocusElement.focus();
          }
          const prevTabbableIndex = tabbableIndexRef.current;
          const tabbableContent = getTabbableContent();
          const nodeToFocus = tabbableContent[prevTabbableIndex] || tabbableContent[tabbableContent.length - 1] || floatingFocusElement;
          if (isHTMLElement(nodeToFocus)) {
            nodeToFocus.focus();
          }
        }
        if (dataRef.current.insideReactTree) {
          dataRef.current.insideReactTree = false;
          return;
        }
        if ((isUntrappedTypeableCombobox ? true : !modal) && relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.
        relatedTarget !== getPreviouslyFocusedElement()) {
          preventReturnFocusRef.current = true;
          onOpenChange(false, event, "focus-out");
        }
      });
    }
    if (floating && isHTMLElement(domReference)) {
      domReference.addEventListener("focusout", handleFocusOutside);
      domReference.addEventListener("pointerdown", handlePointerDown);
      floating.addEventListener("focusout", handleFocusOutside);
      return () => {
        domReference.removeEventListener("focusout", handleFocusOutside);
        domReference.removeEventListener("pointerdown", handlePointerDown);
        floating.removeEventListener("focusout", handleFocusOutside);
      };
    }
  }, [disabled, domReference, floating, floatingFocusElement, modal, tree, portalContext, onOpenChange, closeOnFocusOut, restoreFocus, getTabbableContent, isUntrappedTypeableCombobox, getNodeId, orderRef, dataRef]);
  const beforeGuardRef = React18.useRef(null);
  const afterGuardRef = React18.useRef(null);
  const mergedBeforeGuardRef = useLiteMergeRefs([beforeGuardRef, portalContext == null ? void 0 : portalContext.beforeInsideRef]);
  const mergedAfterGuardRef = useLiteMergeRefs([afterGuardRef, portalContext == null ? void 0 : portalContext.afterInsideRef]);
  React18.useEffect(() => {
    var _portalContext$portal, _ancestors$find;
    if (disabled) return;
    if (!floating) return;
    const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[" + createAttribute("portal") + "]")) || []);
    const ancestors = tree ? getNodeAncestors(tree.nodesRef.current, getNodeId()) : [];
    const ancestorFloatingNodes = tree && !modal ? ancestors.map((node) => {
      var _node$context6;
      return (_node$context6 = node.context) == null ? void 0 : _node$context6.elements.floating;
    }) : [];
    const rootAncestorComboboxDomReference = (_ancestors$find = ancestors.find((node) => {
      var _node$context7;
      return isTypeableCombobox(((_node$context7 = node.context) == null ? void 0 : _node$context7.elements.domReference) || null);
    })) == null || (_ancestors$find = _ancestors$find.context) == null ? void 0 : _ancestors$find.elements.domReference;
    const insideElements = [floating, rootAncestorComboboxDomReference, ...portalNodes, ...ancestorFloatingNodes, ...getInsideElements(), startDismissButtonRef.current, endDismissButtonRef.current, beforeGuardRef.current, afterGuardRef.current, portalContext == null ? void 0 : portalContext.beforeOutsideRef.current, portalContext == null ? void 0 : portalContext.afterOutsideRef.current, orderRef.current.includes("reference") || isUntrappedTypeableCombobox ? domReference : null].filter((x) => x != null);
    const cleanup2 = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, !useInert, useInert) : markOthers(insideElements);
    return () => {
      cleanup2();
    };
  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards, useInert, tree, getNodeId, getInsideElements]);
  index(() => {
    if (disabled || !isHTMLElement(floatingFocusElement)) return;
    const doc = getDocument(floatingFocusElement);
    const previouslyFocusedElement = activeElement(doc);
    queueMicrotask(() => {
      const focusableElements = getTabbableElements(floatingFocusElement);
      const initialFocusValue = initialFocusRef.current;
      const elToFocus = (typeof initialFocusValue === "number" ? focusableElements[initialFocusValue] : initialFocusValue.current) || floatingFocusElement;
      const focusAlreadyInsideFloatingEl = contains(floatingFocusElement, previouslyFocusedElement);
      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {
        enqueueFocus(elToFocus, {
          preventScroll: elToFocus === floatingFocusElement
        });
      }
    });
  }, [disabled, open, floatingFocusElement, ignoreInitialFocus, getTabbableElements, initialFocusRef]);
  index(() => {
    if (disabled || !floatingFocusElement) return;
    const doc = getDocument(floatingFocusElement);
    const previouslyFocusedElement = activeElement(doc);
    addPreviouslyFocusedElement(previouslyFocusedElement);
    function onOpenChange2(_ref) {
      let {
        reason,
        event,
        nested
      } = _ref;
      if (["hover", "safe-polygon"].includes(reason) && event.type === "mouseleave") {
        preventReturnFocusRef.current = true;
      }
      if (reason !== "outside-press") return;
      if (nested) {
        preventReturnFocusRef.current = false;
      } else if (isVirtualClick(event) || isVirtualPointerEvent(event)) {
        preventReturnFocusRef.current = false;
      } else {
        let isPreventScrollSupported = false;
        document.createElement("div").focus({
          get preventScroll() {
            isPreventScrollSupported = true;
            return false;
          }
        });
        if (isPreventScrollSupported) {
          preventReturnFocusRef.current = false;
        } else {
          preventReturnFocusRef.current = true;
        }
      }
    }
    events.on("openchange", onOpenChange2);
    const fallbackEl = doc.createElement("span");
    fallbackEl.setAttribute("tabindex", "-1");
    fallbackEl.setAttribute("aria-hidden", "true");
    Object.assign(fallbackEl.style, HIDDEN_STYLES);
    if (isInsidePortal && domReference) {
      domReference.insertAdjacentElement("afterend", fallbackEl);
    }
    function getReturnElement() {
      if (typeof returnFocusRef.current === "boolean") {
        const el = domReference || getPreviouslyFocusedElement();
        return el && el.isConnected ? el : fallbackEl;
      }
      return returnFocusRef.current.current || fallbackEl;
    }
    return () => {
      events.off("openchange", onOpenChange2);
      const activeEl = activeElement(doc);
      const isFocusInsideFloatingTree = contains(floating, activeEl) || tree && getNodeChildren(tree.nodesRef.current, getNodeId()).some((node) => {
        var _node$context8;
        return contains((_node$context8 = node.context) == null ? void 0 : _node$context8.elements.floating, activeEl);
      });
      const returnElement = getReturnElement();
      queueMicrotask(() => {
        const tabbableReturnElement = getFirstTabbableElement(returnElement);
        if (
          // eslint-disable-next-line react-hooks/exhaustive-deps
          returnFocusRef.current && !preventReturnFocusRef.current && isHTMLElement(tabbableReturnElement) && // If the focus moved somewhere else after mount, avoid returning focus
          // since it likely entered a different element which should be
          // respected: https://github.com/floating-ui/floating-ui/issues/2607
          (tabbableReturnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)
        ) {
          tabbableReturnElement.focus({
            preventScroll: true
          });
        }
        fallbackEl.remove();
      });
    };
  }, [disabled, floating, floatingFocusElement, returnFocusRef, dataRef, events, tree, isInsidePortal, domReference, getNodeId]);
  React18.useEffect(() => {
    queueMicrotask(() => {
      preventReturnFocusRef.current = false;
    });
  }, [disabled]);
  index(() => {
    if (disabled) return;
    if (!portalContext) return;
    portalContext.setFocusManagerState({
      modal,
      closeOnFocusOut,
      open,
      onOpenChange,
      domReference
    });
    return () => {
      portalContext.setFocusManagerState(null);
    };
  }, [disabled, portalContext, modal, open, onOpenChange, closeOnFocusOut, domReference]);
  index(() => {
    if (disabled) return;
    if (!floatingFocusElement) return;
    handleTabIndex(floatingFocusElement, orderRef);
  }, [disabled, floatingFocusElement, orderRef]);
  function renderDismissButton(location) {
    if (disabled || !visuallyHiddenDismiss || !modal) {
      return null;
    }
    return (0, import_jsx_runtime9.jsx)(VisuallyHiddenDismiss, {
      ref: location === "start" ? startDismissButtonRef : endDismissButtonRef,
      onClick: (event) => onOpenChange(false, event.nativeEvent),
      children: typeof visuallyHiddenDismiss === "string" ? visuallyHiddenDismiss : "Dismiss"
    });
  }
  const shouldRenderGuards = !disabled && guards && (modal ? !isUntrappedTypeableCombobox : true) && (isInsidePortal || modal);
  return (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, {
    children: [shouldRenderGuards && (0, import_jsx_runtime9.jsx)(FocusGuard, {
      "data-type": "inside",
      ref: mergedBeforeGuardRef,
      onFocus: (event) => {
        if (modal) {
          const els = getTabbableElements();
          enqueueFocus(order[0] === "reference" ? els[0] : els[els.length - 1]);
        } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
          preventReturnFocusRef.current = false;
          if (isOutsideEvent(event, portalContext.portalNode)) {
            const nextTabbable = getNextTabbable(domReference);
            nextTabbable == null || nextTabbable.focus();
          } else {
            var _portalContext$before;
            (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();
          }
        }
      }
    }), !isUntrappedTypeableCombobox && renderDismissButton("start"), children2, renderDismissButton("end"), shouldRenderGuards && (0, import_jsx_runtime9.jsx)(FocusGuard, {
      "data-type": "inside",
      ref: mergedAfterGuardRef,
      onFocus: (event) => {
        if (modal) {
          enqueueFocus(getTabbableElements()[0]);
        } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
          if (closeOnFocusOut) {
            preventReturnFocusRef.current = true;
          }
          if (isOutsideEvent(event, portalContext.portalNode)) {
            const prevTabbable = getPreviousTabbable(domReference);
            prevTabbable == null || prevTabbable.focus();
          } else {
            var _portalContext$afterO;
            (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();
          }
        }
      }
    })]
  });
}
var lockCount = 0;
var scrollbarProperty = "--floating-ui-scrollbar-width";
function enableScrollLock() {
  const platform2 = getPlatform();
  const isIOS = /iP(hone|ad|od)|iOS/.test(platform2) || // iPads can claim to be MacIntel
  platform2 === "MacIntel" && navigator.maxTouchPoints > 1;
  const bodyStyle = document.body.style;
  const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
  const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
  const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.scrollX;
  const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.scrollY;
  bodyStyle.overflow = "hidden";
  bodyStyle.setProperty(scrollbarProperty, scrollbarWidth + "px");
  if (scrollbarWidth) {
    bodyStyle[paddingProp] = scrollbarWidth + "px";
  }
  if (isIOS) {
    var _window$visualViewpor, _window$visualViewpor2;
    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
    Object.assign(bodyStyle, {
      position: "fixed",
      top: -(scrollY - Math.floor(offsetTop)) + "px",
      left: -(scrollX - Math.floor(offsetLeft)) + "px",
      right: "0"
    });
  }
  return () => {
    Object.assign(bodyStyle, {
      overflow: "",
      [paddingProp]: ""
    });
    bodyStyle.removeProperty(scrollbarProperty);
    if (isIOS) {
      Object.assign(bodyStyle, {
        position: "",
        top: "",
        left: "",
        right: ""
      });
      window.scrollTo(scrollX, scrollY);
    }
  };
}
var cleanup = () => {
};
var FloatingOverlay = React18.forwardRef(function FloatingOverlay2(props, ref2) {
  const {
    lockScroll = false,
    ...rest
  } = props;
  index(() => {
    if (!lockScroll) return;
    lockCount++;
    if (lockCount === 1) {
      cleanup = enableScrollLock();
    }
    return () => {
      lockCount--;
      if (lockCount === 0) {
        cleanup();
      }
    };
  }, [lockScroll]);
  return (0, import_jsx_runtime9.jsx)("div", {
    ref: ref2,
    ...rest,
    style: {
      position: "fixed",
      overflow: "auto",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...rest.style
    }
  });
});
function isButtonTarget(event) {
  return isHTMLElement(event.target) && event.target.tagName === "BUTTON";
}
function isAnchorTarget(event) {
  return isHTMLElement(event.target) && event.target.tagName === "A";
}
function isSpaceIgnored(element) {
  return isTypeableElement(element);
}
function useClick(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    elements: {
      domReference
    }
  } = context;
  const {
    enabled = true,
    event: eventOption = "click",
    toggle = true,
    ignoreMouse = false,
    keyboardHandlers = true,
    stickIfOpen = true
  } = props;
  const pointerTypeRef = React18.useRef();
  const didKeyDownRef = React18.useRef(false);
  const reference = React18.useMemo(() => ({
    onPointerDown(event) {
      pointerTypeRef.current = event.pointerType;
    },
    onMouseDown(event) {
      const pointerType = pointerTypeRef.current;
      if (event.button !== 0) return;
      if (eventOption === "click") return;
      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;
      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === "mousedown" : true)) {
        onOpenChange(false, event.nativeEvent, "click");
      } else {
        event.preventDefault();
        onOpenChange(true, event.nativeEvent, "click");
      }
    },
    onClick(event) {
      const pointerType = pointerTypeRef.current;
      if (eventOption === "mousedown" && pointerTypeRef.current) {
        pointerTypeRef.current = void 0;
        return;
      }
      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;
      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === "click" : true)) {
        onOpenChange(false, event.nativeEvent, "click");
      } else {
        onOpenChange(true, event.nativeEvent, "click");
      }
    },
    onKeyDown(event) {
      pointerTypeRef.current = void 0;
      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {
        return;
      }
      if (event.key === " " && !isSpaceIgnored(domReference)) {
        event.preventDefault();
        didKeyDownRef.current = true;
      }
      if (isAnchorTarget(event)) {
        return;
      }
      if (event.key === "Enter") {
        if (open && toggle) {
          onOpenChange(false, event.nativeEvent, "click");
        } else {
          onOpenChange(true, event.nativeEvent, "click");
        }
      }
    },
    onKeyUp(event) {
      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {
        return;
      }
      if (event.key === " " && didKeyDownRef.current) {
        didKeyDownRef.current = false;
        if (open && toggle) {
          onOpenChange(false, event.nativeEvent, "click");
        } else {
          onOpenChange(true, event.nativeEvent, "click");
        }
      }
    }
  }), [dataRef, domReference, eventOption, ignoreMouse, keyboardHandlers, onOpenChange, open, stickIfOpen, toggle]);
  return React18.useMemo(() => enabled ? {
    reference
  } : {}, [enabled, reference]);
}
var bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
var captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
var normalizeProp = (normalizable) => {
  var _normalizable$escapeK, _normalizable$outside;
  return {
    escapeKey: typeof normalizable === "boolean" ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,
    outsidePress: typeof normalizable === "boolean" ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true
  };
};
function useDismiss(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    elements,
    dataRef
  } = context;
  const {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles,
    capture
  } = props;
  const tree = useFloatingTree();
  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const endedOrStartedInsideRef = React18.useRef(false);
  const {
    escapeKey: escapeKeyBubbles,
    outsidePress: outsidePressBubbles
  } = normalizeProp(bubbles);
  const {
    escapeKey: escapeKeyCapture,
    outsidePress: outsidePressCapture
  } = normalizeProp(capture);
  const isComposingRef = React18.useRef(false);
  const blurTimeoutRef = React18.useRef(-1);
  const closeOnEscapeKeyDown = useEffectEvent((event) => {
    var _dataRef$current$floa;
    if (!open || !enabled || !escapeKey || event.key !== "Escape") {
      return;
    }
    if (isComposingRef.current) {
      return;
    }
    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;
    const children2 = tree ? getNodeChildren(tree.nodesRef.current, nodeId) : [];
    if (!escapeKeyBubbles) {
      event.stopPropagation();
      if (children2.length > 0) {
        let shouldDismiss = true;
        children2.forEach((child) => {
          var _child$context;
          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
    }
    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, "escape-key");
  });
  const closeOnEscapeKeyDownCapture = useEffectEvent((event) => {
    var _getTarget2;
    const callback = () => {
      var _getTarget;
      closeOnEscapeKeyDown(event);
      (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener("keydown", callback);
    };
    (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener("keydown", callback);
  });
  const closeOnPressOutside = useEffectEvent((event) => {
    var _dataRef$current$floa2;
    const insideReactTree = dataRef.current.insideReactTree;
    dataRef.current.insideReactTree = false;
    const endedOrStartedInside = endedOrStartedInsideRef.current;
    endedOrStartedInsideRef.current = false;
    if (outsidePressEvent === "click" && endedOrStartedInside) {
      return;
    }
    if (insideReactTree) {
      return;
    }
    if (typeof outsidePress === "function" && !outsidePress(event)) {
      return;
    }
    const target = getTarget(event);
    const inertSelector = "[" + createAttribute("inert") + "]";
    const markers = getDocument(elements.floating).querySelectorAll(inertSelector);
    let targetRootAncestor = isElement(target) ? target : null;
    while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {
      const nextParent = getParentNode(targetRootAncestor);
      if (isLastTraversableNode(nextParent) || !isElement(nextParent)) {
        break;
      }
      targetRootAncestor = nextParent;
    }
    if (markers.length && isElement(target) && !isRootElement(target) && // Clicked on a direct ancestor (e.g. FloatingOverlay).
    !contains(target, elements.floating) && // If the target root element contains none of the markers, then the
    // element was injected after the floating element rendered.
    Array.from(markers).every((marker) => !contains(targetRootAncestor, marker))) {
      return;
    }
    if (isHTMLElement(target) && floating) {
      const lastTraversableNode = isLastTraversableNode(target);
      const style3 = getComputedStyle2(target);
      const scrollRe = /auto|scroll/;
      const isScrollableX = lastTraversableNode || scrollRe.test(style3.overflowX);
      const isScrollableY = lastTraversableNode || scrollRe.test(style3.overflowY);
      const canScrollX = isScrollableX && target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
      const canScrollY = isScrollableY && target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
      const isRTL2 = style3.direction === "rtl";
      const pressedVerticalScrollbar = canScrollY && (isRTL2 ? event.offsetX <= target.offsetWidth - target.clientWidth : event.offsetX > target.clientWidth);
      const pressedHorizontalScrollbar = canScrollX && event.offsetY > target.clientHeight;
      if (pressedVerticalScrollbar || pressedHorizontalScrollbar) {
        return;
      }
    }
    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;
    const targetIsInsideChildren = tree && getNodeChildren(tree.nodesRef.current, nodeId).some((node) => {
      var _node$context;
      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
    });
    if (isEventTargetWithin(event, elements.floating) || isEventTargetWithin(event, elements.domReference) || targetIsInsideChildren) {
      return;
    }
    const children2 = tree ? getNodeChildren(tree.nodesRef.current, nodeId) : [];
    if (children2.length > 0) {
      let shouldDismiss = true;
      children2.forEach((child) => {
        var _child$context2;
        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
          shouldDismiss = false;
          return;
        }
      });
      if (!shouldDismiss) {
        return;
      }
    }
    onOpenChange(false, event, "outside-press");
  });
  const closeOnPressOutsideCapture = useEffectEvent((event) => {
    var _getTarget4;
    const callback = () => {
      var _getTarget3;
      closeOnPressOutside(event);
      (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);
    };
    (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);
  });
  React18.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    let compositionTimeout = -1;
    function onScroll(event) {
      onOpenChange(false, event, "ancestor-scroll");
    }
    function handleCompositionStart() {
      window.clearTimeout(compositionTimeout);
      isComposingRef.current = true;
    }
    function handleCompositionEnd() {
      compositionTimeout = window.setTimeout(
        () => {
          isComposingRef.current = false;
        },
        // 0ms or 1ms don't work in Safari. 5ms appears to consistently work.
        // Only apply to WebKit for the test to remain 0ms.
        isWebKit() ? 5 : 0
      );
    }
    const doc = getDocument(elements.floating);
    if (escapeKey) {
      doc.addEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
      doc.addEventListener("compositionstart", handleCompositionStart);
      doc.addEventListener("compositionend", handleCompositionEnd);
    }
    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement(elements.domReference)) {
        ancestors = getOverflowAncestors(elements.domReference);
      }
      if (isElement(elements.floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.floating));
      }
      if (!isElement(elements.reference) && elements.reference && elements.reference.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.reference.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      if (escapeKey) {
        doc.removeEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
        doc.removeEventListener("compositionstart", handleCompositionStart);
        doc.removeEventListener("compositionend", handleCompositionEnd);
      }
      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
      window.clearTimeout(compositionTimeout);
    };
  }, [dataRef, elements, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);
  React18.useEffect(() => {
    dataRef.current.insideReactTree = false;
  }, [dataRef, outsidePress, outsidePressEvent]);
  const reference = React18.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    ...referencePress && {
      [bubbleHandlerKeys[referencePressEvent]]: (event) => {
        onOpenChange(false, event.nativeEvent, "reference-press");
      },
      ...referencePressEvent !== "click" && {
        onClick(event) {
          onOpenChange(false, event.nativeEvent, "reference-press");
        }
      }
    }
  }), [closeOnEscapeKeyDown, onOpenChange, referencePress, referencePressEvent]);
  const floating = React18.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    onMouseDown() {
      endedOrStartedInsideRef.current = true;
    },
    onMouseUp() {
      endedOrStartedInsideRef.current = true;
    },
    [captureHandlerKeys[outsidePressEvent]]: () => {
      dataRef.current.insideReactTree = true;
    },
    onBlurCapture() {
      if (tree) return;
      clearTimeoutIfSet(blurTimeoutRef);
      dataRef.current.insideReactTree = true;
      blurTimeoutRef.current = window.setTimeout(() => {
        dataRef.current.insideReactTree = false;
      });
    }
  }), [closeOnEscapeKeyDown, outsidePressEvent, dataRef, tree]);
  return React18.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
function useFloatingRootContext(options) {
  const {
    open = false,
    onOpenChange: onOpenChangeProp,
    elements: elementsProp
  } = options;
  const floatingId = useId();
  const dataRef = React18.useRef({});
  const [events] = React18.useState(() => createEventEmitter());
  const nested = useFloatingParentNodeId() != null;
  if (true) {
    const optionDomReference = elementsProp.reference;
    if (optionDomReference && !isElement(optionDomReference)) {
      error("Cannot pass a virtual element to the `elements.reference` option,", "as it must be a real DOM element. Use `refs.setPositionReference()`", "instead.");
    }
  }
  const [positionReference, setPositionReference] = React18.useState(elementsProp.reference);
  const onOpenChange = useEffectEvent((open2, event, reason) => {
    dataRef.current.openEvent = open2 ? event : void 0;
    events.emit("openchange", {
      open: open2,
      event,
      reason,
      nested
    });
    onOpenChangeProp == null || onOpenChangeProp(open2, event, reason);
  });
  const refs = React18.useMemo(() => ({
    setPositionReference
  }), []);
  const elements = React18.useMemo(() => ({
    reference: positionReference || elementsProp.reference || null,
    floating: elementsProp.floating || null,
    domReference: elementsProp.reference
  }), [positionReference, elementsProp.reference, elementsProp.floating]);
  return React18.useMemo(() => ({
    dataRef,
    open,
    onOpenChange,
    elements,
    events,
    floatingId,
    refs
  }), [open, onOpenChange, elements, events, floatingId, refs]);
}
function useFloating2(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    nodeId
  } = options;
  const internalRootContext = useFloatingRootContext({
    ...options,
    elements: {
      reference: null,
      floating: null,
      ...options.elements
    }
  });
  const rootContext = options.rootContext || internalRootContext;
  const computedElements = rootContext.elements;
  const [_domReference, setDomReference] = React18.useState(null);
  const [positionReference, _setPositionReference] = React18.useState(null);
  const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;
  const domReference = optionDomReference || _domReference;
  const domReferenceRef = React18.useRef(null);
  const tree = useFloatingTree();
  index(() => {
    if (domReference) {
      domReferenceRef.current = domReference;
    }
  }, [domReference]);
  const position3 = useFloating({
    ...options,
    elements: {
      ...computedElements,
      ...positionReference && {
        reference: positionReference
      }
    }
  });
  const setPositionReference = React18.useCallback((node) => {
    const computedPositionReference = isElement(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      getClientRects: () => node.getClientRects(),
      contextElement: node
    } : node;
    _setPositionReference(computedPositionReference);
    position3.refs.setReference(computedPositionReference);
  }, [position3.refs]);
  const setReference = React18.useCallback((node) => {
    if (isElement(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }
    if (isElement(position3.refs.reference.current) || position3.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node !== null && !isElement(node)) {
      position3.refs.setReference(node);
    }
  }, [position3.refs]);
  const refs = React18.useMemo(() => ({
    ...position3.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position3.refs, setReference, setPositionReference]);
  const elements = React18.useMemo(() => ({
    ...position3.elements,
    domReference
  }), [position3.elements, domReference]);
  const context = React18.useMemo(() => ({
    ...position3,
    ...rootContext,
    refs,
    elements,
    nodeId
  }), [position3, refs, elements, nodeId, rootContext]);
  index(() => {
    rootContext.dataRef.current.floatingContext = context;
    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);
    if (node) {
      node.context = context;
    }
  });
  return React18.useMemo(() => ({
    ...position3,
    context,
    refs,
    elements
  }), [position3, refs, elements, context]);
}
function isMacSafari() {
  return isMac2() && isSafari();
}
function useFocus(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    events,
    dataRef,
    elements
  } = context;
  const {
    enabled = true,
    visibleOnly = true
  } = props;
  const blockFocusRef = React18.useRef(false);
  const timeoutRef = React18.useRef(-1);
  const keyboardModalityRef = React18.useRef(true);
  React18.useEffect(() => {
    if (!enabled) return;
    const win = getWindow(elements.domReference);
    function onBlur() {
      if (!open && isHTMLElement(elements.domReference) && elements.domReference === activeElement(getDocument(elements.domReference))) {
        blockFocusRef.current = true;
      }
    }
    function onKeyDown() {
      keyboardModalityRef.current = true;
    }
    function onPointerDown() {
      keyboardModalityRef.current = false;
    }
    win.addEventListener("blur", onBlur);
    if (isMacSafari()) {
      win.addEventListener("keydown", onKeyDown, true);
      win.addEventListener("pointerdown", onPointerDown, true);
    }
    return () => {
      win.removeEventListener("blur", onBlur);
      if (isMacSafari()) {
        win.removeEventListener("keydown", onKeyDown, true);
        win.removeEventListener("pointerdown", onPointerDown, true);
      }
    };
  }, [elements.domReference, open, enabled]);
  React18.useEffect(() => {
    if (!enabled) return;
    function onOpenChange2(_ref) {
      let {
        reason
      } = _ref;
      if (reason === "reference-press" || reason === "escape-key") {
        blockFocusRef.current = true;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [events, enabled]);
  React18.useEffect(() => {
    return () => {
      clearTimeoutIfSet(timeoutRef);
    };
  }, []);
  const reference = React18.useMemo(() => ({
    onMouseLeave() {
      blockFocusRef.current = false;
    },
    onFocus(event) {
      if (blockFocusRef.current) return;
      const target = getTarget(event.nativeEvent);
      if (visibleOnly && isElement(target)) {
        if (isMacSafari() && !event.relatedTarget) {
          if (!keyboardModalityRef.current && !isTypeableElement(target)) {
            return;
          }
        } else if (!matchesFocusVisible(target)) {
          return;
        }
      }
      onOpenChange(true, event.nativeEvent, "focus");
    },
    onBlur(event) {
      blockFocusRef.current = false;
      const relatedTarget = event.relatedTarget;
      const nativeEvent = event.nativeEvent;
      const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute(createAttribute("focus-guard")) && relatedTarget.getAttribute("data-type") === "outside";
      timeoutRef.current = window.setTimeout(() => {
        var _dataRef$current$floa;
        const activeEl = activeElement(elements.domReference ? elements.domReference.ownerDocument : document);
        if (!relatedTarget && activeEl === elements.domReference) return;
        if (contains((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || contains(elements.domReference, activeEl) || movedToFocusGuard) {
          return;
        }
        onOpenChange(false, nativeEvent, "focus");
      });
    }
  }), [dataRef, elements.domReference, onOpenChange, visibleOnly]);
  return React18.useMemo(() => enabled ? {
    reference
  } : {}, [enabled, reference]);
}
function mergeProps(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  const isItem = elementKey === "item";
  let domUserProps = userProps;
  if (isItem && userProps) {
    const {
      [ACTIVE_KEY]: _,
      [SELECTED_KEY]: __,
      ...validProps
    } = userProps;
    domUserProps = validProps;
  }
  return {
    ...elementKey === "floating" && {
      tabIndex: -1,
      [FOCUSABLE_ATTRIBUTE2]: ""
    },
    ...domUserProps,
    ...propsList.map((value) => {
      const propsOrGetProps = value ? value[elementKey] : null;
      if (typeof propsOrGetProps === "function") {
        return userProps ? propsOrGetProps(userProps) : null;
      }
      return propsOrGetProps;
    }).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {
          return;
        }
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null || _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn) => fn(...args)).find((val) => val !== void 0);
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
function useInteractions(propsList) {
  if (propsList === void 0) {
    propsList = [];
  }
  const referenceDeps = propsList.map((key) => key == null ? void 0 : key.reference);
  const floatingDeps = propsList.map((key) => key == null ? void 0 : key.floating);
  const itemDeps = propsList.map((key) => key == null ? void 0 : key.item);
  const getReferenceProps = React18.useCallback(
    (userProps) => mergeProps(userProps, propsList, "reference"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    referenceDeps
  );
  const getFloatingProps = React18.useCallback(
    (userProps) => mergeProps(userProps, propsList, "floating"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    floatingDeps
  );
  const getItemProps = React18.useCallback(
    (userProps) => mergeProps(userProps, propsList, "item"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    itemDeps
  );
  return React18.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
}
var ESCAPE = "Escape";
function doSwitch(orientation, vertical2, horizontal2) {
  switch (orientation) {
    case "vertical":
      return vertical2;
    case "horizontal":
      return horizontal2;
    default:
      return vertical2 || horizontal2;
  }
}
function isMainOrientationKey(key, orientation) {
  const vertical2 = key === ARROW_UP2 || key === ARROW_DOWN2;
  const horizontal2 = key === ARROW_LEFT2 || key === ARROW_RIGHT2;
  return doSwitch(orientation, vertical2, horizontal2);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
  const vertical2 = key === ARROW_DOWN2;
  const horizontal2 = rtl ? key === ARROW_LEFT2 : key === ARROW_RIGHT2;
  return doSwitch(orientation, vertical2, horizontal2) || key === "Enter" || key === " " || key === "";
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
  const vertical2 = rtl ? key === ARROW_LEFT2 : key === ARROW_RIGHT2;
  const horizontal2 = key === ARROW_DOWN2;
  return doSwitch(orientation, vertical2, horizontal2);
}
function isCrossOrientationCloseKey(key, orientation, rtl, cols) {
  const vertical2 = rtl ? key === ARROW_RIGHT2 : key === ARROW_LEFT2;
  const horizontal2 = key === ARROW_UP2;
  if (orientation === "both" || orientation === "horizontal" && cols && cols > 1) {
    return key === ESCAPE;
  }
  return doSwitch(orientation, vertical2, horizontal2);
}
function useListNavigation(context, props) {
  const {
    open,
    onOpenChange,
    elements,
    floatingId
  } = context;
  const {
    listRef,
    activeIndex,
    onNavigate: unstable_onNavigate = () => {
    },
    enabled = true,
    selectedIndex = null,
    allowEscape = false,
    loop = false,
    nested = false,
    rtl = false,
    virtual: virtual2 = false,
    focusItemOnOpen = "auto",
    focusItemOnHover = true,
    openOnArrowKeyDown = true,
    disabledIndices = void 0,
    orientation = "vertical",
    parentOrientation,
    cols = 1,
    scrollItemIntoView = true,
    virtualItemRef,
    itemSizes,
    dense = false
  } = props;
  if (true) {
    if (allowEscape) {
      if (!loop) {
        warn("`useListNavigation` looping must be enabled to allow escaping.");
      }
      if (!virtual2) {
        warn("`useListNavigation` must be virtual to allow escaping.");
      }
    }
    if (orientation === "vertical" && cols > 1) {
      warn("In grid list navigation mode (`cols` > 1), the `orientation` should", 'be either "horizontal" or "both".');
    }
  }
  const floatingFocusElement = getFloatingFocusElement(elements.floating);
  const floatingFocusElementRef = useLatestRef(floatingFocusElement);
  const parentId = useFloatingParentNodeId();
  const tree = useFloatingTree();
  index(() => {
    context.dataRef.current.orientation = orientation;
  }, [context, orientation]);
  const onNavigate = useEffectEvent(() => {
    unstable_onNavigate(indexRef.current === -1 ? null : indexRef.current);
  });
  const typeableComboboxReference = isTypeableCombobox(elements.domReference);
  const focusItemOnOpenRef = React18.useRef(focusItemOnOpen);
  const indexRef = React18.useRef(selectedIndex != null ? selectedIndex : -1);
  const keyRef = React18.useRef(null);
  const isPointerModalityRef = React18.useRef(true);
  const previousOnNavigateRef = React18.useRef(onNavigate);
  const previousMountedRef = React18.useRef(!!elements.floating);
  const previousOpenRef = React18.useRef(open);
  const forceSyncFocusRef = React18.useRef(false);
  const forceScrollIntoViewRef = React18.useRef(false);
  const disabledIndicesRef = useLatestRef(disabledIndices);
  const latestOpenRef = useLatestRef(open);
  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);
  const selectedIndexRef = useLatestRef(selectedIndex);
  const [activeId, setActiveId] = React18.useState();
  const [virtualId, setVirtualId] = React18.useState();
  const focusItem = useEffectEvent(() => {
    function runFocus(item2) {
      if (virtual2) {
        var _item$id;
        if ((_item$id = item2.id) != null && _item$id.endsWith("-fui-option")) {
          item2.id = floatingId + "-" + Math.random().toString(16).slice(2, 10);
        }
        setActiveId(item2.id);
        tree == null || tree.events.emit("virtualfocus", item2);
        if (virtualItemRef) {
          virtualItemRef.current = item2;
        }
      } else {
        enqueueFocus(item2, {
          sync: forceSyncFocusRef.current,
          preventScroll: true
        });
      }
    }
    const initialItem = listRef.current[indexRef.current];
    const forceScrollIntoView = forceScrollIntoViewRef.current;
    if (initialItem) {
      runFocus(initialItem);
    }
    const scheduler = forceSyncFocusRef.current ? (v) => v() : requestAnimationFrame;
    scheduler(() => {
      const waitedItem = listRef.current[indexRef.current] || initialItem;
      if (!waitedItem) return;
      if (!initialItem) {
        runFocus(waitedItem);
      }
      const scrollIntoViewOptions = scrollItemIntoViewRef.current;
      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);
      if (shouldScrollIntoView) {
        waitedItem.scrollIntoView == null || waitedItem.scrollIntoView(typeof scrollIntoViewOptions === "boolean" ? {
          block: "nearest",
          inline: "nearest"
        } : scrollIntoViewOptions);
      }
    });
  });
  index(() => {
    if (!enabled) return;
    if (open && elements.floating) {
      if (focusItemOnOpenRef.current && selectedIndex != null) {
        forceScrollIntoViewRef.current = true;
        indexRef.current = selectedIndex;
        onNavigate();
      }
    } else if (previousMountedRef.current) {
      indexRef.current = -1;
      previousOnNavigateRef.current();
    }
  }, [enabled, open, elements.floating, selectedIndex, onNavigate]);
  index(() => {
    if (!enabled) return;
    if (!open) return;
    if (!elements.floating) return;
    if (activeIndex == null) {
      forceSyncFocusRef.current = false;
      if (selectedIndexRef.current != null) {
        return;
      }
      if (previousMountedRef.current) {
        indexRef.current = -1;
        focusItem();
      }
      if ((!previousOpenRef.current || !previousMountedRef.current) && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
        let runs = 0;
        const waitForListPopulated = () => {
          if (listRef.current[0] == null) {
            if (runs < 2) {
              const scheduler = runs ? requestAnimationFrame : queueMicrotask;
              scheduler(waitForListPopulated);
            }
            runs++;
          } else {
            indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinListIndex(listRef, disabledIndicesRef.current) : getMaxListIndex(listRef, disabledIndicesRef.current);
            keyRef.current = null;
            onNavigate();
          }
        };
        waitForListPopulated();
      }
    } else if (!isIndexOutOfListBounds(listRef, activeIndex)) {
      indexRef.current = activeIndex;
      focusItem();
      forceScrollIntoViewRef.current = false;
    }
  }, [enabled, open, elements.floating, activeIndex, selectedIndexRef, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);
  index(() => {
    var _nodes$find;
    if (!enabled || elements.floating || !tree || virtual2 || !previousMountedRef.current) {
      return;
    }
    const nodes = tree.nodesRef.current;
    const parent = (_nodes$find = nodes.find((node) => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;
    const activeEl = activeElement(getDocument(elements.floating));
    const treeContainsActiveEl = nodes.some((node) => node.context && contains(node.context.elements.floating, activeEl));
    if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {
      parent.focus({
        preventScroll: true
      });
    }
  }, [enabled, elements.floating, tree, parentId, virtual2]);
  index(() => {
    if (!enabled) return;
    if (!tree) return;
    if (!virtual2) return;
    if (parentId) return;
    function handleVirtualFocus(item2) {
      setVirtualId(item2.id);
      if (virtualItemRef) {
        virtualItemRef.current = item2;
      }
    }
    tree.events.on("virtualfocus", handleVirtualFocus);
    return () => {
      tree.events.off("virtualfocus", handleVirtualFocus);
    };
  }, [enabled, tree, virtual2, parentId, virtualItemRef]);
  index(() => {
    previousOnNavigateRef.current = onNavigate;
    previousOpenRef.current = open;
    previousMountedRef.current = !!elements.floating;
  });
  index(() => {
    if (!open) {
      keyRef.current = null;
      focusItemOnOpenRef.current = focusItemOnOpen;
    }
  }, [open, focusItemOnOpen]);
  const hasActiveIndex = activeIndex != null;
  const item = React18.useMemo(() => {
    function syncCurrentTarget(currentTarget) {
      if (!latestOpenRef.current) return;
      const index3 = listRef.current.indexOf(currentTarget);
      if (index3 !== -1 && indexRef.current !== index3) {
        indexRef.current = index3;
        onNavigate();
      }
    }
    const props2 = {
      onFocus(_ref) {
        let {
          currentTarget
        } = _ref;
        forceSyncFocusRef.current = true;
        syncCurrentTarget(currentTarget);
      },
      onClick: (_ref2) => {
        let {
          currentTarget
        } = _ref2;
        return currentTarget.focus({
          preventScroll: true
        });
      },
      // Safari
      ...focusItemOnHover && {
        onMouseMove(_ref3) {
          let {
            currentTarget
          } = _ref3;
          forceSyncFocusRef.current = true;
          forceScrollIntoViewRef.current = false;
          syncCurrentTarget(currentTarget);
        },
        onPointerLeave(_ref4) {
          let {
            pointerType
          } = _ref4;
          if (!isPointerModalityRef.current || pointerType === "touch") {
            return;
          }
          forceSyncFocusRef.current = true;
          indexRef.current = -1;
          onNavigate();
          if (!virtual2) {
            var _floatingFocusElement;
            (_floatingFocusElement = floatingFocusElementRef.current) == null || _floatingFocusElement.focus({
              preventScroll: true
            });
          }
        }
      }
    };
    return props2;
  }, [latestOpenRef, floatingFocusElementRef, focusItemOnHover, listRef, onNavigate, virtual2]);
  const getParentOrientation = React18.useCallback(() => {
    var _tree$nodesRef$curren;
    return parentOrientation != null ? parentOrientation : tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.dataRef) == null ? void 0 : _tree$nodesRef$curren.current.orientation;
  }, [parentId, tree, parentOrientation]);
  const commonOnKeyDown = useEffectEvent((event) => {
    isPointerModalityRef.current = false;
    forceSyncFocusRef.current = true;
    if (event.which === 229) {
      return;
    }
    if (!latestOpenRef.current && event.currentTarget === floatingFocusElementRef.current) {
      return;
    }
    if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl, cols)) {
      if (!isMainOrientationKey(event.key, getParentOrientation())) {
        stopEvent(event);
      }
      onOpenChange(false, event.nativeEvent, "list-navigation");
      if (isHTMLElement(elements.domReference)) {
        if (virtual2) {
          tree == null || tree.events.emit("virtualfocus", elements.domReference);
        } else {
          elements.domReference.focus();
        }
      }
      return;
    }
    const currentIndex = indexRef.current;
    const minIndex = getMinListIndex(listRef, disabledIndices);
    const maxIndex = getMaxListIndex(listRef, disabledIndices);
    if (!typeableComboboxReference) {
      if (event.key === "Home") {
        stopEvent(event);
        indexRef.current = minIndex;
        onNavigate();
      }
      if (event.key === "End") {
        stopEvent(event);
        indexRef.current = maxIndex;
        onNavigate();
      }
    }
    if (cols > 1) {
      const sizes = itemSizes || Array.from({
        length: listRef.current.length
      }, () => ({
        width: 1,
        height: 1
      }));
      const cellMap = createGridCellMap(sizes, cols, dense);
      const minGridIndex = cellMap.findIndex((index4) => index4 != null && !isListIndexDisabled(listRef, index4, disabledIndices));
      const maxGridIndex = cellMap.reduce((foundIndex, index4, cellIndex) => index4 != null && !isListIndexDisabled(listRef, index4, disabledIndices) ? cellIndex : foundIndex, -1);
      const index3 = cellMap[getGridNavigatedIndex({
        current: cellMap.map((itemIndex) => itemIndex != null ? listRef.current[itemIndex] : null)
      }, {
        event,
        orientation,
        loop,
        rtl,
        cols,
        // treat undefined (empty grid spaces) as disabled indices so we
        // don't end up in them
        disabledIndices: getGridCellIndices([...(typeof disabledIndices !== "function" ? disabledIndices : null) || listRef.current.map((_, index4) => isListIndexDisabled(listRef, index4, disabledIndices) ? index4 : void 0), void 0], cellMap),
        minIndex: minGridIndex,
        maxIndex: maxGridIndex,
        prevIndex: getGridCellIndexOfCorner(
          indexRef.current > maxIndex ? minIndex : indexRef.current,
          sizes,
          cellMap,
          cols,
          // use a corner matching the edge closest to the direction
          // we're moving in so we don't end up in the same item. Prefer
          // top/left over bottom/right.
          event.key === ARROW_DOWN2 ? "bl" : event.key === (rtl ? ARROW_LEFT2 : ARROW_RIGHT2) ? "tr" : "tl"
        ),
        stopEvent: true
      })];
      if (index3 != null) {
        indexRef.current = index3;
        onNavigate();
      }
      if (orientation === "both") {
        return;
      }
    }
    if (isMainOrientationKey(event.key, orientation)) {
      stopEvent(event);
      if (open && !virtual2 && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {
        indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
        onNavigate();
        return;
      }
      if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
        if (loop) {
          indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledListIndex(listRef, {
            startingIndex: currentIndex,
            disabledIndices
          });
        } else {
          indexRef.current = Math.min(maxIndex, findNonDisabledListIndex(listRef, {
            startingIndex: currentIndex,
            disabledIndices
          }));
        }
      } else {
        if (loop) {
          indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledListIndex(listRef, {
            startingIndex: currentIndex,
            decrement: true,
            disabledIndices
          });
        } else {
          indexRef.current = Math.max(minIndex, findNonDisabledListIndex(listRef, {
            startingIndex: currentIndex,
            decrement: true,
            disabledIndices
          }));
        }
      }
      if (isIndexOutOfListBounds(listRef, indexRef.current)) {
        indexRef.current = -1;
      }
      onNavigate();
    }
  });
  const ariaActiveDescendantProp = React18.useMemo(() => {
    return virtual2 && open && hasActiveIndex && {
      "aria-activedescendant": virtualId || activeId
    };
  }, [virtual2, open, hasActiveIndex, virtualId, activeId]);
  const floating = React18.useMemo(() => {
    return {
      "aria-orientation": orientation === "both" ? void 0 : orientation,
      ...!typeableComboboxReference ? ariaActiveDescendantProp : {},
      onKeyDown: commonOnKeyDown,
      onPointerMove() {
        isPointerModalityRef.current = true;
      }
    };
  }, [ariaActiveDescendantProp, commonOnKeyDown, orientation, typeableComboboxReference]);
  const reference = React18.useMemo(() => {
    function checkVirtualMouse(event) {
      if (focusItemOnOpen === "auto" && isVirtualClick(event.nativeEvent)) {
        focusItemOnOpenRef.current = true;
      }
    }
    function checkVirtualPointer(event) {
      focusItemOnOpenRef.current = focusItemOnOpen;
      if (focusItemOnOpen === "auto" && isVirtualPointerEvent(event.nativeEvent)) {
        focusItemOnOpenRef.current = true;
      }
    }
    return {
      ...ariaActiveDescendantProp,
      onKeyDown(event) {
        isPointerModalityRef.current = false;
        const isArrowKey = event.key.startsWith("Arrow");
        const isHomeOrEndKey = ["Home", "End"].includes(event.key);
        const isMoveKey = isArrowKey || isHomeOrEndKey;
        const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);
        const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl, cols);
        const isParentCrossOpenKey = isCrossOrientationOpenKey(event.key, getParentOrientation(), rtl);
        const isMainKey = isMainOrientationKey(event.key, orientation);
        const isNavigationKey = (nested ? isParentCrossOpenKey : isMainKey) || event.key === "Enter" || event.key.trim() === "";
        if (virtual2 && open) {
          const rootNode = tree == null ? void 0 : tree.nodesRef.current.find((node) => node.parentId == null);
          const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;
          if (isMoveKey && deepestNode && virtualItemRef) {
            const eventObject = new KeyboardEvent("keydown", {
              key: event.key,
              bubbles: true
            });
            if (isCrossOpenKey || isCrossCloseKey) {
              var _deepestNode$context, _deepestNode$context2;
              const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;
              const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? listRef.current.find((item2) => (item2 == null ? void 0 : item2.id) === activeId) : null;
              if (dispatchItem) {
                stopEvent(event);
                dispatchItem.dispatchEvent(eventObject);
                setVirtualId(void 0);
              }
            }
            if ((isMainKey || isHomeOrEndKey) && deepestNode.context) {
              if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {
                var _deepestNode$context$;
                stopEvent(event);
                (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);
                return;
              }
            }
          }
          return commonOnKeyDown(event);
        }
        if (!open && !openOnArrowKeyDown && isArrowKey) {
          return;
        }
        if (isNavigationKey) {
          const isParentMainKey = isMainOrientationKey(event.key, getParentOrientation());
          keyRef.current = nested && isParentMainKey ? null : event.key;
        }
        if (nested) {
          if (isParentCrossOpenKey) {
            stopEvent(event);
            if (open) {
              indexRef.current = getMinListIndex(listRef, disabledIndicesRef.current);
              onNavigate();
            } else {
              onOpenChange(true, event.nativeEvent, "list-navigation");
            }
          }
          return;
        }
        if (isMainKey) {
          if (selectedIndex != null) {
            indexRef.current = selectedIndex;
          }
          stopEvent(event);
          if (!open && openOnArrowKeyDown) {
            onOpenChange(true, event.nativeEvent, "list-navigation");
          } else {
            commonOnKeyDown(event);
          }
          if (open) {
            onNavigate();
          }
        }
      },
      onFocus() {
        if (open && !virtual2) {
          indexRef.current = -1;
          onNavigate();
        }
      },
      onPointerDown: checkVirtualPointer,
      onPointerEnter: checkVirtualPointer,
      onMouseDown: checkVirtualMouse,
      onClick: checkVirtualMouse
    };
  }, [activeId, ariaActiveDescendantProp, cols, commonOnKeyDown, disabledIndicesRef, focusItemOnOpen, listRef, nested, onNavigate, onOpenChange, open, openOnArrowKeyDown, orientation, getParentOrientation, rtl, selectedIndex, tree, virtual2, virtualItemRef]);
  return React18.useMemo(() => enabled ? {
    reference,
    floating,
    item
  } : {}, [enabled, reference, floating, item]);
}
var componentRoleToAriaRoleMap = /* @__PURE__ */ new Map([["select", "listbox"], ["combobox", "listbox"], ["label", false]]);
function useRole(context, props) {
  var _elements$domReferenc, _componentRoleToAriaR;
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    elements,
    floatingId: defaultFloatingId
  } = context;
  const {
    enabled = true,
    role = "dialog"
  } = props;
  const defaultReferenceId = useId();
  const referenceId = ((_elements$domReferenc = elements.domReference) == null ? void 0 : _elements$domReferenc.id) || defaultReferenceId;
  const floatingId = React18.useMemo(() => {
    var _getFloatingFocusElem;
    return ((_getFloatingFocusElem = getFloatingFocusElement(elements.floating)) == null ? void 0 : _getFloatingFocusElem.id) || defaultFloatingId;
  }, [elements.floating, defaultFloatingId]);
  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;
  const parentId = useFloatingParentNodeId();
  const isNested = parentId != null;
  const reference = React18.useMemo(() => {
    if (ariaRole === "tooltip" || role === "label") {
      return {
        ["aria-" + (role === "label" ? "labelledby" : "describedby")]: open ? floatingId : void 0
      };
    }
    return {
      "aria-expanded": open ? "true" : "false",
      "aria-haspopup": ariaRole === "alertdialog" ? "dialog" : ariaRole,
      "aria-controls": open ? floatingId : void 0,
      ...ariaRole === "listbox" && {
        role: "combobox"
      },
      ...ariaRole === "menu" && {
        id: referenceId
      },
      ...ariaRole === "menu" && isNested && {
        role: "menuitem"
      },
      ...role === "select" && {
        "aria-autocomplete": "none"
      },
      ...role === "combobox" && {
        "aria-autocomplete": "list"
      }
    };
  }, [ariaRole, floatingId, isNested, open, referenceId, role]);
  const floating = React18.useMemo(() => {
    const floatingProps = {
      id: floatingId,
      ...ariaRole && {
        role: ariaRole
      }
    };
    if (ariaRole === "tooltip" || role === "label") {
      return floatingProps;
    }
    return {
      ...floatingProps,
      ...ariaRole === "menu" && {
        "aria-labelledby": referenceId
      }
    };
  }, [ariaRole, floatingId, referenceId, role]);
  const item = React18.useCallback((_ref) => {
    let {
      active,
      selected
    } = _ref;
    const commonProps = {
      role: "option",
      ...active && {
        id: floatingId + "-fui-option"
      }
    };
    switch (role) {
      case "select":
        return {
          ...commonProps,
          "aria-selected": active && selected
        };
      case "combobox": {
        return {
          ...commonProps,
          "aria-selected": selected
        };
      }
    }
    return {};
  }, [floatingId, role]);
  return React18.useMemo(() => enabled ? {
    reference,
    floating,
    item
  } : {}, [enabled, reference, floating, item]);
}
function useDelayUnmount(open, durationMs) {
  const [isMounted, setIsMounted] = React18.useState(open);
  if (open && !isMounted) {
    setIsMounted(true);
  }
  React18.useEffect(() => {
    if (!open && isMounted) {
      const timeout2 = setTimeout(() => setIsMounted(false), durationMs);
      return () => clearTimeout(timeout2);
    }
  }, [open, isMounted, durationMs]);
  return isMounted;
}
function useTransitionStatus(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    elements: {
      floating
    }
  } = context;
  const {
    duration = 250
  } = props;
  const isNumberDuration = typeof duration === "number";
  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
  const [status, setStatus] = React18.useState("unmounted");
  const isMounted = useDelayUnmount(open, closeDuration);
  if (!isMounted && status === "close") {
    setStatus("unmounted");
  }
  index(() => {
    if (!floating) return;
    if (open) {
      setStatus("initial");
      const frame = requestAnimationFrame(() => {
        ReactDOM2.flushSync(() => {
          setStatus("open");
        });
      });
      return () => {
        cancelAnimationFrame(frame);
      };
    }
    setStatus("close");
  }, [open, floating]);
  return {
    isMounted,
    status
  };
}
function getNodeChildren2(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n) => {
        var _node$context2;
        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function isPointInPolygon(point, polygon) {
  const [x, y] = point;
  let isInside2 = false;
  const length = polygon.length;
  for (let i = 0, j = length - 1; i < length; j = i++) {
    const [xi, yi] = polygon[i] || [0, 0];
    const [xj, yj] = polygon[j] || [0, 0];
    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside2 = !isInside2;
    }
  }
  return isInside2;
}
function isInside(point, rect) {
  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    buffer = 0.5,
    blockPointerEvents = false,
    requireIntent = true
  } = options;
  const timeoutRef = {
    current: -1
  };
  let hasLanded = false;
  let lastX = null;
  let lastY = null;
  let lastCursorTime = performance.now();
  function getCursorSpeed(x, y) {
    const currentTime = performance.now();
    const elapsedTime = currentTime - lastCursorTime;
    if (lastX === null || lastY === null || elapsedTime === 0) {
      lastX = x;
      lastY = y;
      lastCursorTime = currentTime;
      return null;
    }
    const deltaX = x - lastX;
    const deltaY = y - lastY;
    const distance3 = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const speed = distance3 / elapsedTime;
    lastX = x;
    lastY = y;
    lastCursorTime = currentTime;
    return speed;
  }
  const fn = (_ref) => {
    let {
      x,
      y,
      placement,
      elements,
      onClose,
      nodeId,
      tree
    } = _ref;
    return function onMouseMove(event) {
      function close() {
        clearTimeoutIfSet(timeoutRef);
        onClose();
      }
      clearTimeoutIfSet(timeoutRef);
      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
        return;
      }
      const {
        clientX,
        clientY
      } = event;
      const clientPoint = [clientX, clientY];
      const target = getTarget2(event);
      const isLeave = event.type === "mouseleave";
      const isOverFloatingEl = contains2(elements.floating, target);
      const isOverReferenceEl = contains2(elements.domReference, target);
      const refRect = elements.domReference.getBoundingClientRect();
      const rect = elements.floating.getBoundingClientRect();
      const side = placement.split("-")[0];
      const cursorLeaveFromRight = x > rect.right - rect.width / 2;
      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
      const isOverReferenceRect = isInside(clientPoint, refRect);
      const isFloatingWider = rect.width > refRect.width;
      const isFloatingTaller = rect.height > refRect.height;
      const left = (isFloatingWider ? refRect : rect).left;
      const right = (isFloatingWider ? refRect : rect).right;
      const top = (isFloatingTaller ? refRect : rect).top;
      const bottom = (isFloatingTaller ? refRect : rect).bottom;
      if (isOverFloatingEl) {
        hasLanded = true;
        if (!isLeave) {
          return;
        }
      }
      if (isOverReferenceEl) {
        hasLanded = false;
      }
      if (isOverReferenceEl && !isLeave) {
        hasLanded = true;
        return;
      }
      if (isLeave && isElement(event.relatedTarget) && contains2(elements.floating, event.relatedTarget)) {
        return;
      }
      if (tree && getNodeChildren2(tree.nodesRef.current, nodeId).length) {
        return;
      }
      if (side === "top" && y >= refRect.bottom - 1 || side === "bottom" && y <= refRect.top + 1 || side === "left" && x >= refRect.right - 1 || side === "right" && x <= refRect.left + 1) {
        return close();
      }
      let rectPoly = [];
      switch (side) {
        case "top":
          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];
          break;
        case "bottom":
          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];
          break;
        case "left":
          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];
          break;
        case "right":
          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];
          break;
      }
      function getPolygon(_ref2) {
        let [x2, y2] = _ref2;
        switch (side) {
          case "top": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "bottom": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "left": {
            const cursorPointOne = [x2 + buffer + 1, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 + buffer + 1, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
            return [...commonPoints, cursorPointOne, cursorPointTwo];
          }
          case "right": {
            const cursorPointOne = [x2 - buffer, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 - buffer, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
        }
      }
      if (isPointInPolygon([clientX, clientY], rectPoly)) {
        return;
      }
      if (hasLanded && !isOverReferenceRect) {
        return close();
      }
      if (!isLeave && requireIntent) {
        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);
        const cursorSpeedThreshold = 0.1;
        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {
          return close();
        }
      }
      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {
        close();
      } else if (!hasLanded && requireIntent) {
        timeoutRef.current = window.setTimeout(close, 40);
      }
    };
  };
  fn.__options = {
    blockPointerEvents
  };
  return fn;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useActionHandlers/useActionHandlers.js
var React19 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/constants.js
var KeyCode = {
  BACKSPACE: "Backspace",
  ENTER: "Enter",
  TAB: "Tab",
  // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values#whitespace_keys
  SPACEBAR: " ",
  SPACEBAR_OLD: "Spacebar",
  ESCAPE: "Escape",
  ARROW_UP: "ArrowUp",
  ARROW_DOWN: "ArrowDown",
  ARROW_LEFT: "ArrowLeft",
  ARROW_RIGHT: "ArrowRight",
  SHIFT: "Shift",
  HOME: "Home",
  END: "End"
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useActionHandlers/useActionHandlers.js
function createOnKeyDownHandler(callback) {
  return (event) => {
    if (callback && [KeyCode.ENTER, KeyCode.SPACEBAR, KeyCode.SPACEBAR_OLD].includes(event.key)) {
      event.preventDefault();
      callback(event);
    }
  };
}
function useActionHandlers(callback) {
  const onKeyDown = React19.useMemo(() => createOnKeyDownHandler(callback), [callback]);
  return { onKeyDown };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useAsyncActionHandler/useAsyncActionHandler.js
var React20 = __toESM(require_react(), 1);
function useAsyncActionHandler({ handler }) {
  const [isLoading, setLoading] = React20.useState(false);
  const handleAction = React20.useCallback(async (...args) => {
    setLoading(true);
    try {
      return await handler(...args);
    } finally {
      setLoading(false);
    }
  }, [handler]);
  return {
    isLoading,
    handler: handleAction
  };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useControlledState/useControlledState.js
var React21 = __toESM(require_react(), 1);
function useControlledState(value, defaultValue, onUpdate) {
  const [innerValue, setInnerValue] = React21.useState(value ?? defaultValue);
  const isControlledRef = React21.useRef(value !== void 0);
  const isControlled = value !== void 0;
  React21.useEffect(() => {
    const wasControlled = isControlledRef.current;
    if (wasControlled !== isControlled) {
      console.error(`[useControlledState] A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
    }
    isControlledRef.current = isControlled;
  }, [isControlled]);
  let currentValue = isControlled ? value : innerValue;
  const setState = React21.useCallback(
    // We do not use setState callback syntax case because of a side effect
    // that we call `onUpdate` inside the callback function and onUpdate
    // in a controlling component frequently calls setState itself,
    // therefore we call `setState` while we're rendering a different component.
    (newValue, ...args) => {
      if (!Object.is(currentValue, newValue)) {
        onUpdate == null ? void 0 : onUpdate(newValue, ...args);
      }
      if (!isControlled) {
        currentValue = newValue;
        setInnerValue(newValue);
      }
    },
    [isControlled, onUpdate, currentValue]
  );
  return [currentValue, setState];
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFileInput/useFileInput.js
var React22 = __toESM(require_react(), 1);
function useFileInput({ onUpdate, onChange }) {
  const ref2 = React22.useRef(null);
  const handleChange = React22.useCallback((event) => {
    onChange == null ? void 0 : onChange(event);
    onUpdate == null ? void 0 : onUpdate(Array.from(event.target.files || []));
    event.target.value = "";
  }, [onChange, onUpdate]);
  const openDeviceStorage = React22.useCallback(() => {
    var _a;
    (_a = ref2.current) == null ? void 0 : _a.click();
  }, []);
  const result = React22.useMemo(() => ({
    controlProps: {
      ref: ref2,
      type: "file",
      tabIndex: -1,
      style: { opacity: 0, position: "absolute", width: 1, height: 1 },
      onChange: handleChange,
      "aria-hidden": true
    },
    triggerProps: {
      onClick: openDeviceStorage
    }
  }), [handleChange, openDeviceStorage]);
  return result;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/useFocusWithin.js
var React24 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/SyntheticFocusEvent.js
var SyntheticFocusEvent = class {
  constructor(type, nativeEvent, override = {}) {
    __publicField(this, "nativeEvent");
    __publicField(this, "target");
    __publicField(this, "currentTarget");
    __publicField(this, "relatedTarget");
    __publicField(this, "bubbles");
    __publicField(this, "cancelable");
    __publicField(this, "defaultPrevented");
    __publicField(this, "eventPhase");
    __publicField(this, "isTrusted");
    __publicField(this, "timeStamp");
    __publicField(this, "type");
    this.nativeEvent = nativeEvent;
    this.target = override.target ?? nativeEvent.target;
    this.currentTarget = override.currentTarget ?? nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {
  }
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/useSyntheticBlurEvent.js
var React23 = __toESM(require_react(), 1);
function useSyntheticBlurEvent(onBlur) {
  const stateRef = React23.useRef({
    isFocused: false,
    observer: null
  });
  React23.useEffect(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  const handleFocus = React23.useCallback((event) => {
    const target = event.target;
    if (target instanceof HTMLButtonElement || target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      const handleBlur = (e) => {
        stateRef.current.isFocused = false;
        if (target.disabled) {
          onBlur == null ? void 0 : onBlur(new SyntheticFocusEvent("blur", e));
        }
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", handleBlur, { once: true });
      const observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          observer.disconnect();
          stateRef.current.observer = null;
          const relatedTarget = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", { relatedTarget }));
          target.dispatchEvent(new FocusEvent("focusout", { relatedTarget, bubbles: true }));
        }
      });
      observer.observe(target, { attributes: true, attributeFilter: ["disabled"] });
      stateRef.current.observer = observer;
    }
  }, [onBlur]);
  return handleFocus;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/useFocusWithin.js
function useFocusWithin(props) {
  const { onFocusWithin, onBlurWithin, onFocusWithinChange, isDisabled } = props;
  const isFocusWithinRef = React24.useRef(false);
  const onFocus = React24.useCallback((event) => {
    if (!isFocusWithinRef.current && document.activeElement === event.target) {
      isFocusWithinRef.current = true;
      if (onFocusWithin) {
        onFocusWithin(event);
      }
      if (onFocusWithinChange) {
        onFocusWithinChange(true);
      }
    }
  }, [onFocusWithin, onFocusWithinChange]);
  const onBlur = React24.useCallback((event) => {
    if (!isFocusWithinRef.current) {
      return;
    }
    isFocusWithinRef.current = false;
    if (onBlurWithin) {
      onBlurWithin(event);
    }
    if (onFocusWithinChange) {
      onFocusWithinChange(false);
    }
  }, [onBlurWithin, onFocusWithinChange]);
  const { onBlur: onBlurHandler, onFocus: onFocusHandler } = useFocusEvents({
    onFocus,
    onBlur,
    isDisabled
  });
  if (isDisabled) {
    return {
      focusWithinProps: {
        onFocus: void 0,
        onBlur: void 0
      }
    };
  }
  return {
    focusWithinProps: {
      onFocus: onFocusHandler,
      onBlur: onBlurHandler
    }
  };
}
function useFocusEvents({ onFocus, onBlur, isDisabled }) {
  const capturedRef = React24.useRef(false);
  const targetRef = React24.useRef(null);
  React24.useEffect(() => {
    if (isDisabled) {
      return void 0;
    }
    const handleFocus = function() {
      capturedRef.current = false;
    };
    const handleFocusIn = function(event) {
      if (!capturedRef.current && targetRef.current) {
        const blurEvent = new FocusEvent("blur", {
          ...event,
          relatedTarget: event.target,
          bubbles: false,
          cancelable: false
        });
        onBlur(new SyntheticFocusEvent("blur", blurEvent, {
          target: targetRef.current,
          currentTarget: targetRef.current
        }));
        targetRef.current = null;
      }
    };
    window.addEventListener("focus", handleFocus, { capture: true });
    window.addEventListener("focusin", handleFocusIn);
    return () => {
      window.removeEventListener("focus", handleFocus, { capture: true });
      window.removeEventListener("focusin", handleFocusIn);
    };
  }, [isDisabled, onBlur]);
  const onBlurHandler = React24.useCallback((event) => {
    if (document.activeElement !== event.target && (event.relatedTarget === null || event.relatedTarget === document.body || event.relatedTarget === document)) {
      onBlur(event);
      targetRef.current = null;
    }
  }, [onBlur]);
  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);
  const onFocusHandler = React24.useCallback((event) => {
    capturedRef.current = true;
    targetRef.current = event.target;
    onSyntheticFocus(event);
    onFocus(event);
  }, [onSyntheticFocus, onFocus]);
  return { onBlur: onBlurHandler, onFocus: onFocusHandler };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useForkRef/useForkRef.js
var React25 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/useForkRef/setRef.js
function setRef(ref2, value) {
  if (typeof ref2 === "function") {
    ref2(value);
  } else if (ref2) {
    ref2.current = value;
  }
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useForkRef/mergeRefs.js
function mergeRefs(...refs) {
  return function mergedRefs(value) {
    for (const ref2 of refs) {
      setRef(ref2, value);
    }
  };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useForkRef/useForkRef.js
function useForkRef(...refs) {
  return React25.useMemo(() => {
    if (refs.every((ref2) => ref2 === null || ref2 === void 0)) {
      return null;
    }
    return mergeRefs(...refs);
  }, refs);
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useIntersection/useIntersection.js
var React26 = __toESM(require_react(), 1);
var useIntersection = ({ element, options, onIntersect }) => {
  React26.useEffect(() => {
    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting) {
        onIntersect == null ? void 0 : onIntersect();
      }
    }, options);
    if (element) {
      observer.observe(element);
    }
    return () => element === null ? void 0 : observer.unobserve(element);
  }, [element, options, onIntersect]);
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/useListNavigation.js
var React27 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/moveBack.js
function moveBack(items, activeItemIndex, steps = 1, skip) {
  const newActiveItemIndex = (items.length + activeItemIndex - steps % items.length) % items.length;
  if (skip && skip(items[newActiveItemIndex])) {
    return moveBack(items, newActiveItemIndex, 1, skip);
  }
  return newActiveItemIndex;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/moveForward.js
function moveForward(items, activeItemIndex, steps = 1, skip) {
  const newActiveItemIndex = (activeItemIndex + steps) % items.length;
  if (skip && skip(items[newActiveItemIndex])) {
    return moveForward(items, newActiveItemIndex, 1, skip);
  }
  return newActiveItemIndex;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/useListNavigation.js
function useListNavigation2({ items, skip, pageSize, processHomeKey = true, processEndKey = true, anchorRef, disabled = false, initialValue: initialValue2 = -1, onAnchorKeyDown }) {
  const [activeItemIndex, setActiveItemIndex] = React27.useState(initialValue2);
  const reset = React27.useCallback(() => {
    setActiveItemIndex(initialValue2);
  }, [initialValue2]);
  React27.useEffect(() => {
    if (items) {
      reset();
    }
  }, [items, reset]);
  React27.useLayoutEffect(() => {
    if (disabled) {
      return void 0;
    }
    const canNavigate = items.some((item) => !(skip == null ? void 0 : skip(item)));
    if (!canNavigate) {
      return void 0;
    }
    const anchor = anchorRef == null ? void 0 : anchorRef.current;
    if (!anchor) {
      return void 0;
    }
    const handleKeyDown = (event) => {
      const shouldProcessKeydown = onAnchorKeyDown == null ? void 0 : onAnchorKeyDown(activeItemIndex, event);
      if (shouldProcessKeydown === false) {
        return;
      }
      switch (event.key) {
        case "ArrowDown": {
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveForward(items, previousActiveItemIndex, 1, skip));
          break;
        }
        case "ArrowUp": {
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, 1, skip));
          break;
        }
        case "PageDown": {
          if (!pageSize) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveForward(items, previousActiveItemIndex, pageSize, skip));
          break;
        }
        case "PageUp": {
          if (!pageSize) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, pageSize, skip));
          break;
        }
        case "Home": {
          if (!processHomeKey) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, previousActiveItemIndex, skip));
          break;
        }
        case "End": {
          if (!processEndKey) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, previousActiveItemIndex + 1, skip));
          break;
        }
      }
    };
    anchor.addEventListener("keydown", handleKeyDown);
    return () => {
      anchor.removeEventListener("keydown", handleKeyDown);
    };
  }, [
    activeItemIndex,
    anchorRef,
    disabled,
    items,
    onAnchorKeyDown,
    pageSize,
    processEndKey,
    processHomeKey,
    skip
  ]);
  return {
    activeItemIndex,
    setActiveItemIndex,
    reset
  };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useOutsideClick/useOutsideClick.js
var React28 = __toESM(require_react(), 1);
var useOutsideClick = ({ ref: ref2, handler }) => {
  React28.useEffect(() => {
    const callback = (e) => {
      const elem = ref2 == null ? void 0 : ref2.current;
      if (elem && !elem.contains(e.target) && handler) {
        handler(e);
      }
    };
    window.addEventListener("mouseup", callback, { capture: true });
    window.addEventListener("touchend", callback, { capture: true });
    return () => {
      window.removeEventListener("mouseup", callback, { capture: true });
      window.removeEventListener("touchend", callback, { capture: true });
    };
  }, [handler, ref2]);
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/usePortalContainer/usePortalContainer.js
var React30 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/usePortalContainer/PortalProvider.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var React29 = __toESM(require_react(), 1);
var PortalContext2 = React29.createContext({ current: null });
PortalContext2.displayName = "PortalContext";
function PortalProvider({ container, children: children2 }) {
  return (0, import_jsx_runtime10.jsx)(PortalContext2.Provider, { value: container, children: children2 });
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/usePortalContainer/usePortalContainer.js
function usePortalContainer() {
  const context = React30.useContext(PortalContext2);
  let defaultContainer = null;
  if (typeof window === "object") {
    defaultContainer = window.document.body;
  }
  return context.current ?? defaultContainer;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useResizeObserver/useResizeObserver.js
var React31 = __toESM(require_react(), 1);
function useResizeObserver({ ref: ref2, onResize, box }) {
  React31.useEffect(() => {
    const element = ref2 == null ? void 0 : ref2.current;
    if (!element) {
      return void 0;
    }
    if (typeof window.ResizeObserver === "undefined") {
      const handleResize = () => {
        onResize({});
      };
      window.addEventListener("resize", handleResize, false);
      return () => {
        window.removeEventListener("resize", handleResize, false);
      };
    }
    const observer = new ResizeObserver((entries) => {
      if (!entries.length) {
        return;
      }
      onResize({ observer });
    });
    observer.observe(element, { box });
    return () => {
      observer.disconnect();
    };
  }, [ref2, onResize, box]);
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useSelect/useSelect.js
var React33 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/useSelect/useOpenState.js
var React32 = __toESM(require_react(), 1);
var useOpenState = (props) => {
  const { onOpenChange, onClose } = props;
  const handleOpenChange = React32.useCallback((newOpen) => {
    onOpenChange == null ? void 0 : onOpenChange(newOpen);
    if (newOpen === false && onClose) {
      onClose();
    }
  }, [onOpenChange, onClose]);
  const [open, setOpenState] = useControlledState(props.open, props.defaultOpen ?? false, handleOpenChange);
  const toggleOpen = React32.useCallback((val) => {
    const newOpen = typeof val === "boolean" ? val : !open;
    setOpenState(newOpen);
  }, [open, setOpenState]);
  return {
    open,
    toggleOpen
  };
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useSelect/useSelect.js
var useSelect = ({ defaultOpen, onClose, onOpenChange, open, value: valueProps, defaultValue = [], multiple, onUpdate, disabled }) => {
  const [value, setValueInner] = useControlledState(valueProps, defaultValue, onUpdate);
  const [activeIndex, setActiveIndex] = React33.useState();
  const { toggleOpen, ...openState } = useOpenState({
    defaultOpen,
    onClose,
    onOpenChange,
    open
  });
  const setValue = React33.useCallback((v) => {
    if (!disabled) {
      setValueInner(v);
    }
  }, [setValueInner, disabled]);
  const handleSingleSelection = React33.useCallback((option) => {
    if (!value.includes(option.value)) {
      const nextValue = [option.value];
      setValue(nextValue);
    }
    toggleOpen(false);
  }, [value, setValue, toggleOpen]);
  const handleMultipleSelection = React33.useCallback((option) => {
    const alreadySelected = value.includes(option.value);
    const nextValue = alreadySelected ? value.filter((iteratedVal) => iteratedVal !== option.value) : [...value, option.value];
    setValue(nextValue);
  }, [value, setValue]);
  const handleSelection = React33.useCallback((option) => {
    if (multiple) {
      handleMultipleSelection(option);
    } else {
      handleSingleSelection(option);
    }
  }, [multiple, handleSingleSelection, handleMultipleSelection]);
  const handleClearValue = React33.useCallback(() => {
    setValue([]);
  }, [setValue]);
  return {
    value,
    activeIndex,
    setValue,
    handleSelection,
    handleClearValue,
    toggleOpen,
    setActiveIndex,
    ...openState
  };
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useTimeout/useTimeout.js
var React34 = __toESM(require_react(), 1);
function useTimeout(callback, ms) {
  React34.useEffect(() => {
    if (typeof ms !== "number") {
      return void 0;
    }
    const timer = setTimeout(() => {
      callback();
    }, ms);
    return () => {
      clearTimeout(timer);
    };
  }, [callback, ms]);
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useViewportSize/useViewportSize.js
var React35 = __toESM(require_react(), 1);
var getViewportSize = () => {
  var _a, _b;
  return {
    width: ((_a = window == null ? void 0 : window.visualViewport) == null ? void 0 : _a.width) ?? (window == null ? void 0 : window.innerWidth) ?? void 0,
    height: ((_b = window == null ? void 0 : window.visualViewport) == null ? void 0 : _b.height) ?? (window == null ? void 0 : window.innerHeight) ?? void 0
  };
};
var useViewportSize = () => {
  const [size5, setSize] = React35.useState(getViewportSize());
  React35.useEffect(() => {
    const onResize = () => {
      let newSize = getViewportSize();
      if (newSize.width === (size5 == null ? void 0 : size5.width) && newSize.height === (size5 == null ? void 0 : size5.height)) {
        newSize = size5;
      }
      setSize(newSize);
    };
    (window.visualViewport ?? window).addEventListener("resize", onResize);
    return () => {
      (window.visualViewport ?? window).removeEventListener("resize", onResize);
    };
  }, [size5]);
  return size5;
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useVirtualElementRef/useVirtualElementRef.js
var React36 = __toESM(require_react(), 1);
var initialPosition = { top: 0, right: 0, bottom: 0, left: 0 };
function useVirtualElementRef(props = {}) {
  const { rect, contextElement } = props;
  const rectRef = React36.useRef(initialPosition);
  const ref2 = React36.useRef({
    contextElement,
    getBoundingClientRect() {
      const { top, right, bottom, left } = rectRef.current;
      const width = right - left;
      const height = bottom - top;
      return {
        top,
        right,
        bottom,
        left,
        width,
        height
      };
    }
  });
  ref2.current.contextElement = contextElement;
  if (rect) {
    const { top = 0, left = 0, right = left, bottom = top } = rect;
    rectRef.current = { top, right, bottom, left };
  } else {
    rectRef.current = initialPosition;
  }
  return ref2;
}
function useVirtualElement(rect) {
  const rectRef = React36.useRef(rect);
  const [anchor, setAnchor] = React36.useState({
    getBoundingClientRect() {
      const { top: top2 = 0, left: left2 = 0, right: right2 = left2, bottom: bottom2 = top2 } = rectRef.current;
      return { top: top2, left: left2, bottom: bottom2, right: right2, width: right2 - left2, height: bottom2 - top2 };
    },
    contextElement: void 0
  });
  const setContextElement = React36.useCallback((node) => {
    setAnchor({
      getBoundingClientRect() {
        const { top: top2 = 0, left: left2 = 0, right: right2 = left2, bottom: bottom2 = top2 } = rectRef.current;
        return {
          top: top2,
          left: left2,
          bottom: bottom2,
          right: right2,
          width: right2 - left2,
          height: bottom2 - top2
        };
      },
      contextElement: node ?? void 0
    });
  }, []);
  const { top, left, bottom, right } = rect;
  React36.useEffect(() => {
    rectRef.current = { top, left, bottom, right };
  }, [top, left, bottom, right]);
  return { anchor, setContextElement };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useUniqId/useUniqId.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Icon/Icon.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var React37 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/svg.js
var a11yHiddenSvgProps = {
  // Hides element from a11y tree
  "aria-hidden": true
};

// node_modules/@gravity-ui/uikit/build/esm/components/Icon/utils.js
function isSpriteData(data) {
  return typeof data === "object";
}
function isSvgrData(data) {
  return typeof data === "function" && (!data.prototype || !data.prototype.render);
}
function isComponentSvgData(data) {
  return (typeof data === "object" || typeof data === "function") && "defaultProps" in data;
}
function isStringSvgData(data) {
  return typeof data === "string";
}
function prepareStringData(data) {
  return data.replace(/<svg[^>]*>/, (match2) => {
    return match2.replace(/(width|height)=(["']?)\d+\2/g, "").replace(/(\s){2,}\b/g, "$1").replace(/(\s)+>/g, ">");
  });
}
function getStringViewBox(data) {
  const match2 = data.match(/viewBox=(["']?)([\d\s,-]+)\1/);
  return match2 ? match2[2] : void 0;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Icon/Icon.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Icon/Icon.css";
var b5 = block("icon");
var Icon = React37.forwardRef(({ data, width, height, size: size5, className, fill = "currentColor", stroke = "none", qa }, ref2) => {
  let w, h;
  if (size5) {
    w = size5;
    h = size5;
  }
  if (width) {
    w = width;
  }
  if (height) {
    h = height;
  }
  let viewBox;
  if (isSpriteData(data)) {
    ({ viewBox } = data);
  } else if (isStringSvgData(data)) {
    viewBox = getStringViewBox(data);
  } else if (isComponentSvgData(data)) {
    ({ viewBox } = data.defaultProps);
  } else if (isSvgrData(data)) {
    const el = data({});
    if (el) {
      ({ viewBox } = el.props);
    }
  }
  if (viewBox && (!w || !h)) {
    const values3 = viewBox.split(/\s+|\s*,\s*/);
    if (!w) {
      w = values3[2];
    }
    if (!h) {
      h = values3[3];
    }
  }
  const props = {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: w,
    height: h,
    className: b5(null, className),
    fill,
    stroke,
    "data-qa": qa,
    ...a11yHiddenSvgProps
  };
  if (isStringSvgData(data)) {
    const preparedData = prepareStringData(data);
    return (0, import_jsx_runtime11.jsx)("svg", { ...props, ref: ref2, dangerouslySetInnerHTML: { __html: preparedData } });
  }
  if (isSpriteData(data)) {
    const href = Icon.prefix + (data.url || `#${data.id}`);
    return (0, import_jsx_runtime11.jsx)("svg", { ...props, viewBox, ref: ref2, children: (0, import_jsx_runtime11.jsx)("use", { href, xlinkHref: href }) });
  }
  const IconComponent = data;
  if (IconComponent.defaultProps) {
    IconComponent.defaultProps.width = IconComponent.defaultProps.height = void 0;
  }
  return (0, import_jsx_runtime11.jsx)("svg", { ...props, ref: ref2, children: (0, import_jsx_runtime11.jsx)(IconComponent, { width: void 0, height: void 0 }) });
});
Icon.displayName = "Icon";
Icon.prefix = "";

// node_modules/@gravity-ui/uikit/build/esm/components/utils/isOfType.js
var React38 = __toESM(require_react(), 1);
function isOfType(Component13) {
  return function isMatching(component) {
    if (!React38.isValidElement(component)) {
      return false;
    }
    const { type } = component;
    if (type === Component13) {
      return true;
    }
    if (typeof Component13 === "string" || typeof type === "string") {
      return false;
    }
    const displayName = type.displayName;
    return Boolean(displayName && displayName === Component13.displayName);
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/common.js
var nextUniqueId = 1;
function getUniqId() {
  return `${NAMESPACE}uniq-${nextUniqueId++}`;
}
var isSvg = isOfType("svg");
var isIcon = isOfType(Icon);

// node_modules/@gravity-ui/uikit/build/esm/hooks/useUniqId/useUniqId.js
function useUniqIdFallback() {
  const idRef = import_react3.default.useRef();
  if (idRef.current === void 0) {
    idRef.current = getUniqId();
  }
  return idRef.current;
}
function useIdNative() {
  return `${NAMESPACE}${import_react3.default.useId()}`;
}
var useUniqId = typeof import_react3.default.useId === "function" ? useIdNative : useUniqIdFallback;

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/constants.js
var AUTO_PLACEMENTS = ["auto", "auto-start", "auto-end"];
var ARROW_SIZE = 8;
var OVERFLOW_PADDING = 4;
var TRANSITION_DURATION = 100;

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/utils.js
function getOffsetOptions(offsetProp, hasArrow) {
  let offset6 = offsetProp;
  if (hasArrow) {
    if (typeof offset6 === "number") {
      offset6 += ARROW_SIZE;
    } else {
      offset6 = { ...offset6, mainAxis: (offset6.mainAxis ?? 0) + ARROW_SIZE };
    }
  }
  return { offset: offset6 };
}
function isAutoPlacement(placement) {
  return Boolean(placement && AUTO_PLACEMENTS.includes(placement));
}
function getPlacementOptions(placementProp, disablePortal) {
  let placement;
  let middleware;
  if (Array.isArray(placementProp)) {
    placement = placementProp[0];
    middleware = flip3({
      padding: OVERFLOW_PADDING,
      altBoundary: disablePortal,
      fallbackPlacements: placementProp.slice(1)
    });
  } else if (isAutoPlacement(placementProp)) {
    let alignment;
    if (placementProp === "auto-start") {
      alignment = "start";
    } else if (placementProp === "auto-end") {
      alignment = "end";
    }
    placement = void 0;
    middleware = autoPlacement3({
      padding: OVERFLOW_PADDING,
      altBoundary: disablePortal,
      alignment
    });
  } else {
    let fallbackAxisSideDirection;
    if ((placementProp == null ? void 0 : placementProp.startsWith("top")) || (placementProp == null ? void 0 : placementProp.startsWith("left"))) {
      fallbackAxisSideDirection = "start";
    } else {
      fallbackAxisSideDirection = "end";
    }
    placement = placementProp;
    middleware = flip3({
      padding: OVERFLOW_PADDING,
      altBoundary: disablePortal,
      fallbackAxisSideDirection
    });
  }
  return { placement, middleware };
}
var arrowStylesMiddleware = () => ({
  name: "arrowStyles",
  fn({ middlewareData }) {
    if (!middlewareData.arrow) {
      return {};
    }
    return {
      data: {
        left: middlewareData.arrow.x,
        top: middlewareData.arrow.y
      }
    };
  }
});

// node_modules/@gravity-ui/uikit/build/esm/components/Portal/Portal.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var React40 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Portal/Portal.css";
var b6 = block("portal");
function Portal({ container, children: children2, disablePortal }) {
  const defaultContainer = usePortalContainer();
  const { scoped } = useThemeContext();
  const containerNode = container ?? defaultContainer;
  if (disablePortal) {
    return (0, import_jsx_runtime12.jsx)(React40.Fragment, { children: children2 });
  }
  if (containerNode) {
    return (0, import_jsx_runtime12.jsx)(FloatingPortal, { root: containerNode, children: scoped ? (0, import_jsx_runtime12.jsx)(ThemeProvider, { rootClassName: b6("theme-wrapper"), scoped: true, children: children2 }) : children2 });
  }
  return null;
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/getElementRef.js
function getElementRef(element) {
  var _a;
  if (true) {
    const getter = (_a = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a.get;
    if (getter && "isReactWarning" in getter && getter.isReactWarning) {
      return element.ref;
    }
  }
  return element.props.ref ?? element.ref;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Tooltip/Tooltip.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Tooltip/Tooltip.css";
var b7 = block("tooltip");
var DEFAULT_OPEN_DELAY = 1e3;
var DEFAULT_CLOSE_DELAY = 0;
var DEFAULT_PLACEMENT = "bottom";
var DEFAULT_OFFSET = 4;
function Tooltip({ children: children2, open, onOpenChange, strategy, placement: placementProp = DEFAULT_PLACEMENT, offset: offsetProp = DEFAULT_OFFSET, disabled, content, trigger, role: roleProp = "tooltip", openDelay = DEFAULT_OPEN_DELAY, closeDelay = DEFAULT_CLOSE_DELAY, container, disablePortal, className, style: style3, qa, ...restProps }) {
  const [anchorElement, setAnchorElement] = React41.useState(null);
  const { placement, middleware: placementMiddleware } = getPlacementOptions(placementProp, false);
  const [isOpen, setIsOpen] = useControlledState(open, false, onOpenChange);
  const { refs, floatingStyles, context } = useFloating2({
    open: isOpen,
    onOpenChange: setIsOpen,
    strategy,
    placement,
    middleware: [
      offset3(offsetProp),
      shift3({
        padding: OVERFLOW_PADDING,
        limiter: limitShift3()
      }),
      placementMiddleware
    ],
    whileElementsMounted: autoUpdate,
    elements: {
      reference: anchorElement
    }
  });
  const hover = useHover(context, {
    enabled: trigger !== "focus",
    delay: { open: openDelay, close: closeDelay },
    move: false
  });
  const focus2 = useFocus(context);
  const role = useRole(context, {
    role: roleProp
  });
  const dismiss = useDismiss(context, {
    outsidePress: false
  });
  const { getReferenceProps, getFloatingProps } = useInteractions([hover, focus2, role, dismiss]);
  const anchorRef = useForkRef(setAnchorElement, React41.isValidElement(children2) ? getElementRef(children2) : void 0);
  const anchorProps = React41.isValidElement(children2) ? getReferenceProps(children2.props) : getReferenceProps();
  const anchorNode = React41.isValidElement(children2) ? React41.cloneElement(children2, {
    ...anchorProps,
    ref: anchorRef
  }) : children2(anchorProps, anchorRef);
  return (0, import_jsx_runtime13.jsxs)(React41.Fragment, { children: [anchorNode, isOpen && !disabled ? (0, import_jsx_runtime13.jsx)(Portal, { container, disablePortal, children: (0, import_jsx_runtime13.jsx)("div", { ref: refs.setFloating, style: {
    position: "absolute",
    top: 0,
    left: 0,
    zIndex: 1e4,
    width: "max-content",
    ...floatingStyles
  }, ...getFloatingProps(), children: (0, import_jsx_runtime13.jsx)("div", { className: b7(null, className), style: style3, "data-qa": qa, ...filterDOMProps(restProps, { labelable: true }), children: content }) }) }) : null] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/ActionTooltip/ActionTooltip.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ActionTooltip/ActionTooltip.css";
var b8 = block("action-tooltip");
var DEFAULT_OPEN_DELAY2 = 500;
var DEFAULT_CLOSE_DELAY2 = 0;
function ActionTooltip({ title, description, hotkey, openDelay = DEFAULT_OPEN_DELAY2, closeDelay = DEFAULT_CLOSE_DELAY2, className, ...restProps }) {
  const content = React42.useMemo(() => (0, import_jsx_runtime14.jsxs)(React42.Fragment, { children: [(0, import_jsx_runtime14.jsxs)("div", { className: b8("heading"), children: [(0, import_jsx_runtime14.jsx)("div", { className: b8("title"), children: title }), hotkey && (0, import_jsx_runtime14.jsx)(Hotkey, { view: "dark", value: hotkey, className: b8("hotkey") })] }), description && (0, import_jsx_runtime14.jsx)("div", { className: b8("description"), children: description })] }), [title, description, hotkey]);
  return (0, import_jsx_runtime14.jsx)(Tooltip, {
    ...restProps,
    // eslint-disable-next-line jsx-a11y/aria-role
    role: "label",
    content,
    openDelay,
    closeDelay,
    className: b8(null, className)
  });
}

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/ActionsPanel.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/icons/esm/AbbrApi.js
var React43 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/AbbrMl.js
var React44 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/AbbrQl.js
var React45 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/AbbrSql.js
var React46 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/AbbrZip.js
var React47 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/AntennaSignal.js
var React48 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Aperture.js
var React49 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Archive.js
var React50 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowChevronDown.js
var React51 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowChevronLeft.js
var React52 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowChevronRight.js
var React53 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowChevronUp.js
var React54 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowDown.js
var React55 = __toESM(require_react());
var ArrowDown = (props) => React55.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React55.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 1.25a.75.75 0 0 1 .75.75v10.19l2.72-2.72a.75.75 0 1 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 1 1 1.06-1.06l2.72 2.72V2A.75.75 0 0 1 8 1.25", clipRule: "evenodd" })
);
var ArrowDown_default = ArrowDown;

// node_modules/@gravity-ui/icons/esm/ArrowDownFromLine.js
var React56 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowDownToLine.js
var React57 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowDownToSquare.js
var React58 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowLeft.js
var React59 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowLeftFromLine.js
var React60 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowLeftToLine.js
var React61 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRight.js
var React62 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRightArrowLeft.js
var React63 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRightFromLine.js
var React64 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRightFromSquare.js
var React65 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRightToLine.js
var React66 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRightToSquare.js
var React67 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRotateLeft.js
var React68 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowRotateRight.js
var React69 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeDown.js
var React70 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeDownFromLine.js
var React71 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeDownToLine.js
var React72 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeLeft.js
var React73 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeLeftFromLine.js
var React74 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeLeftToLine.js
var React75 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeRight.js
var React76 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeRightFromLine.js
var React77 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeRightToLine.js
var React78 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeTurnUpLeft.js
var React79 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeTurnUpRight.js
var React80 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeUp.js
var React81 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeUpFromLine.js
var React82 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowShapeUpToLine.js
var React83 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUp.js
var React84 = __toESM(require_react());
var ArrowUp = (props) => React84.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React84.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 14.75a.75.75 0 0 1-.75-.75V3.81L4.53 6.53a.75.75 0 0 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 0 1-1.06 1.06L8.75 3.81V14a.75.75 0 0 1-.75.75", clipRule: "evenodd" })
);
var ArrowUp_default = ArrowUp;

// node_modules/@gravity-ui/icons/esm/ArrowUpArrowDown.js
var React85 = __toESM(require_react());
var ArrowUpArrowDown = (props) => React85.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React85.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M3.72 2.22a.75.75 0 0 1 1.06 0l3 3a.75.75 0 0 1-1.06 1.06L5 4.56v8.69a.75.75 0 0 1-1.5 0V4.56L1.78 6.28A.75.75 0 0 1 .72 5.22zM11.75 14a.75.75 0 0 1-.53-.22l-3-3a.75.75 0 1 1 1.06-1.06L11 11.44V2.75a.75.75 0 0 1 1.5 0v8.69l1.72-1.72a.75.75 0 1 1 1.06 1.06l-3 3a.75.75 0 0 1-.53.22", clipRule: "evenodd" })
);
var ArrowUpArrowDown_default = ArrowUpArrowDown;

// node_modules/@gravity-ui/icons/esm/ArrowUpFromLine.js
var React86 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUpFromSquare.js
var React87 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUpFromSquareSlash.js
var React88 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUpRightFromSquare.js
var React89 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUpToLine.js
var React90 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUturnCcwDown.js
var React91 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUturnCcwLeft.js
var React92 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUturnCcwRight.js
var React93 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUturnCwDown.js
var React94 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUturnCwLeft.js
var React95 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowUturnCwRight.js
var React96 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Arrows3RotateLeft.js
var React97 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Arrows3RotateLeftLetterA.js
var React98 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Arrows3RotateRight.js
var React99 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsExpand.js
var React100 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsExpandHorizontal.js
var React101 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsExpandVertical.js
var React102 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsOppositeToDots.js
var React103 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsRotateLeft.js
var React104 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsRotateLeftSlash.js
var React105 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsRotateRight.js
var React106 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ArrowsRotateRightSlash.js
var React107 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/At.js
var React108 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Ban.js
var React109 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Bars.js
var React110 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsAscendingAlignCenter.js
var React111 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsAscendingAlignLeft.js
var React112 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsAscendingAlignLeftArrowDown.js
var React113 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsAscendingAlignLeftArrowUp.js
var React114 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsAscendingAlignRight.js
var React115 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsDescendingAlignCenter.js
var React116 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsDescendingAlignLeft.js
var React117 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsDescendingAlignLeftArrowDown.js
var React118 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsDescendingAlignLeftArrowUp.js
var React119 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsDescendingAlignRight.js
var React120 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsPlay.js
var React121 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BarsUnaligned.js
var React122 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Bell.js
var React123 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BellDot.js
var React124 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BellSlash.js
var React125 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Binoculars.js
var React126 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Bold.js
var React127 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Book.js
var React128 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BookOpen.js
var React129 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Bookmark.js
var React130 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BookmarkFill.js
var React131 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Box.js
var React132 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Boxes3.js
var React133 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BranchesDown.js
var React134 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BranchesRight.js
var React135 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BranchesRightArrowRight.js
var React136 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Briefcase.js
var React137 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BroadcastSignal.js
var React138 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BroomMotion.js
var React139 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Brush.js
var React140 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Bucket.js
var React141 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/BucketPaint.js
var React142 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Bug.js
var React143 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Bulb.js
var React144 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Calculator.js
var React145 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Calendar.js
var React146 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Camera.js
var React147 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Car.js
var React148 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CardClub.js
var React149 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CardDiamond.js
var React150 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CardHeart.js
var React151 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CardSpade.js
var React152 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CaretDown.js
var React153 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CaretLeft.js
var React154 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CaretRight.js
var React155 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CaretUp.js
var React156 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CaretsExpandVertical.js
var React157 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartAreaStacked.js
var React158 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartAreaStackedNormalized.js
var React159 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartBar.js
var React160 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartBarStacked.js
var React161 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartColumn.js
var React162 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartColumnStacked.js
var React163 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartDonut.js
var React164 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartLine.js
var React165 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartLineLabel.js
var React166 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartMixed.js
var React167 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartPie.js
var React168 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChartTreemap.js
var React169 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Check.js
var React170 = __toESM(require_react());
var Check = (props) => React170.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React170.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M13.488 3.43a.75.75 0 0 1 .081 1.058l-6 7a.75.75 0 0 1-1.1.042l-3.5-3.5A.75.75 0 0 1 4.03 6.97l2.928 2.927 5.473-6.385a.75.75 0 0 1 1.057-.081", clipRule: "evenodd" })
);
var Check_default = Check;

// node_modules/@gravity-ui/icons/esm/CheckShape.js
var React171 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CheckShapeFill.js
var React172 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Cherry.js
var React173 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronDown.js
var React174 = __toESM(require_react());
var ChevronDown = (props) => React174.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React174.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M2.97 5.47a.75.75 0 0 1 1.06 0L8 9.44l3.97-3.97a.75.75 0 1 1 1.06 1.06l-4.5 4.5a.75.75 0 0 1-1.06 0l-4.5-4.5a.75.75 0 0 1 0-1.06", clipRule: "evenodd" })
);
var ChevronDown_default = ChevronDown;

// node_modules/@gravity-ui/icons/esm/ChevronDownWide.js
var React175 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronLeft.js
var React176 = __toESM(require_react());
var ChevronLeft = (props) => React176.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React176.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M10.53 2.97a.75.75 0 0 1 0 1.06L6.56 8l3.97 3.97a.75.75 0 1 1-1.06 1.06l-4.5-4.5a.75.75 0 0 1 0-1.06l4.5-4.5a.75.75 0 0 1 1.06 0", clipRule: "evenodd" })
);
var ChevronLeft_default = ChevronLeft;

// node_modules/@gravity-ui/icons/esm/ChevronRight.js
var React177 = __toESM(require_react());
var ChevronRight = (props) => React177.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React177.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M5.47 13.03a.75.75 0 0 1 0-1.06L9.44 8 5.47 4.03a.75.75 0 0 1 1.06-1.06l4.5 4.5a.75.75 0 0 1 0 1.06l-4.5 4.5a.75.75 0 0 1-1.06 0", clipRule: "evenodd" })
);
var ChevronRight_default = ChevronRight;

// node_modules/@gravity-ui/icons/esm/ChevronUp.js
var React178 = __toESM(require_react());
var ChevronUp = (props) => React178.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React178.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M13.03 10.53a.75.75 0 0 1-1.06 0L8 6.56l-3.97 3.97a.75.75 0 1 1-1.06-1.06l4.5-4.5a.75.75 0 0 1 1.06 0l4.5 4.5a.75.75 0 0 1 0 1.06", clipRule: "evenodd" })
);
var ChevronUp_default = ChevronUp;

// node_modules/@gravity-ui/icons/esm/ChevronUpWide.js
var React179 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsCollapseFromLines.js
var React180 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsCollapseHorizontal.js
var React181 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsCollapseToLine.js
var React182 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsCollapseUpRight.js
var React183 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsCollapseVertical.js
var React184 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsDown.js
var React185 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsDownWide.js
var React186 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsExpandFromLine.js
var React187 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsExpandHorizontal.js
var React188 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsExpandToLines.js
var React189 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsExpandUpRight.js
var React190 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsExpandVertical.js
var React191 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsLeft.js
var React192 = __toESM(require_react());
var ChevronsLeft = (props) => React192.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React192.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M12.53 5.03a.75.75 0 0 0-1.06-1.06l-3.5 3.5a.75.75 0 0 0 0 1.06l3.5 3.5a.75.75 0 1 0 1.06-1.06L9.56 8zm-5 0a.75.75 0 0 0-1.06-1.06l-3.5 3.5a.75.75 0 0 0 0 1.06l3.5 3.5a.75.75 0 0 0 1.06-1.06L4.56 8z", clipRule: "evenodd" })
);
var ChevronsLeft_default = ChevronsLeft;

// node_modules/@gravity-ui/icons/esm/ChevronsRight.js
var React193 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsUp.js
var React194 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ChevronsUpWide.js
var React195 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Circle.js
var React196 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowDown.js
var React197 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowDownFill.js
var React198 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowLeft.js
var React199 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowLeftFill.js
var React200 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowRight.js
var React201 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowRightFill.js
var React202 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowUp.js
var React203 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleArrowUpFill.js
var React204 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleCheck.js
var React205 = __toESM(require_react());
var CircleCheck = (props) => React205.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React205.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M13.5 8a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-3.9-1.55a.75.75 0 1 0-1.2-.9L7.419 8.858 6.03 7.47a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.13-.08z", clipRule: "evenodd" })
);
var CircleCheck_default = CircleCheck;

// node_modules/@gravity-ui/icons/esm/CircleCheckFill.js
var React206 = __toESM(require_react());
var CircleCheckFill = (props) => React206.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React206.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m3.1-8.55a.75.75 0 1 0-1.2-.9L7.419 8.858 6.03 7.47a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.13-.08z", clipRule: "evenodd" })
);
var CircleCheckFill_default = CircleCheckFill;

// node_modules/@gravity-ui/icons/esm/CircleChevronDown.js
var React207 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronDownFill.js
var React208 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronLeft.js
var React209 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronLeftFill.js
var React210 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronRight.js
var React211 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronRightFill.js
var React212 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronUp.js
var React213 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronUpFill.js
var React214 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronsDown.js
var React215 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronsLeft.js
var React216 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronsRight.js
var React217 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleChevronsUp.js
var React218 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleDashed.js
var React219 = __toESM(require_react());
var CircleDashed = (props) => React219.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React219.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M6.906 1.085a7 7 0 0 1 2.188 0 .75.75 0 0 1-.232 1.482 5.6 5.6 0 0 0-1.724 0 .75.75 0 0 1-.232-1.482M4.933 2.502a.75.75 0 0 1-.166 1.048c-.466.34-.878.75-1.217 1.217a.75.75 0 0 1-1.213-.882 7 7 0 0 1 1.548-1.548.75.75 0 0 1 1.048.165m6.135 0a.75.75 0 0 1 1.047-.165 7 7 0 0 1 1.548 1.548.75.75 0 0 1-1.213.882 5.5 5.5 0 0 0-1.217-1.217.75.75 0 0 1-.165-1.048M1.943 6.28a.75.75 0 0 1 .624.857 5.6 5.6 0 0 0 0 1.724.75.75 0 0 1-1.482.232 7 7 0 0 1 0-2.188.75.75 0 0 1 .858-.625m12.115 0a.75.75 0 0 1 .857.625 7 7 0 0 1 0 2.188.75.75 0 1 1-1.482-.232 5.5 5.5 0 0 0 0-1.724.75.75 0 0 1 .624-.857M2.502 11.068a.75.75 0 0 1 1.048.165c.34.466.75.878 1.217 1.217a.75.75 0 0 1-.882 1.213 7 7 0 0 1-1.548-1.548.75.75 0 0 1 .165-1.047m10.996 0a.75.75 0 0 1 .165 1.047 7 7 0 0 1-1.548 1.548.75.75 0 0 1-.883-1.213 5.5 5.5 0 0 0 1.218-1.217.75.75 0 0 1 1.048-.165m-7.217 2.99a.75.75 0 0 1 .857-.625 5.5 5.5 0 0 0 1.724 0 .75.75 0 0 1 .232 1.482 7 7 0 0 1-2.188 0 .75.75 0 0 1-.625-.857", clipRule: "evenodd" })
);
var CircleDashed_default = CircleDashed;

// node_modules/@gravity-ui/icons/esm/CircleDollar.js
var React220 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleExclamation.js
var React221 = __toESM(require_react());
var CircleExclamation = (props) => React221.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React221.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 13.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m1-4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0M8.75 5a.75.75 0 0 0-1.5 0v2.5a.75.75 0 0 0 1.5 0z", clipRule: "evenodd" })
);
var CircleExclamation_default = CircleExclamation;

// node_modules/@gravity-ui/icons/esm/CircleExclamationFill.js
var React222 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleFill.js
var React223 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleInfo.js
var React224 = __toESM(require_react());
var CircleInfo = (props) => React224.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React224.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 13.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m1-9.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-.25 3a.75.75 0 0 0-1.5 0V11a.75.75 0 0 0 1.5 0z", clipRule: "evenodd" })
);
var CircleInfo_default = CircleInfo;

// node_modules/@gravity-ui/icons/esm/CircleInfoFill.js
var React225 = __toESM(require_react());
var CircleInfoFill = (props) => React225.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React225.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m1-9.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0M8 7.75a.75.75 0 0 1 .75.75V11a.75.75 0 0 1-1.5 0V8.5A.75.75 0 0 1 8 7.75", clipRule: "evenodd" })
);
var CircleInfoFill_default = CircleInfoFill;

// node_modules/@gravity-ui/icons/esm/CircleLetterA.js
var React226 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterB.js
var React227 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterC.js
var React228 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterD.js
var React229 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterE.js
var React230 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterF.js
var React231 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterG.js
var React232 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterH.js
var React233 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterI.js
var React234 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterJ.js
var React235 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterK.js
var React236 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterL.js
var React237 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterM.js
var React238 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterN.js
var React239 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterO.js
var React240 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterP.js
var React241 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterQ.js
var React242 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterR.js
var React243 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterS.js
var React244 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterT.js
var React245 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterU.js
var React246 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterV.js
var React247 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterW.js
var React248 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterX.js
var React249 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterY.js
var React250 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLetterZ.js
var React251 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleLink.js
var React252 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleMinus.js
var React253 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleMinusFill.js
var React254 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber0.js
var React255 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber1.js
var React256 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber2.js
var React257 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber3.js
var React258 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber4.js
var React259 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber5.js
var React260 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber6.js
var React261 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber7.js
var React262 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber8.js
var React263 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleNumber9.js
var React264 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CirclePause.js
var React265 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CirclePlay.js
var React266 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CirclePlus.js
var React267 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CirclePlusFill.js
var React268 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleQuestion.js
var React269 = __toESM(require_react());
var CircleQuestion = (props) => React269.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React269.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 13.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14M6.44 4.54c.43-.354.994-.565 1.56-.565 1.217 0 2.34.82 2.34 2.14 0 .377-.078.745-.298 1.1-.208.339-.513.614-.875.867-.217.153-.325.257-.379.328-.038.052-.038.07-.038.089a.75.75 0 0 1-1.5 0c0-.794.544-1.286 1.057-1.645.28-.196.4-.332.458-.426a.54.54 0 0 0 .075-.312c0-.3-.244-.641-.84-.641a1 1 0 0 0-.608.223c-.167.138-.231.287-.231.418a.75.75 0 0 1-1.5 0c0-.674.345-1.22.78-1.577M8 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2", clipRule: "evenodd" })
);
var CircleQuestion_default = CircleQuestion;

// node_modules/@gravity-ui/icons/esm/CircleQuestionDot.js
var React270 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleQuestionFill.js
var React271 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleRuble.js
var React272 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleStop.js
var React273 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CircleXmark.js
var React274 = __toESM(require_react());
var CircleXmark = (props) => React274.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React274.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M13.5 8a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0M6.53 5.47a.75.75 0 0 0-1.06 1.06L6.94 8 5.47 9.47a.75.75 0 1 0 1.06 1.06L8 9.06l1.47 1.47a.75.75 0 1 0 1.06-1.06L9.06 8l1.47-1.47a.75.75 0 1 0-1.06-1.06L8 6.94z", clipRule: "evenodd" })
);
var CircleXmark_default = CircleXmark;

// node_modules/@gravity-ui/icons/esm/CircleXmarkFill.js
var React275 = __toESM(require_react());
var CircleXmarkFill = (props) => React275.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React275.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14M6.53 5.47a.75.75 0 0 0-1.06 1.06L6.94 8 5.47 9.47a.75.75 0 1 0 1.06 1.06L8 9.06l1.47 1.47a.75.75 0 1 0 1.06-1.06L9.06 8l1.47-1.47a.75.75 0 1 0-1.06-1.06L8 6.94z", clipRule: "evenodd" })
);
var CircleXmarkFill_default = CircleXmarkFill;

// node_modules/@gravity-ui/icons/esm/Circles3Plus.js
var React276 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Circles4Diamond.js
var React277 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Circles4Square.js
var React278 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Circles5Random.js
var React279 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CirclesConcentric.js
var React280 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CirclesIntersection.js
var React281 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Clock.js
var React282 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ClockArrowRotateLeft.js
var React283 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ClockFill.js
var React284 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Cloud.js
var React285 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CloudArrowUpIn.js
var React286 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CloudCheck.js
var React287 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CloudGear.js
var React288 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CloudNutHex.js
var React289 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CloudSlash.js
var React290 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Clouds.js
var React291 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Code.js
var React292 = __toESM(require_react());
var Code = (props) => React292.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React292.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M10.218 3.216a.75.75 0 0 0-1.436-.431l-3 10a.75.75 0 0 0 1.436.43zM4.53 4.97a.75.75 0 0 1 0 1.06L2.56 8l1.97 1.97a.75.75 0 0 1-1.06 1.06l-2.5-2.5a.75.75 0 0 1 0-1.06l2.5-2.5a.75.75 0 0 1 1.06 0m6.94 6.06a.75.75 0 0 1 0-1.06L13.44 8l-1.97-1.97a.75.75 0 0 1 1.06-1.06l2.5 2.5a.75.75 0 0 1 0 1.06l-2.5 2.5a.75.75 0 0 1-1.06 0", clipRule: "evenodd" })
);
var Code_default = Code;

// node_modules/@gravity-ui/icons/esm/CodeCommit.js
var React293 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodeCommitHorizontal.js
var React294 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodeCommits.js
var React295 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodeCompare.js
var React296 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodeFork.js
var React297 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodeMerge.js
var React298 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodePullRequest.js
var React299 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodePullRequestArrowLeft.js
var React300 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodePullRequestArrowRight.js
var React301 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodePullRequestCheck.js
var React302 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodePullRequestXmark.js
var React303 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CodeTrunk.js
var React304 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Comment.js
var React305 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CommentDot.js
var React306 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CommentFill.js
var React307 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CommentPlus.js
var React308 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CommentSlash.js
var React309 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Comments.js
var React310 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Compass.js
var React311 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Copy.js
var React312 = __toESM(require_react());
var Copy = (props) => React312.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React312.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M12 2.5H8A1.5 1.5 0 0 0 6.5 4v1H8a3 3 0 0 1 3 3v1.5h1A1.5 1.5 0 0 0 13.5 8V4A1.5 1.5 0 0 0 12 2.5M11 11h1a3 3 0 0 0 3-3V4a3 3 0 0 0-3-3H8a3 3 0 0 0-3 3v1H4a3 3 0 0 0-3 3v4a3 3 0 0 0 3 3h4a3 3 0 0 0 3-3zM4 6.5h4A1.5 1.5 0 0 1 9.5 8v4A1.5 1.5 0 0 1 8 13.5H4A1.5 1.5 0 0 1 2.5 12V8A1.5 1.5 0 0 1 4 6.5", clipRule: "evenodd" })
);
var Copy_default = Copy;

// node_modules/@gravity-ui/icons/esm/CopyArrowRight.js
var React313 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CopyCheck.js
var React314 = __toESM(require_react());
var CopyCheck = (props) => React314.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React314.createElement(
    "g",
    { fill: "currentColor" },
    React314.createElement("path", { d: "m8 9.076.085-.107a.751.751 0 1 0-1.171-.937L5.438 9.877 5.03 9.47a.747.747 0 0 0-1.06 0 .75.75 0 0 0 0 1.06l.407.408.593.592a.75.75 0 0 0 1.116-.061l.522-.654h.001z" }),
    React314.createElement("path", { fillRule: "evenodd", d: "M12 11a3 3 0 0 0 3-3V4a3 3 0 0 0-3-3H8a3 3 0 0 0-3 3v1H4a3 3 0 0 0-3 3v4a3 3 0 0 0 3 3h4a3 3 0 0 0 3-3v-1zM4 6.5A1.5 1.5 0 0 0 2.5 8v4A1.5 1.5 0 0 0 4 13.5h4A1.5 1.5 0 0 0 9.5 12V8A1.5 1.5 0 0 0 8 6.5zM13.5 4A1.5 1.5 0 0 0 12 2.5H8A1.5 1.5 0 0 0 6.5 4v1H8a3 3 0 0 1 3 3v1.5h1A1.5 1.5 0 0 0 13.5 8z", clipRule: "evenodd" })
  )
);
var CopyCheck_default = CopyCheck;

// node_modules/@gravity-ui/icons/esm/CopyCheckXmark.js
var React315 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CopyChevronRight.js
var React316 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CopyMinus.js
var React317 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CopyPicture.js
var React318 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CopyPlus.js
var React319 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CopyTransparent.js
var React320 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CopyXmark.js
var React321 = __toESM(require_react());
var CopyXmark = (props) => React321.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React321.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M9.5 12c0 .414-.168.79-.44 1.06A1.5 1.5 0 0 1 8 13.5H4a1.5 1.5 0 0 1-1.06-.44A1.5 1.5 0 0 1 2.5 12V8c0-.414.168-.79.44-1.06A1.5 1.5 0 0 1 4 6.5h4c.414 0 .79.168 1.06.44.272.27.44.646.44 1.06zm-1.47-1.03L7.06 10l.97-.97a.75.75 0 0 0-1.06-1.06L6 8.94l-.97-.97a.75.75 0 0 0-1.06 1.06l.97.97-.97.97a.75.75 0 0 0 1.06 1.06l.97-.97.97.97a.75.75 0 0 0 1.06-1.06M6.5 5H8a3 3 0 0 1 3 3v1.5h1A1.5 1.5 0 0 0 13.5 8V4A1.5 1.5 0 0 0 12 2.5H8A1.5 1.5 0 0 0 6.5 4zM5 4a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v4a3 3 0 0 1-3 3h-1v1a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V8a3 3 0 0 1 3-3h1z", clipRule: "evenodd" })
);
var CopyXmark_default = CopyXmark;

// node_modules/@gravity-ui/icons/esm/Cpu.js
var React322 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Cpus.js
var React323 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CreditCard.js
var React324 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Crop.js
var React325 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CrownDiamond.js
var React326 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Cube.js
var React327 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Cubes3.js
var React328 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Cubes3Overlap.js
var React329 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Cup.js
var React330 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CurlyBrackets.js
var React331 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CurlyBracketsFunction.js
var React332 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/CurlyBracketsLock.js
var React333 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Database.js
var React334 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/DatabaseArrowRight.js
var React335 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/DatabaseFill.js
var React336 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/DatabaseMagnifier.js
var React337 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Databases.js
var React338 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/DatabasesFill.js
var React339 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Delete.js
var React340 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Diamond.js
var React341 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/DiamondExclamation.js
var React342 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/DiamondFill.js
var React343 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Dice1.js
var React344 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Dice2.js
var React345 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Dice3.js
var React346 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Dice4.js
var React347 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Dice5.js
var React348 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Dice6.js
var React349 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Display.js
var React350 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/DisplayPulse.js
var React351 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Dots9.js
var React352 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Droplet.js
var React353 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Ear.js
var React354 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Ellipsis.js
var React355 = __toESM(require_react());
var Ellipsis = (props) => React355.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React355.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M3 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m5 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0", clipRule: "evenodd" })
);
var Ellipsis_default = Ellipsis;

// node_modules/@gravity-ui/icons/esm/EllipsisVertical.js
var React356 = __toESM(require_react());
var EllipsisVertical = (props) => React356.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React356.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M8 4.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0 5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0", clipRule: "evenodd" })
);
var EllipsisVertical_default = EllipsisVertical;

// node_modules/@gravity-ui/icons/esm/Envelope.js
var React357 = __toESM(require_react());
var Envelope = (props) => React357.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React357.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M3.5 4h9c.25 0 .485.06.692.169L8.75 7.5a1.25 1.25 0 0 1-1.5 0L2.808 4.169C3.015 4.06 3.251 4 3.5 4M2.001 5.438 2 5.5v5A1.5 1.5 0 0 0 3.5 12h9a1.5 1.5 0 0 0 1.5-1.5v-5l-.001-.062L9.65 8.7a2.75 2.75 0 0 1-3.3 0zM.5 5.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v5a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3z", clipRule: "evenodd" })
);
var Envelope_default = Envelope;

// node_modules/@gravity-ui/icons/esm/EnvelopeOpen.js
var React358 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/EnvelopeOpenXmark.js
var React359 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Equal.js
var React360 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Eraser.js
var React361 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ExclamationShape.js
var React362 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ExclamationShapeFill.js
var React363 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Eye.js
var React364 = __toESM(require_react());
var Eye = (props) => React364.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React364.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M1.87 8.515 1.641 8l.229-.515a6.708 6.708 0 0 1 12.26 0l.228.515-.229.515a6.708 6.708 0 0 1-12.259 0M.5 6.876l-.26.585a1.33 1.33 0 0 0 0 1.079l.26.584a8.208 8.208 0 0 0 15 0l.26-.584a1.33 1.33 0 0 0 0-1.08l-.26-.584a8.208 8.208 0 0 0-15 0M9.5 8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0", clipRule: "evenodd" })
);
var Eye_default = Eye;

// node_modules/@gravity-ui/icons/esm/EyeSlash.js
var React365 = __toESM(require_react());
var EyeSlash = (props) => React365.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React365.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M3.03 1.97a.75.75 0 0 0-1.06 1.06l.83.83A8.2 8.2 0 0 0 .5 6.876l-.26.585a1.33 1.33 0 0 0 0 1.079l.26.585a8.21 8.21 0 0 0 11.434 3.87l1.036 1.035a.75.75 0 1 0 1.06-1.06zm7.788 9.908-1.294-1.293a3 3 0 0 1-4.109-4.109L3.866 4.927A6.7 6.7 0 0 0 1.87 7.486L1.641 8l.23.515a6.71 6.71 0 0 0 8.947 3.363M6.55 7.611A1.502 1.502 0 0 0 8.389 9.45zm1.658-2.604 2.784 2.784a3 3 0 0 0-2.784-2.784m5.92 3.508a6.7 6.7 0 0 1-.915 1.496l1.065 1.066A8.2 8.2 0 0 0 15.5 9.125l.26-.585a1.33 1.33 0 0 0 0-1.08l-.26-.584A8.21 8.21 0 0 0 5.572 2.37L6.81 3.61a6.71 6.71 0 0 1 7.32 3.877l.228.514z", clipRule: "evenodd" })
);
var EyeSlash_default = EyeSlash;

// node_modules/@gravity-ui/icons/esm/EyesLookLeft.js
var React366 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/EyesLookRight.js
var React367 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceAlien.js
var React368 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceAngry.js
var React369 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceFun.js
var React370 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceNeutral.js
var React371 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceNeutralDashed.js
var React372 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceRobot.js
var React373 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceSad.js
var React374 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceSmile.js
var React375 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FaceSurprise.js
var React376 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Factory.js
var React377 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/File.js
var React378 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileArrowDown.js
var React379 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileArrowLeft.js
var React380 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileArrowRight.js
var React381 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileArrowRightOut.js
var React382 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileArrowUp.js
var React383 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileCheck.js
var React384 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileCode.js
var React385 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileDollar.js
var React386 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileExclamation.js
var React387 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileLetterP.js
var React388 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileLetterW.js
var React389 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileLetterX.js
var React390 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileMagnifier.js
var React391 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileMinus.js
var React392 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FilePlus.js
var React393 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileQuestion.js
var React394 = __toESM(require_react());
var FileQuestion = (props) => React394.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React394.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M11 13.5H5A1.5 1.5 0 0 1 3.5 12V4A1.5 1.5 0 0 1 5 2.5h2.757a1.5 1.5 0 0 1 1.061.44l3.243 3.242a1.5 1.5 0 0 1 .439 1.06V12a1.5 1.5 0 0 1-1.5 1.5m2.121-8.379A3 3 0 0 1 14 7.243V12a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h2.757a3 3 0 0 1 2.122.879zm-6.533.388C6.978 5.19 7.488 5 8 5c1.092 0 2.125.736 2.125 1.947 0 .34-.07.678-.273 1.004-.19.308-.467.554-.785.776-.185.129-.269.211-.305.26l-.012.017A.75.75 0 0 1 7.25 9c0-.741.512-1.192.959-1.503.236-.165.329-.273.368-.336.028-.046.048-.097.048-.214a.37.37 0 0 0-.133-.292C8.398 6.575 8.235 6.5 8 6.5a.77.77 0 0 0-.463.17c-.126.104-.162.204-.162.277a.75.75 0 1 1-1.5 0c0-.618.32-1.116.713-1.438M9 11.25a1 1 0 1 1-2 0 1 1 0 0 1 2 0", clipRule: "evenodd" })
);
var FileQuestion_default = FileQuestion;

// node_modules/@gravity-ui/icons/esm/FileRuble.js
var React395 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileText.js
var React396 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileXmark.js
var React397 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FileZipper.js
var React398 = __toESM(require_react());
var FileZipper = (props) => React398.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React398.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M11 13.5H5A1.5 1.5 0 0 1 3.5 12V4A1.5 1.5 0 0 1 5 2.5h.5v.75c0 .414.336.75.75.75H7v2h-.75a.75.75 0 0 0-.75.75v.5c0 .414.336.75.75.75H7v2h-.75a.75.75 0 0 0-.75.75v.5c0 .414.336.75.75.75H7v-2h.75a.75.75 0 0 0 .75-.75v-.5A.75.75 0 0 0 7.75 8H7V6h.75a.75.75 0 0 0 .75-.75v-.5A.75.75 0 0 0 7.75 4H7V2.5h.757a1.5 1.5 0 0 1 1.061.44l3.243 3.242a1.5 1.5 0 0 1 .439 1.06V12a1.5 1.5 0 0 1-1.5 1.5m2.121-8.379A3 3 0 0 1 14 7.243V12a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h2.757a3 3 0 0 1 2.122.879z", clipRule: "evenodd" })
);
var FileZipper_default = FileZipper;

// node_modules/@gravity-ui/icons/esm/Files.js
var React399 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Filmstrip.js
var React400 = __toESM(require_react());
var Filmstrip = (props) => React400.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React400.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M11.5 3.5h.5A1.5 1.5 0 0 1 13.5 5v.5h-2zm0 3.5v2h2V7zM15 7v4a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V5a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3zm-1.5 3.5h-2v2h.5a1.5 1.5 0 0 0 1.5-1.5zm-3.5-7H6v9h4zm-5.5 9v-2h-2v.5A1.5 1.5 0 0 0 4 12.5zm0-5.5v2h-2V7zm0-1.5h-2V5A1.5 1.5 0 0 1 4 3.5h.5z", clipRule: "evenodd" })
);
var Filmstrip_default = Filmstrip;

// node_modules/@gravity-ui/icons/esm/Fingerprint.js
var React401 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Flag.js
var React402 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Flame.js
var React403 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Flask.js
var React404 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FloppyDisk.js
var React405 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Folder.js
var React406 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderArrowDown.js
var React407 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderArrowLeft.js
var React408 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderArrowRight.js
var React409 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderArrowUp.js
var React410 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderArrowUpIn.js
var React411 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderCheck.js
var React412 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderCode.js
var React413 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderExclamation.js
var React414 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderFill.js
var React415 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderFlows.js
var React416 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderHouse.js
var React417 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderKeyhole.js
var React418 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderLock.js
var React419 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderMagnifier.js
var React420 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderOpen.js
var React421 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderOpenFill.js
var React422 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderPlus.js
var React423 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FolderTree.js
var React424 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Folders.js
var React425 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Font.js
var React426 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FontCase.js
var React427 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FontCursor.js
var React428 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Frame.js
var React429 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Frames.js
var React430 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Function.js
var React431 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Funnel.js
var React432 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/FunnelXmark.js
var React433 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Gear.js
var React434 = __toESM(require_react());
var Gear = (props) => React434.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React434.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.2.2 0 0 1 .271.073l.802 1.388a.2.2 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.2.2 0 0 1 .073.271l-.802 1.388a.2.2 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.2.2 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.2.2 0 0 1-.272-.073l-.8-1.388a.2.2 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.2.2 0 0 1-.073-.27l.801-1.389a.2.2 0 0 1 .272-.072C5.042 5.138 7 4.007 7 2.199c0-.11.089-.199.199-.199M5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.7 1.7 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.7 1.7 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.7 1.7 0 0 1-2.32-.622l-.802-1.388a1.7 1.7 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.7 1.7 0 0 1-.622-2.32l.801-1.389a1.7 1.7 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2m4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0", clipRule: "evenodd" })
);
var Gear_default = Gear;

// node_modules/@gravity-ui/icons/esm/GearBranches.js
var React435 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GearDot.js
var React436 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GearPlay.js
var React437 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Geo.js
var React438 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GeoDots.js
var React439 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GeoFill.js
var React440 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GeoPin.js
var React441 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GeoPolygons.js
var React442 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Ghost.js
var React443 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Gift.js
var React444 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Globe.js
var React445 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Gpu.js
var React446 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GraduationCap.js
var React447 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/GraphNode.js
var React448 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Grip.js
var React449 = __toESM(require_react());
var Grip = (props) => React449.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React449.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M7 3a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M5.5 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m0-5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3M7 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m3.5 1.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3", clipRule: "evenodd" })
);
var Grip_default = Grip;

// node_modules/@gravity-ui/icons/esm/GripHorizontal.js
var React450 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Hammer.js
var React451 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Hand.js
var React452 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandOk.js
var React453 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandPointDown.js
var React454 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandPointLeft.js
var React455 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandPointRight.js
var React456 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandPointUp.js
var React457 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandStop.js
var React458 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Handset.js
var React459 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandsetArrowIn.js
var React460 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HandsetArrowOut.js
var React461 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HardDrive.js
var React462 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Hashtag.js
var React463 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heading.js
var React464 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heading1.js
var React465 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heading2.js
var React466 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heading3.js
var React467 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heading4.js
var React468 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heading5.js
var React469 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heading6.js
var React470 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Headphones.js
var React471 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Heart.js
var React472 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HeartCrack.js
var React473 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HeartFill.js
var React474 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/HeartPulse.js
var React475 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Hierarchy.js
var React476 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/House.js
var React477 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Italic.js
var React478 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Key.js
var React479 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Keyboard.js
var React480 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Layers.js
var React481 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Layers3Diagonal.js
var React482 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayersVertical.js
var React483 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutCells.js
var React484 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutCellsLarge.js
var React485 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutColumns.js
var React486 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutColumns3.js
var React487 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutFooter.js
var React488 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeader.js
var React489 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeaderCells.js
var React490 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeaderCellsLarge.js
var React491 = __toESM(require_react());
var LayoutHeaderCellsLarge = (props) => React491.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React491.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M4 3.5h8A1.5 1.5 0 0 1 13.5 5v.5h-11V5A1.5 1.5 0 0 1 4 3.5m-1.5 7v.5A1.5 1.5 0 0 0 4 12.5h3.25v-2zm0-1.5h4.75V7H2.5zm6.25 1.5v2H12a1.5 1.5 0 0 0 1.5-1.5v-.5zM13.5 9H8.75V7h4.75zM1 5a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3v6a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3z", clipRule: "evenodd" })
);
var LayoutHeaderCellsLarge_default = LayoutHeaderCellsLarge;

// node_modules/@gravity-ui/icons/esm/LayoutHeaderCellsLargeFill.js
var React492 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeaderCellsLargeLetterD.js
var React493 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeaderCellsLargeThunderbolt.js
var React494 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeaderColumns.js
var React495 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeaderCursor.js
var React496 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutHeaderSideContent.js
var React497 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutList.js
var React498 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutRows.js
var React499 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutRows3.js
var React500 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSideContent.js
var React501 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSideContentLeft.js
var React502 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSideContentRight.js
var React503 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSplitColumns.js
var React504 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSplitColumns3.js
var React505 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSplitRows.js
var React506 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSplitSideContentLeft.js
var React507 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutSplitSideContentRight.js
var React508 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LayoutTabs.js
var React509 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LetterGroup.js
var React510 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LetterM.js
var React511 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LifeRing.js
var React512 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Link.js
var React513 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LinkSlash.js
var React514 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ListCheck.js
var React515 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ListCheckLock.js
var React516 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ListOl.js
var React517 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ListTimeline.js
var React518 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ListUl.js
var React519 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LocationArrow.js
var React520 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LocationArrowFill.js
var React521 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Lock.js
var React522 = __toESM(require_react());
var Lock = (props) => React522.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React522.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M10.5 6V5a2.5 2.5 0 0 0-5 0v1zM4 5v1a3 3 0 0 0-3 3v3a3 3 0 0 0 3 3h8a3 3 0 0 0 3-3V9a3 3 0 0 0-3-3V5a4 4 0 0 0-8 0m6.5 2.5H12A1.5 1.5 0 0 1 13.5 9v3a1.5 1.5 0 0 1-1.5 1.5H4A1.5 1.5 0 0 1 2.5 12V9A1.5 1.5 0 0 1 4 7.5zm-1.75 2a.75.75 0 0 0-1.5 0v2a.75.75 0 0 0 1.5 0z", clipRule: "evenodd" })
);
var Lock_default = Lock;

// node_modules/@gravity-ui/icons/esm/LockOpen.js
var React523 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoAcrobat.js
var React524 = __toESM(require_react());
var LogoAcrobat = (props) => React524.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React524.createElement(
    "g",
    { clipPath: "url(#a)" },
    React524.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M7.363 1.5c-.094.007-.377.122-.377.622 0 .593.12 1.248.337 1.927.209-.799.319-1.463.319-1.927 0-.359-.097-.513-.144-.565a.16.16 0 0 0-.135-.057m.885 4.637q.092-.262.174-.518c.431-1.326.72-2.587.72-3.497 0-.625-.173-1.173-.53-1.57A1.65 1.65 0 0 0 7.265.004c-.984.064-1.779.933-1.779 2.118 0 1.314.44 2.758 1.126 4.13a31 31 0 0 1-1.465 3.305c-.9.302-1.745.648-2.475 1.025-.714.368-1.352.783-1.822 1.24-.46.448-.85 1.027-.85 1.715 0 .465.157.91.488 1.243.33.332.776.491 1.242.491.541 0 1.038-.242 1.458-.547.428-.311.844-.738 1.24-1.225.604-.744 1.203-1.683 1.758-2.699a24.5 24.5 0 0 1 3.143-.739 11.3 11.3 0 0 0 1.606 1.369c.925.639 1.945 1.086 2.943 1.086.507 0 1.034-.126 1.45-.46.438-.353.672-.871.672-1.47 0-.758-.412-1.313-.983-1.66-.535-.327-1.231-.49-1.958-.563-.925-.092-2.02-.047-3.167.1a14 14 0 0 1-1.644-2.325m-.675 1.76a33 33 0 0 1-.481 1.095 26 26 0 0 1 1.093-.246 16 16 0 0 1-.612-.849m3.734 1.938q.24.195.481.36c.802.554 1.521.82 2.09.82.277 0 .436-.07.51-.13.052-.041.112-.113.112-.3 0-.129-.04-.244-.263-.38-.258-.156-.695-.288-1.327-.35a10.5 10.5 0 0 0-1.603-.02m-7.374 1.803q-.3.135-.574.277c-.645.333-1.14.668-1.463.982-.334.326-.396.54-.396.639 0 .126.039.172.05.184.013.012.057.05.18.05.095 0 .284-.047.576-.26.285-.207.608-.528.957-.957q.333-.411.67-.915", clipRule: "evenodd" })
  ),
  React524.createElement(
    "defs",
    null,
    React524.createElement(
      "clipPath",
      { id: "a" },
      React524.createElement("path", { fill: "currentColor", d: "M0 0h16v16H0z" })
    )
  )
);
var LogoAcrobat_default = LogoAcrobat;

// node_modules/@gravity-ui/icons/esm/LogoAndroid.js
var React525 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoDocker.js
var React526 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoDrawIo.js
var React527 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoFacebook.js
var React528 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoGitlab.js
var React529 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoLinux.js
var React530 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoMacos.js
var React531 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoMarkdown.js
var React532 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoMermaid.js
var React533 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoNotion.js
var React534 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoOsi.js
var React535 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoPython.js
var React536 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoStackOverflow.js
var React537 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoTelegram.js
var React538 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoUbuntu.js
var React539 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoWindows.js
var React540 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoYandex.js
var React541 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoYandexCloud.js
var React542 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoYandexMessenger.js
var React543 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/LogoYandexTracker.js
var React544 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MagicWand.js
var React545 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Magnet.js
var React546 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Magnifier.js
var React547 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MagnifierMinus.js
var React548 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MagnifierPlus.js
var React549 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MapPin.js
var React550 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MapPinMinus.js
var React551 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MapPinPlus.js
var React552 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MathIntersectionShape.js
var React553 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MathOperations.js
var React554 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MathUnionShape.js
var React555 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Medal.js
var React556 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Megaphone.js
var React557 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Microphone.js
var React558 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MicrophoneSlash.js
var React559 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Minus.js
var React560 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MinusShape.js
var React561 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MinusShapeFill.js
var React562 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Molecule.js
var React563 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Moon.js
var React564 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Mug.js
var React565 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/MusicNote.js
var React566 = __toESM(require_react());
var MusicNote = (props) => React566.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React566.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M13 5.46v3.08a3 3 0 0 0-.976 0q-.135.022-.274.055C10.231 8.96 9 10.263 9 11.505s1.231 1.955 2.75 1.59c1.519-.364 2.75-1.667 2.75-2.91q0-.057-.004-.113L14.5 10V1.25a.75.75 0 0 0-.932-.728L6.136 2.38l-.568.142A.75.75 0 0 0 5 3.25v7.291a3 3 0 0 0-.976 0q-.135.021-.274.054C2.231 10.96 1 12.263 1 13.506s1.231 1.955 2.75 1.59c1.519-.364 2.75-1.667 2.75-2.91q0-.057-.003-.113L6.5 12V7.086zm0-1.546V2.211L6.5 3.836v1.703l6.136-1.534zm-8.003 8.127a2 2 0 0 0 .003.144c0 .133-.079.419-.396.754a2.5 2.5 0 0 1-1.204.698c-.47.113-.748.023-.844-.032a.2.2 0 0 1-.047-.036l-.001-.002-.003-.007a.2.2 0 0 1-.005-.054c0-.133.079-.419.396-.754a2.5 2.5 0 0 1 1.204-.698 1.6 1.6 0 0 1 .637-.037q.13.024.26.024m8-2a2 2 0 0 0 .003.144c0 .133-.079.419-.396.754a2.5 2.5 0 0 1-1.204.698c-.47.113-.748.023-.844-.032a.2.2 0 0 1-.047-.036l-.001-.002-.003-.007a.2.2 0 0 1-.005-.054c0-.133.079-.419.396-.754a2.5 2.5 0 0 1 1.204-.698 1.6 1.6 0 0 1 .637-.037q.13.024.26.024", clipRule: "evenodd" })
);
var MusicNote_default = MusicNote;

// node_modules/@gravity-ui/icons/esm/NodesDown.js
var React567 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/NodesLeft.js
var React568 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/NodesRight.js
var React569 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/NodesUp.js
var React570 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/NutHex.js
var React571 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignBottom.js
var React572 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignCenterHorizontal.js
var React573 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignCenterVertical.js
var React574 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignJustifyHorizontal.js
var React575 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignJustifyVertical.js
var React576 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignLeft.js
var React577 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignRight.js
var React578 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectAlignTop.js
var React579 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignBottom.js
var React580 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignCenterHorizontal.js
var React581 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignCenterVertical.js
var React582 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignJustifyHorizontal.js
var React583 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignJustifyVertical.js
var React584 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignLeft.js
var React585 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignRight.js
var React586 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ObjectsAlignTop.js
var React587 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/OctagonXmark.js
var React588 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/OfficeBadge.js
var React589 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Palette.js
var React590 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PaperPlane.js
var React591 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Paperclip.js
var React592 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Passport.js
var React593 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Pause.js
var React594 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PauseFill.js
var React595 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Pencil.js
var React596 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PencilToLine.js
var React597 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PencilToSquare.js
var React598 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Percent.js
var React599 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Person.js
var React600 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonGear.js
var React601 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonMagnifier.js
var React602 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonNutHex.js
var React603 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonPencil.js
var React604 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonPlanetEarth.js
var React605 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonPlus.js
var React606 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonSpeaker.js
var React607 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonWorker.js
var React608 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonXmark.js
var React609 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Persons.js
var React610 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PersonsLock.js
var React611 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Picture.js
var React612 = __toESM(require_react());
var Picture = (props) => React612.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React612.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M11.5 3h-7A1.5 1.5 0 0 0 3 4.5v5.027l.962-.7a1.75 1.75 0 0 1 2.079.016l.928.696 2.368-2.03a1.75 1.75 0 0 1 2.325.043L13 8.787V4.5A1.5 1.5 0 0 0 11.5 3m3 7.498V4.5a3 3 0 0 0-3-3h-7a3 3 0 0 0-3 3v7a3 3 0 0 0 3 3h7a3 3 0 0 0 3-3zm-1.5.33-2.355-2.174a.25.25 0 0 0-.332-.006L7.488 11.07l-.457.392-.481-.361-1.41-1.057a.25.25 0 0 0-.296-.002L3 11.381v.119A1.5 1.5 0 0 0 4.5 13h7a1.5 1.5 0 0 0 1.5-1.5zM7.5 6a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0", clipRule: "evenodd" })
);
var Picture_default = Picture;

// node_modules/@gravity-ui/icons/esm/Pill.js
var React613 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Pin.js
var React614 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PinFill.js
var React615 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PinSlash.js
var React616 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PinSlashFill.js
var React617 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Pipeline.js
var React618 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PlanetEarth.js
var React619 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Play.js
var React620 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PlayFill.js
var React621 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PlugConnection.js
var React622 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PlugWire.js
var React623 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Plus.js
var React624 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PlusShape.js
var React625 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/PlusShapeFill.js
var React626 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Power.js
var React627 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Printer.js
var React628 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Pulse.js
var React629 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Puzzle.js
var React630 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/QrCode.js
var React631 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/QuoteClose.js
var React632 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/QuoteOpen.js
var React633 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Receipt.js
var React634 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/RectanglePulse.js
var React635 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Rectangles4.js
var React636 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Rocket.js
var React637 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/RoundBrackets.js
var React638 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Route.js
var React639 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Sack.js
var React640 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ScalesBalanced.js
var React641 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ScalesUnbalanced.js
var React642 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Scissors.js
var React643 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SealCheck.js
var React644 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SealPercent.js
var React645 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Server.js
var React646 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Shapes3.js
var React647 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Shapes4.js
var React648 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Shield.js
var React649 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ShieldCheck.js
var React650 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ShieldExclamation.js
var React651 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ShieldKeyhole.js
var React652 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ShoppingBag.js
var React653 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ShoppingBasket.js
var React654 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ShoppingCart.js
var React655 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Shuffle.js
var React656 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Signal.js
var React657 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Skull.js
var React658 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Sliders.js
var React659 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SlidersVertical.js
var React660 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Smartphone.js
var React661 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Snail.js
var React662 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Snowflake.js
var React663 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Sphere.js
var React664 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Square.js
var React665 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareArticle.js
var React666 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareBars.js
var React667 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareBarsVertical.js
var React668 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareBrackets.js
var React669 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareBracketsBarsVertical.js
var React670 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareBracketsLetterA.js
var React671 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareChartBar.js
var React672 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareChartColumn.js
var React673 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareCheck.js
var React674 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareDashed.js
var React675 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareDashedCircle.js
var React676 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareDashedLetterA.js
var React677 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareDashedLetterT.js
var React678 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareDashedText.js
var React679 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareDot.js
var React680 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareExclamation.js
var React681 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareFill.js
var React682 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareHashtag.js
var React683 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareLetterP.js
var React684 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareLetterT.js
var React685 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareLineHorizontal.js
var React686 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareLineVertical.js
var React687 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareListUl.js
var React688 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareMinus.js
var React689 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquarePlus.js
var React690 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/SquareXmark.js
var React691 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Star.js
var React692 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/StarFill.js
var React693 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Stethoscope.js
var React694 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Sticker.js
var React695 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Stop.js
var React696 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/StopFill.js
var React697 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Stopwatch.js
var React698 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Strikethrough.js
var React699 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Suitcase.js
var React700 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Sun.js
var React701 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TShirt.js
var React702 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Tag.js
var React703 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TagDollar.js
var React704 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TagRuble.js
var React705 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Tags.js
var React706 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Target.js
var React707 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TargetDart.js
var React708 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Terminal.js
var React709 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TerminalLine.js
var React710 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Text.js
var React711 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TextAlignCenter.js
var React712 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TextAlignJustify.js
var React713 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TextAlignLeft.js
var React714 = __toESM(require_react());
var TextAlignLeft = (props) => React714.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React714.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M2.75 2a.75.75 0 0 0 0 1.5h10.5a.75.75 0 0 0 0-1.5zm0 7a.75.75 0 0 0 0 1.5h10.5a.75.75 0 0 0 0-1.5zm0 3.5a.75.75 0 0 0 0 1.5h6.5a.75.75 0 0 0 0-1.5zM2 6.25a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5A.75.75 0 0 1 2 6.25", clipRule: "evenodd" })
);
var TextAlignLeft_default = TextAlignLeft;

// node_modules/@gravity-ui/icons/esm/TextAlignRight.js
var React715 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TextIndent.js
var React716 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TextOutdent.js
var React717 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ThumbsDown.js
var React718 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ThumbsDownFill.js
var React719 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ThumbsUp.js
var React720 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ThumbsUp2.js
var React721 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ThumbsUpFill.js
var React722 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Thunderbolt.js
var React723 = __toESM(require_react());
var Thunderbolt = (props) => React723.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React723.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "m7.836 6 .76-2.027L9.336 2H5.5a.72.72 0 0 0-.664.45L2.513 8.257a.177.177 0 0 0 .164.243h4.965l-.732 2.013-1.082 2.975a.382.382 0 0 0 .637.392l6.956-7.391A.29.29 0 0 0 13.21 6H7.835m2.727-3 .235-.627A1.386 1.386 0 0 0 9.5.5h-4c-.906 0-1.72.552-2.057 1.393L1.12 7.7A1.677 1.677 0 0 0 2.677 10H5.5l-.545 1.5-.537 1.475a1.882 1.882 0 0 0 3.14 1.933l6.956-7.391A1.79 1.79 0 0 0 13.21 4.5H10z", clipRule: "evenodd" })
);
var Thunderbolt_default = Thunderbolt;

// node_modules/@gravity-ui/icons/esm/ThunderboltFill.js
var React724 = __toESM(require_react());
var ThunderboltFill = (props) => React724.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React724.createElement("path", { fill: "currentColor", d: "m14.61 6.914-7.632 8.08a1.614 1.614 0 0 1-2.69-1.66L5.5 10H2.677A1.677 1.677 0 0 1 1.12 7.7l2.323-5.807A2.22 2.22 0 0 1 5.5.5h4c.968 0 1.637.967 1.298 1.873L10 4.5h3.569a1.431 1.431 0 0 1 1.04 2.414" })
);
var ThunderboltFill_default = ThunderboltFill;

// node_modules/@gravity-ui/icons/esm/Ticket.js
var React725 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Timeline.js
var React726 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Timestamps.js
var React727 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ToggleOff.js
var React728 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/ToggleOn.js
var React729 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TrafficLight.js
var React730 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TrapezoidLeftLineHorizontal.js
var React731 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TrapezoidUpLineVertical.js
var React732 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TrashBin.js
var React733 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Tray.js
var React734 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleDown.js
var React735 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleDownFill.js
var React736 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleExclamation.js
var React737 = __toESM(require_react());
var TriangleExclamation = (props) => React737.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React737.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M7.134 2.994 2.217 11.5a1 1 0 0 0 .866 1.5h9.834a1 1 0 0 0 .866-1.5L8.866 2.993a1 1 0 0 0-1.732 0m3.03-.75c-.962-1.665-3.366-1.665-4.329 0L.918 10.749c-.963 1.666.24 3.751 2.165 3.751h9.834c1.925 0 3.128-2.085 2.164-3.751zM8 5a.75.75 0 0 1 .75.75v2a.75.75 0 0 1-1.5 0v-2A.75.75 0 0 1 8 5m1 5.75a1 1 0 1 1-2 0 1 1 0 0 1 2 0", clipRule: "evenodd" })
);
var TriangleExclamation_default = TriangleExclamation;

// node_modules/@gravity-ui/icons/esm/TriangleExclamationFill.js
var React738 = __toESM(require_react());
var TriangleExclamationFill = (props) => React738.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React738.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M5.835 2.244c.963-1.665 3.367-1.665 4.33 0l4.916 8.505c.964 1.666-.24 3.751-2.164 3.751H3.083c-1.925 0-3.128-2.085-2.165-3.751zM8 5a.75.75 0 0 1 .75.75v2a.75.75 0 1 1-1.5 0v-2A.75.75 0 0 1 8 5m1 5.75a1 1 0 1 1-2 0 1 1 0 0 1 2 0", clipRule: "evenodd" })
);
var TriangleExclamationFill_default = TriangleExclamationFill;

// node_modules/@gravity-ui/icons/esm/TriangleLeft.js
var React739 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleLeftFill.js
var React740 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleRight.js
var React741 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleRightFill.js
var React742 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleThunderbolt.js
var React743 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleUp.js
var React744 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TriangleUpFill.js
var React745 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Trolley.js
var React746 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Tv.js
var React747 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/TvRetro.js
var React748 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Umbrella.js
var React749 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Underline.js
var React750 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Vault.js
var React751 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VectorCircle.js
var React752 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VectorSquare.js
var React753 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Video.js
var React754 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Volume.js
var React755 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeFill.js
var React756 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeLow.js
var React757 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeLowFill.js
var React758 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeOff.js
var React759 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeOffFill.js
var React760 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeSlash.js
var React761 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeSlashFill.js
var React762 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeXmark.js
var React763 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/VolumeXmarkFill.js
var React764 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/WeightHanging.js
var React765 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Wrench.js
var React766 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/Xmark.js
var React767 = __toESM(require_react());
var Xmark = (props) => React767.createElement(
  "svg",
  Object.assign({ xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, fill: "none", viewBox: "0 0 16 16" }, props),
  React767.createElement("path", { fill: "currentColor", fillRule: "evenodd", d: "M3.47 3.47a.75.75 0 0 1 1.06 0L8 6.94l3.47-3.47a.75.75 0 1 1 1.06 1.06L9.06 8l3.47 3.47a.75.75 0 1 1-1.06 1.06L8 9.06l-3.47 3.47a.75.75 0 0 1-1.06-1.06L6.94 8 3.47 4.53a.75.75 0 0 1 0-1.06", clipRule: "evenodd" })
);
var Xmark_default = Xmark;

// node_modules/@gravity-ui/icons/esm/XmarkShape.js
var React768 = __toESM(require_react());

// node_modules/@gravity-ui/icons/esm/XmarkShapeFill.js
var React769 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Button/Button.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var React771 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/event-broker/EventBroker.js
var EventBroker = class {
  constructor(prefix2) {
    __publicField(this, "subscriptions", []);
    __publicField(this, "componentPrefix");
    this.componentPrefix = prefix2;
  }
  subscribe(subscription) {
    this.subscriptions.push(subscription);
  }
  unsubscribe(subscription) {
    const index3 = this.subscriptions.indexOf(subscription);
    if (index3 > -1) {
      this.subscriptions.splice(index3, 1);
    }
  }
  publish({ componentId, ...restData }) {
    this.subscriptions.forEach((fn) => fn({
      ...restData,
      componentId: this.componentPrefix ? `${this.componentPrefix}${componentId}` : componentId
    }));
  }
  withEventPublisher(componentId, qa) {
    return (eventBrokerData) => {
      this.publish({
        ...eventBrokerData,
        componentId,
        qa
      });
    };
  }
};
var eventBroker = new EventBroker(NAMESPACE);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/event-broker/useEventBroker.js
var React770 = __toESM(require_react(), 1);
function useEventBroker(subscription, broker = eventBroker) {
  React770.useEffect(() => {
    broker.subscribe(subscription);
    return () => broker.unsubscribe(subscription);
  }, [broker, subscription]);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Button/ButtonIcon.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/warn.js
var didWarn = /* @__PURE__ */ new Map();
function warnOnce(msg) {
  if (!msg || didWarn.has(msg) || false) {
    return;
  }
  console.error(msg);
  didWarn.set(msg, true);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Button/ButtonIcon.js
var b9 = block("button");
function warnAboutPhysicalValues() {
  warnOnce('[Button.Icon] Physical values (left, right) of "side" property are deprecated. Use logical values (start, end) instead.');
}
var ButtonIcon = ({ side, className, children: children2 }) => {
  return (0, import_jsx_runtime15.jsx)("span", { className: b9("icon", {
    side: getIconSide(side)
  }, className), children: (0, import_jsx_runtime15.jsx)("span", { className: b9("icon-inner"), children: children2 }) });
};
ButtonIcon.displayName = "Button.Icon";
function getIconSide(side) {
  let sideMod = side;
  if (sideMod === "left") {
    warnAboutPhysicalValues();
    sideMod = "start";
  }
  if (sideMod === "right") {
    warnAboutPhysicalValues();
    sideMod = "end";
  }
  return sideMod;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Button/Button.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Button/Button.css";
function isButtonComponentProps(p) {
  return p.component !== void 0;
}
var b10 = block("button");
var _Button = React771.forwardRef(function Button(props, ref2) {
  const { view = "normal", size: size5 = "m", pin = "round-round", selected, disabled = false, loading = false, width, children: children2, extraProps, qa, onClickCapture, ...rest } = props;
  const handleClickCapture = React771.useCallback((event) => {
    eventBroker.publish({
      componentId: "Button",
      eventId: "click",
      domEvent: event,
      meta: {
        content: event.currentTarget.textContent,
        view
      }
    });
    if (onClickCapture) {
      onClickCapture(event);
    }
  }, [view, onClickCapture]);
  const commonProps = {
    onClickCapture: handleClickCapture,
    className: b10({
      view,
      size: size5,
      pin,
      selected,
      disabled: disabled || loading,
      loading,
      width
    }, rest.className),
    "data-qa": qa
  };
  if (isButtonComponentProps(props)) {
    return React771.createElement(props.component, {
      ...rest,
      ...extraProps,
      ...commonProps,
      ref: ref2,
      "aria-disabled": disabled ?? void 0
    }, prepareChildren(children2));
  }
  if (typeof props.href !== "undefined") {
    return (0, import_jsx_runtime16.jsx)("a", { ...rest, ...extraProps, ...commonProps, ref: ref2, rel: props.target === "_blank" && !rest.rel ? "noopener noreferrer" : rest.rel, "aria-disabled": disabled ?? void 0, children: prepareChildren(children2) });
  }
  return (0, import_jsx_runtime16.jsx)("button", { ...rest, ...extraProps, ...commonProps, ref: ref2, type: props.type || "button", disabled: disabled || loading, "aria-pressed": selected, children: prepareChildren(children2) });
});
var Button2 = Object.assign(_Button, { Icon: ButtonIcon });
var isButtonIconComponent = isOfType(ButtonIcon);
var isSpan = isOfType("span");
var buttonIconClassRe = RegExp(`^${b10("icon")}($|\\s+\\w)`);
function prepareChildren(children2) {
  const items = React771.Children.toArray(children2);
  if (items.length === 1) {
    const onlyItem = items[0];
    const isButtonIconElement = isButtonIconComponent(onlyItem) || isSpan(onlyItem) && buttonIconClassRe.test(onlyItem.props.className || "");
    if (isButtonIconElement) {
      return onlyItem;
    } else if (isIcon(onlyItem) || isSvg(onlyItem)) {
      return (0, import_jsx_runtime16.jsx)(Button2.Icon, { children: onlyItem }, "icon");
    } else {
      return (0, import_jsx_runtime16.jsx)("span", { className: b10("text"), children: onlyItem }, "text");
    }
  } else {
    let startIcon, endIcon, text2;
    const content = [];
    for (const item of items) {
      const isIconElement = isIcon(item) || isSvg(item);
      const isButtonIconElement = isButtonIconComponent(item);
      const isRenderedButtonIconElement = isSpan(item) && buttonIconClassRe.test(item.props.className || "");
      if (isIconElement || isButtonIconElement || isRenderedButtonIconElement) {
        if (!startIcon && content.length === 0) {
          const key = "icon-start";
          const side = "start";
          if (isIconElement) {
            startIcon = (0, import_jsx_runtime16.jsx)(Button2.Icon, { side, children: item }, key);
          } else if (isButtonIconElement) {
            startIcon = React771.cloneElement(item, {
              side
            });
          } else {
            startIcon = React771.cloneElement(item, {
              className: b10("icon", { side: getIconSide(side) }, item.props.className)
            });
          }
        } else if (!endIcon && content.length !== 0) {
          const key = "icon-end";
          const side = "end";
          if (isIconElement) {
            endIcon = (0, import_jsx_runtime16.jsx)(Button2.Icon, { side, children: item }, key);
          } else if (isButtonIconElement) {
            endIcon = React771.cloneElement(item, {
              side
            });
          } else {
            endIcon = React771.cloneElement(item, {
              className: b10("icon", { side: getIconSide(side) }, item.props.className)
            });
          }
        }
      } else {
        content.push(item);
      }
    }
    if (content.length > 0) {
      text2 = (0, import_jsx_runtime16.jsx)("span", { className: b10("text"), children: content }, "text");
    }
    return [startIcon, endIcon, text2];
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/Text/Text.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var React772 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Text/colorText/colorText.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Text/colorText/colorText.css";
var b11 = block("color-text");
var TEXT_COLORS = [
  "primary",
  "complementary",
  "secondary",
  "hint",
  "info",
  "info-heavy",
  "positive",
  "positive-heavy",
  "warning",
  "warning-heavy",
  "danger",
  "danger-heavy",
  "utility",
  "utility-heavy",
  "misc",
  "misc-heavy",
  "brand",
  "link",
  "link-hover",
  "link-visited",
  "link-visited-hover",
  "dark-primary",
  "dark-complementary",
  "dark-secondary",
  "light-primary",
  "light-complementary",
  "light-secondary",
  "light-hint",
  "inverted-primary",
  "inverted-complementary",
  "inverted-secondary",
  "inverted-hint"
];
var colorText = ({ color }, className) => b11({ color }, className);

// node_modules/@gravity-ui/uikit/build/esm/components/Text/text/text.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Text/text/text.css";
var b12 = block("text");
var TEXT_VARIANTS = [
  "display-4",
  "display-3",
  "display-2",
  "display-1",
  "header-2",
  "header-1",
  "subheader-3",
  "subheader-2",
  "subheader-1",
  "body-3",
  "body-2",
  "body-1",
  "body-short",
  "caption-2",
  "caption-1",
  "code-3",
  "code-inline-3",
  "code-2",
  "code-inline-2",
  "code-1",
  "code-inline-1"
];
var text = ({ variant = "body-1", ellipsis, ellipsisLines, whiteSpace, wordBreak }, className) => b12({
  variant,
  ellipsis,
  ws: whiteSpace,
  wb: wordBreak,
  "ellipsis-lines": ellipsisLines
}, className);

// node_modules/@gravity-ui/uikit/build/esm/components/Text/Text.js
var Text = React772.forwardRef(function Text2({ as, children: children2, variant, className, ellipsis, color, whiteSpace, wordBreak, ellipsisLines, style: outerStyle, qa, ...rest }, ref2) {
  const Tag = as || "span";
  const style3 = {
    ...outerStyle
  };
  if (typeof ellipsisLines === "number") {
    style3.WebkitLineClamp = ellipsisLines;
  }
  return (0, import_jsx_runtime17.jsx)(Tag, { ref: ref2, className: text({
    variant,
    ellipsis,
    whiteSpace,
    wordBreak,
    ellipsisLines: typeof ellipsisLines === "number"
  }, color ? colorText({ color }, className) : className), style: style3, "data-qa": qa, ...rest, children: children2 });
});
Text.displayName = "Text";

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/components/CollapseActions.js
var import_react8 = __toESM(require_react(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var React800 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var React797 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.classname.js
var cnDropdownMenu = block("dropdown-menu");

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuContext.js
var React773 = __toESM(require_react(), 1);
var DropdownMenuContext = React773.createContext({
  toggle() {
  },
  data: void 0
});
DropdownMenuContext.displayName = "DropdownMenu.Context";

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuItem.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var React794 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/Menu.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var React776 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/MenuGroup.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var React774 = __toESM(require_react(), 1);
var b13 = block("menu");
var MenuGroup = React774.forwardRef(function MenuGroup2({ label, children: children2, style: style3, className, qa }, ref2) {
  const labelId = useUniqId();
  return (0, import_jsx_runtime18.jsx)("li", { ref: ref2, className: b13("list-group-item"), children: (0, import_jsx_runtime18.jsxs)("div", { style: style3, className: b13("group", className), "data-qa": qa, children: [label && (0, import_jsx_runtime18.jsx)("div", { id: labelId, className: b13("group-label"), children: label }), (0, import_jsx_runtime18.jsx)("ul", { role: "group", "aria-labelledby": labelId, className: b13("group-list"), children: children2 })] }) });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/MenuItem.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var React775 = __toESM(require_react(), 1);
var b14 = block("menu");
var MenuItem = React775.forwardRef(function MenuItem2({ iconStart, iconEnd, title, disabled, active, selected, href, target, rel, onClick, style: style3, className, theme, extraProps, children: children2, qa }, ref2) {
  const { onKeyDown } = useActionHandlers(onClick);
  const handleClickCapture = React775.useCallback((event) => {
    eventBroker.publish({
      componentId: "MenuItem",
      eventId: "click",
      domEvent: event
    });
  }, []);
  const defaultProps3 = {
    role: "menuitem",
    onKeyDown: onClick && !disabled ? onKeyDown : void 0
  };
  const commonProps = {
    title,
    onClick: disabled ? void 0 : onClick,
    onClickCapture: disabled ? void 0 : handleClickCapture,
    style: style3,
    tabIndex: disabled ? -1 : 0,
    className: b14("item", { disabled, active, selected, theme, interactive: Boolean(onClick) || Boolean(href) }, className),
    "data-qa": qa
  };
  const content = [
    iconStart && (0, import_jsx_runtime19.jsx)("div", { className: b14("item-icon"), children: iconStart }, "icon-start"),
    (0, import_jsx_runtime19.jsx)("div", { className: b14("item-content"), children: children2 }, "content"),
    iconEnd && (0, import_jsx_runtime19.jsx)("div", { className: b14("item-icon-end"), children: iconEnd }, "icon-end")
  ];
  let item;
  if (href) {
    item = (0, import_jsx_runtime19.jsx)("a", { ...defaultProps3, ...extraProps, ...commonProps, href, target, rel, children: content });
  } else {
    item = (0, import_jsx_runtime19.jsx)("div", { ...defaultProps3, ...extraProps, ...commonProps, children: content });
  }
  return (0, import_jsx_runtime19.jsx)("li", { ref: ref2, className: b14("list-item"), children: item });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/Menu.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Menu/Menu.css";
var b15 = block("menu");
var Menu = React776.forwardRef(function Menu2({ size: size5 = "m", children: children2, style: style3, className, qa, ...restProps }, ref2) {
  return (0, import_jsx_runtime20.jsx)("ul", {
    ...filterDOMProps(restProps, { labelable: true }),
    ref: ref2,
    role: "menu",
    // tabIndex={0}
    style: style3,
    className: b15({ size: size5 }, className),
    "data-qa": qa,
    children: children2
  });
});
Menu.Item = MenuItem;
Menu.Group = MenuGroup;

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuPopup.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var React792 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var React790 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useAnimateHeight/useAnimateHeight.js
var React777 = __toESM(require_react(), 1);
function useAnimateHeight({ ref: ref2, enabled }) {
  const previousHeight = React777.useRef(null);
  const isTransitioningHeight = React777.useRef(false);
  const overflowY = React777.useRef("");
  const animationFrame = React777.useRef(-1);
  React777.useEffect(() => {
    let mutationObserver;
    const node = ref2 == null ? void 0 : ref2.current;
    if (node && enabled) {
      mutationObserver = new MutationObserver((mutations) => {
        if (!mutations.length || !isTransitioningHeight.current)
          return;
        previousHeight.current = calculateNodeHeight(node);
        isTransitioningHeight.current = false;
        node.style.height = "";
        node.style.overflowY = overflowY.current;
        cancelAnimationFrame(animationFrame.current);
      });
      mutationObserver.observe(node, {
        childList: true,
        subtree: true
      });
    }
    return () => {
      mutationObserver == null ? void 0 : mutationObserver.disconnect();
    };
  }, [ref2, enabled]);
  React777.useEffect(() => {
    if (!enabled) {
      previousHeight.current = null;
      isTransitioningHeight.current = false;
    }
  }, [enabled]);
  const handleResize = React777.useCallback((resizeInfo) => {
    var _a;
    const node = ref2 == null ? void 0 : ref2.current;
    if (!node || isTransitioningHeight.current || !enabled) {
      return;
    }
    const contentHeight = calculateNodeHeight(node);
    if (!previousHeight.current && !overflowY.current) {
      previousHeight.current = contentHeight;
      overflowY.current = node.style.overflowY;
      return;
    }
    (_a = resizeInfo.observer) == null ? void 0 : _a.unobserve(node);
    node.style.height = `${previousHeight.current}px`;
    isTransitioningHeight.current = true;
    node.style.overflowY = "clip";
    const handleTransitionEnd = (event) => {
      if (event.propertyName !== "height") {
        return;
      }
      node.removeEventListener("transitionend", handleTransitionEnd);
      setTimeout(() => {
        node.style.height = "";
        node.style.overflowY = overflowY.current;
        isTransitioningHeight.current = false;
      }, 0);
    };
    node.addEventListener("transitionend", handleTransitionEnd);
    animationFrame.current = requestAnimationFrame(() => {
      var _a2;
      (_a2 = resizeInfo.observer) == null ? void 0 : _a2.observe(node);
      node.style.height = `${contentHeight}px`;
      previousHeight.current = contentHeight;
    });
  }, [ref2, enabled]);
  useResizeObserver({ ref: enabled ? ref2 : void 0, onResize: handleResize });
}
function calculateNodeHeight(node) {
  const computedStyle = window.getComputedStyle(node, null);
  if (computedStyle.getPropertyValue("box-sizing") === "border-box") {
    return node.clientHeight;
  }
  const paddingTop = parseFloat(computedStyle.getPropertyValue("padding-top"));
  const paddingBottom = parseFloat(computedStyle.getPropertyValue("padding-bottom"));
  return node.clientHeight - paddingTop - paddingBottom;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useBoolean/useBoolean.js
var React778 = __toESM(require_react(), 1);
function useBoolean(initialState) {
  const [value, setValue] = React778.useState(initialState);
  return [
    value,
    React778.useCallback(() => setValue(true), []),
    React778.useCallback(() => setValue(false), []),
    React778.useCallback(() => setValue((val) => !val), [])
  ];
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useCheckbox/useCheckbox.js
var React780 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useFormResetHandler/index.js
var React779 = __toESM(require_react(), 1);
function useFormResetHandler({ initialValue: initialValue2, onReset }) {
  const [formElement, setFormElement] = React779.useState(null);
  const resetValue = React779.useRef(initialValue2);
  React779.useEffect(() => {
    if (!formElement) {
      return void 0;
    }
    const handleReset = () => {
      onReset(resetValue.current);
    };
    formElement.addEventListener("reset", handleReset);
    return () => {
      formElement.removeEventListener("reset", handleReset);
    };
  }, [formElement, onReset]);
  const ref2 = React779.useCallback((node) => {
    setFormElement((node == null ? void 0 : node.form) ?? null);
  }, []);
  return ref2;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useCheckbox/useCheckbox.js
function useCheckbox({ name, value, id, defaultChecked, checked, indeterminate, onUpdate, onChange, controlRef, controlProps, onFocus, onBlur, disabled }) {
  const innerControlRef = React780.useRef(null);
  const [isChecked, setCheckedState] = useControlledState(checked, defaultChecked ?? false, onUpdate);
  const inputChecked = indeterminate ? false : checked;
  const inputAriaChecked = indeterminate ? "mixed" : isChecked;
  const fieldRef = useFormResetHandler({ initialValue: isChecked, onReset: setCheckedState });
  const handleRef = useForkRef(controlRef, innerControlRef, fieldRef);
  React780.useLayoutEffect(() => {
    if (innerControlRef.current) {
      innerControlRef.current.indeterminate = Boolean(indeterminate);
    }
  }, [indeterminate]);
  const handleChange = (event) => {
    setCheckedState(event.target.checked);
    if (onChange) {
      onChange(event);
    }
  };
  const handleClickCapture = React780.useCallback((event) => {
    eventBroker.publish({
      componentId: "Checkbox",
      eventId: "click",
      domEvent: event,
      meta: {
        checked: event.target.checked
      }
    });
  }, []);
  const inputProps = {
    ...controlProps,
    name,
    value,
    id,
    onFocus,
    onBlur,
    disabled,
    type: "checkbox",
    onChange: handleChange,
    onClickCapture: handleClickCapture,
    defaultChecked,
    checked: inputChecked,
    "aria-checked": inputAriaChecked,
    ref: handleRef
  };
  return { checked: isChecked, inputProps };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useHover/useHover.js
var React781 = __toESM(require_react(), 1);
function useHover2() {
  const [isHovering, setIsHovering] = React781.useState(false);
  const onMouseEnter = React781.useCallback(() => {
    setIsHovering(true);
  }, []);
  const onMouseLeave = React781.useCallback(() => {
    setIsHovering(false);
  }, []);
  return [onMouseEnter, onMouseLeave, isHovering];
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useCloseOnTimeout/useCloseOnTimeout.js
function useCloseOnTimeout({ onClose, timeout: timeout2 }) {
  const [onMouseOver, onMouseLeave, isHovering] = useHover2();
  useTimeout(onClose, isHovering ? null : timeout2);
  return { onMouseOver, onMouseLeave };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useStateWithCallback/useStateWithCallback.js
var React782 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/typeCheckers.js
var isFunction = (value) => typeof value === "function";

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useStateWithCallback/useStateWithCallback.js
function useStateWithCallback(initialValue2, callback) {
  const [state, setState] = React782.useState(initialValue2);
  const setWithCallback = React782.useCallback((nextValue) => {
    if (isFunction(nextValue)) {
      setState((previousState) => {
        const newState = nextValue(previousState);
        callback == null ? void 0 : callback(newState);
        return newState;
      });
    } else {
      callback == null ? void 0 : callback(nextValue);
      setState(nextValue);
    }
  }, [callback]);
  return [state, setWithCallback];
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useConditionallyControlledState/useConditionallyControlledState.js
function useConditionallyControlledState(property, setProperty, initialState, isControlled = property !== void 0 && setProperty !== void 0) {
  const state = useStateWithCallback(property || initialState, setProperty);
  if (isControlled) {
    return [property, setProperty];
  }
  return state;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useElementSize/useElementSize.js
var React783 = __toESM(require_react(), 1);
var import_round = __toESM(require_round(), 1);
var import_throttle = __toESM(require_throttle(), 1);
var RESIZE_THROTTLE = 16;
var ROUND_PRECISION = 2;
function useElementSize(ref2, key) {
  const [size5, setSize] = React783.useState({
    width: 0,
    height: 0
  });
  React783.useLayoutEffect(() => {
    const element = ref2 == null ? void 0 : ref2.current;
    if (!element) {
      return void 0;
    }
    setSize({
      width: (0, import_round.default)(element.offsetWidth, ROUND_PRECISION),
      height: (0, import_round.default)(element.offsetHeight, ROUND_PRECISION)
    });
    const handleResize = (entries) => {
      if (!Array.isArray(entries)) {
        return;
      }
      const entry = entries[0];
      if (entry.borderBoxSize) {
        const borderBoxSize = entry.borderBoxSize[0] ? entry.borderBoxSize[0] : entry.borderBoxSize;
        setSize({
          width: (0, import_round.default)(borderBoxSize.inlineSize, ROUND_PRECISION),
          height: (0, import_round.default)(borderBoxSize.blockSize, ROUND_PRECISION)
        });
      } else {
        const target = entry.target;
        setSize({
          width: (0, import_round.default)(target.offsetWidth, ROUND_PRECISION),
          height: (0, import_round.default)(target.offsetHeight, ROUND_PRECISION)
        });
      }
    };
    const observer = new ResizeObserver((0, import_throttle.default)(handleResize, RESIZE_THROTTLE));
    observer.observe(element);
    return () => {
      observer.disconnect();
    };
  }, [ref2, key]);
  return size5;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/usePrevious/usePrevious.js
var React784 = __toESM(require_react(), 1);
function usePrevious(value) {
  const ref2 = React784.useRef();
  React784.useEffect(() => {
    ref2.current = value;
  });
  return ref2.current;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useRadio/useRadio.js
var React785 = __toESM(require_react(), 1);
function useRadio({ name, value, checked, defaultChecked, disabled, controlRef, controlProps, onUpdate, onChange, onFocus, onBlur, id }) {
  const controlId = useUniqId();
  const innerControlRef = React785.useRef(null);
  const [isChecked, setCheckedState] = useControlledState(checked, defaultChecked ?? false, onUpdate);
  const formFieldRef = useFormResetHandler({ initialValue: isChecked, onReset: setCheckedState });
  const handleRef = useForkRef(controlRef, innerControlRef, formFieldRef);
  const handleChange = (event) => {
    setCheckedState(event.target.checked);
    if (onChange) {
      onChange(event);
    }
  };
  const onChangeCapture = (event) => {
    eventBroker.publish({
      componentId: "Radio",
      eventId: "click",
      domEvent: event
    });
  };
  const inputProps = {
    ...controlProps,
    name: name || controlId,
    value,
    id,
    onFocus,
    onBlur,
    disabled,
    type: "radio",
    onChange: handleChange,
    onChangeCapture,
    checked,
    defaultChecked,
    "aria-checked": isChecked,
    ref: handleRef
  };
  return { checked: isChecked, inputProps };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useRadioGroup/useRadioGroup.js
function useRadioGroup(props) {
  const { name, value, defaultValue, options = [], disabled, onUpdate, onChange, onFocus, onBlur } = props;
  const controlId = useUniqId();
  const [currentValue, setValueState] = useControlledState(value, defaultValue ?? null, onUpdate);
  const fieldRef = useFormResetHandler({
    initialValue: currentValue,
    onReset: setValueState
  });
  const { focusWithinProps } = useFocusWithin({ onFocusWithin: onFocus, onBlurWithin: onBlur });
  const handleChange = (event) => {
    setValueState(event.target.value);
    if (onChange) {
      onChange(event);
    }
  };
  const containerProps = {
    ...filterDOMProps(props, { labelable: true }),
    ...focusWithinProps,
    role: "radiogroup",
    "aria-disabled": disabled
  };
  const optionsProps = options.map((option) => ({
    name: name || controlId,
    value: option.value,
    content: option.content,
    title: option.title,
    checked: currentValue === String(option.value),
    disabled: disabled || option.disabled,
    onChange: handleChange,
    ref: fieldRef
  }));
  return { containerProps, optionsProps };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useTooltipVisible/index.js
var React786 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useUpdateEffect/useUpdateEffect.js
var React787 = __toESM(require_react(), 1);
var useUpdateEffect = (effect, deps) => {
  const isInitial = React787.useRef(true);
  React787.useEffect(() => {
    if (isInitial.current) {
      isInitial.current = false;
      return;
    }
    effect();
  }, deps);
};

// node_modules/@gravity-ui/uikit/build/esm/components/utils/layer-manager/LayerManager.js
var LayerManager = class {
  constructor() {
    __publicField(this, "stack", []);
    __publicField(this, "mouseDownLayerTarget");
    __publicField(this, "handleDocumentKeyDown", (event) => {
      var _a, _b, _c;
      if (event.code === KeyCode.ESCAPE) {
        const topLayer = this.getTopLayer();
        if (!topLayer.disableEscapeKeyDown) {
          (_a = topLayer.onEscapeKeyDown) == null ? void 0 : _a.call(topLayer, event);
          (_b = topLayer.onClose) == null ? void 0 : _b.call(topLayer, event, "escapeKeyDown");
        }
      }
      if (event.code === "Enter") {
        const topLayer = this.getTopLayer();
        (_c = topLayer.onEnterKeyDown) == null ? void 0 : _c.call(topLayer, event);
      }
    });
    __publicField(this, "handleDocumentClick", (event) => {
      var _a, _b;
      if (this.isToastClick(event)) {
        return;
      }
      let layer;
      let mouseDownTarget = null;
      if (this.mouseDownLayerTarget) {
        layer = this.mouseDownLayerTarget.layer;
        mouseDownTarget = this.mouseDownLayerTarget.target;
        this.mouseDownLayerTarget = void 0;
        if (!this.stack.includes(layer)) {
          return;
        }
      } else {
        layer = this.getTopLayer();
      }
      if (!layer.disableOutsideClick && this.isOutsideClick(layer, event, mouseDownTarget)) {
        (_a = layer.onOutsideClick) == null ? void 0 : _a.call(layer, event);
        (_b = layer.onClose) == null ? void 0 : _b.call(layer, event, "outsideClick");
      }
    });
    __publicField(this, "handleDocumentMouseDown", (event) => {
      const layer = this.getTopLayer();
      if (layer) {
        this.mouseDownLayerTarget = { layer, target: event.target };
      }
    });
  }
  add(config3) {
    this.stack.push(config3);
    if (this.stack.length === 1) {
      this.addListeners();
    }
    this.notifyLayersChange();
  }
  remove(config3) {
    const index3 = this.stack.indexOf(config3);
    this.stack.splice(index3, 1);
    if (this.stack.length === 0) {
      this.removeListeners();
    }
    this.notifyLayersChange();
  }
  getLayersCount() {
    return this.stack.length;
  }
  getLayers() {
    return this.stack.map(({ type }) => ({ type }));
  }
  addListeners() {
    document.addEventListener("keydown", this.handleDocumentKeyDown);
    document.addEventListener("click", this.handleDocumentClick, true);
    document.addEventListener("mousedown", this.handleDocumentMouseDown, true);
  }
  removeListeners() {
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    document.removeEventListener("click", this.handleDocumentClick, true);
    document.removeEventListener("mousedown", this.handleDocumentMouseDown, true);
  }
  notifyLayersChange() {
    eventBroker.publish({
      componentId: "LayerManager",
      eventId: "layerschange",
      meta: {
        /**
         * @deprecated use layers
         */
        layersCount: this.getLayersCount(),
        layers: this.getLayers()
      }
    });
  }
  getTopLayer() {
    return this.stack[this.stack.length - 1];
  }
  isOutsideClick(layer, event, mouseDownTarget = null) {
    const contentElements = layer.contentRefs || [];
    const { target } = event;
    const composedPath = typeof event.composedPath === "function" ? event.composedPath() : [];
    if (contentElements.length > 0) {
      const isClickOnContentElements = contentElements.some((el) => {
        var _a, _b, _c, _d;
        return ((_b = (_a = el == null ? void 0 : el.current) == null ? void 0 : _a.contains) == null ? void 0 : _b.call(_a, target)) || ((_d = (_c = el == null ? void 0 : el.current) == null ? void 0 : _c.contains) == null ? void 0 : _d.call(_c, mouseDownTarget)) || composedPath.includes(el == null ? void 0 : el.current);
      });
      return !isClickOnContentElements;
    }
    return false;
  }
  isToastClick(event) {
    const composedPath = typeof event.composedPath === "function" ? event.composedPath() : [];
    return composedPath.some((el) => {
      var _a;
      return Boolean((_a = el == null ? void 0 : el.dataset) == null ? void 0 : _a.toast);
    });
  }
};
var layerManager = new LayerManager();
var getLayersCount = () => {
  return layerManager.getLayersCount();
};

// node_modules/@gravity-ui/uikit/build/esm/components/utils/layer-manager/useLayer.js
var React788 = __toESM(require_react(), 1);
function useLayer({ open, disableEscapeKeyDown, disableOutsideClick, onEscapeKeyDown, onEnterKeyDown, onOutsideClick, onClose, contentRefs, enabled = true, type }) {
  const layerConfigRef = React788.useRef({
    disableEscapeKeyDown,
    disableOutsideClick,
    onEscapeKeyDown,
    onEnterKeyDown,
    onOutsideClick,
    onClose,
    contentRefs,
    type
  });
  React788.useEffect(() => {
    Object.assign(layerConfigRef.current, {
      disableEscapeKeyDown,
      disableOutsideClick,
      onEscapeKeyDown,
      onEnterKeyDown,
      onOutsideClick,
      onClose,
      contentRefs,
      enabled
    });
  }, [
    disableEscapeKeyDown,
    disableOutsideClick,
    onEscapeKeyDown,
    onEnterKeyDown,
    onOutsideClick,
    onClose,
    contentRefs,
    enabled
  ]);
  React788.useEffect(() => {
    if (open && enabled) {
      const layerConfig = layerConfigRef.current;
      layerManager.add(layerConfig);
      return () => {
        layerManager.remove(layerConfig);
      };
    }
    return void 0;
  }, [open, enabled]);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/PopupArrow.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var React789 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.css";
var b16 = block("popup");
var PopupArrow = React789.forwardRef(function PopupArrow2({ styles }, ref2) {
  return (0, import_jsx_runtime21.jsx)("div", { ref: ref2, className: b16("arrow"), style: styles, children: (0, import_jsx_runtime21.jsxs)("div", { className: b16("arrow-content"), children: [(0, import_jsx_runtime21.jsx)("div", { className: b16("arrow-circle-wrapper"), children: (0, import_jsx_runtime21.jsx)("div", { className: b16("arrow-circle", { left: true }) }) }), (0, import_jsx_runtime21.jsx)("div", { className: b16("arrow-circle-wrapper"), children: (0, import_jsx_runtime21.jsx)("div", { className: b16("arrow-circle", { right: true }) }) })] }) });
});

// node_modules/@gravity-ui/i18n/build/esm/replace-params.js
var PARAM_REGEXP = /{{(.*?)}}/g;
function replaceParams(keyValue, params) {
  let result = "";
  let lastIndex = PARAM_REGEXP.lastIndex = 0;
  let match2;
  while (match2 = PARAM_REGEXP.exec(keyValue)) {
    if (lastIndex !== match2.index) {
      result += keyValue.slice(lastIndex, match2.index);
    }
    lastIndex = PARAM_REGEXP.lastIndex;
    const [all, key] = match2;
    if (key && Object.prototype.hasOwnProperty.call(params, key)) {
      result += params[key];
    } else {
      result += all;
    }
  }
  if (lastIndex < keyValue.length) {
    result += keyValue.slice(lastIndex);
  }
  return result;
}

// node_modules/@gravity-ui/i18n/build/esm/consts.js
var KEYSET_SEPARATOR = "::";
var MAX_NESTING_DEPTH = 1;
var getNestingTranslationsRegExp = () => new RegExp(/\$t{([^}]+)}/g);

// node_modules/@gravity-ui/i18n/build/esm/translation-helpers.js
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["EmptyKeyset"] = "EMPTY_KEYSET";
  ErrorCode2["EmptyLanguageData"] = "EMPTY_LANGUAGE_DATA";
  ErrorCode2["KeysetNotFound"] = "KEYSET_NOT_FOUND";
  ErrorCode2["MissingKey"] = "MISSING_KEY";
  ErrorCode2["MissingKeyFor0"] = "MISSING_KEY_FOR_0";
  ErrorCode2["MissingKeyParamsCount"] = "MISSING_KEY_PARAMS_COUNT";
  ErrorCode2["MissingKeyPlurals"] = "MISSING_KEY_PLURALS";
  ErrorCode2["MissingInheritedKey"] = "MISSING_INHERITED_KEY";
  ErrorCode2["NestedPlural"] = "NESTED_PLURAL";
  ErrorCode2["ExceedTranslationNestingDepth"] = "EXCEED_TRANSLATION_NESTING_DEPTH";
  ErrorCode2["NoLanguageData"] = "NO_LANGUAGE_DATA";
})(ErrorCode || (ErrorCode = {}));
var codeValues = Object.values(ErrorCode);
function mapErrorCodeToMessage(args) {
  const { code, fallbackLang: fallbackLang2, lang: lang2 } = args;
  let message = `Using language ${lang2}. `;
  switch (code) {
    case ErrorCode.EmptyKeyset: {
      message += `Keyset is empty.`;
      break;
    }
    case ErrorCode.EmptyLanguageData: {
      message += "Language data is empty.";
      break;
    }
    case ErrorCode.KeysetNotFound: {
      message += "Keyset not found.";
      break;
    }
    case ErrorCode.MissingKey: {
      message += "Missing key.";
      break;
    }
    case ErrorCode.MissingKeyFor0: {
      message += "Missing key for 0";
      return message;
    }
    case ErrorCode.MissingKeyParamsCount: {
      message += "Missing params.count for key.";
      break;
    }
    case ErrorCode.MissingKeyPlurals: {
      message += "Missing required plurals.";
      break;
    }
    case ErrorCode.NoLanguageData: {
      message = `Language "${lang2}" is not defined, make sure you call setLang for the same language you called registerKeysets for!`;
    }
  }
  if (fallbackLang2) {
    message += ` Trying to use fallback language "${fallbackLang2}"...`;
  }
  return message;
}
var hasNestingTranslations = (keyValue) => {
  var _a;
  const NESTING_PREGEXP = getNestingTranslationsRegExp();
  const match2 = NESTING_PREGEXP.exec(keyValue);
  return ((_a = match2 === null || match2 === void 0 ? void 0 : match2.length) !== null && _a !== void 0 ? _a : 0) > 0;
};
var getPluralValues = (keyValue) => {
  if (keyValue instanceof Array) {
    return keyValue;
  } else if (keyValue instanceof Object) {
    return Object.values(keyValue);
  }
  return [];
};

// node_modules/@gravity-ui/i18n/build/esm/types.js
var PluralForm;
(function(PluralForm2) {
  PluralForm2[PluralForm2["One"] = 0] = "One";
  PluralForm2[PluralForm2["Few"] = 1] = "Few";
  PluralForm2[PluralForm2["Many"] = 2] = "Many";
  PluralForm2[PluralForm2["None"] = 3] = "None";
})(PluralForm || (PluralForm = {}));
function isPluralValue(value) {
  return typeof value !== "string";
}

// node_modules/@gravity-ui/i18n/build/esm/plural/en.js
function en_default(count3, pluralForms) {
  if (count3 === 0) {
    return pluralForms.None;
  }
  if (count3 === 1 || count3 === -1) {
    return pluralForms.One;
  }
  return pluralForms.Many;
}

// node_modules/@gravity-ui/i18n/build/esm/plural/ru.js
function ru_default(count3, pluralForms) {
  const lastDigit = Math.abs(count3 % 10);
  const last2Digits = Math.abs(count3 % 100);
  if (count3 === 0) {
    return pluralForms.None;
  }
  if (lastDigit === 1 && last2Digits !== 11) {
    return pluralForms.One;
  }
  if (lastDigit > 1 && lastDigit < 5 && (last2Digits < 10 || last2Digits > 20)) {
    return pluralForms.Few;
  }
  return pluralForms.Many;
}

// node_modules/@gravity-ui/i18n/build/esm/plural/general.js
function getPluralViaIntl(value, count3, lang2) {
  if (value.zero && count3 === 0) {
    return value.zero;
  }
  if (!Intl.PluralRules) {
    throw new Error("Intl.PluralRules is not available. Use polyfill.");
  }
  const pluralRules = new Intl.PluralRules(lang2);
  const form = pluralRules.select(count3);
  if (form === "other" && typeof value.other === "undefined") {
    return value.many || value.few;
  }
  return value[form] || value.other;
}
function getPluralValue({ value, count: count3, lang: lang2, pluralizers, log: log2, key }) {
  if (!Array.isArray(value)) {
    return getPluralViaIntl(value, count3, lang2) || key;
  }
  if (!pluralizers) {
    log2("Can not use deprecated plural format without pluralizers");
    return key;
  }
  if (!pluralizers[lang2]) {
    log2(`Pluralization is not configured for language '${lang2}', falling back to the english ruleset`);
  }
  if (value.length < 3) {
    log2("Missing required plurals");
    return key;
  }
  const pluralizer = pluralizers[lang2] || pluralizers["en"];
  if (!pluralizer) {
    log2("Fallback pluralization is not configured!");
    return key;
  }
  return value[pluralizer(count3, PluralForm)] || value[PluralForm.Many] || key;
}

// node_modules/@gravity-ui/i18n/build/esm/index.js
var I18N = class {
  constructor(options = {}) {
    this.data = {};
    this.pluralizers = {
      en: en_default,
      ru: ru_default
    };
    this.logger = null;
    const { data, fallbackLang: fallbackLang2, lang: lang2, logger = null } = options;
    this.fallbackLang = fallbackLang2;
    this.lang = lang2;
    this.logger = logger;
    if (data) {
      Object.entries(data).forEach(([keysetLang, keysetData]) => {
        this.registerKeysets(keysetLang, keysetData);
      });
    }
  }
  setLang(lang2) {
    this.lang = lang2;
  }
  setFallbackLang(fallbackLang2) {
    this.fallbackLang = fallbackLang2;
  }
  /**
   * @deprecated Plurals automatically used from Intl.PluralRules. You can safely remove this call. Will be removed in v2.
   */
  configurePluralization(pluralizers) {
    this.pluralizers = Object.assign({}, this.pluralizers, pluralizers);
  }
  registerKeyset(lang2, keysetName, data = {}) {
    const isAlreadyRegistered = this.data[lang2] && Object.prototype.hasOwnProperty.call(this.data[lang2], keysetName);
    if (isAlreadyRegistered && true) {
      this.warn(`Keyset '${keysetName}' is already registered.`);
    }
    this.data[lang2] = Object.assign({}, this.data[lang2], { [keysetName]: data });
  }
  registerKeysets(lang2, data) {
    Object.keys(data).forEach((keysetName) => {
      this.registerKeyset(lang2, keysetName, data[keysetName]);
    });
  }
  has(keysetName, key, lang2) {
    var _a;
    const languageData = this.getLanguageData(lang2);
    return Boolean(languageData && languageData[keysetName] && ((_a = languageData[keysetName]) === null || _a === void 0 ? void 0 : _a[key]));
  }
  i18n(keysetName, key, params) {
    if (!this.lang && !this.fallbackLang) {
      throw new Error('Language is not specified. You should set at least one of these: "lang", "fallbackLang"');
    }
    let text2;
    if (this.lang) {
      text2 = this._i18n(keysetName, key, this.lang, params);
    } else {
      this.warn("Target language is not specified.");
    }
    if (text2 === void 0 && this.fallbackLang && this.fallbackLang !== this.lang) {
      text2 = this._i18n(keysetName, key, this.fallbackLang, params);
    }
    return text2 !== null && text2 !== void 0 ? text2 : key;
  }
  keyset(keysetName) {
    return (key, params) => {
      return this.i18n(keysetName, key, params);
    };
  }
  warn(msg, keyset, key) {
    var _a;
    let cacheKey = "";
    if (keyset) {
      cacheKey += keyset;
      if (key) {
        cacheKey += `.${key}`;
      }
    } else {
      cacheKey = "languageData";
    }
    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(`I18n: ${msg}`, {
      level: "info",
      logger: cacheKey,
      extra: {
        type: "i18n"
      }
    });
  }
  getLanguageData(lang2) {
    const langCode = lang2 || this.lang;
    return langCode ? this.data[langCode] : void 0;
  }
  _i18n(keysetName, key, lang2, params) {
    const { text: text2, details } = new I18NTranslation(this, lang2, key, keysetName, params).getTranslationData();
    if (details) {
      const message = mapErrorCodeToMessage({
        code: details.code,
        lang: lang2,
        fallbackLang: this.fallbackLang === lang2 ? void 0 : this.fallbackLang
      });
      this.warn(message, details.keysetName, details.key);
    }
    return text2;
  }
};
var I18NTranslation = class _I18NTranslation {
  constructor(i18n3, lang2, key, keysetName, params, nestingDepth) {
    this.i18n = i18n3;
    this.lang = lang2;
    this.key = key;
    this.keysetName = keysetName;
    this.params = params;
    this.nestingDepth = nestingDepth !== null && nestingDepth !== void 0 ? nestingDepth : 0;
  }
  getTranslationData() {
    var _a;
    const { data: keyset, details } = this.getKeyset();
    if (details) {
      return { details };
    }
    const keyValue = keyset && keyset[this.key];
    const result = {};
    if (keyValue === void 0) {
      return this.getTranslationDataError(ErrorCode.MissingKey);
    }
    if (isPluralValue(keyValue)) {
      const isNested = this.nestingDepth > 0;
      const isPluralValueHasNestingTranslations = getPluralValues(keyValue).some((kv) => hasNestingTranslations(kv));
      if (isNested || isPluralValueHasNestingTranslations) {
        return this.getTranslationDataError(ErrorCode.NestedPlural);
      }
      const count3 = Number((_a = this.params) === null || _a === void 0 ? void 0 : _a.count);
      if (Number.isNaN(count3)) {
        return this.getTranslationDataError(ErrorCode.MissingKeyParamsCount);
      }
      result.text = getPluralValue({
        key: this.key,
        value: keyValue,
        count: count3,
        lang: this.lang || "en",
        pluralizers: this.i18n.pluralizers,
        log: (message) => this.i18n.warn(message, this.keysetName, this.key)
      });
    } else {
      result.text = String(keyValue);
    }
    if (this.params) {
      result.text = replaceParams(String(result.text), this.params);
    }
    const replaceTranslationsInheritanceResult = this.replaceTranslationsInheritance({
      keyValue: String(result.text)
    });
    if (!replaceTranslationsInheritanceResult.text) {
      return replaceTranslationsInheritanceResult;
    }
    result.text = replaceTranslationsInheritanceResult.text;
    return result;
  }
  getTranslationDataError(errorCode) {
    return { details: { code: errorCode, keysetName: this.keysetName, key: this.key } };
  }
  getKeyset() {
    const languageData = this.i18n.getLanguageData(this.lang);
    if (typeof languageData === "undefined") {
      return this.getTranslationDataError(ErrorCode.NoLanguageData);
    }
    if (Object.keys(languageData).length === 0) {
      return this.getTranslationDataError(ErrorCode.EmptyLanguageData);
    }
    const keyset = languageData[this.keysetName];
    if (!keyset) {
      return this.getTranslationDataError(ErrorCode.KeysetNotFound);
    }
    if (Object.keys(keyset).length === 0) {
      return this.getTranslationDataError(ErrorCode.EmptyKeyset);
    }
    return { data: keyset };
  }
  replaceTranslationsInheritance(args) {
    const { keyValue } = args;
    const NESTING_PREGEXP = getNestingTranslationsRegExp();
    let result = "";
    let lastIndex = NESTING_PREGEXP.lastIndex = 0;
    let match2;
    while (match2 = NESTING_PREGEXP.exec(keyValue)) {
      if (lastIndex !== match2.index) {
        result += keyValue.slice(lastIndex, match2.index);
      }
      lastIndex = NESTING_PREGEXP.lastIndex;
      const [all, key] = match2;
      if (key) {
        if (this.nestingDepth + 1 > MAX_NESTING_DEPTH) {
          return this.getTranslationDataError(ErrorCode.ExceedTranslationNestingDepth);
        }
        let [inheritedKey, inheritedKeysetName] = [
          key,
          void 0
        ];
        const parts = key.split(KEYSET_SEPARATOR);
        if (parts.length > 1) {
          [inheritedKeysetName, inheritedKey] = [parts[0], parts[1]];
        }
        if (!inheritedKey) {
          return this.getTranslationDataError(ErrorCode.MissingInheritedKey);
        }
        const data = new _I18NTranslation(this.i18n, this.lang, inheritedKey, inheritedKeysetName !== null && inheritedKeysetName !== void 0 ? inheritedKeysetName : this.keysetName, void 0, this.nestingDepth + 1).getTranslationData();
        if (data.details) {
          return this.getTranslationDataError(ErrorCode.MissingInheritedKey);
        }
        result += data.text;
      } else {
        result += all;
      }
    }
    if (lastIndex < keyValue.length) {
      result += keyValue.slice(lastIndex);
    }
    return { text: result };
  }
};

// node_modules/@gravity-ui/uikit/build/esm/i18n/i18n.js
var { lang, fallbackLang } = getConfig();
var i18n = new I18N({ lang, fallbackLang });
subscribeConfigure((config3) => {
  i18n.setLang(config3.lang);
  i18n.setFallbackLang(config3.fallbackLang);
});

// node_modules/@gravity-ui/uikit/build/esm/i18n/addComponentKeysets.js
function addComponentKeysets(data, componentName) {
  Object.entries(data).forEach(([lang2, keys]) => i18n.registerKeyset(lang2, componentName, keys));
  const t = i18n.keyset(componentName);
  return t;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/i18n/en.json
var en_default2 = {
  close: "Close"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/i18n/ru.json
var ru_default2 = {
  close: "Закрыть"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/i18n/index.js
var COMPONENT = "Popup";
var i18n_default = addComponentKeysets({ en: en_default2, ru: ru_default2 }, COMPONENT);

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.css";
var b17 = block("popup");
function PopupComponent({ keepMounted = false, hasArrow = false, open = false, onOpenChange, strategy, placement: placementProp, offset: offsetProp = 4, anchorElement, anchorRef, floatingMiddlewares, floatingContext, floatingInteractions, floatingRef, floatingStyles: floatingStylesProp, floatingClassName, modal = false, initialFocus: initialFocusProp, returnFocus = true, focusOrder, disableVisuallyHiddenDismiss = !modal, onClose, onEscapeKeyDown, onOutsideClick, disableEscapeKeyDown = false, disableOutsideClick = false, disableFocusOut = false, style: style3, className, children: children2, container, disablePortal = false, disableLayer = false, disableTransition = false, qa, role: roleProp, zIndex = 1e3, onTransitionIn, onTransitionOut, onTransitionInComplete, onTransitionOutComplete, ...restProps }) {
  useLayer({ open, type: "popup", enabled: !disableLayer });
  const contentRef = React790.useRef(null);
  const [arrowElement, setArrowElement] = React790.useState(null);
  const { offset: offset6 } = getOffsetOptions(offsetProp, hasArrow);
  const { placement, middleware: placementMiddleware } = getPlacementOptions(placementProp, disablePortal);
  const handleOpenChange = React790.useCallback((isOpen, event, reason) => {
    onOpenChange == null ? void 0 : onOpenChange(isOpen, event, reason);
    if (isOpen || !event) {
      return;
    }
    let closeReason;
    if (reason === "escape-key") {
      closeReason = "escapeKeyDown";
    } else if (reason === "outside-press") {
      closeReason = "outsideClick";
    } else {
      closeReason = reason;
    }
    if (closeReason === "escapeKeyDown" && onEscapeKeyDown) {
      onEscapeKeyDown(event);
    }
    if (closeReason === "outsideClick" && onOutsideClick) {
      onOutsideClick(event);
    }
    onClose == null ? void 0 : onClose(event, closeReason);
  }, [onOpenChange, onClose, onEscapeKeyDown, onOutsideClick]);
  const floatingNodeId = useFloatingNodeId();
  const { refs, elements, floatingStyles, placement: finalPlacement, middlewareData, context, update: update2 } = useFloating2({
    rootContext: floatingContext,
    nodeId: floatingNodeId,
    strategy,
    placement,
    open,
    onOpenChange: handleOpenChange,
    middleware: floatingMiddlewares ?? [
      offset3(offset6),
      shift3({
        padding: OVERFLOW_PADDING,
        // Offset 22 is size of the arrow (18) + padding (4)
        limiter: limitShift3({ offset: 4 + (hasArrow ? 18 : 0) }),
        altBoundary: disablePortal
      }),
      placementMiddleware,
      hasArrow && arrow3({ element: arrowElement, padding: 4 }),
      hasArrow && arrowStylesMiddleware()
    ]
  });
  React790.useEffect(() => {
    const element = anchorElement === void 0 ? anchorRef == null ? void 0 : anchorRef.current : anchorElement;
    if (element !== void 0 && element !== refs.reference.current) {
      refs.setReference(element);
    }
  }, [anchorElement, anchorRef, refs]);
  const role = useRole(context, {
    enabled: Boolean(roleProp || modal),
    role: roleProp ?? (modal ? "dialog" : void 0)
  });
  const dismiss = useDismiss(context, {
    enabled: !disableOutsideClick || !disableEscapeKeyDown,
    outsidePress: !disableOutsideClick,
    escapeKey: !disableEscapeKeyDown
  });
  const { getFloatingProps } = useInteractions(floatingInteractions ?? [role, dismiss]);
  const { isMounted, status } = useTransitionStatus(context, {
    duration: disableTransition ? 0 : TRANSITION_DURATION
  });
  const previousStatus = usePrevious(status);
  React790.useEffect(() => {
    if (isMounted && elements.reference && elements.floating) {
      return autoUpdate(elements.reference, elements.floating, update2);
    }
    return void 0;
  }, [isMounted, elements, update2]);
  const handleFloatingRef = useForkRef(refs.setFloating, floatingRef);
  const handleTransitionEnd = React790.useCallback((event) => {
    if (status === "open" && event.propertyName === "transform") {
      onTransitionInComplete == null ? void 0 : onTransitionInComplete();
    }
  }, [status, onTransitionInComplete]);
  React790.useEffect(() => {
    if (status === "initial" && previousStatus === "unmounted") {
      onTransitionIn == null ? void 0 : onTransitionIn();
    }
    if (status === "close" && previousStatus === "open") {
      onTransitionOut == null ? void 0 : onTransitionOut();
    }
    if (status === "unmounted" && previousStatus === "close") {
      onTransitionOutComplete == null ? void 0 : onTransitionOutComplete();
    }
  }, [status, previousStatus, onTransitionIn, onTransitionOut, onTransitionOutComplete]);
  let initialFocus = initialFocusProp;
  if (initialFocus === void 0) {
    if (modal) {
      initialFocus = refs.floating;
    } else {
      initialFocus = -1;
    }
  }
  return (0, import_jsx_runtime22.jsx)(FloatingNode, { id: floatingNodeId, children: isMounted || keepMounted ? (0, import_jsx_runtime22.jsx)(Portal, { container, disablePortal, children: (0, import_jsx_runtime22.jsx)(FloatingFocusManager, { context, disabled: !isMounted, modal, initialFocus, returnFocus, closeOnFocusOut: !disableFocusOut, visuallyHiddenDismiss: disableVisuallyHiddenDismiss ? false : i18n_default("close"), guards: modal || !disablePortal, order: focusOrder, children: (0, import_jsx_runtime22.jsx)("div", { ref: handleFloatingRef, className: floatingClassName, style: {
    position: "absolute",
    top: 0,
    left: 0,
    zIndex,
    width: "max-content",
    pointerEvents: isMounted ? "auto" : "none",
    outline: "none",
    ...floatingStyles,
    ...floatingStylesProp
  }, "data-floating-ui-placement": finalPlacement, "data-floating-ui-status": status, "aria-modal": modal && isMounted ? true : void 0, ...getFloatingProps({
    onTransitionEnd: handleTransitionEnd
  }), children: (0, import_jsx_runtime22.jsxs)("div", { ref: contentRef, className: b17({
    open: isMounted,
    "disable-transition": disableTransition
  }, className), style: style3, "data-qa": qa, ...filterDOMProps(restProps), children: [hasArrow && (0, import_jsx_runtime22.jsx)(PopupArrow, { ref: setArrowElement, styles: middlewareData.arrowStyles }), children2] }) }) }) }) : null });
}
function Popup(props) {
  const parentId = useFloatingParentNodeId();
  if (parentId === null) {
    return (0, import_jsx_runtime22.jsx)(FloatingTree, { children: (0, import_jsx_runtime22.jsx)(PopupComponent, { ...props }) });
  }
  return (0, import_jsx_runtime22.jsx)(PopupComponent, { ...props });
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuNavigationContext.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var React791 = __toESM(require_react(), 1);
var rootMenuPath = [];
var DropdownMenuNavigationContext = React791.createContext({
  activeMenuPath: rootMenuPath,
  setActiveMenuPath: () => {
  },
  anchorRef: { current: null }
});
var DropdownMenuNavigationContextProvider = ({ anchorRef, children: children2, disabled }) => {
  const [activeMenuPath, setActiveMenuPath] = React791.useState(rootMenuPath);
  React791.useEffect(() => {
    if (disabled) {
      setActiveMenuPath(rootMenuPath);
    }
  }, [disabled]);
  const contextValue = React791.useMemo(() => ({
    activeMenuPath,
    setActiveMenuPath,
    anchorRef
  }), [activeMenuPath, anchorRef]);
  return (0, import_jsx_runtime23.jsx)(DropdownMenuNavigationContext.Provider, { value: contextValue, children: children2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/constants.js
var dropdownMenuSeparator = { text: "", action: () => {
}, path: [] };

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/isSeparator.js
function isSeparator(item) {
  return item === dropdownMenuSeparator;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/shouldSkipItemNavigation.js
function shouldSkipItemNavigation(item) {
  return item.disabled || isSeparator(item);
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/stringifyNavigationPath.js
function stringifyNavigationPath(path) {
  return (path == null ? void 0 : path.join(" ")) ?? "";
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuPopup.js
var DropdownMenuPopup = ({ items, open, anchorRef, onClose, size: size5, menuProps, children: children2, popupProps, path = [] }) => {
  const { toggle, data } = React792.useContext(DropdownMenuContext);
  const { activeMenuPath, setActiveMenuPath, anchorRef: navigationAnchorRef } = React792.useContext(DropdownMenuNavigationContext);
  const isSubmenu = path.length > 0;
  const activateParent = React792.useCallback(() => {
    setActiveMenuPath(path.slice(0, path.length - 1));
  }, [setActiveMenuPath, path]);
  const handleMouseEnter = React792.useCallback(() => {
    setActiveMenuPath(path);
  }, [path, setActiveMenuPath]);
  const handleMouseLeave = React792.useCallback(() => {
    activateParent();
  }, [activateParent]);
  const handleSelect = React792.useCallback((activeItem, event) => {
    var _a;
    if (activeItem.items && activeItem.path) {
      setActiveMenuPath(activeItem.path);
    } else {
      (_a = activeItem.action) == null ? void 0 : _a.call(activeItem, event, data);
      toggle(false);
    }
  }, [data, setActiveMenuPath, toggle]);
  const handleKeydown = React792.useCallback((activeItemIndex2, event) => {
    switch (event.key) {
      case "Escape": {
        if (isSubmenu) {
          event.stopPropagation();
          activateParent == null ? void 0 : activateParent();
        }
        return false;
      }
      case "Enter":
      case " ": {
        const activeItem = items[activeItemIndex2];
        const isSubmenuToggleActive = activeItem == null ? void 0 : activeItem.items;
        if (isSubmenu || isSubmenuToggleActive) {
          event.stopPropagation();
          event.preventDefault();
        }
        if (activeItem) {
          handleSelect(activeItem, event);
        }
        return false;
      }
    }
    return true;
  }, [activateParent, handleSelect, isSubmenu, items]);
  const isNavigationActive = open && stringifyNavigationPath(path) === stringifyNavigationPath(activeMenuPath);
  const { activeItemIndex, setActiveItemIndex, reset: resetNavigation } = useListNavigation2({
    items,
    skip: shouldSkipItemNavigation,
    anchorRef: navigationAnchorRef,
    onAnchorKeyDown: handleKeydown,
    disabled: !isNavigationActive,
    initialValue: isSubmenu ? 0 : -1
  });
  React792.useEffect(() => {
    if (!open) {
      resetNavigation();
    }
  }, [open, resetNavigation]);
  return (0, import_jsx_runtime24.jsx)(Popup, { open, anchorRef, onClose, placement: "bottom-start", ...popupProps, children: (0, import_jsx_runtime24.jsx)("div", { onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, className: cnDropdownMenu("popup-content"), children: children2 || (0, import_jsx_runtime24.jsx)(Menu, { className: cnDropdownMenu("menu"), size: size5, ...menuProps, children: items.map((item, index3) => {
    var _a;
    const isActive = isNavigationActive && activeItemIndex === index3;
    const activate = () => setActiveItemIndex(index3);
    const isActiveParent = open && !isActive && activeMenuPath.length !== 0 && stringifyNavigationPath(item.path) === stringifyNavigationPath(activeMenuPath.slice(0, item.path.length));
    const extraProps = {
      ...item.extraProps,
      onMouseEnter: activate
    };
    return (0, import_jsx_runtime24.jsx)(DropdownMenuItem, { size: size5, className: cnDropdownMenu("menu-item", {
      separator: isSeparator(item),
      "active-parent": isActiveParent,
      "with-submenu": Boolean((_a = item.items) == null ? void 0 : _a.length)
    }, item.className), selected: isActive, popupProps, closeMenu: onClose, ...item, extraProps }, index3);
  }) }) }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/useSubmenu.js
var React793 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/isSubmenuOpen.js
function isSubmenuOpen(path, activeMenuPath) {
  return (path == null ? void 0 : path.every((item, index3) => item === (activeMenuPath == null ? void 0 : activeMenuPath[index3]))) ?? false;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/useSubmenu.js
function useSubmenu({ items, path }) {
  const { activeMenuPath, setActiveMenuPath } = React793.useContext(DropdownMenuNavigationContext);
  const hasSubmenu = Boolean(path) && Boolean(items == null ? void 0 : items.length);
  const closeSubmenu = React793.useCallback(() => {
    if (!path) {
      return;
    }
    setActiveMenuPath(path.slice(0, path.length - 1));
  }, [path, setActiveMenuPath]);
  const openSubmenu = React793.useCallback(() => {
    if (!path) {
      return;
    }
    setActiveMenuPath(path);
  }, [path, setActiveMenuPath]);
  return {
    hasSubmenu,
    isSubmenuOpen: isSubmenuOpen(path, activeMenuPath),
    openSubmenu,
    closeSubmenu
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuItem.js
var DropdownMenuItem = ({ text: text2, action, items: subMenuItems, popupProps, closeMenu, children: children2, path, size: size5, ...props }) => {
  const { toggle, data } = React794.useContext(DropdownMenuContext);
  const menuItemRef = React794.useRef(null);
  const direction = useDirection();
  const { hasSubmenu, isSubmenuOpen: isSubmenuOpen2, closeSubmenu, openSubmenu } = useSubmenu({
    items: subMenuItems,
    path
  });
  const handleCloseMenu = React794.useCallback(() => {
    const close = () => {
      if (closeMenu) {
        closeMenu();
      } else {
        toggle(false);
      }
    };
    if (hasSubmenu) {
      closeSubmenu();
      requestAnimationFrame(close);
    } else {
      close();
    }
  }, [closeMenu, closeSubmenu, hasSubmenu, toggle]);
  const handleMenuItemClick = React794.useCallback((event) => {
    if (hasSubmenu) {
      return;
    }
    action == null ? void 0 : action(event, data);
    handleCloseMenu();
  }, [action, data, handleCloseMenu, hasSubmenu]);
  const extraProps = React794.useMemo(() => {
    return {
      ...props.extraProps,
      onMouseEnter: (event) => {
        var _a, _b;
        (_b = (_a = props.extraProps) == null ? void 0 : _a.onMouseEnter) == null ? void 0 : _b.call(_a, event);
        if (hasSubmenu) {
          openSubmenu();
        }
      },
      onMouseLeave: (event) => {
        var _a, _b;
        (_b = (_a = props.extraProps) == null ? void 0 : _a.onMouseLeave) == null ? void 0 : _b.call(_a, event);
        if (hasSubmenu) {
          closeSubmenu();
        }
      }
    };
  }, [props.extraProps, closeSubmenu, hasSubmenu, openSubmenu]);
  const subMenuPlacement = React794.useMemo(() => direction === "rtl" ? ["left-start", "right-start"] : ["right-start", "left-start"], [direction]);
  const iconEnd = React794.useMemo(() => hasSubmenu ? (0, import_jsx_runtime25.jsx)(Icon, { data: direction === "rtl" ? ChevronLeft_default : ChevronRight_default, size: 10, className: cnDropdownMenu("sub-menu-arrow") }) : props.iconEnd, [hasSubmenu, direction, props.iconEnd]);
  return (0, import_jsx_runtime25.jsxs)(React794.Fragment, { children: [(0, import_jsx_runtime25.jsx)(Menu.Item, { ref: menuItemRef, ...props, extraProps, onClick: handleMenuItemClick, iconEnd, children: text2 || children2 }), hasSubmenu && subMenuItems && (0, import_jsx_runtime25.jsx)(DropdownMenuPopup, { popupProps: {
    ...popupProps,
    className: cnDropdownMenu("sub-menu", popupProps == null ? void 0 : popupProps.className),
    placement: subMenuPlacement
  }, size: size5, items: subMenuItems, path, open: isSubmenuOpen2, anchorRef: menuItemRef, onClose: handleCloseMenu })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/usePopupVisibility.js
var React795 = __toESM(require_react(), 1);
function usePopupVisibility(visible, onChangeVisibility, disabled) {
  const [isPopupShown, setPopupShown] = useConditionallyControlledState(visible, onChangeVisibility, false);
  const togglePopup = React795.useCallback((open) => {
    setPopupShown((isShown) => {
      if (typeof open === "boolean") {
        return open;
      }
      return !isShown;
    });
  }, [setPopupShown]);
  const closePopup = React795.useCallback(() => {
    setPopupShown(false);
  }, [setPopupShown]);
  React795.useEffect(() => {
    if (disabled && isPopupShown) {
      closePopup();
    }
  }, [closePopup, disabled, isPopupShown]);
  return {
    isPopupShown,
    togglePopup,
    closePopup
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/useScrollHandler.js
var React796 = __toESM(require_react(), 1);
function useScrollHandler(onScroll, anchorRef, disabled) {
  React796.useEffect(() => {
    if (disabled) {
      return void 0;
    }
    const handleScroll = (event) => {
      if (event.target.contains(anchorRef.current)) {
        onScroll(event);
      }
    };
    document.addEventListener("scroll", handleScroll, true);
    return () => {
      document.removeEventListener("scroll", handleScroll, true);
    };
  }, [anchorRef, onScroll, disabled]);
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/toItemList.js
function toItemList(items, separator, path = [], startIndex = 0) {
  const updatedItems = [];
  let addedGroup = false;
  let index3 = startIndex;
  for (const item of items) {
    if (Array.isArray(item)) {
      const groupItems = toItemList(item, separator, path, index3);
      if (updatedItems.length !== 0) {
        updatedItems.push(separator);
      }
      updatedItems.push(...groupItems);
      index3 += groupItems.length;
      addedGroup = true;
    } else {
      if (item.hidden) {
        continue;
      }
      if (addedGroup) {
        updatedItems.push(separator);
      }
      const updatedItem = {
        ...item,
        path: [...path, index3++]
      };
      if (item.items) {
        updatedItem.items = toItemList(item.items, separator, updatedItem.path);
      }
      updatedItems.push(updatedItem);
      addedGroup = false;
    }
  }
  return updatedItems;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.css";
var DropdownMenu = ({ items = [], size: size5 = "m", icon = (0, import_jsx_runtime26.jsx)(Icon, { data: Ellipsis_default }), open, onOpenToggle, hideOnScroll = true, data, disabled, switcher, renderSwitcher, switcherWrapperClassName, defaultSwitcherProps, defaultSwitcherClassName, onSwitcherClick, menuProps, popupProps, children: children2 }) => {
  const anchorRef = React797.useRef(null);
  const { isPopupShown, togglePopup, closePopup } = usePopupVisibility(open, onOpenToggle, disabled);
  useScrollHandler(closePopup, anchorRef, !isPopupShown || !hideOnScroll);
  const contextValue = React797.useMemo(() => ({
    toggle: togglePopup,
    data
  }), [data, togglePopup]);
  const itemsList = React797.useMemo(() => toItemList(items, dropdownMenuSeparator), [items]);
  const handleSwitcherClick = React797.useCallback((event) => {
    if (disabled) {
      return;
    }
    onSwitcherClick == null ? void 0 : onSwitcherClick(event);
    togglePopup();
  }, [disabled, onSwitcherClick, togglePopup]);
  const { onKeyDown: handleSwitcherKeyDown } = useActionHandlers(handleSwitcherClick);
  const switcherProps = React797.useMemo(() => ({
    onClick: handleSwitcherClick,
    onKeyDown: handleSwitcherKeyDown
  }), [handleSwitcherClick, handleSwitcherKeyDown]);
  return (0, import_jsx_runtime26.jsxs)(DropdownMenuContext.Provider, { value: contextValue, children: [(0, import_jsx_runtime26.jsx)("div", { ref: anchorRef, className: cnDropdownMenu("switcher-wrapper", switcherWrapperClassName), ...renderSwitcher ? {} : switcherProps, children: (renderSwitcher == null ? void 0 : renderSwitcher(switcherProps)) || switcher || (0, import_jsx_runtime26.jsx)(Button2, { view: "flat", size: size5, ...defaultSwitcherProps, className: cnDropdownMenu("switcher-button", defaultSwitcherClassName), disabled, children: icon }) }), (0, import_jsx_runtime26.jsx)(DropdownMenuNavigationContextProvider, { anchorRef, disabled: !isPopupShown, children: (0, import_jsx_runtime26.jsx)(DropdownMenuPopup, { items: itemsList, open: isPopupShown, size: size5, menuProps, anchorRef, onClose: closePopup, popupProps, children: children2 }) })] });
};
var DropdownMenuExport = Object.assign(DropdownMenu, { Item: DropdownMenuItem });

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/i18n/en.json
var en_default3 = {
  label_close: "Close",
  label_more: "Show more"
};

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/i18n/ru.json
var ru_default3 = {
  label_close: "Закрыть",
  label_more: "Показать больше"
};

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/i18n/index.js
var COMPONENT2 = "ActionsPanel";
var i18n_default2 = addComponentKeysets({ en: en_default3, ru: ru_default3 }, COMPONENT2);

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/components/hooks/useCollapseActions.js
var React799 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/components/hooks/useDropdownActions.js
var import_groupBy = __toESM(require_groupBy(), 1);
var useDropdownActions = ({ buttonActions, restActions, visibilityMap }) => {
  const actions = [
    ...buttonActions.filter((action) => !visibilityMap[action.id]),
    ...restActions
  ];
  const groups = (0, import_groupBy.default)(actions, (action) => action.dropdown.group);
  const usedGroups = /* @__PURE__ */ new Set();
  const dropdownItems = [];
  for (const action of actions) {
    const group = action.dropdown.group;
    if (typeof group === "undefined") {
      dropdownItems.push(action.dropdown.item);
      continue;
    }
    if (usedGroups.has(group)) {
      continue;
    }
    usedGroups.add(group);
    dropdownItems.push(groups[group].map((groupedAction) => groupedAction.dropdown.item));
  }
  return dropdownItems;
};

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/components/hooks/useObserveIntersection.js
var React798 = __toESM(require_react(), 1);
var OBSERVER_TARGET_ATTR = "data-observer-id";
var GAP = 4;
var useObserveIntersection = (updateObserveKey) => {
  const direction = useDirection();
  const parentRef = React798.useRef(null);
  const [visibilityMap, setVisibilityMap] = React798.useState({});
  const [offset6, setOffset] = React798.useState(0);
  const handleIntersection = React798.useCallback((entries) => {
    var _a;
    const updatedEntries = {};
    let newOffest = 0;
    let lastVisibleEntry;
    let firstInvisible;
    entries.forEach((entry) => {
      const targetId = entry.target.getAttribute(OBSERVER_TARGET_ATTR);
      if (!targetId) {
        return;
      }
      if (entry.isIntersecting) {
        lastVisibleEntry = entry;
        updatedEntries[targetId] = true;
      } else {
        if (!firstInvisible) {
          firstInvisible = entry;
        }
        updatedEntries[targetId] = false;
      }
    });
    const parentRect = (_a = parentRef.current) == null ? void 0 : _a.getBoundingClientRect();
    if (parentRect && firstInvisible) {
      const rect = firstInvisible.target.getBoundingClientRect();
      newOffest = direction === "ltr" ? rect.left - parentRect.left : parentRect.right - rect.right;
    } else if (parentRect && lastVisibleEntry) {
      const rect = lastVisibleEntry.target.getBoundingClientRect();
      newOffest = direction === "ltr" ? rect.right - parentRect.left + GAP : parentRect.right - rect.left + GAP;
    }
    setVisibilityMap((prev) => ({
      ...prev,
      ...updatedEntries
    }));
    setOffset(newOffest);
  }, [direction]);
  React798.useEffect(() => {
    var _a;
    setVisibilityMap({});
    const observer = new IntersectionObserver(handleIntersection, {
      root: parentRef.current,
      threshold: 1
    });
    Array.from(((_a = parentRef.current) == null ? void 0 : _a.children) || []).forEach((item) => {
      if (item.hasAttribute(OBSERVER_TARGET_ATTR)) {
        observer.observe(item);
      }
    });
    return () => observer.disconnect();
  }, [handleIntersection, updateObserveKey]);
  return { parentRef, visibilityMap, offset: offset6 };
};

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/components/hooks/useCollapseActions.js
var DEFAULT_MAX_BUTTON_ACTIONS = 4;
var useCollapseActions = (actions, maxRowActions) => {
  const maxActions = Math.max(0, typeof maxRowActions === "undefined" ? DEFAULT_MAX_BUTTON_ACTIONS : maxRowActions);
  const allActionsCollapsed = React799.useMemo(() => {
    return actions.every((action) => action.collapsed);
  }, [actions]);
  const updateObserveKey = React799.useMemo(() => actions.map(({ id }) => id).join("/") + maxActions, [actions, maxActions]);
  const [buttonActions, restActions] = React799.useMemo(() => {
    const buttonItems = [];
    const restItems = [];
    actions.forEach((action) => {
      if (buttonItems.length < maxActions && !action.collapsed) {
        buttonItems.push(action);
      } else {
        restItems.push(action);
      }
    });
    return [buttonItems, restItems];
  }, [actions, maxActions]);
  const { parentRef, visibilityMap, offset: offset6 } = useObserveIntersection(updateObserveKey);
  const dropdownItems = useDropdownActions({ buttonActions, restActions, visibilityMap });
  const isDefaultOffset = allActionsCollapsed || maxActions === 0;
  const showDropdown = (Object.keys(visibilityMap).length > 0 || isDefaultOffset) && dropdownItems.length > 0;
  return {
    buttonActions,
    dropdownItems,
    parentRef,
    offset: isDefaultOffset ? 0 : offset6,
    visibilityMap,
    showDropdown
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/components/CollapseActions.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/components/CollapseActions.css";
var b18 = block("actions-panel-collapse");
var CollapseActions = ({ actions, maxRowActions }) => {
  const { buttonActions, dropdownItems, parentRef, offset: offset6, visibilityMap, showDropdown } = useCollapseActions(actions, maxRowActions);
  return (0, import_jsx_runtime27.jsxs)("div", { className: b18(), children: [(0, import_jsx_runtime27.jsx)("div", { className: b18("container"), ref: parentRef, children: buttonActions.map((action) => {
    const { id } = action;
    const attr2 = { [OBSERVER_TARGET_ATTR]: id };
    const invisible = visibilityMap[id] === false;
    const node = Array.isArray(action.dropdown.item.items) ? (0, import_jsx_runtime27.jsx)(DropdownMenuExport, { size: "s", items: action.dropdown.item.items, renderSwitcher: ({ onClick }) => (0, import_jsx_runtime27.jsx)(Button2, { view: "flat-contrast", size: "m", ...action.button.props, onClick }), onSwitcherClick: action.button.props.onClick }) : (0, import_jsx_runtime27.jsx)(Button2, { view: "flat-contrast", size: "m", ...action.button.props });
    return (0, import_react8.createElement)("div", { className: b18("button-action-wrapper", { invisible }), ...attr2, key: id }, node);
  }) }), showDropdown && (0, import_jsx_runtime27.jsxs)(React800.Fragment, { children: [(0, import_jsx_runtime27.jsx)("div", { className: b18("menu-placeholder") }), (0, import_jsx_runtime27.jsx)("div", { className: b18("menu-wrapper"), style: { insetInlineStart: offset6 }, children: (0, import_jsx_runtime27.jsx)(DropdownMenuExport, { size: "s", items: dropdownItems, renderSwitcher: ({ onClick }) => (0, import_jsx_runtime27.jsx)(Button2, { view: "flat-contrast", size: "m", "aria-label": i18n_default2("label_more"), onClick, children: (0, import_jsx_runtime27.jsx)(Icon, { data: Ellipsis_default }) }) }) })] })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/ActionsPanel.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ActionsPanel/ActionsPanel.css";
var b19 = block("actions-panel");
var ActionsPanel = ({ className, actions, onClose, renderNote, noteClassName, qa, maxRowActions }) => {
  return (0, import_jsx_runtime28.jsxs)("div", { className: b19(null, className), "data-qa": qa, children: [typeof renderNote === "function" && (0, import_jsx_runtime28.jsx)(Text, { className: b19("note-wrapper", noteClassName), as: "div", color: "light-primary", variant: "subheader-2", ellipsis: true, children: renderNote() }), (0, import_jsx_runtime28.jsx)(CollapseActions, { actions, maxRowActions }), typeof onClose === "function" && (0, import_jsx_runtime28.jsx)(Button2, { view: "flat-contrast", size: "m", onClick: onClose, className: b19("button-close"), "aria-label": i18n_default2("label_close"), children: (0, import_jsx_runtime28.jsx)(Icon, { data: Xmark_default }, "icon") })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/Alert.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Card/Card.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var React805 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Col/Col.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useLayoutContext.js
var React801 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/utils/index.js
var mediaByOrder = {
  s: 0,
  m: 1,
  l: 2,
  xl: 3,
  xxl: 4,
  xxxl: 5
};
var isMediaActiveFactory = (activeType) => (toCheck) => {
  return activeType in mediaByOrder ? mediaByOrder[activeType] - mediaByOrder[toCheck] >= 0 : false;
};
var mediaOrder = ["s", "m", "l", "xl", "xxl", "xxxl"];
var getClosestMediaPropsFactory = (currentActive) => (medias = {}) => {
  if (!currentActive) {
    return void 0;
  }
  let candidate = currentActive;
  while (candidate) {
    if (medias[candidate]) {
      return medias[candidate];
    }
    candidate = mediaOrder[mediaByOrder[candidate] - 1];
  }
  return void 0;
};
var makeCssMod = (space2) => {
  return space2 in CSS_SIZE_EXCEPTION ? CSS_SIZE_EXCEPTION[space2] : String(space2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useLayoutContext.js
var useLayoutContext = () => {
  const { activeMediaQuery, theme } = React801.useContext(LayoutContext);
  const { isMediaActive, getClosestMediaProps } = React801.useMemo(() => ({
    isMediaActive: isMediaActiveFactory(activeMediaQuery),
    getClosestMediaProps: getClosestMediaPropsFactory(activeMediaQuery)
  }), [activeMediaQuery]);
  return {
    theme,
    activeMediaQuery,
    isMediaActive,
    getClosestMediaProps
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Col/Col.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Col/Col.css";
var b20 = block("col");
var Col = ({ children: children2, style: style3, className, qa, ...media }) => {
  const { getClosestMediaProps } = useLayoutContext();
  const sizeModValue = getClosestMediaProps(media);
  return (0, import_jsx_runtime29.jsx)("div", { style: style3, className: b20({ size: sizeModValue ? makeCssMod(sizeModValue) : void 0 }, className), "data-qa": qa, children: children2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Row/Row.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Row/Row.css";
var b21 = block("row");
var Row = ({ children: children2, style: style3, className, space: space2, spaceRow, qa }) => {
  const { getClosestMediaProps } = useLayoutContext();
  let s;
  let sr;
  if (typeof space2 === "object") {
    const res = getClosestMediaProps(space2);
    if (res) {
      s = makeCssMod(res);
    }
  } else if (space2) {
    s = makeCssMod(space2);
  }
  if (typeof spaceRow === "object") {
    const res = getClosestMediaProps(spaceRow);
    if (res) {
      sr = makeCssMod(res);
    }
  } else if (spaceRow) {
    sr = String(spaceRow);
  }
  return (0, import_jsx_runtime30.jsx)("div", { style: style3, className: b21({
    s,
    sr
  }, className), "data-qa": qa, children: children2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Flex/Flex.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var React803 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Box/Box.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var React802 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/spacing/spacing.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/spacing/spacing.css";
var b22 = block("s");
var spacing = (props, className) => {
  const classes = [];
  for (const key in props) {
    if (Object.prototype.hasOwnProperty.call(props, key)) {
      const value = props[key];
      if (typeof value !== "undefined") {
        classes.push(b22(`${key}_${makeCssMod(value)}`));
      }
    }
  }
  if (className) {
    classes.push(className);
  }
  return classes.join(" ");
};
var sp = spacing;

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Box/Box.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Box/Box.css";
var b23 = block("box");
var Box = React802.forwardRef(function Box2({ as, children: children2, qa, className, width, height, minWidth, minHeight, maxHeight, maxWidth, position: position3, style: outerStyle, spacing: spacing2, overflow, ...props }, ref2) {
  const Tag = as || "div";
  const style3 = {
    width,
    height,
    minWidth,
    minHeight,
    maxHeight,
    maxWidth,
    position: position3,
    ...outerStyle
  };
  return (0, import_jsx_runtime31.jsx)(Tag, { ...props, "data-qa": qa, style: style3, ref: ref2, className: b23({ overflow }, spacing2 ? sp(spacing2, className) : className), children: children2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Flex/Flex.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Flex/Flex.css";
var b24 = block("flex");
var Flex = React803.forwardRef(function Flex2(props, ref2) {
  const { as: propsAs, direction, grow, basis, children: children2, style: style3, alignContent, alignItems, alignSelf, justifyContent, justifyItems, justifySelf, shrink: shrink3, wrap, inline: inline4, gap, gapRow, className, space: space2, centerContent, ...restProps } = props;
  const as = propsAs || "div";
  const { getClosestMediaProps, theme: { spaceBaseSize } } = useLayoutContext();
  const applyMediaProps = (property) => typeof property === "object" && property !== null ? getClosestMediaProps(property) : property;
  const gapSpaceSize = applyMediaProps(gap);
  const columnGap = gapSpaceSize ? spaceBaseSize * Number(gapSpaceSize) : void 0;
  const gapRowSpaceSize = applyMediaProps(gapRow) || gapSpaceSize;
  const rowGap = gapRowSpaceSize ? spaceBaseSize * Number(gapRowSpaceSize) : void 0;
  const spaceSize = applyMediaProps(space2);
  const s = !gap && !gapRow && spaceSize ? makeCssMod(spaceSize) : void 0;
  return (0, import_jsx_runtime32.jsx)(Box, { as, className: b24({
    "center-content": centerContent,
    inline: inline4,
    s
  }, className), ref: ref2, style: {
    flexDirection: applyMediaProps(direction),
    flexGrow: grow === true ? 1 : grow,
    flexWrap: wrap === true ? "wrap" : wrap,
    flexBasis: basis,
    flexShrink: shrink3,
    columnGap,
    rowGap,
    alignContent: applyMediaProps(alignContent),
    alignItems: applyMediaProps(alignItems),
    alignSelf: applyMediaProps(alignSelf),
    justifyContent: applyMediaProps(justifyContent),
    justifyItems: applyMediaProps(justifyItems),
    justifySelf: applyMediaProps(justifySelf),
    ...style3
  }, ...restProps, children: space2 ? React803.Children.map(children2, (child) => (
    // `space` uses negative margins under the hood. This is hack to prevent wrong background position appearance.
    child ? (0, import_jsx_runtime32.jsx)("div", { className: b24("wr"), children: child }) : child
  )) : children2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/Container.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/useContainerThemeProps.js
var React804 = __toESM(require_react(), 1);
var pickContainerProps = ({ gutters, spaceRow, space: space2 } = {}) => {
  const res = {};
  if (gutters) {
    res.gutters = gutters;
  }
  if (spaceRow || space2) {
    res.spaceRow = spaceRow || space2;
  }
  return res;
};
var useContainerThemeProps = () => {
  const { theme, getClosestMediaProps } = useLayoutContext();
  const containerThemeProps = React804.useMemo(() => {
    var _a, _b, _c;
    return {
      ...pickContainerProps((_a = theme.components) == null ? void 0 : _a.container),
      ...pickContainerProps(getClosestMediaProps((_c = (_b = theme.components) == null ? void 0 : _b.container) == null ? void 0 : _c.media))
    };
  }, [getClosestMediaProps, theme]);
  return {
    getClosestMediaProps,
    containerThemeProps,
    breakpoints: theme.breakpoints
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/Container.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/Container.css";
var b25 = block("container");
var Container = ({ children: children2, style: propsStyle, as: Tag = "div", className, maxWidth, gutters, spaceRow, qa }) => {
  const { getClosestMediaProps, containerThemeProps, breakpoints } = useContainerThemeProps();
  const style3 = {
    ...maxWidth ? {
      maxWidth: breakpoints[maxWidth]
    } : {},
    ...propsStyle
  };
  let sr;
  if (typeof spaceRow === "object") {
    const propsCandidate = getClosestMediaProps(spaceRow);
    if (propsCandidate) {
      sr = makeCssMod(propsCandidate);
    }
  } else if (spaceRow) {
    sr = makeCssMod(spaceRow);
  }
  return (0, import_jsx_runtime33.jsx)(Tag, { style: style3, className: b25({
    sr
  }, gutters === false ? className : sp({
    px: gutters || containerThemeProps.gutters
  }, className)), "data-qa": qa, children: children2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Card/Card.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Card/Card.css";
var b26 = block("card");
var Card = React805.forwardRef(function Card2(props, ref2) {
  const { type = "container", theme, view, size: size5 = "m", children: children2, className, onClick, disabled, selected, ...restProps } = props;
  const isTypeAction = type === "action";
  const isTypeSelection = type === "selection";
  const isTypeContainer = type === "container";
  const hasAction = isTypeAction || isTypeSelection;
  const isClickable = hasAction && Boolean(onClick) && !disabled;
  const defaultTheme = isTypeContainer ? "normal" : void 0;
  const defaultView = isTypeContainer || isTypeSelection ? "outlined" : void 0;
  const handleClick = isClickable ? onClick : void 0;
  const { onKeyDown } = useActionHandlers(onClick);
  return (0, import_jsx_runtime34.jsx)(Box, { ref: ref2, role: isClickable ? "button" : void 0, className: b26({
    theme: theme || defaultTheme,
    view: view || defaultView,
    type,
    selected,
    size: size5,
    disabled,
    clickable: isClickable
  }, className), onClick: handleClick, onKeyDown: isClickable ? onKeyDown : void 0, tabIndex: isClickable ? 0 : void 0, ...restProps, children: children2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertAction.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/useAlertContext.js
var React807 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertContext.js
var React806 = __toESM(require_react(), 1);
var AlertContext = React806.createContext(null);

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/useAlertContext.js
var useAlertContext = () => {
  const context = React807.useContext(AlertContext);
  if (!context)
    throw new Error('Alert: `useAlertContext` hook is used out of "AlertContext"');
  return context;
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertAction.js
var AlertAction = (props) => {
  const { view } = useAlertContext();
  return (0, import_jsx_runtime35.jsx)(Button2, { view: view === "filled" ? "normal-contrast" : void 0, ...props });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertActions.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/constants.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Alert/Alert.css";
var DEFAULT_ICON_SIZE = 18;
var bAlert = block("alert");

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertActions.js
var AlertActions = ({ items, children: children2, className }) => {
  const { layout } = useAlertContext();
  return (0, import_jsx_runtime36.jsx)(Flex, { className: bAlert("actions", { minContent: layout === "horizontal" }, className), direction: "row", gap: "3", wrap: true, alignItems: layout === "horizontal" ? "center" : "flex-start", children: (items == null ? void 0 : items.map(({ handler, text: text2 }, i) => (0, import_jsx_runtime36.jsx)(AlertAction, { onClick: handler, children: text2 }, i))) || children2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertContextProvider.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var AlertContextProvider = ({ layout, view, children: children2 }) => {
  return (0, import_jsx_runtime37.jsx)(AlertContext.Provider, { value: { layout, view }, children: children2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertIcon.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
var typeToIcon = {
  danger: {
    filled: CircleXmarkFill_default,
    outlined: CircleXmark_default
  },
  info: {
    filled: CircleInfoFill_default,
    outlined: CircleInfo_default
  },
  success: {
    filled: CircleCheckFill_default,
    outlined: CircleCheck_default
  },
  warning: {
    filled: TriangleExclamationFill_default,
    outlined: TriangleExclamation_default
  },
  utility: {
    filled: ThunderboltFill_default,
    outlined: Thunderbolt_default
  },
  normal: null
};
var AlertIcon = ({ className, theme, view = "filled", size: size5 = DEFAULT_ICON_SIZE }) => {
  const iconByTheme = typeToIcon[theme];
  if (!iconByTheme) {
    return null;
  }
  let color;
  if (theme === "success") {
    color = "positive";
  } else if (theme !== "normal") {
    color = theme;
  }
  return (0, import_jsx_runtime38.jsx)("div", { className: bAlert("icon", colorText({ color }, className)), children: (0, import_jsx_runtime38.jsx)(Icon, { data: iconByTheme[view], size: size5 }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertTitle.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var AlertTitle = ({ text: text2, className }) => {
  return (0, import_jsx_runtime39.jsx)(Text, { variant: "subheader-2", className: bAlert("title", className), children: text2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/i18n/en.json
var en_default4 = {
  label_close: "Close"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/i18n/ru.json
var ru_default4 = {
  label_close: "Закрыть"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/i18n/index.js
var COMPONENT3 = "Alert";
var i18n_default3 = addComponentKeysets({ en: en_default4, ru: ru_default4 }, COMPONENT3);

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/Alert.js
var Alert = (props) => {
  const { theme = "normal", view = "filled", layout = "vertical", message, className, corners, style: style3, onClose, align, qa } = props;
  return (0, import_jsx_runtime40.jsx)(AlertContextProvider, { layout, view, children: (0, import_jsx_runtime40.jsx)(Card, { style: style3, className: bAlert({ corners }, spacing({ py: 4, px: 5 }, className)), theme, view, qa, children: (0, import_jsx_runtime40.jsxs)(Flex, { gap: "3", alignItems: align, children: [typeof props.icon === "undefined" ? (0, import_jsx_runtime40.jsx)(Alert.Icon, { theme, view }) : props.icon, (0, import_jsx_runtime40.jsxs)(Flex, { direction: layout === "vertical" ? "column" : "row", gap: "5", grow: true, children: [(0, import_jsx_runtime40.jsx)(Flex, { gap: "2", grow: true, className: bAlert("text-content"), children: (0, import_jsx_runtime40.jsxs)(Flex, { direction: "column", gap: "1", grow: true, justifyContent: align, children: [typeof props.title === "string" ? (0, import_jsx_runtime40.jsx)(Alert.Title, { text: props.title }) : props.title, message] }) }), Array.isArray(props.actions) ? (0, import_jsx_runtime40.jsx)(Alert.Actions, { items: props.actions }) : props.actions] }), onClose && (0, import_jsx_runtime40.jsx)(Button2, { view: "flat", className: bAlert("close-btn"), onClick: onClose, "aria-label": i18n_default3("label_close"), children: (0, import_jsx_runtime40.jsx)(Icon, { data: Xmark_default, size: DEFAULT_ICON_SIZE, className: colorText({ color: "secondary" }) }) })] }) }) });
};
Alert.Icon = AlertIcon;
Alert.Title = AlertTitle;
Alert.Actions = AlertActions;
Alert.Action = AlertAction;

// node_modules/@gravity-ui/uikit/build/esm/components/ArrowToggle/ArrowToggle.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ArrowToggle/ArrowToggle.css";
var b27 = block("arrow-toggle");
function ArrowToggle({ size: size5 = 16, direction = "bottom", className, qa }) {
  return (0, import_jsx_runtime41.jsx)("span", { style: { width: size5, height: size5 }, className: b27({ direction }, className), "data-qa": qa, children: (0, import_jsx_runtime41.jsx)(Icon, { data: ChevronDown_default, size: size5 }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Avatar/constants.js
var AVATAR_SIZES = {
  "3xs": 16,
  "2xs": 20,
  xs: 24,
  s: 28,
  m: 32,
  l: 42,
  xl: 50
};
var DEFAULT_AVATAR_SIZE = "m";
var bAvatar = block("avatar");

// node_modules/@gravity-ui/uikit/build/esm/components/Avatar/Avatar.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var React809 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Avatar/AvatarIcon/AvatarIcon.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var avatarSizeToIconSize = {
  "3xs": 10,
  "2xs": 12,
  xs: 14,
  s: 16,
  m: 16,
  l: 20,
  xl: 24
};
var AvatarIcon = ({ icon, color, size: size5 }) => {
  const style3 = { color };
  return (0, import_jsx_runtime42.jsx)("div", { className: bAvatar("icon"), style: style3, children: (0, import_jsx_runtime42.jsx)(Icon, { data: icon, size: avatarSizeToIconSize[size5] }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Avatar/AvatarImage/AvatarImage.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var React808 = __toESM(require_react(), 1);
var AvatarImage = ({ imgUrl, fallbackImgUrl, sizes, srcSet, alt, loading, withImageBorder, size: size5 }) => {
  const [isErrored, setIsErrored] = React808.useState(false);
  const handleError = React808.useCallback(() => {
    setIsErrored(true);
  }, []);
  React808.useEffect(() => {
    setIsErrored(false);
  }, [imgUrl]);
  return (0, import_jsx_runtime43.jsx)("img", { className: bAvatar("image", { "with-border": withImageBorder }), loading, width: AVATAR_SIZES[size5], height: AVATAR_SIZES[size5], src: fallbackImgUrl && isErrored ? fallbackImgUrl : imgUrl, sizes, srcSet, alt, onError: handleError });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Avatar/AvatarText/utils.js
var getAvatarDisplayText = (text2, size5) => {
  if (size5 === "3xs") {
    return text2[0].toUpperCase();
  }
  const words = text2.split(/[^\p{L}]+/u);
  if (words.length <= 1) {
    return text2.slice(0, 2).toUpperCase();
  }
  return [words[0][0], words[1][0]].filter(Boolean).join("").toUpperCase();
};

// node_modules/@gravity-ui/uikit/build/esm/components/Avatar/AvatarText/AvatarText.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var AvatarText = ({ text: text2, color, size: size5 }) => {
  const style3 = { color };
  const displayText = getAvatarDisplayText(text2, size5);
  return (0, import_jsx_runtime44.jsx)("div", { className: bAvatar("text"), style: style3, children: displayText });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Avatar/Avatar.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Avatar/Avatar.css";
var Avatar = React809.forwardRef((props, ref2) => {
  const { size: size5 = DEFAULT_AVATAR_SIZE, theme = "normal", view = "filled", shape = "circle", backgroundColor, borderColor, title, className, style: styleProp, qa } = props;
  const style3 = { backgroundColor, color: borderColor, ...styleProp };
  const renderContent = () => {
    if ("imgUrl" in props && props.imgUrl) {
      return (0, import_jsx_runtime45.jsx)(AvatarImage, { imgUrl: props.imgUrl, fallbackImgUrl: props.fallbackImgUrl, sizes: props.sizes, srcSet: props.srcSet, alt: props.alt || title, loading: props.loading, withImageBorder: props.withImageBorder, size: size5 });
    }
    if ("icon" in props && props.icon) {
      return (0, import_jsx_runtime45.jsx)(AvatarIcon, { icon: props.icon, color: props.color, size: size5 });
    }
    if ("text" in props && props.text) {
      return (0, import_jsx_runtime45.jsx)(AvatarText, { text: props.text, color: props.color, size: size5 });
    }
    return null;
  };
  return (0, import_jsx_runtime45.jsx)("div", { className: bAvatar({ size: size5, theme, view, shape, "with-border": Boolean(borderColor) }, className), title, role: "img", style: style3, "data-qa": qa, ref: ref2, ...filterDOMProps(props, { labelable: true }), children: renderContent() });
});
Avatar.displayName = "Avatar";

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/AvatarStack.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var React812 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/AvatarStackItem.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var b28 = block("avatar-stack");
var AvatarStackItem = ({ children: children2 }) => {
  return (0, import_jsx_runtime46.jsx)("li", { className: b28("item"), children: children2 });
};
AvatarStackItem.displayName = "AvatarStack.Item";

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/AvatarStackMore.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var React810 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/i18n/en.json
var en_default5 = {
  more: ["and {{count}} more", "and {{count}} more", "and {{count}} more"]
};

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/i18n/ru.json
var ru_default5 = {
  more: ["И eщё {{count}}", "И eщё {{count}}", "И eщё {{count}}"]
};

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/i18n/index.js
var COMPONENT4 = "AvatarStack";
var i18n_default4 = addComponentKeysets({ en: en_default5, ru: ru_default5 }, COMPONENT4);

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/AvatarStackMore.js
var b29 = block("avatar-stack");
var AvatarStackMore = React810.forwardRef(({ className, count: count3, "aria-label": ariaLabel, borderColor = "var(--g-color-line-generic-solid)", size: size5 = DEFAULT_AVATAR_SIZE }, ref2) => (0, import_jsx_runtime47.jsxs)("div", { ref: ref2, className: b29("more", { size: size5, "has-border": Boolean(borderColor) }, className), "aria-label": ariaLabel || i18n_default4("more", { count: count3 }), style: { borderColor }, children: ["+", count3] }));
AvatarStackMore.displayName = "AvatarStack.More";

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/AvatarStackMoreButton.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var React811 = __toESM(require_react(), 1);
var b30 = block("avatar-stack");
var AvatarStackMoreButton = React811.forwardRef(({ className, badgeClassName, size: size5 = DEFAULT_AVATAR_SIZE, onClick, count: count3, "aria-label": ariaLabel, borderColor }, ref2) => {
  return (0, import_jsx_runtime48.jsx)("button", { ref: ref2, type: "button", className: b30("more-button", { size: size5 }, className), onClick, children: (0, import_jsx_runtime48.jsx)(AvatarStackMore, { className: badgeClassName, size: size5, count: count3, "aria-label": ariaLabel, borderColor }) });
});
AvatarStackMoreButton.displayName = "AvatarStack.MoreButton";

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/constants.js
var AVATAR_STACK_DEFAULT_MAX = 3;

// node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/AvatarStack.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/AvatarStack/AvatarStack.css";
var b31 = block("avatar-stack");
var AvatarStackComponent = React812.forwardRef(({ max: max2 = AVATAR_STACK_DEFAULT_MAX, total, overlapSize = "s", size: size5, children: children2, className, renderMore }, ref2) => {
  const visibleItems = [];
  const normalizedTotal = total ? Math.max(total, max2) : React812.Children.count(children2);
  let normalizedMax = max2 < 1 ? 1 : max2;
  normalizedMax = normalizedTotal - normalizedMax > 1 ? normalizedMax : normalizedTotal;
  const moreItems = normalizedTotal - normalizedMax;
  React812.Children.forEach(children2, (child) => {
    if (!React812.isValidElement(child)) {
      return;
    }
    const item = (0, import_jsx_runtime49.jsx)(AvatarStackItem, { children: child }, visibleItems.length);
    if (visibleItems.length < normalizedMax) {
      visibleItems.unshift(item);
    }
  });
  const hasMoreButton = moreItems > 0;
  return (
    // Safari remove role=list with some styles, applied to li items, so we need
    // to restore role manually
    // eslint-disable-next-line jsx-a11y/no-redundant-roles
    (0, import_jsx_runtime49.jsxs)("ul", { className: b31({ "overlap-size": overlapSize }, className), role: "list", ref: ref2, children: [hasMoreButton ? (0, import_jsx_runtime49.jsx)(AvatarStackItem, { children: renderMore ? renderMore({ count: moreItems }) : (0, import_jsx_runtime49.jsx)(AvatarStackMore, { count: moreItems, size: size5 }) }, "more-button") : null, visibleItems] })
  );
});
AvatarStackComponent.displayName = "AvatarStack";
var AvatarStack = Object.assign(AvatarStackComponent, {
  More: AvatarStackMore,
  MoreButton: AvatarStackMoreButton
});

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var import_react10 = __toESM(require_react(), 1);
var React816 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsDropdownMenu.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var React813 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/i18n/en.json
var en_default6 = {
  breadcrumbs: "Breadcrumbs",
  label_more: "Show more"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/i18n/ru.json
var ru_default6 = {
  breadcrumbs: "Навигация",
  label_more: "Показать больше"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/i18n/index.js
var COMPONENT5 = "lab/Breadcrumbs";
var i18n_default5 = addComponentKeysets({ en: en_default6, ru: ru_default6 }, COMPONENT5);

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/utils.js
var b32 = block("breadcrumbs");

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsDropdownMenu.js
var menuContext = React813.createContext({
  isMenu: false,
  activeIndex: null,
  getItemProps: (props = {}) => props,
  listItemsRef: { current: [] },
  popupStyle: void 0
});
function BreadcrumbsDropdownMenu({ children: children2, disabled, popupPlacement, popupStyle }) {
  const [reference, setReference] = React813.useState(null);
  const [floating, setFloating] = React813.useState(null);
  const [activeIndex, setActiveIndex] = React813.useState(null);
  const [open, setOpen] = React813.useState(false);
  const context = useFloatingRootContext({
    open,
    onOpenChange: setOpen,
    elements: { reference, floating }
  });
  const listItemsRef = React813.useRef([]);
  const listNavigation = useListNavigation(context, {
    enabled: !disabled,
    listRef: listItemsRef,
    activeIndex,
    onNavigate: setActiveIndex,
    loop: true
  });
  const dismiss = useDismiss(context, { enabled: !disabled });
  const click = useClick(context, { enabled: !disabled });
  const role = useRole(context, { role: "menu" });
  const interactions = [click, dismiss, listNavigation, role];
  const { getReferenceProps, getItemProps } = useInteractions(interactions);
  return (0, import_jsx_runtime50.jsxs)("div", { className: b32("menu"), children: [(0, import_jsx_runtime50.jsx)(Button2, { ref: setReference, ...getReferenceProps(), title: i18n_default5("label_more"), "aria-label": i18n_default5("label_more"), size: "s", view: "flat", disabled, children: (0, import_jsx_runtime50.jsx)(Button2.Icon, { children: "..." }) }), (0, import_jsx_runtime50.jsx)(Popup, { floatingContext: context, floatingRef: setFloating, floatingInteractions: interactions, placement: popupPlacement, className: b32("menu-popup"), children: (0, import_jsx_runtime50.jsx)(menuContext.Provider, { value: { isMenu: true, getItemProps, listItemsRef, activeIndex, popupStyle }, children: children2 }) })] });
}
function useMenuContext() {
  return React813.useContext(menuContext);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsItem.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var React815 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/lab/ListItemView/ListItemView.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var React814 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/lab/ListItemView/ListItemView.css";
var b33 = block("lab-list-item-view");
var ListItemView = React814.forwardRef(ListItemViewComponent);
function ListItemViewComponent(props, ref2) {
  const { size: size5, active, selected, hovered, disabled, onClick, selectionStyle, className, style: style3, collapsed, onCollapseChange, children: children2, isContainer = false, component: Component13 = "div", componentProps, collapsible: _collapsible, description, draggable: _draggable, startContent: _startContent, endContent: _endContent, nestedLevel: _nestedLevel } = props;
  const containerRef = React814.useRef(null);
  const componentRef = useForkRef(containerRef, ref2);
  return (0, import_jsx_runtime51.jsx)(Component13, { ref: componentRef, ...componentProps, ...filterDOMProps(props), className: b33({
    size: size5,
    selected: selected && selectionStyle === "highlight",
    disabled,
    active,
    hovered: typeof hovered === "boolean" && (hovered ? "yes" : "no"),
    "is-container": isContainer,
    "has-description": Boolean(description)
  }, (componentProps == null ? void 0 : componentProps.className) ?? className), style: (componentProps == null ? void 0 : componentProps.style) ?? style3, onClick: (e) => {
    var _a;
    if (disabled) {
      e.preventDefault();
      return;
    }
    const target = e.target;
    if (target instanceof Element && containerRef.current && focusable(containerRef.current).some((el) => el.contains(target))) {
      return;
    }
    if (typeof onClick === "function" || typeof (componentProps == null ? void 0 : componentProps.onClick) === "function") {
      onClick == null ? void 0 : onClick(e);
      (_a = componentProps == null ? void 0 : componentProps.onClick) == null ? void 0 : _a.call(componentProps, e);
    } else if (typeof onCollapseChange === "function") {
      onCollapseChange(!collapsed);
    }
  }, children: isContainer ? children2 : (0, import_jsx_runtime51.jsx)(ListItemViewContent, { ...props, children: children2 }) });
}
function ListItemViewContent({ selected, disabled, selectionStyle, draggable: draggable2, nestedLevel, collapsible, collapsed, onCollapseChange, startContent, children: children2, description, endContent }) {
  return (0, import_jsx_runtime51.jsxs)(React814.Fragment, { children: [draggable2 ? (0, import_jsx_runtime51.jsx)(Slot, { name: "drag-handle" }) : null, nestedLevel ? (0, import_jsx_runtime51.jsx)(Slot, { name: "spacer", style: { "--_--nested-level": nestedLevel } }) : null, collapsible ? (0, import_jsx_runtime51.jsx)(Slot, { name: "collapsed-toggle", children: (0, import_jsx_runtime51.jsx)(Button2, { className: b33("collapsible"), view: "flat", tabIndex: -1, disabled, onClick: () => {
    onCollapseChange == null ? void 0 : onCollapseChange(!collapsed);
  }, "aria-hidden": "true", children: (0, import_jsx_runtime51.jsx)(Button2.Icon, { children: (0, import_jsx_runtime51.jsx)(ArrowToggle, { className: b33("arrow", { direction: collapsed ? "bottom" : "top" }) }) }) }) }) : null, selectionStyle === "check" && (0, import_jsx_runtime51.jsx)(Slot, { name: "checked", children: (0, import_jsx_runtime51.jsx)("div", { className: b33("checked"), children: selected ? (0, import_jsx_runtime51.jsx)(Icon, { data: Check_default, className: b33("icon") }) : null }) }), startContent ? (0, import_jsx_runtime51.jsx)(Slot, { name: "start-content", children: startContent }) : null, (0, import_jsx_runtime51.jsx)(Slot, { name: "content", children: children2 }), description ? (0, import_jsx_runtime51.jsx)(Slot, { name: "description", children: description }) : null, endContent ? (0, import_jsx_runtime51.jsx)(Slot, { name: "end-content", children: endContent }) : null] });
}
function Slot({ name, children: children2, className, style: style3 }) {
  return (0, import_jsx_runtime51.jsx)("div", { className: b33("slot", { name }, className), style: style3, children: children2 });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsItem.js
function BreadcrumbsItem(props, ref2) {
  const domProps = filterDOMProps(props, { labelable: true });
  const { href, hrefLang, target, rel, download, ping, referrerPolicy, children: children2, __disabled: disabled, __current: current, __onAction: onAction, __index: index3, ...restProps } = props;
  const handleAction = (event) => {
    if (disabled) {
      event.preventDefault();
      return;
    }
    if (typeof restProps.onClick === "function") {
      restProps.onClick(event);
    }
    if (typeof onAction === "function") {
      onAction();
    }
  };
  const linkProps = {
    onClick: handleAction,
    "aria-disabled": disabled ? true : void 0
  };
  if (href) {
    linkProps.href = href;
    linkProps.hrefLang = hrefLang;
    linkProps.target = target;
    linkProps.rel = target === "_blank" && !rel ? "noopener noreferrer" : rel;
    linkProps.download = download;
    linkProps.ping = ping;
    linkProps.referrerPolicy = referrerPolicy;
    linkProps.tabIndex = disabled ? -1 : void 0;
  } else {
    linkProps.role = "link";
    linkProps.tabIndex = disabled ? void 0 : 0;
    linkProps.onKeyDown = (event) => {
      if (disabled) {
        event.preventDefault();
        return;
      }
      if (typeof restProps.onKeyDown === "function") {
        restProps.onKeyDown(event);
      }
      if (event.key === "Enter") {
        if (typeof onAction === "function") {
          onAction();
        }
      }
    };
  }
  if (current) {
    linkProps["aria-current"] = props["aria-current"] ?? "page";
  }
  const Element2 = href ? "a" : "span";
  const { isMenu, getItemProps, listItemsRef, activeIndex, popupStyle } = useMenuContext();
  if (isMenu) {
    const active = !disabled && activeIndex === index3;
    return (0, import_jsx_runtime52.jsx)(ListItemView, { ref: (node) => {
      listItemsRef.current[index3 ?? 0] = node;
    }, nestedLevel: popupStyle === "staircase" ? index3 : void 0, active, size: "m", className: b32("menu-link", props.className), component: Element2, componentProps: getItemProps({
      ...restProps,
      ...domProps,
      ...linkProps,
      role: "menuitem",
      tabIndex: active ? 0 : -1
    }), disabled, children: children2 });
  }
  return (0, import_jsx_runtime52.jsx)(Element2, { ...restProps, ...domProps, ...linkProps, ref: ref2, className: b32("link", {
    "is-current": current,
    "is-disabled": disabled && !current
  }, props.className), children: children2 });
}
BreadcrumbsItem.displayName = "Breadcrumbs.Item";
var _BreadcrumbsItem = React815.forwardRef(BreadcrumbsItem);

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsSeparator.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
function BreadcrumbsSeparator({ separator }) {
  return (0, import_jsx_runtime53.jsx)("div", { "aria-hidden": true, className: b32("divider"), children: separator ?? "/" });
}
BreadcrumbsSeparator.displayName = "Breadcrumbs.Separator";

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/Breadcrumbs.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/Breadcrumbs.css";
var Breadcrumbs = React816.forwardRef(function Breadcrumbs2(props, ref2) {
  const listRef = React816.useRef(null);
  const containerRef = useForkRef(ref2, listRef);
  const endContentRef = React816.useRef(null);
  const items = [];
  React816.Children.forEach(props.children, (child, index3) => {
    if (React816.isValidElement(child)) {
      if (child.key === void 0 || child.key === null) {
        child = React816.cloneElement(child, { key: index3 });
      }
      items.push(child);
    }
  });
  const [visibleItemsCount, setVisibleItemsCount] = React816.useState(items.length);
  const [calculated, setCalculated] = React816.useState(false);
  const recalculate = (visibleItems) => {
    const list = listRef.current;
    if (!list) {
      return;
    }
    const listItems = Array.from(list.children);
    const endElement = endContentRef.current;
    if (endElement) {
      listItems.pop();
    }
    if (listItems.length === 0) {
      setCalculated(true);
      return;
    }
    const containerWidth = list.offsetWidth - ((endElement == null ? void 0 : endElement.offsetWidth) ?? 0);
    let newVisibleItemsCount = 0;
    let calculatedWidth = 0;
    let maxItems = props.maxItems || Infinity;
    let rootWidth = 0;
    if (props.showRoot) {
      const item = listItems.shift();
      if (item) {
        rootWidth = item.scrollWidth;
        calculatedWidth += rootWidth;
      }
      newVisibleItemsCount++;
    }
    const hasMenu = items.length > visibleItems;
    if (hasMenu) {
      const item = listItems.shift();
      if (item) {
        calculatedWidth += item.offsetWidth;
      }
      maxItems--;
    }
    if (props.showRoot && calculatedWidth >= containerWidth) {
      calculatedWidth -= rootWidth;
      newVisibleItemsCount--;
    }
    const lastItem = listItems.pop();
    if (lastItem) {
      calculatedWidth += Math.min(lastItem.offsetWidth, 200);
      if (calculatedWidth < containerWidth) {
        newVisibleItemsCount++;
      }
    }
    for (let i = listItems.length - 1; i >= 0; i--) {
      const item = listItems[i];
      calculatedWidth += item.offsetWidth;
      if (calculatedWidth >= containerWidth) {
        break;
      }
      newVisibleItemsCount++;
    }
    newVisibleItemsCount = Math.max(Math.min(maxItems, newVisibleItemsCount), 1);
    if (newVisibleItemsCount === visibleItemsCount) {
      setCalculated(true);
    } else {
      setVisibleItemsCount(newVisibleItemsCount);
    }
  };
  const handleResize = React816.useCallback(() => {
    setCalculated(false);
    setVisibleItemsCount(items.length);
  }, [items.length]);
  useResizeObserver({
    ref: listRef,
    onResize: handleResize
  });
  useResizeObserver({
    ref: props.endContent ? endContentRef : void 0,
    onResize: handleResize
  });
  const lastChildren = React816.useRef(null);
  React816.useLayoutEffect(() => {
    if (calculated && props.children !== lastChildren.current) {
      lastChildren.current = props.children;
      setCalculated(false);
      setVisibleItemsCount(items.length);
    }
  }, [calculated, items.length, props.children]);
  React816.useLayoutEffect(() => {
    if (!calculated) {
      recalculate(visibleItemsCount);
    }
  });
  let contents = items;
  if (items.length > visibleItemsCount) {
    contents = [];
    const breadcrumbs = [...items];
    let endItems = visibleItemsCount;
    if (props.showRoot && visibleItemsCount > 1) {
      const rootItem = breadcrumbs.shift();
      if (rootItem) {
        contents.push(rootItem);
      }
      endItems--;
    }
    const hiddenItems = breadcrumbs.slice(0, -endItems);
    const menuItem = (0, import_jsx_runtime54.jsx)(BreadcrumbsDropdownMenu, { disabled: props.disabled, popupPlacement: props.popupPlacement, popupStyle: props.popupStyle, "data-breadcrumbs-menu-item": true, children: hiddenItems.map((child, index3) => {
      const Component13 = props.itemComponent ?? _BreadcrumbsItem;
      const key = child.key ?? index3;
      const handleAction = () => {
        if (typeof props.onAction === "function") {
          props.onAction(key);
        }
      };
      const innerProps = {
        __index: index3,
        __disabled: props.disabled || child.props.disabled,
        __onAction: handleAction
      };
      return (0, import_react10.createElement)(Component13, { ...child.props, key, ...innerProps }, child.props.children);
    }) });
    contents.push(menuItem);
    contents.push(...breadcrumbs.slice(-endItems));
  }
  const lastIndex = contents.length - 1;
  const breadcrumbsItems = contents.map((child, index3) => {
    const isCurrent = index3 === lastIndex;
    const key = child.key ?? index3;
    const { "data-breadcrumbs-menu-item": isMenu, ...childProps } = child.props;
    let item;
    if (isMenu) {
      item = child;
    } else {
      const Component13 = props.itemComponent ?? _BreadcrumbsItem;
      const handleAction = () => {
        if (typeof props.onAction === "function") {
          props.onAction(key);
        }
      };
      const innerProps = {
        __current: isCurrent,
        __disabled: props.disabled || childProps.disabled,
        __onAction: handleAction
      };
      item = (0, import_react10.createElement)(Component13, { ...childProps, key, ...innerProps }, childProps.children);
    }
    return (0, import_jsx_runtime54.jsxs)("li", { className: b32("item", { calculating: isCurrent && !calculated, current: isCurrent }), children: [item, isCurrent ? null : (0, import_jsx_runtime54.jsx)(BreadcrumbsSeparator, { separator: props.separator })] }, isMenu ? "menu" : `item-${key}`);
  });
  if (props.endContent) {
    breadcrumbsItems.push((0, import_jsx_runtime54.jsx)("li", { ref: endContentRef, className: b32("item"), children: props.endContent }, "end-content"));
  }
  return (0, import_jsx_runtime54.jsx)("ol", { ref: containerRef, ...filterDOMProps(props, { labelable: true }), "data-qa": props.qa, className: b32(null, props.className), style: props.style, children: breadcrumbsItems });
});
Breadcrumbs.Item = _BreadcrumbsItem;
Breadcrumbs.displayName = "Breadcrumbs";

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/Checkbox.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var React818 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/ControlLabel/ControlLabel.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var React817 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ControlLabel/ControlLabel.css";
var b34 = block("control-label");
var ControlLabel = React817.forwardRef(({ children: children2, className, labelClassName, title, style: style3, disabled = false, control, size: size5 = "m", qa }, ref2) => {
  const clonedControl = React817.cloneElement(control, {
    className: b34("indicator", control.props.className)
  });
  return (0, import_jsx_runtime55.jsxs)("label", { ref: ref2, title, style: style3, className: b34({ size: size5, disabled }, className), "data-qa": qa, children: [clonedControl, children2 ? (0, import_jsx_runtime55.jsx)("span", { className: b34("text", labelClassName), children: children2 }) : null] });
});
ControlLabel.displayName = "ControlLabel";

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/CheckboxDashIcon.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
function CheckboxDashIcon(props) {
  return (0, import_jsx_runtime56.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 17 17", width: "16", height: "16", fill: "currentColor", ...props, children: (0, import_jsx_runtime56.jsx)("path", { d: "M4 7h9v3H4z" }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/CheckboxTickIcon.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
function CheckboxTickIcon(props) {
  return (0, import_jsx_runtime57.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 12 10", width: "16", height: "16", fill: "currentColor", ...props, children: (0, import_jsx_runtime57.jsx)("path", { d: "M.49 5.385l1.644-1.644 4.385 4.385L4.874 9.77.49 5.385zm4.384 1.096L10.356 1 12 2.644 6.519 8.126 4.874 6.48v.001z" }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/Checkbox.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/Checkbox.css";
var b35 = block("checkbox");
var Checkbox = React818.forwardRef(function Checkbox2(props, ref2) {
  const { size: size5 = "m", indeterminate, disabled = false, content, children: children2, title, style: style3, className, qa } = props;
  const { checked, inputProps } = useCheckbox(props);
  const text2 = content || children2;
  const control = (0, import_jsx_runtime58.jsxs)("span", { className: b35("indicator"), children: [(0, import_jsx_runtime58.jsx)("span", { className: b35("icon"), "aria-hidden": true, children: indeterminate ? (0, import_jsx_runtime58.jsx)(CheckboxDashIcon, { className: b35("icon-svg", { type: "dash" }) }) : (0, import_jsx_runtime58.jsx)(CheckboxTickIcon, { className: b35("icon-svg", { type: "tick" }) }) }), (0, import_jsx_runtime58.jsx)("input", { ...inputProps, className: b35("control") }), (0, import_jsx_runtime58.jsx)("span", { className: b35("outline") })] });
  return (0, import_jsx_runtime58.jsx)(ControlLabel, { ref: ref2, title, style: style3, size: size5, disabled, className: b35({
    size: size5,
    disabled,
    indeterminate,
    checked
  }, className), qa, control, children: text2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/ClipboardButton.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var React820 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardIcon/ClipboardIcon.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
function ClipboardIcon({ status, ...rest }) {
  if (status === "error") {
    return (0, import_jsx_runtime59.jsx)(Icon, { data: CopyXmark_default, ...rest });
  }
  if (status === "success") {
    return (0, import_jsx_runtime59.jsx)(Icon, { data: CopyCheck_default, ...rest });
  }
  return (0, import_jsx_runtime59.jsx)(Icon, { data: Copy_default, ...rest });
}

// node_modules/@gravity-ui/uikit/build/esm/components/CopyToClipboard/CopyToClipboard.js
var React819 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/CopyToClipboard/copyText.js
function copyText(text2) {
  var _a;
  if ((_a = navigator == null ? void 0 : navigator.clipboard) == null ? void 0 : _a.writeText) {
    try {
      return navigator.clipboard.writeText(text2);
    } catch (error3) {
      return Promise.reject(error3);
    }
  }
  return Promise.reject(new Error("Native copy is not available"));
}

// node_modules/@gravity-ui/uikit/build/esm/components/CopyToClipboard/CopyToClipboard.js
var INITIAL_STATUS = "pending";
function CopyToClipboard(props) {
  const { children: children2, text: text2, timeout: timeout2, onCopy } = props;
  const textRef = React819.useRef("");
  const [status, setStatus] = React819.useState(INITIAL_STATUS);
  const timerIdRef = React819.useRef();
  const content = typeof children2 === "function" ? children2(status) : children2;
  const handleCopy = React819.useCallback((copyText2, result) => {
    setStatus(result ? "success" : "error");
    window.clearTimeout(timerIdRef.current);
    timerIdRef.current = window.setTimeout(() => setStatus(INITIAL_STATUS), timeout2);
    onCopy == null ? void 0 : onCopy(copyText2, result);
  }, [onCopy, timeout2]);
  const onClickWithCopy = React819.useCallback((event) => {
    const currentText = typeof text2 === "function" ? text2() : text2;
    textRef.current = currentText;
    function copy(result) {
      var _a, _b;
      if (currentText === textRef.current) {
        handleCopy(currentText, result);
        (_b = (_a = content.props) == null ? void 0 : _a.onClick) == null ? void 0 : _b.call(_a, event);
      }
    }
    copyText(currentText).then(() => {
      copy(true);
    }, () => {
      copy(false);
    });
  }, [content.props, handleCopy, text2]);
  React819.useEffect(() => () => window.clearTimeout(timerIdRef.current), []);
  if (!React819.isValidElement(content)) {
    throw new Error("Content must be a valid react element");
  }
  return React819.cloneElement(content, {
    onClick: onClickWithCopy
  });
}

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/i18n/en.json
var en_default7 = {
  startCopy: "Copy",
  endCopy: "Copied"
};

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/i18n/ru.json
var ru_default7 = {
  startCopy: "Копировать",
  endCopy: "Скопировано"
};

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/i18n/index.js
var COMPONENT6 = "ClipboardButton";
var i18n_default6 = addComponentKeysets({ en: en_default7, ru: ru_default7 }, COMPONENT6);

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/ClipboardButton.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/ClipboardButton.css";
var b36 = block("clipboard-button");
var DEFAULT_TIMEOUT = 1200;
var ButtonSizeToIconSize = {
  xs: 12,
  s: 16,
  m: 16,
  l: 16,
  xl: 20
};
var ClipboardButtonComponent = (props) => {
  const { size: size5 = "m", hasTooltip = true, tooltipInitialText = i18n_default6("startCopy"), tooltipSuccessText = i18n_default6("endCopy"), status, view = "flat", children: children2, iconPosition = "start", closeDelay, ...rest } = props;
  const buttonIcon = (0, import_jsx_runtime60.jsx)(Button2.Icon, { className: b36("icon"), children: (0, import_jsx_runtime60.jsx)(ClipboardIcon, { size: ButtonSizeToIconSize[size5], status }) });
  return (0, import_jsx_runtime60.jsx)(ActionTooltip, { title: status === "success" ? tooltipSuccessText : tooltipInitialText, disabled: !hasTooltip, closeDelay, children: (0, import_jsx_runtime60.jsxs)(Button2, { view, size: size5, "aria-label": tooltipInitialText, ...rest, children: [iconPosition === "start" ? buttonIcon : null, children2, iconPosition === "end" ? buttonIcon : null] }) });
};
function ClipboardButton(props) {
  const { text: text2, timeout: timeout2 = DEFAULT_TIMEOUT, onCopy, hasTooltip = true, onMouseEnter, onFocus, ...buttonProps } = props;
  const timerIdRef = React820.useRef();
  const [tooltipCloseDelay, setTooltipCloseDelay] = React820.useState(void 0);
  const [tooltipDisabled, setTooltipDisabled] = React820.useState(false);
  React820.useEffect(() => window.clearTimeout(timerIdRef.current), []);
  const handleCopy = React820.useCallback((text3, result) => {
    onCopy == null ? void 0 : onCopy(text3, result);
    setTooltipDisabled(false);
    setTooltipCloseDelay(timeout2);
    window.clearTimeout(timerIdRef.current);
    timerIdRef.current = window.setTimeout(() => {
      setTooltipDisabled(true);
    }, timeout2);
  }, [onCopy, timeout2]);
  const resetTooltip = React820.useCallback(() => {
    if (tooltipDisabled) {
      setTooltipDisabled(false);
      setTooltipCloseDelay(void 0);
    }
  }, [tooltipDisabled]);
  const handleMouseEnter = React820.useCallback((event) => {
    onMouseEnter == null ? void 0 : onMouseEnter(event);
    resetTooltip();
  }, [onMouseEnter, resetTooltip]);
  const handleFocus = React820.useCallback((event) => {
    onFocus == null ? void 0 : onFocus(event);
    resetTooltip();
  }, [onFocus, resetTooltip]);
  return (0, import_jsx_runtime60.jsx)(CopyToClipboard, { text: text2, timeout: timeout2, onCopy: handleCopy, children: (status) => (0, import_jsx_runtime60.jsx)(ClipboardButtonComponent, { ...buttonProps, closeDelay: tooltipCloseDelay, hasTooltip: hasTooltip && !tooltipDisabled, status, onMouseEnter: handleMouseEnter, onFocus: handleFocus }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/DefinitionList.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var React825 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/components/DefinitionListContext.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var React821 = __toESM(require_react(), 1);
var DefinitionListAttributesContext = React821.createContext(void 0);
function DefinitionListProvider({ direction, contentMaxWidth, nameMaxWidth, children: children2 }) {
  const keyStyle = nameMaxWidth ? { maxWidth: nameMaxWidth, width: nameMaxWidth } : {};
  const valueStyle = typeof contentMaxWidth === "number" ? { width: contentMaxWidth, maxWidth: contentMaxWidth } : {};
  return (0, import_jsx_runtime61.jsx)(DefinitionListAttributesContext.Provider, { value: {
    keyStyle,
    valueStyle,
    direction
  }, children: children2 });
}
function useDefinitionListAttributes() {
  const state = React821.useContext(DefinitionListAttributesContext);
  if (state === void 0) {
    throw new Error("useDefinitionListAttributes must be used within DefinitionListProvider");
  }
  return state;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/components/DefinitionListItem.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/constants.js
var b37 = block("definition-list");

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/utils.js
function isUnbreakableOver(limit) {
  return function(value) {
    const posibleLines = value.split(/\s+/);
    return posibleLines.some((line) => line.length > limit);
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/components/DefinitionContent.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
function DefinitionContent({ copyText: copyText2, children: children2 }) {
  const definitionContent = children2 ?? "—";
  return copyText2 ? (0, import_jsx_runtime62.jsxs)("div", { className: b37("copy-container"), children: [definitionContent, (0, import_jsx_runtime62.jsx)(ClipboardButton, { size: "s", text: copyText2, className: b37("copy-button"), view: "flat-secondary" })] }) : definitionContent;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/components/TermContent.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var React824 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/HelpMark/HelpMark.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var React823 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/Popover.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var React822 = __toESM(require_react(), 1);
var b38 = block("popover");
var DEFAULT_OPEN_DELAY3 = 500;
var DEFAULT_CLOSE_DELAY3 = 250;
function Popover({ children: children2, open, onOpenChange, disabled, content, trigger, openDelay = DEFAULT_OPEN_DELAY3, closeDelay = DEFAULT_CLOSE_DELAY3, enableSafePolygon, className, ...restProps }) {
  const [anchorElement, setAnchorElement] = React822.useState(null);
  const [floatingElement, setFloatingElement] = React822.useState(null);
  const [isOpen, setIsOpen] = useControlledState(open, false, onOpenChange);
  const context = useFloatingRootContext({
    open: isOpen && !disabled,
    onOpenChange: setIsOpen,
    elements: {
      reference: anchorElement,
      floating: floatingElement
    }
  });
  const hover = useHover(context, {
    enabled: trigger !== "click",
    delay: { open: openDelay, close: closeDelay },
    move: false,
    handleClose: enableSafePolygon ? safePolygon() : void 0
  });
  const click = useClick(context);
  const role = useRole(context, {
    role: "dialog"
  });
  const dismiss = useDismiss(context);
  const interactions = [hover, click, role, dismiss];
  const { getReferenceProps } = useInteractions(interactions);
  const anchorRef = useForkRef(setAnchorElement, React822.isValidElement(children2) ? getElementRef(children2) : void 0);
  const anchorProps = React822.isValidElement(children2) ? getReferenceProps(children2.props) : getReferenceProps();
  const anchorNode = React822.isValidElement(children2) ? React822.cloneElement(children2, {
    ...anchorProps,
    ref: anchorRef
  }) : children2(anchorProps, anchorRef);
  return (0, import_jsx_runtime63.jsxs)(React822.Fragment, { children: [anchorNode, (0, import_jsx_runtime63.jsx)(Popup, { ...restProps, open: context.open, floatingContext: context, floatingRef: setFloatingElement, floatingInteractions: interactions, className: b38(null, className), children: content })] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/HelpMark/constants.js
var ICON_SIZE_MAP = {
  s: 14,
  m: 16,
  l: 18,
  xl: 20
};

// node_modules/@gravity-ui/uikit/build/esm/components/HelpMark/HelpMark.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/HelpMark/HelpMark.css";
var b39 = block("help-mark");
var HelpMark = React823.forwardRef(function HelpMark2({ children: children2, qa, className, iconSize = "m", popoverProps, ...restProps }, ref2) {
  return (0, import_jsx_runtime64.jsx)(Popover, { content: (0, import_jsx_runtime64.jsx)("div", { className: b39("popover"), children: children2 }), hasArrow: true, ...popoverProps, children: (0, import_jsx_runtime64.jsx)("button", { ...restProps, ref: ref2, type: "button", className: b39(null, className), "data-qa": qa, children: (0, import_jsx_runtime64.jsx)(Icon, { data: CircleQuestion_default, size: ICON_SIZE_MAP[iconSize], className: b39("icon") }) }) });
});

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/i18n/en.json
var en_default8 = {
  label_note: "Note"
};

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/i18n/ru.json
var ru_default8 = {
  label_note: "Справка"
};

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/i18n/index.js
var i18n_default7 = addComponentKeysets({ en: en_default8, ru: ru_default8 }, "DefinitionList");

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/components/TermContent.js
function NoteElement({ note: note2 }) {
  if (!note2) {
    return null;
  }
  if (typeof note2 === "string") {
    return (0, import_jsx_runtime65.jsx)(HelpMark, { className: b37("note"), popoverProps: { placement: ["bottom", "top"] }, "aria-label": i18n_default7("label_note"), children: note2 });
  }
  if (typeof note2 === "object") {
    return (0, import_jsx_runtime65.jsx)(HelpMark, { ...note2, className: b37("note", note2.className), popoverProps: { placement: ["bottom", "top"], ...note2.popoverProps }, "aria-label": i18n_default7("label_note") });
  }
  return null;
}
function TermContent({ note: note2, name, direction }) {
  const noteElement = note2 ? (0, import_jsx_runtime65.jsxs)(React824.Fragment, { children: [" ", (0, import_jsx_runtime65.jsx)(NoteElement, { note: note2 })] }) : null;
  return (0, import_jsx_runtime65.jsxs)(React824.Fragment, { children: [(0, import_jsx_runtime65.jsxs)("div", { className: b37("term-wrapper"), children: [name, noteElement] }), direction === "horizontal" && (0, import_jsx_runtime65.jsx)("div", { className: b37("dots") })] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/components/DefinitionListItem.js
function DefinitionListItem({ name, children: children2, copyText: copyText2, note: note2, qa }) {
  const { direction, keyStyle, valueStyle } = useDefinitionListAttributes();
  return (0, import_jsx_runtime66.jsxs)("div", { className: b37("item"), "data-qa": qa, children: [(0, import_jsx_runtime66.jsx)("dt", { className: b37("term-container"), style: keyStyle, children: (0, import_jsx_runtime66.jsx)(TermContent, { direction, name, note: note2 }) }), (0, import_jsx_runtime66.jsx)("dd", { className: b37("definition"), style: {
    ...valueStyle,
    lineBreak: typeof children2 === "string" && isUnbreakableOver(20)(children2) ? "anywhere" : void 0
  }, children: (0, import_jsx_runtime66.jsx)(DefinitionContent, { copyText: copyText2, children: children2 }) })] });
}
DefinitionListItem.displayName = "DefinitionListItem";

// node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/DefinitionList.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/DefinitionList/DefinitionList.css";
function DefinitionList({ responsive, direction = "horizontal", nameMaxWidth, contentMaxWidth, className, children: children2, qa, ...restProps }) {
  const normalizedChildren = prepareChildren2(children2);
  return (0, import_jsx_runtime67.jsx)(DefinitionListProvider, { direction, nameMaxWidth, contentMaxWidth, children: (0, import_jsx_runtime67.jsx)("dl", { ...filterDOMProps(restProps, { labelable: true }), className: b37({ responsive, vertical: direction === "vertical" }, className), "data-qa": qa, children: normalizedChildren }) });
}
var isDefinitionListItem = isOfType(DefinitionListItem);
function prepareChildren2(children2) {
  const items = React825.Children.toArray(children2);
  const normalizedItems = [];
  for (const item of items) {
    const isItem = isDefinitionListItem(item);
    if (isItem) {
      normalizedItems.push(item);
    } else {
      warnOnce("[DefinitionList] Only <DefinitionList.Item> components is allowed as children");
    }
  }
  return normalizedItems;
}
DefinitionList.Item = DefinitionListItem;
DefinitionList.displayName = "DefinitionList";

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/Dialog.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var React830 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Modal/Modal.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var React826 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Modal/i18n/en.json
var en_default9 = {
  close: "Close"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Modal/i18n/ru.json
var ru_default9 = {
  close: "Закрыть"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Modal/i18n/index.js
var COMPONENT7 = "Modal";
var i18n_default8 = addComponentKeysets({ en: en_default9, ru: ru_default9 }, COMPONENT7);

// node_modules/@gravity-ui/uikit/build/esm/components/Modal/Modal.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Modal/Modal.css";
var b40 = block("modal");
var TRANSITION_DURATION2 = 150;
function ModalComponent({ open = false, onOpenChange, keepMounted = false, disableBodyScrollLock = false, disableEscapeKeyDown, disableOutsideClick, initialFocus, returnFocus, disableVisuallyHiddenDismiss, onEscapeKeyDown, onOutsideClick, onClose, onEnterKeyDown, onTransitionIn, onTransitionInComplete, onTransitionOut, onTransitionOutComplete, children: children2, style: style3, contentOverflow = "visible", className, contentClassName, container, disablePortal, qa, floatingRef, disableHeightTransition = false, ...restProps }) {
  useLayer({ open, type: "modal" });
  const handleOpenChange = React826.useCallback((isOpen, event, reason) => {
    onOpenChange == null ? void 0 : onOpenChange(isOpen, event, reason);
    if (isOpen || !event) {
      return;
    }
    let closeReason;
    if (reason === "escape-key") {
      closeReason = "escapeKeyDown";
    } else if (reason === "outside-press") {
      closeReason = "outsideClick";
    } else {
      closeReason = reason;
    }
    if (closeReason === "escapeKeyDown" && onEscapeKeyDown) {
      onEscapeKeyDown(event);
    }
    if (closeReason === "outsideClick" && onOutsideClick) {
      onOutsideClick(event);
    }
    onClose == null ? void 0 : onClose(event, closeReason);
  }, [onOpenChange, onEscapeKeyDown, onOutsideClick, onClose]);
  const floatingNodeId = useFloatingNodeId();
  const { refs, elements, context } = useFloating2({
    nodeId: floatingNodeId,
    open,
    onOpenChange: handleOpenChange
  });
  const handleFloatingRef = useForkRef(refs.setFloating, floatingRef);
  const dismiss = useDismiss(context, {
    enabled: !disableOutsideClick || !disableEscapeKeyDown,
    outsidePress: !disableOutsideClick,
    escapeKey: !disableEscapeKeyDown
  });
  const role = useRole(context, { role: "dialog" });
  const { getFloatingProps } = useInteractions([dismiss, role]);
  const { isMounted, status } = useTransitionStatus(context, { duration: TRANSITION_DURATION2 });
  const previousStatus = usePrevious(status);
  useAnimateHeight({
    ref: refs.floating,
    enabled: status === "open" && !disableHeightTransition
  });
  React826.useEffect(() => {
    if (status === "initial" && previousStatus === "unmounted") {
      onTransitionIn == null ? void 0 : onTransitionIn();
    }
    if (status === "close" && previousStatus === "open") {
      onTransitionOut == null ? void 0 : onTransitionOut();
    }
    if (status === "unmounted" && previousStatus === "close") {
      onTransitionOutComplete == null ? void 0 : onTransitionOutComplete();
    }
  }, [previousStatus, status, onTransitionIn, onTransitionOut, onTransitionOutComplete]);
  const handleTransitionEnd = React826.useCallback((event) => {
    if (status === "open" && event.propertyName === "transform" && event.target === elements.floating) {
      onTransitionInComplete == null ? void 0 : onTransitionInComplete();
    }
  }, [status, onTransitionInComplete, elements.floating]);
  const handleKeyDown = React826.useCallback((event) => {
    if (!onEnterKeyDown || event.key !== KeyCode.ENTER || event.defaultPrevented) {
      return;
    }
    const floatingElement = elements.floating;
    if (!floatingElement) {
      return;
    }
    const pathElements = event.nativeEvent.composedPath();
    const index3 = pathElements.indexOf(floatingElement);
    const nestedElements = index3 < 0 ? pathElements : pathElements.slice(0, index3);
    const nestedFloatingElementIndex = nestedElements.findIndex((el) => el == null ? void 0 : el.hasAttribute("data-floating-ui-focusable"));
    if (nestedFloatingElementIndex < 0) {
      onEnterKeyDown(event.nativeEvent);
      return;
    }
    const hasInnerTabbableElements = nestedElements.slice(0, nestedFloatingElementIndex).some((el) => isTabbable(el));
    if (!hasInnerTabbableElements) {
      onEnterKeyDown(event.nativeEvent);
    }
  }, [elements.floating, onEnterKeyDown]);
  return (0, import_jsx_runtime68.jsx)(FloatingNode, { id: floatingNodeId, children: isMounted || keepMounted ? (0, import_jsx_runtime68.jsx)(Portal, { container, disablePortal, children: (0, import_jsx_runtime68.jsx)(FloatingOverlay, { style: style3, className: b40({ open }, className), "data-qa": qa, "data-floating-ui-status": status, lockScroll: !disableBodyScrollLock, children: (0, import_jsx_runtime68.jsx)("div", { className: b40("content-aligner"), children: (0, import_jsx_runtime68.jsx)("div", { className: b40("content-wrapper"), children: (0, import_jsx_runtime68.jsx)(FloatingFocusManager, { context, disabled: !isMounted, modal: isMounted, initialFocus: initialFocus ?? refs.floating, returnFocus, visuallyHiddenDismiss: disableVisuallyHiddenDismiss ? false : i18n_default8("close"), restoreFocus: true, children: (0, import_jsx_runtime68.jsx)("div", { ...filterDOMProps(restProps, { labelable: true }), className: b40("content", { "has-scroll": contentOverflow === "auto" }, contentClassName), ref: handleFloatingRef, ...getFloatingProps({
    onTransitionEnd: handleTransitionEnd,
    onKeyDown: handleKeyDown
  }), children: children2 }) }) }) }) }) }) : null });
}
function Modal(props) {
  const parentId = useFloatingParentNodeId();
  if (parentId === null) {
    return (0, import_jsx_runtime68.jsx)(FloatingTree, { children: (0, import_jsx_runtime68.jsx)(ModalComponent, { ...props }) });
  }
  return (0, import_jsx_runtime68.jsx)(ModalComponent, { ...props });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/ButtonClose/ButtonClose.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/i18n/en.json
var en_default10 = {
  close: "Close dialog"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/i18n/ru.json
var ru_default10 = {
  close: "Закрыть диалоговое окно"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/i18n/index.js
var COMPONENT8 = "Dialog";
var i18n_default9 = addComponentKeysets({ en: en_default10, ru: ru_default10 }, COMPONENT8);

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/ButtonClose/ButtonClose.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/ButtonClose/ButtonClose.css";
var b41 = block("dialog-btn-close");
function ButtonClose({ onClose }) {
  return (0, import_jsx_runtime69.jsx)("div", { className: b41(), children: (0, import_jsx_runtime69.jsx)(Button2, { view: "flat", size: "l", className: b41("btn"), onClick: (event) => onClose(event, { isOutsideClick: false }), "aria-label": i18n_default9("close"), children: (0, import_jsx_runtime69.jsx)(Icon, { data: Xmark_default, size: 20 }) }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogBody/DialogBody.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var React828 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogPrivateContext.js
var React827 = __toESM(require_react(), 1);
var DialogPrivateContext = React827.createContext({
  disableHeightTransition: false
});

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogBody/DialogBody.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogBody/DialogBody.css";
var b42 = block("dialog-body");
function DialogBody(props) {
  const { className, hasBorders = false } = props;
  const contentRef = React828.useRef(null);
  const { disableHeightTransition } = React828.useContext(DialogPrivateContext);
  useAnimateHeight({
    ref: contentRef,
    enabled: !disableHeightTransition
  });
  return (0, import_jsx_runtime70.jsx)("div", { ref: contentRef, className: b42({ "has-borders": hasBorders }, className), children: props.children });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogDivider/DialogDivider.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogDivider/DialogDivider.css";
var b43 = block("dialog-divider");
function DialogDivider({ className }) {
  return (0, import_jsx_runtime71.jsx)("div", { className: b43(null, className) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogFooter/DialogFooter.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
var React829 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogFooter/DialogFooter.css";
var b44 = block("dialog-footer");
function getButtonView(preset2) {
  switch (preset2) {
    case "default":
      return "action";
    case "success":
      return "action";
    case "danger":
      return "action";
    default:
      return "action";
  }
}
function DialogFooter(props) {
  const { onClickButtonCancel, onClickButtonApply, loading, textButtonCancel, textButtonApply, propsButtonCancel, propsButtonApply, preset: preset2 = "default", children: children2, errorText, showError = false, renderButtons, className } = props;
  const { initialFocusRef, initialFocusAction, onTooltipEscapeKeyDown } = React829.useContext(DialogPrivateContext);
  const errorTooltipRef = React829.useRef(null);
  const apllyBtnRef = useForkRef(errorTooltipRef, initialFocusAction === "apply" ? initialFocusRef : null);
  const cancelBtnRef = useForkRef(initialFocusAction === "cancel" ? initialFocusRef : null);
  const buttonCancel = (0, import_jsx_runtime72.jsx)("div", { className: b44("button", { action: "cancel" }), children: (0, import_jsx_runtime72.jsx)(Button2, { ref: cancelBtnRef, view: textButtonApply ? "flat" : "normal", size: "l", width: "max", onClick: onClickButtonCancel, disabled: loading, ...propsButtonCancel, children: textButtonCancel }) });
  const handleOpenChange = React829.useCallback((isOpen, event, reason) => {
    if (!isOpen && event && reason === "escape-key") {
      onTooltipEscapeKeyDown == null ? void 0 : onTooltipEscapeKeyDown(event);
    }
  }, [onTooltipEscapeKeyDown]);
  const buttonApply = (0, import_jsx_runtime72.jsxs)("div", { className: b44("button", { action: "apply" }), children: [(0, import_jsx_runtime72.jsx)(Button2, { ref: apllyBtnRef, type: "submit", view: getButtonView(preset2), size: "l", width: "max", onClick: onClickButtonApply, loading, className: b44("button-apply", { preset: preset2 }), ...propsButtonApply, children: textButtonApply }), errorText && (0, import_jsx_runtime72.jsx)(Popup, { open: showError, onOpenChange: handleOpenChange, anchorRef: errorTooltipRef, placement: "top", disablePortal: true, hasArrow: true, children: (0, import_jsx_runtime72.jsx)("div", { className: b44("error"), children: errorText }) })] });
  return (0, import_jsx_runtime72.jsxs)("div", { className: b44(null, className), children: [(0, import_jsx_runtime72.jsx)("div", { className: b44("children"), children: children2 }), (0, import_jsx_runtime72.jsx)("div", { className: b44("bts-wrapper"), children: renderButtons ? renderButtons(buttonApply, buttonCancel) : (0, import_jsx_runtime72.jsxs)(React829.Fragment, { children: [textButtonCancel && buttonCancel, textButtonApply && buttonApply] }) })] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogHeader/DialogHeader.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogHeader/DialogHeader.css";
var b45 = block("dialog-header");
function DialogHeader(props) {
  const { caption = "", insertBefore, insertAfter, className, id } = props;
  return (0, import_jsx_runtime73.jsxs)("div", { className: b45(null, className), children: [insertBefore, (0, import_jsx_runtime73.jsx)("div", { className: b45("caption"), id, children: caption }), insertAfter] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/Dialog.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/Dialog.css";
var b46 = block("dialog");
function Dialog({ container, children: children2, open, disableBodyScrollLock = false, disableEscapeKeyDown = false, disableOutsideClick = false, initialFocus, returnFocus, keepMounted = false, size: size5, contentOverflow = "visible", className, modalClassName, hasCloseButton = true, disableHeightTransition = false, onEscapeKeyDown, onEnterKeyDown, onOpenChange, onOutsideClick, onClose, onTransitionIn, onTransitionInComplete, onTransitionOut, onTransitionOutComplete, qa, ...restProps }) {
  const handleCloseButtonClick = React830.useCallback((event) => {
    onClose(event.nativeEvent, "closeButtonClick");
  }, [onClose]);
  const footerAutoFocusRef = React830.useRef(null);
  const privateContextProps = React830.useMemo(() => {
    const result = {
      onTooltipEscapeKeyDown: (event) => {
        onOpenChange == null ? void 0 : onOpenChange(false, event, "escape-key");
        onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event);
        onClose == null ? void 0 : onClose(event, "escapeKeyDown");
      },
      disableHeightTransition: disableHeightTransition || !open
    };
    if (typeof initialFocus === "string") {
      result.initialFocusRef = footerAutoFocusRef;
      result.initialFocusAction = initialFocus;
    }
    return result;
  }, [initialFocus, onEscapeKeyDown, onClose, onOpenChange, open, disableHeightTransition]);
  let initialFocusValue;
  if (typeof initialFocus === "string") {
    initialFocusValue = footerAutoFocusRef;
  } else {
    initialFocusValue = initialFocus;
  }
  return (0, import_jsx_runtime74.jsx)(Modal, { ...filterDOMProps(restProps, { labelable: true }), open, contentOverflow, disableBodyScrollLock, disableEscapeKeyDown, disableOutsideClick, disableVisuallyHiddenDismiss: hasCloseButton, initialFocus: initialFocusValue, returnFocus, keepMounted, onEscapeKeyDown, onOutsideClick, onClose, onEnterKeyDown, onTransitionIn, onTransitionInComplete, onTransitionOut, onTransitionOutComplete, className: b46("modal", modalClassName), container, qa, disableHeightTransition: true, children: (0, import_jsx_runtime74.jsxs)("div", { className: b46({
    size: size5,
    "has-close": hasCloseButton,
    "has-scroll": contentOverflow === "auto"
  }, className), children: [(0, import_jsx_runtime74.jsx)(DialogPrivateContext.Provider, { value: privateContextProps, children: children2 }), hasCloseButton && (0, import_jsx_runtime74.jsx)(ButtonClose, { onClose: handleCloseButtonClick })] }) });
}
Dialog.Footer = DialogFooter;
Dialog.Header = DialogHeader;
Dialog.Body = DialogBody;
Dialog.Divider = DialogDivider;

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/Disclosure.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var React839 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureContext.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var React831 = __toESM(require_react(), 1);
var DisclosureAttributesContext = React831.createContext(void 0);
var DisclosureToggleContext = React831.createContext(void 0);
function DisclosureProvider(props) {
  const { size: size5, disabled, defaultExpanded, arrowPosition, summary, keepMounted, onUpdate, expanded: controlledExpanded } = props;
  const [expanded, setExpanded] = React831.useState(() => Boolean(defaultExpanded));
  const controlledMode = controlledExpanded !== void 0;
  const handleToggle = () => {
    setExpanded((prev) => !prev);
    const newValue = controlledMode ? !controlledExpanded : !expanded;
    onUpdate(newValue);
  };
  const ariaControls = useUniqId();
  const ariaLabelledby = `disclosure${ariaControls}`;
  return (0, import_jsx_runtime75.jsx)(DisclosureAttributesContext.Provider, { value: {
    size: size5,
    disabled,
    summary,
    arrowPosition,
    keepMounted,
    expanded: controlledMode ? controlledExpanded : expanded,
    ariaControls,
    ariaLabelledby
  }, children: (0, import_jsx_runtime75.jsx)(DisclosureToggleContext.Provider, { value: handleToggle, children: props.children }) });
}
function useDisclosureAttributes() {
  const state = React831.useContext(DisclosureAttributesContext);
  if (state === void 0) {
    throw new Error("useDisclosureAttributes must be used within DisclosureProvider");
  }
  return state;
}
function useToggleDisclosure() {
  const state = React831.useContext(DisclosureToggleContext);
  if (state === void 0) {
    throw new Error("useToggleDisclosure must be used within DisclosureProvider");
  }
  return state;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureDetails/DisclosureDetails.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var React838 = __toESM(require_react(), 1);

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/dom-helpers/esm/hasClass.js
function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList) element.classList.add(className);
  else if (!hasClass(element, className)) if (typeof element.className === "string") element.className = element.className + " " + className;
  else element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_react15 = __toESM(require_react());

// node_modules/react-transition-group/esm/Transition.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react14 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
  enter: import_prop_types.default.number,
  exit: import_prop_types.default.number,
  appear: import_prop_types.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  active: import_prop_types.default.string
}), import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  enterDone: import_prop_types.default.string,
  enterActive: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  exitDone: import_prop_types.default.string,
  exitActive: import_prop_types.default.string
})]) : null;

// node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react13 = __toESM(require_react());
var TransitionGroupContext_default = import_react13.default.createContext(null);

// node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};

// node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter2, appear;
    exit = enter2 = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter2 = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter2;
    }
    return {
      exit,
      enter: enter2,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom3.default.findDOMNode(this);
          if (node) forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter2 = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom3.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter2 || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom3.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom3.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      import_react14.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children2 === "function" ? children2(status, childProps) : import_react14.default.cloneElement(import_react14.default.Children.only(children2), childProps))
    );
  };
  return Transition2;
}(import_react14.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types2.default.shape({
    current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types2.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types2.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types2.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types2.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types2.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types2.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types2.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types2.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types2.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types2.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types2.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types2.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types2.default.func
} : {};
function noop5() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop5,
  onEntering: noop5,
  onEntered: noop5,
  onExit: noop5,
  onExiting: noop5,
  onExited: noop5
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// node_modules/react-transition-group/esm/CSSTransition.js
var _addClass = function addClass2(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c) {
    return addClass(node, c);
  });
};
var removeClass2 = function removeClass3(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c) {
    return removeClass(node, c);
  });
};
var CSSTransition = function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node, "exit");
      _this.addClass(node, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type = appearing ? "appear" : "enter";
      _this.addClass(node, type, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type = appearing ? "appear" : "enter";
      _this.removeClasses(node, type);
      _this.addClass(node, type, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
      _this.removeClasses(node, "appear");
      _this.removeClasses(node, "enter");
      _this.addClass(node, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
      _this.addClass(node, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
      _this.removeClasses(node, "exit");
      _this.addClass(node, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type) {
      var classNames3 = _this.props.classNames;
      var isStringClassNames = typeof classNames3 === "string";
      var prefix2 = isStringClassNames && classNames3 ? classNames3 + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames3[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames3[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames3[type + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass3(node, type, phase) {
    var className = this.getClassNames(type)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type === "appear" && phase === "done" && doneClassName) {
      className += " " + doneClassName;
    }
    if (phase === "active") {
      if (node) forceReflow(node);
    }
    if (className) {
      this.appliedClasses[type][phase] = className;
      _addClass(node, className);
    }
  };
  _proto.removeClasses = function removeClasses(node, type) {
    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};
    if (baseClassName) {
      removeClass2(node, baseClassName);
    }
    if (activeClassName) {
      removeClass2(node, activeClassName);
    }
    if (doneClassName) {
      removeClass2(node, doneClassName);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
    return import_react15.default.createElement(Transition_default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
}(import_react15.default.Component);
CSSTransition.defaultProps = {
  classNames: ""
};
CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
  /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: classNamesShape,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExit: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExited: import_prop_types3.default.func
}) : {};
var CSSTransition_default = CSSTransition;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react18 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var import_prop_types4 = __toESM(require_prop_types());
var import_react17 = __toESM(require_react());

// node_modules/react-transition-group/esm/utils/ChildMapping.js
var import_react16 = __toESM(require_react());
function getChildMapping(children2, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react16.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = /* @__PURE__ */ Object.create(null);
  if (children2) import_react16.Children.map(children2, function(c) {
    return c;
  }).forEach(function(child) {
    result[child.key] = mapper(child);
  });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react16.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach(function(key) {
    var child = children2[key];
    if (!(0, import_react16.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, import_react16.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key] = (0, import_react16.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key] = (0, import_react16.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react16.isValidElement)(prevChild)) {
      children2[key] = (0, import_react16.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var values = Object.values || function(obj) {
  return Object.keys(obj).map(function(k) {
    return obj[k];
  });
};
var defaultProps = {
  component: "div",
  childFactory: function childFactory(child) {
    return child;
  }
};
var TransitionGroup = function(_React$Component) {
  _inheritsLoose(TransitionGroup2, _React$Component);
  function TransitionGroup2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited,
      firstRender: true
    };
    return _this;
  }
  var _proto = TransitionGroup2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };
  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping) return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState(function(state) {
        var children2 = _extends({}, state.children);
        delete children2[child.key];
        return {
          children: children2
        };
      });
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, Component13 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
    var contextValue = this.state.contextValue;
    var children2 = values(this.state.children).map(childFactory2);
    delete props.appear;
    delete props.enter;
    delete props.exit;
    if (Component13 === null) {
      return import_react17.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, children2);
    }
    return import_react17.default.createElement(TransitionGroupContext_default.Provider, {
      value: contextValue
    }, import_react17.default.createElement(Component13, props, children2));
  };
  return TransitionGroup2;
}(import_react17.default.Component);
TransitionGroup.propTypes = true ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: import_prop_types4.default.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: import_prop_types4.default.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: import_prop_types4.default.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: import_prop_types4.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;
var TransitionGroup_default = TransitionGroup;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var ReplaceTransition = function(_React$Component) {
  _inheritsLoose(ReplaceTransition2, _React$Component);
  function ReplaceTransition2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.handleEnter = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _this.handleLifecycle("onEnter", 0, args);
    };
    _this.handleEntering = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _this.handleLifecycle("onEntering", 0, args);
    };
    _this.handleEntered = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _this.handleLifecycle("onEntered", 0, args);
    };
    _this.handleExit = function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _this.handleLifecycle("onExit", 1, args);
    };
    _this.handleExiting = function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _this.handleLifecycle("onExiting", 1, args);
    };
    _this.handleExited = function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _this.handleLifecycle("onExited", 1, args);
    };
    return _this;
  }
  var _proto = ReplaceTransition2.prototype;
  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;
    var children2 = this.props.children;
    var child = import_react18.default.Children.toArray(children2)[idx];
    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) {
      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom4.default.findDOMNode(this);
      this.props[handler](maybeNode);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
    var _React$Children$toArr = import_react18.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return import_react18.default.createElement(TransitionGroup_default, props, inProp ? import_react18.default.cloneElement(first, {
      key: "first",
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : import_react18.default.cloneElement(second, {
      key: "second",
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };
  return ReplaceTransition2;
}(import_react18.default.Component);
ReplaceTransition.propTypes = true ? {
  in: import_prop_types5.default.bool.isRequired,
  children: function children(props, propName) {
    if (import_react18.default.Children.count(props[propName]) !== 2) return new Error('"' + propName + '" must be exactly two transition components.');
    return null;
  }
} : {};

// node_modules/react-transition-group/esm/SwitchTransition.js
var import_react19 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var _leaveRenders;
var _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren) return false;
  if (import_react19.default.isValidElement(oldChildren) && import_react19.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }
  return true;
}
var modes = {
  out: "out-in",
  in: "in-out"
};
var callHook = function callHook2(element, name, cb) {
  return function() {
    var _element$props;
    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
    cb();
  };
};
var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
  var current = _ref.current, changeState = _ref.changeState;
  return import_react19.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function(_ref2) {
  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;
  return [current, import_react19.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
  var children2 = _ref3.children, changeState = _ref3.changeState;
  return import_react19.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERED, import_react19.default.cloneElement(children2, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function(_ref4) {
  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;
  return [import_react19.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERED, import_react19.default.cloneElement(children2, {
        in: true
      }));
    })
  }), import_react19.default.cloneElement(children2, {
    in: true
  })];
}, _enterRenders);
var SwitchTransition = function(_React$Component) {
  _inheritsLoose(SwitchTransition2, _React$Component);
  function SwitchTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: ENTERED,
      current: null
    };
    _this.appeared = false;
    _this.changeState = function(status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }
      _this.setState({
        status,
        current
      });
    };
    return _this;
  }
  var _proto = SwitchTransition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };
  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children == null) {
      return {
        current: null
      };
    }
    if (state.status === ENTERING && props.mode === modes.in) {
      return {
        status: ENTERING
      };
    }
    if (state.current && areChildrenDifferent(state.current, props.children)) {
      return {
        status: EXITING
      };
    }
    return {
      current: import_react19.default.cloneElement(props.children, {
        in: true
      })
    };
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
    var data = {
      children: children2,
      current,
      changeState: this.changeState,
      status
    };
    var component;
    switch (status) {
      case ENTERING:
        component = enterRenders[mode](data);
        break;
      case EXITING:
        component = leaveRenders[mode](data);
        break;
      case ENTERED:
        component = current;
    }
    return import_react19.default.createElement(TransitionGroupContext_default.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };
  return SwitchTransition2;
}(import_react19.default.Component);
SwitchTransition.propTypes = true ? {
  /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
   *
   * @type {'out-in'|'in-out'}
   */
  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),
  /**
   * Any `Transition` or `CSSTransition` component.
   */
  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])
} : {};
SwitchTransition.defaultProps = {
  mode: modes.out
};

// node_modules/@gravity-ui/uikit/build/esm/components/utils/transition.js
function getCSSTransitionClassNames(b119) {
  return {
    appear: modsClassName(b119({ appear: true })),
    appearActive: modsClassName(b119({ appear: "active" })),
    appearDone: modsClassName(b119({ appear: "done" })),
    enter: modsClassName(b119({ enter: true })),
    enterActive: modsClassName(b119({ enter: "active" })),
    enterDone: modsClassName(b119({ enter: "done" })),
    exit: modsClassName(b119({ exit: true })),
    exitActive: modsClassName(b119({ exit: "active" })),
    exitDone: modsClassName(b119({ exit: "done" }))
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/constants.js
var b47 = block("disclosure");
var DisclosureQa = {
  SUMMARY: "disclosure-summary",
  DETAILS: "disclosure-details"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureDetails/DisclosureDetails.js
function DisclosureDetails({ children: children2, qa }) {
  const containerRef = React838.useRef(null);
  const { ariaControls, ariaLabelledby, keepMounted, expanded } = useDisclosureAttributes();
  return (0, import_jsx_runtime76.jsx)(CSSTransition_default, { nodeRef: containerRef, in: expanded, addEndListener: (done) => {
    var _a;
    return (_a = containerRef.current) == null ? void 0 : _a.addEventListener("animationend", done);
  }, classNames: getCSSTransitionClassNames(b47), mountOnEnter: !keepMounted, unmountOnExit: !keepMounted, appear: true, children: (0, import_jsx_runtime76.jsx)("div", { ref: containerRef, id: ariaControls, role: "region", "aria-labelledby": ariaLabelledby, className: b47("content", { visible: expanded }), "data-qa": qa || DisclosureQa.DETAILS, children: children2 }) });
}
DisclosureDetails.displayName = "DisclosureDetails";

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureSummary/DisclosureSummary.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var ComponentSizeToIconSizeMap = {
  m: 14,
  l: 16,
  xl: 20
};
function warnAboutPhysicalValues2() {
  warnOnce('[Disclosure] Physical values (left, right) of "arrowPosition" property are deprecated. Use logical values (start, end) instead.');
}
function DisclosureSummary({ children: renderFunction, qa }) {
  const handleToggle = useToggleDisclosure();
  const { ariaControls, ariaLabelledby: id, expanded, disabled } = useDisclosureAttributes();
  const props = { onClick: handleToggle, ariaControls, id, expanded, disabled, qa };
  return renderFunction(props, (0, import_jsx_runtime77.jsx)(DefaultDisclosureSummary, { ...props }));
}
function DefaultDisclosureSummary({ onClick, ariaControls, id, expanded, disabled, qa }) {
  const { size: size5, summary, arrowPosition } = useDisclosureAttributes();
  let arrowMod = arrowPosition;
  if (arrowMod === "left") {
    warnAboutPhysicalValues2();
    arrowMod = "start";
  }
  if (arrowMod === "right") {
    warnAboutPhysicalValues2();
    arrowMod = "end";
  }
  return (0, import_jsx_runtime77.jsxs)("button", { type: "button", "aria-expanded": expanded, className: b47("trigger", { disabled, arrow: arrowMod }), "aria-controls": ariaControls, id, onClick, disabled, "data-qa": qa || DisclosureQa.SUMMARY, children: [(0, import_jsx_runtime77.jsx)(ArrowToggle, { size: ComponentSizeToIconSizeMap[size5], direction: expanded ? "top" : "bottom" }), summary] });
}
DisclosureSummary.displayName = "DisclosureSummary";

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/Disclosure.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/Disclosure.css";
var isDisclosureSummaryComponent = isOfType(DisclosureSummary);
var Disclosure = React839.forwardRef(function Disclosure2(props, ref2) {
  const { size: size5 = "m", disabled = false, defaultExpanded = false, arrowPosition = "start", summary = "", className, keepMounted = true, children: children2, onUpdate = () => {
  }, expanded, qa } = props;
  const [summaryContent, detailsContent] = prepareChildren3(children2, {
    disclosureQa: qa
  });
  return (0, import_jsx_runtime78.jsx)(DisclosureProvider, { disabled, defaultExpanded, expanded, keepMounted, size: size5, summary, arrowPosition, onUpdate, children: (0, import_jsx_runtime78.jsxs)("section", { ref: ref2, className: b47({ size: size5 }, className), "data-qa": qa, children: [summaryContent, detailsContent] }) });
});
function prepareChildren3(children2, { disclosureQa }) {
  const items = React839.Children.toArray(children2);
  let summary, details;
  const content = [];
  for (const item of items) {
    const isDisclosureSummary = isDisclosureSummaryComponent(item);
    if (isDisclosureSummary) {
      if (summary) {
        throw new Error("Only one <Disclosure.Summary> component is allowed");
      }
      summary = item;
      continue;
    }
    content.push(item);
  }
  if (content.length > 0) {
    details = (0, import_jsx_runtime78.jsx)(DisclosureDetails, { qa: disclosureQa && `${disclosureQa}-details`, children: content });
  }
  if (!summary) {
    summary = (0, import_jsx_runtime78.jsx)(DisclosureSummary, { qa: disclosureQa && `${disclosureQa}-summary`, children: (props) => (0, import_jsx_runtime78.jsx)(DefaultDisclosureSummary, { ...props }) });
  }
  return [summary, details];
}
Disclosure.Summary = DisclosureSummary;
Disclosure.displayName = "Disclosure";

// node_modules/@gravity-ui/uikit/build/esm/components/Divider/Divider.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var React840 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Divider/Divider.css";
var b48 = block("divider");
var Divider = React840.forwardRef(function Divider2(props, ref2) {
  const { orientation = "horizontal", className, style: style3, qa, children: children2, align = "start", ...restProps } = props;
  return (0, import_jsx_runtime79.jsx)("div", { ...filterDOMProps(restProps, { labelable: true }), className: b48({ orientation, align }, className), ref: ref2, style: style3, "data-qa": qa, role: "separator", "aria-orientation": orientation === "vertical" ? "vertical" : void 0, children: children2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreview.js
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
var React868 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreviewActions/FilePreviewActions.js
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreviewActions/DesktopActionsMenu/DesktopActionsMenu.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreviewActions/DesktopActionsMenu/DesktopActionsMenu.css";
var cn2 = block("file-preview-actions-desktop");
var DesktopActionsMenu = ({ actions, hoverabelPanelClassName }) => {
  const id = useUniqId();
  return (0, import_jsx_runtime80.jsx)("div", { className: cn2(null, hoverabelPanelClassName), children: actions.map(({ title, icon, onClick, disabled, tooltipExtraProps, ...props }, index3) => {
    const extraProps = props.href ? { ...props.extraProps, href: props.href } : props.extraProps;
    return (0, import_jsx_runtime80.jsx)(ActionTooltip, { title, ...tooltipExtraProps, children: (0, import_jsx_runtime80.jsx)(Button2, { onClick, "aria-describedby": `${id}-${index3}`, view: "raised", pin: "circle-circle", disabled, size: "s", className: cn2("action-button"), "aria-label": title, ...extraProps, children: (0, import_jsx_runtime80.jsx)("div", { className: cn2("action-icon-wrapper"), children: icon }) }) }, `${id}-${index3}`);
  }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreviewActions/MobileActionsMenu/MobileActionsMenu.js
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var React867 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/List/List.js
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
var React864 = __toESM(require_react(), 1);
var import_isEqual = __toESM(require_isEqual(), 1);
var import_isObject = __toESM(require_isObject(), 1);

// node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
var import_react28 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}

// node_modules/redux/es/redux.js
var $$observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var randomString = function randomString2() {
  return Math.random().toString(36).substring(7).split("").join(".");
};
var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
function isPlainObject(obj) {
  if (typeof obj !== "object" || obj === null) return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
function miniKindOf(val) {
  if (val === void 0) return "undefined";
  if (val === null) return "null";
  var type = typeof val;
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function": {
      return type;
    }
  }
  if (Array.isArray(val)) return "array";
  if (isDate(val)) return "date";
  if (isError(val)) return "error";
  var constructorName = ctorName(val);
  switch (constructorName) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return constructorName;
  }
  return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
  return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
  return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
  var typeOfVal = typeof val;
  if (true) {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore(reducer2, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
    }
    return enhancer(createStore)(reducer2, preloadedState);
  }
  if (typeof reducer2 !== "function") {
    throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer2) + "'");
  }
  var currentReducer = reducer2;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index3 = nextListeners.indexOf(listener);
      nextListeners.splice(index3, 1);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
    }
    if (typeof action.type === "undefined") {
      throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }
    }, _ref[$$observable] = function() {
      return this;
    }, _ref;
  }
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
function bindActionCreator(actionCreator, dispatch) {
  return function() {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === "function") {
    return bindActionCreator(actionCreators, dispatch);
  }
  if (typeof actionCreators !== "object" || actionCreators === null) {
    throw new Error(false ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + `'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
  }
  var boundActionCreators = {};
  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === "function") {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  if (funcs.length === 0) {
    return function(arg) {
      return arg;
    };
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(function(a, b119) {
    return function() {
      return a(b119.apply(void 0, arguments));
    };
  });
}
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }
  return function(createStore3) {
    return function() {
      var store = createStore3.apply(void 0, arguments);
      var _dispatch = function dispatch() {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function(middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread2(_objectSpread2({}, store), {}, {
        dispatch: _dispatch
      });
    };
  };
}

// node_modules/react-redux/es/components/Provider.js
var import_react22 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());

// node_modules/react-redux/es/components/Context.js
var import_react20 = __toESM(require_react());
var ReactReduxContext = import_react20.default.createContext(null);
if (true) {
  ReactReduxContext.displayName = "ReactRedux";
}

// node_modules/react-redux/es/utils/batch.js
function defaultNoopBatch(callback) {
  callback();
}
var batch = defaultNoopBatch;
var setBatch = function setBatch2(newBatch) {
  return batch = newBatch;
};
var getBatch = function getBatch2() {
  return batch;
};

// node_modules/react-redux/es/utils/Subscription.js
function createListenerCollection() {
  var batch2 = getBatch();
  var first = null;
  var last = null;
  return {
    clear: function clear() {
      first = null;
      last = null;
    },
    notify: function notify2() {
      batch2(function() {
        var listener = first;
        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get: function get3() {
      var listeners = [];
      var listener = first;
      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }
      return listeners;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener = last = {
        callback,
        next: null,
        prev: last
      };
      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null) return;
        isSubscribed = false;
        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }
        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}
var nullListeners = {
  notify: function notify() {
  },
  get: function get() {
    return [];
  }
};
function createSubscription(store, parentSub) {
  var unsubscribe;
  var listeners = nullListeners;
  function addNestedSub(listener) {
    trySubscribe();
    return listeners.subscribe(listener);
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return Boolean(unsubscribe);
  }
  function trySubscribe() {
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    if (unsubscribe) {
      unsubscribe();
      unsubscribe = void 0;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  var subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe,
    tryUnsubscribe,
    getListeners: function getListeners() {
      return listeners;
    }
  };
  return subscription;
}

// node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
var import_react21 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react21.useLayoutEffect : import_react21.useEffect;

// node_modules/react-redux/es/components/Provider.js
function Provider(_ref) {
  var store = _ref.store, context = _ref.context, children2 = _ref.children;
  var contextValue = (0, import_react22.useMemo)(function() {
    var subscription = createSubscription(store);
    return {
      store,
      subscription
    };
  }, [store]);
  var previousState = (0, import_react22.useMemo)(function() {
    return store.getState();
  }, [store]);
  useIsomorphicLayoutEffect(function() {
    var subscription = contextValue.subscription;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return function() {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || ReactReduxContext;
  return import_react22.default.createElement(Context.Provider, {
    value: contextValue
  }, children2);
}
if (true) {
  Provider.propTypes = {
    store: import_prop_types7.default.shape({
      subscribe: import_prop_types7.default.func.isRequired,
      dispatch: import_prop_types7.default.func.isRequired,
      getState: import_prop_types7.default.func.isRequired
    }),
    context: import_prop_types7.default.object,
    children: import_prop_types7.default.any
  };
}
var Provider_default = Provider;

// node_modules/react-redux/es/components/connectAdvanced.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
var import_react23 = __toESM(require_react());
var import_react_is = __toESM(require_react_is2());
var _excluded = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"];
var _excluded2 = ["reactReduxForwardedRef"];
var EMPTY_ARRAY = [];
var NO_SUBSCRIPTION_ARRAY = [null, null];
var stringifyComponent = function stringifyComponent2(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};
function storeStateUpdatesReducer(state, action) {
  var updateCount = state[1];
  return [action.payload, updateCount + 1];
}
function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  useIsomorphicLayoutEffect(function() {
    return effectFunc.apply(void 0, effectArgs);
  }, dependencies);
}
function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  lastWrapperProps.current = wrapperProps;
  lastChildProps.current = actualChildProps;
  renderIsScheduled.current = false;
  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}
function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
  if (!shouldHandleStateChanges) return;
  var didUnsubscribe = false;
  var lastThrownError = null;
  var checkForUpdates = function checkForUpdates2() {
    if (didUnsubscribe) {
      return;
    }
    var latestStoreState = store.getState();
    var newChildProps, error3;
    try {
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e) {
      error3 = e;
      lastThrownError = e;
    }
    if (!error3) {
      lastThrownError = null;
    }
    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true;
      forceComponentUpdateDispatch({
        type: "STORE_UPDATED",
        payload: {
          error: error3
        }
      });
    }
  };
  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe();
  checkForUpdates();
  var unsubscribeWrapper = function unsubscribeWrapper2() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;
    if (lastThrownError) {
      throw lastThrownError;
    }
  };
  return unsubscribeWrapper;
}
var initStateUpdates = function initStateUpdates2() {
  return [null, 0];
};
function connectAdvanced(selectorFactory, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }
  var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef65 = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded);
  if (true) {
    if (renderCountProp !== void 0) {
      throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
    }
    if (withRef) {
      throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
    }
    var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
    if (storeKey !== "store") {
      throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
    }
  }
  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    if (!(0, import_react_is.isValidElementType)(WrappedComponent)) {
      throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
    }
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    var displayName = getDisplayName(wrappedComponentName);
    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName,
      methodName,
      renderCountProp,
      shouldHandleStateChanges,
      storeKey,
      displayName,
      wrappedComponentName,
      WrappedComponent
    });
    var pure = connectOptions.pure;
    function createChildSelector(store) {
      return selectorFactory(store.dispatch, selectorFactoryOptions);
    }
    var usePureOnlyMemo = pure ? import_react23.useMemo : function(callback) {
      return callback();
    };
    function ConnectFunction(props) {
      var _useMemo = (0, import_react23.useMemo)(function() {
        var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded2);
        return [props.context, reactReduxForwardedRef2, wrapperProps2];
      }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
      var ContextToUse = (0, import_react23.useMemo)(function() {
        return propsContext && propsContext.Consumer && (0, import_react_is.isContextConsumer)(import_react23.default.createElement(propsContext.Consumer, null)) ? propsContext : Context;
      }, [propsContext, Context]);
      var contextValue = (0, import_react23.useContext)(ContextToUse);
      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
      if (!didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
      }
      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var childPropsSelector = (0, import_react23.useMemo)(function() {
        return createChildSelector(store);
      }, [store]);
      var _useMemo2 = (0, import_react23.useMemo)(function() {
        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;
        var subscription2 = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription);
        var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
        return [subscription2, notifyNestedSubs2];
      }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
      var overriddenContextValue = (0, import_react23.useMemo)(function() {
        if (didStoreComeFromProps) {
          return contextValue;
        }
        return _extends({}, contextValue, {
          subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]);
      var _useReducer = (0, import_react23.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
      if (previousStateUpdateResult && previousStateUpdateResult.error) {
        throw previousStateUpdateResult.error;
      }
      var lastChildProps = (0, import_react23.useRef)();
      var lastWrapperProps = (0, import_react23.useRef)(wrapperProps);
      var childPropsFromStoreUpdate = (0, import_react23.useRef)();
      var renderIsScheduled = (0, import_react23.useRef)(false);
      var actualChildProps = usePureOnlyMemo(function() {
        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
          return childPropsFromStoreUpdate.current;
        }
        return childPropsSelector(store.getState(), wrapperProps);
      }, [store, previousStateUpdateResult, wrapperProps]);
      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
      var renderedWrappedComponent = (0, import_react23.useMemo)(function() {
        return import_react23.default.createElement(WrappedComponent, _extends({}, actualChildProps, {
          ref: reactReduxForwardedRef
        }));
      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
      var renderedChild = (0, import_react23.useMemo)(function() {
        if (shouldHandleStateChanges) {
          return import_react23.default.createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }
        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    }
    var Connect = pure ? import_react23.default.memo(ConnectFunction) : ConnectFunction;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = ConnectFunction.displayName = displayName;
    if (forwardRef65) {
      var forwarded = import_react23.default.forwardRef(function forwardConnectRef(props, ref2) {
        return import_react23.default.createElement(Connect, _extends({}, props, {
          reactReduxForwardedRef: ref2
        }));
      });
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return (0, import_hoist_non_react_statics.default)(forwarded, WrappedComponent);
    }
    return (0, import_hoist_non_react_statics.default)(Connect, WrappedComponent);
  };
}

// node_modules/react-redux/es/utils/shallowEqual.js
function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;
  for (var i = 0; i < keysA.length; i++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }
  return true;
}

// node_modules/react-redux/es/utils/bindActionCreators.js
function bindActionCreators2(actionCreators, dispatch) {
  var boundActionCreators = {};
  var _loop = function _loop2(key2) {
    var actionCreator = actionCreators[key2];
    if (typeof actionCreator === "function") {
      boundActionCreators[key2] = function() {
        return dispatch(actionCreator.apply(void 0, arguments));
      };
    }
  };
  for (var key in actionCreators) {
    _loop(key);
  }
  return boundActionCreators;
}

// node_modules/react-redux/es/utils/isPlainObject.js
function isPlainObject2(obj) {
  if (typeof obj !== "object" || obj === null) return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null) return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}

// node_modules/react-redux/es/utils/warning.js
function warning(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e) {
  }
}

// node_modules/react-redux/es/utils/verifyPlainObject.js
function verifyPlainObject(value, displayName, methodName) {
  if (!isPlainObject2(value)) {
    warning(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}

// node_modules/react-redux/es/connect/wrapMapToProps.js
function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);
    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;
    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };
    proxy.dependsOnOwnProps = true;
    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);
      if (typeof props === "function") {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }
      if (true) verifyPlainObject(props, displayName, methodName);
      return props;
    };
    return proxy;
  };
}

// node_modules/react-redux/es/connect/mapDispatchToProps.js
function whenMapDispatchToPropsIsFunction(mapDispatchToProps2) {
  return typeof mapDispatchToProps2 === "function" ? wrapMapToPropsFunc(mapDispatchToProps2, "mapDispatchToProps") : void 0;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps2) {
  return !mapDispatchToProps2 ? wrapMapToPropsConstant(function(dispatch) {
    return {
      dispatch
    };
  }) : void 0;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps2) {
  return mapDispatchToProps2 && typeof mapDispatchToProps2 === "object" ? wrapMapToPropsConstant(function(dispatch) {
    return bindActionCreators2(mapDispatchToProps2, dispatch);
  }) : void 0;
}
var mapDispatchToProps_default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

// node_modules/react-redux/es/connect/mapStateToProps.js
function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function() {
    return {};
  }) : void 0;
}
var mapStateToProps_default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

// node_modules/react-redux/es/connect/mergeProps.js
function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps2) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps2(stateProps, dispatchProps, ownProps);
      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (true) verifyPlainObject(mergedProps, displayName, "mergeProps");
      }
      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps2) {
  return typeof mergeProps2 === "function" ? wrapMergePropsFunc(mergeProps2) : void 0;
}
function whenMergePropsIsOmitted(mergeProps2) {
  return !mergeProps2 ? function() {
    return defaultMergeProps;
  } : void 0;
}
var mergeProps_default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

// node_modules/react-redux/es/connect/verifySubselectors.js
function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
    if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
      warning("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}
function verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps2, displayName) {
  verify(mapStateToProps, "mapStateToProps", displayName);
  verify(mapDispatchToProps2, "mapDispatchToProps", displayName);
  verify(mergeProps2, "mergeProps", displayName);
}

// node_modules/react-redux/es/connect/selectorFactory.js
var _excluded3 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps2, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps2(mapStateToProps(state, ownProps), mapDispatchToProps2(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps2, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;
  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps2(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }
  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps2.dependsOnOwnProps) dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps2(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps2.dependsOnOwnProps) dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps2(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps2(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }
  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}
function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose(_ref2, _excluded3);
  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps2 = initMapDispatchToProps(dispatch, options);
  var mergeProps2 = initMergeProps(dispatch, options);
  if (true) {
    verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps2, options.displayName);
  }
  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps2, dispatch, options);
}

// node_modules/react-redux/es/connect/connect.js
var _excluded4 = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }
  return function(dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}
function strictEqual(a, b119) {
  return a === b119;
}
function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? mapStateToProps_default : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? mapDispatchToProps_default : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? mergeProps_default : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
  return function connect(mapStateToProps, mapDispatchToProps2, mergeProps2, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }
    var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded4);
    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
    var initMapDispatchToProps = match(mapDispatchToProps2, mapDispatchToPropsFactories, "mapDispatchToProps");
    var initMergeProps = match(mergeProps2, mergePropsFactories, "mergeProps");
    return connectHOC(selectorFactory, _extends({
      // used in error messages
      methodName: "connect",
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps,
      initMapDispatchToProps,
      initMergeProps,
      pure,
      areStatesEqual,
      areOwnPropsEqual,
      areStatePropsEqual,
      areMergedPropsEqual
    }, extraOptions));
  };
}
var connect_default = createConnect();

// node_modules/react-redux/es/hooks/useStore.js
var import_react25 = __toESM(require_react());

// node_modules/react-redux/es/hooks/useReduxContext.js
var import_react24 = __toESM(require_react());
function useReduxContext() {
  var contextValue = (0, import_react24.useContext)(ReactReduxContext);
  if (!contextValue) {
    throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
  }
  return contextValue;
}

// node_modules/react-redux/es/hooks/useStore.js
function createStoreHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react25.useContext)(context);
  };
  return function useStore2() {
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store;
    return store;
  };
}
var useStore = createStoreHook();

// node_modules/react-redux/es/hooks/useDispatch.js
function createDispatchHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);
  return function useDispatch2() {
    var store = useStore2();
    return store.dispatch;
  };
}
var useDispatch = createDispatchHook();

// node_modules/react-redux/es/hooks/useSelector.js
var import_react26 = __toESM(require_react());
var refEquality = function refEquality2(a, b119) {
  return a === b119;
};
function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = (0, import_react26.useReducer)(function(s) {
    return s + 1;
  }, 0), forceRender = _useReducer[1];
  var subscription = (0, import_react26.useMemo)(function() {
    return createSubscription(store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = (0, import_react26.useRef)();
  var latestSelector = (0, import_react26.useRef)();
  var latestStoreState = (0, import_react26.useRef)();
  var latestSelectedState = (0, import_react26.useRef)();
  var storeState = store.getState();
  var selectedState;
  try {
    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
      var newSelectedState = selector(storeState);
      if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
        selectedState = newSelectedState;
      } else {
        selectedState = latestSelectedState.current;
      }
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }
    throw err;
  }
  useIsomorphicLayoutEffect(function() {
    latestSelector.current = selector;
    latestStoreState.current = storeState;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = void 0;
  });
  useIsomorphicLayoutEffect(function() {
    function checkForUpdates() {
      try {
        var newStoreState = store.getState();
        if (newStoreState === latestStoreState.current) {
          return;
        }
        var _newSelectedState = latestSelector.current(newStoreState);
        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
          return;
        }
        latestSelectedState.current = _newSelectedState;
        latestStoreState.current = newStoreState;
      } catch (err) {
        latestSubscriptionCallbackError.current = err;
      }
      forceRender();
    }
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function() {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}
function createSelectorHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react26.useContext)(context);
  };
  return function useSelector2(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }
    if (true) {
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }
      if (typeof selector !== "function") {
        throw new Error("You must pass a function as a selector to useSelector");
      }
      if (typeof equalityFn !== "function") {
        throw new Error("You must pass a function as an equality function to useSelector");
      }
    }
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;
    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
    (0, import_react26.useDebugValue)(selectedState);
    return selectedState;
  };
}
var useSelector = createSelectorHook();

// node_modules/react-redux/es/utils/reactBatchedUpdates.js
var import_react_dom5 = __toESM(require_react_dom());

// node_modules/react-redux/es/index.js
setBatch(import_react_dom5.unstable_batchedUpdates);

// node_modules/use-memo-one/dist/use-memo-one.esm.js
var import_react27 = __toESM(require_react());
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (newInputs[i] !== lastInputs[i]) {
      return false;
    }
  }
  return true;
}
function useMemoOne(getResult, inputs) {
  var initial = (0, import_react27.useState)(function() {
    return {
      inputs,
      result: getResult()
    };
  })[0];
  var isFirstRun = (0, import_react27.useRef)(true);
  var committed = (0, import_react27.useRef)(initial);
  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
  var cache = useCache ? committed.current : {
    inputs,
    result: getResult()
  };
  (0, import_react27.useEffect)(function() {
    isFirstRun.current = false;
    committed.current = cache;
  }, [cache]);
  return cache.result;
}
function useCallbackOne(callback, inputs) {
  return useMemoOne(function() {
    return callback;
  }, inputs);
}
var useMemo20 = useMemoOne;
var useCallback36 = useCallbackOne;

// node_modules/css-box-model/dist/css-box-model.esm.js
var getRect = function getRect2(_ref) {
  var top = _ref.top, right = _ref.right, bottom = _ref.bottom, left = _ref.left;
  var width = right - left;
  var height = bottom - top;
  var rect = {
    top,
    right,
    bottom,
    left,
    width,
    height,
    x: left,
    y: top,
    center: {
      x: (right + left) / 2,
      y: (bottom + top) / 2
    }
  };
  return rect;
};
var expand = function expand2(target, expandBy) {
  return {
    top: target.top - expandBy.top,
    left: target.left - expandBy.left,
    bottom: target.bottom + expandBy.bottom,
    right: target.right + expandBy.right
  };
};
var shrink = function shrink2(target, shrinkBy) {
  return {
    top: target.top + shrinkBy.top,
    left: target.left + shrinkBy.left,
    bottom: target.bottom - shrinkBy.bottom,
    right: target.right - shrinkBy.right
  };
};
var shift4 = function shift5(target, shiftBy) {
  return {
    top: target.top + shiftBy.y,
    left: target.left + shiftBy.x,
    bottom: target.bottom + shiftBy.y,
    right: target.right + shiftBy.x
  };
};
var noSpacing = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var createBox = function createBox2(_ref2) {
  var borderBox = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
  var marginBox = getRect(expand(borderBox, margin));
  var paddingBox = getRect(shrink(borderBox, border));
  var contentBox = getRect(shrink(paddingBox, padding));
  return {
    marginBox,
    borderBox: getRect(borderBox),
    paddingBox,
    contentBox,
    margin,
    border,
    padding
  };
};
var parse = function parse2(raw) {
  var value = raw.slice(0, -2);
  var suffix2 = raw.slice(-2);
  if (suffix2 !== "px") {
    return 0;
  }
  var result = Number(value);
  !!isNaN(result) ? true ? invariant(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]") : invariant(false) : void 0;
  return result;
};
var getWindowScroll = function getWindowScroll2() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};
var offset4 = function offset5(original, change) {
  var borderBox = original.borderBox, border = original.border, margin = original.margin, padding = original.padding;
  var shifted = shift4(borderBox, change);
  return createBox({
    borderBox: shifted,
    border,
    margin,
    padding
  });
};
var withScroll = function withScroll2(original, scroll3) {
  if (scroll3 === void 0) {
    scroll3 = getWindowScroll();
  }
  return offset4(original, scroll3);
};
var calculateBox = function calculateBox2(borderBox, styles) {
  var margin = {
    top: parse(styles.marginTop),
    right: parse(styles.marginRight),
    bottom: parse(styles.marginBottom),
    left: parse(styles.marginLeft)
  };
  var padding = {
    top: parse(styles.paddingTop),
    right: parse(styles.paddingRight),
    bottom: parse(styles.paddingBottom),
    left: parse(styles.paddingLeft)
  };
  var border = {
    top: parse(styles.borderTopWidth),
    right: parse(styles.borderRightWidth),
    bottom: parse(styles.borderBottomWidth),
    left: parse(styles.borderLeftWidth)
  };
  return createBox({
    borderBox,
    margin,
    padding,
    border
  });
};
var getBox = function getBox2(el) {
  var borderBox = el.getBoundingClientRect();
  var styles = window.getComputedStyle(el);
  return calculateBox(borderBox, styles);
};

// node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual2(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual7) {
  if (isEqual7 === void 0) {
    isEqual7 = areInputsEqual2;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual7(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var memoize_one_esm_default = memoizeOne;

// node_modules/raf-schd/dist/raf-schd.esm.js
var rafSchd = function rafSchd2(fn) {
  var lastArgs = [];
  var frameId = null;
  var wrapperFn = function wrapperFn2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    lastArgs = args;
    if (frameId) {
      return;
    }
    frameId = requestAnimationFrame(function() {
      frameId = null;
      fn.apply(void 0, lastArgs);
    });
  };
  wrapperFn.cancel = function() {
    if (!frameId) {
      return;
    }
    cancelAnimationFrame(frameId);
    frameId = null;
  };
  return wrapperFn;
};
var raf_schd_esm_default = rafSchd;

// node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
var import_react_dom6 = __toESM(require_react_dom());
var isProduction = false;
var spacesAndTabs = /[ \t]{2,}/g;
var lineStartWithSpaces = /^[ \t]*/gm;
var clean = function clean2(value) {
  return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
};
var getDevMessage = function getDevMessage2(message) {
  return clean("\n  %creact-beautiful-dnd\n\n  %c" + clean(message) + "\n\n  %c👷‍ This is a development only message. It will be removed in production builds.\n");
};
var getFormattedMessage = function getFormattedMessage2(message) {
  return [getDevMessage(message), "color: #00C584; font-size: 1.2em; font-weight: bold;", "line-height: 1.5", "color: #723874;"];
};
var isDisabledFlag = "__react-beautiful-dnd-disable-dev-warnings";
function log(type, message) {
  var _console;
  if (isProduction) {
    return;
  }
  if (typeof window !== "undefined" && window[isDisabledFlag]) {
    return;
  }
  (_console = console)[type].apply(_console, getFormattedMessage(message));
}
var warning2 = log.bind(null, "warn");
var error2 = log.bind(null, "error");
function noop6() {
}
function getOptions(shared2, fromBinding) {
  return _extends({}, shared2, {}, fromBinding);
}
function bindEvents(el, bindings, sharedOptions) {
  var unbindings = bindings.map(function(binding) {
    var options = getOptions(sharedOptions, binding.options);
    el.addEventListener(binding.eventName, binding.fn, options);
    return function unbind() {
      el.removeEventListener(binding.eventName, binding.fn, options);
    };
  });
  return function unbindAll() {
    unbindings.forEach(function(unbind) {
      unbind();
    });
  };
}
var isProduction$1 = false;
var prefix = "Invariant failed";
function RbdInvariant(message) {
  this.message = message;
}
RbdInvariant.prototype.toString = function toString() {
  return this.message;
};
function invariant2(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction$1) {
    throw new RbdInvariant(prefix);
  } else {
    throw new RbdInvariant(prefix + ": " + (message || ""));
  }
}
var ErrorBoundary = function(_React$Component) {
  _inheritsLoose(ErrorBoundary2, _React$Component);
  function ErrorBoundary2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.callbacks = null;
    _this.unbind = noop6;
    _this.onWindowError = function(event) {
      var callbacks = _this.getCallbacks();
      if (callbacks.isDragging()) {
        callbacks.tryAbort();
        true ? warning2("\n        An error was caught by our window 'error' event listener while a drag was occurring.\n        The active drag has been aborted.\n      ") : void 0;
      }
      var err = event.error;
      if (err instanceof RbdInvariant) {
        event.preventDefault();
        if (true) {
          error2(err.message);
        }
      }
    };
    _this.getCallbacks = function() {
      if (!_this.callbacks) {
        throw new Error("Unable to find AppCallbacks in <ErrorBoundary/>");
      }
      return _this.callbacks;
    };
    _this.setCallbacks = function(callbacks) {
      _this.callbacks = callbacks;
    };
    return _this;
  }
  var _proto = ErrorBoundary2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.unbind = bindEvents(window, [{
      eventName: "error",
      fn: this.onWindowError
    }]);
  };
  _proto.componentDidCatch = function componentDidCatch(err) {
    if (err instanceof RbdInvariant) {
      if (true) {
        error2(err.message);
      }
      this.setState({});
      return;
    }
    throw err;
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.unbind();
  };
  _proto.render = function render() {
    return this.props.children(this.setCallbacks);
  };
  return ErrorBoundary2;
}(import_react28.default.Component);
var dragHandleUsageInstructions = "\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n";
var position = function position2(index3) {
  return index3 + 1;
};
var onDragStart = function onDragStart2(start3) {
  return "\n  You have lifted an item in position " + position(start3.source.index) + "\n";
};
var withLocation = function withLocation2(source, destination) {
  var isInHomeList = source.droppableId === destination.droppableId;
  var startPosition = position(source.index);
  var endPosition = position(destination.index);
  if (isInHomeList) {
    return "\n      You have moved the item from position " + startPosition + "\n      to position " + endPosition + "\n    ";
  }
  return "\n    You have moved the item from position " + startPosition + "\n    in list " + source.droppableId + "\n    to list " + destination.droppableId + "\n    in position " + endPosition + "\n  ";
};
var withCombine = function withCombine2(id, source, combine2) {
  var inHomeList = source.droppableId === combine2.droppableId;
  if (inHomeList) {
    return "\n      The item " + id + "\n      has been combined with " + combine2.draggableId;
  }
  return "\n      The item " + id + "\n      in list " + source.droppableId + "\n      has been combined with " + combine2.draggableId + "\n      in list " + combine2.droppableId + "\n    ";
};
var onDragUpdate = function onDragUpdate2(update2) {
  var location = update2.destination;
  if (location) {
    return withLocation(update2.source, location);
  }
  var combine2 = update2.combine;
  if (combine2) {
    return withCombine(update2.draggableId, update2.source, combine2);
  }
  return "You are over an area that cannot be dropped on";
};
var returnedToStart = function returnedToStart2(source) {
  return "\n  The item has returned to its starting position\n  of " + position(source.index) + "\n";
};
var onDragEnd = function onDragEnd2(result) {
  if (result.reason === "CANCEL") {
    return "\n      Movement cancelled.\n      " + returnedToStart(result.source) + "\n    ";
  }
  var location = result.destination;
  var combine2 = result.combine;
  if (location) {
    return "\n      You have dropped the item.\n      " + withLocation(result.source, location) + "\n    ";
  }
  if (combine2) {
    return "\n      You have dropped the item.\n      " + withCombine(result.draggableId, result.source, combine2) + "\n    ";
  }
  return "\n    The item has been dropped while not over a drop area.\n    " + returnedToStart(result.source) + "\n  ";
};
var preset = {
  dragHandleUsageInstructions,
  onDragStart,
  onDragUpdate,
  onDragEnd
};
var origin = {
  x: 0,
  y: 0
};
var add = function add2(point1, point2) {
  return {
    x: point1.x + point2.x,
    y: point1.y + point2.y
  };
};
var subtract = function subtract2(point1, point2) {
  return {
    x: point1.x - point2.x,
    y: point1.y - point2.y
  };
};
var isEqual2 = function isEqual3(point1, point2) {
  return point1.x === point2.x && point1.y === point2.y;
};
var negate = function negate2(point) {
  return {
    x: point.x !== 0 ? -point.x : 0,
    y: point.y !== 0 ? -point.y : 0
  };
};
var patch = function patch2(line, value, otherValue) {
  var _ref;
  if (otherValue === void 0) {
    otherValue = 0;
  }
  return _ref = {}, _ref[line] = value, _ref[line === "x" ? "y" : "x"] = otherValue, _ref;
};
var distance = function distance2(point1, point2) {
  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
};
var closest = function closest2(target, points) {
  return Math.min.apply(Math, points.map(function(point) {
    return distance(target, point);
  }));
};
var apply = function apply2(fn) {
  return function(point) {
    return {
      x: fn(point.x),
      y: fn(point.y)
    };
  };
};
var executeClip = function(frame, subject) {
  var result = getRect({
    top: Math.max(subject.top, frame.top),
    right: Math.min(subject.right, frame.right),
    bottom: Math.min(subject.bottom, frame.bottom),
    left: Math.max(subject.left, frame.left)
  });
  if (result.width <= 0 || result.height <= 0) {
    return null;
  }
  return result;
};
var offsetByPosition = function offsetByPosition2(spacing2, point) {
  return {
    top: spacing2.top + point.y,
    left: spacing2.left + point.x,
    bottom: spacing2.bottom + point.y,
    right: spacing2.right + point.x
  };
};
var getCorners = function getCorners2(spacing2) {
  return [{
    x: spacing2.left,
    y: spacing2.top
  }, {
    x: spacing2.right,
    y: spacing2.top
  }, {
    x: spacing2.left,
    y: spacing2.bottom
  }, {
    x: spacing2.right,
    y: spacing2.bottom
  }];
};
var noSpacing2 = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var scroll = function scroll2(target, frame) {
  if (!frame) {
    return target;
  }
  return offsetByPosition(target, frame.scroll.diff.displacement);
};
var increase = function increase2(target, axis, withPlaceholder) {
  if (withPlaceholder && withPlaceholder.increasedBy) {
    var _extends2;
    return _extends({}, target, (_extends2 = {}, _extends2[axis.end] = target[axis.end] + withPlaceholder.increasedBy[axis.line], _extends2));
  }
  return target;
};
var clip = function clip2(target, frame) {
  if (frame && frame.shouldClipSubject) {
    return executeClip(frame.pageMarginBox, target);
  }
  return getRect(target);
};
var getSubject = function(_ref) {
  var page = _ref.page, withPlaceholder = _ref.withPlaceholder, axis = _ref.axis, frame = _ref.frame;
  var scrolled = scroll(page.marginBox, frame);
  var increased = increase(scrolled, axis, withPlaceholder);
  var clipped = clip(increased, frame);
  return {
    page,
    withPlaceholder,
    active: clipped
  };
};
var scrollDroppable = function(droppable2, newScroll) {
  !droppable2.frame ? true ? invariant2(false) : invariant2(false) : void 0;
  var scrollable = droppable2.frame;
  var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
  var scrollDisplacement = negate(scrollDiff);
  var frame = _extends({}, scrollable, {
    scroll: {
      initial: scrollable.scroll.initial,
      current: newScroll,
      diff: {
        value: scrollDiff,
        displacement: scrollDisplacement
      },
      max: scrollable.scroll.max
    }
  });
  var subject = getSubject({
    page: droppable2.subject.page,
    withPlaceholder: droppable2.subject.withPlaceholder,
    axis: droppable2.axis,
    frame
  });
  var result = _extends({}, droppable2, {
    frame,
    subject
  });
  return result;
};
function isInteger(value) {
  if (Number.isInteger) {
    return Number.isInteger(value);
  }
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
}
function values2(map) {
  if (Object.values) {
    return Object.values(map);
  }
  return Object.keys(map).map(function(key) {
    return map[key];
  });
}
function findIndex(list, predicate) {
  if (list.findIndex) {
    return list.findIndex(predicate);
  }
  for (var i = 0; i < list.length; i++) {
    if (predicate(list[i])) {
      return i;
    }
  }
  return -1;
}
function find(list, predicate) {
  if (list.find) {
    return list.find(predicate);
  }
  var index3 = findIndex(list, predicate);
  if (index3 !== -1) {
    return list[index3];
  }
  return void 0;
}
function toArray(list) {
  return Array.prototype.slice.call(list);
}
var toDroppableMap = memoize_one_esm_default(function(droppables) {
  return droppables.reduce(function(previous, current) {
    previous[current.descriptor.id] = current;
    return previous;
  }, {});
});
var toDraggableMap = memoize_one_esm_default(function(draggables) {
  return draggables.reduce(function(previous, current) {
    previous[current.descriptor.id] = current;
    return previous;
  }, {});
});
var toDroppableList = memoize_one_esm_default(function(droppables) {
  return values2(droppables);
});
var toDraggableList = memoize_one_esm_default(function(draggables) {
  return values2(draggables);
});
var getDraggablesInsideDroppable = memoize_one_esm_default(function(droppableId, draggables) {
  var result = toDraggableList(draggables).filter(function(draggable2) {
    return droppableId === draggable2.descriptor.droppableId;
  }).sort(function(a, b119) {
    return a.descriptor.index - b119.descriptor.index;
  });
  return result;
});
function tryGetDestination(impact) {
  if (impact.at && impact.at.type === "REORDER") {
    return impact.at.destination;
  }
  return null;
}
function tryGetCombine(impact) {
  if (impact.at && impact.at.type === "COMBINE") {
    return impact.at.combine;
  }
  return null;
}
var removeDraggableFromList = memoize_one_esm_default(function(remove, list) {
  return list.filter(function(item) {
    return item.descriptor.id !== remove.descriptor.id;
  });
});
var moveToNextCombine = function(_ref) {
  var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var location = tryGetDestination(previousImpact);
  if (!location) {
    return null;
  }
  function getImpact(target) {
    var at = {
      type: "COMBINE",
      combine: {
        draggableId: target,
        droppableId: destination.descriptor.id
      }
    };
    return _extends({}, previousImpact, {
      at
    });
  }
  var all = previousImpact.displaced.all;
  var closestId = all.length ? all[0] : null;
  if (isMovingForward) {
    return closestId ? getImpact(closestId) : null;
  }
  var withoutDraggable = removeDraggableFromList(draggable2, insideDestination);
  if (!closestId) {
    if (!withoutDraggable.length) {
      return null;
    }
    var last = withoutDraggable[withoutDraggable.length - 1];
    return getImpact(last.descriptor.id);
  }
  var indexOfClosest = findIndex(withoutDraggable, function(d) {
    return d.descriptor.id === closestId;
  });
  !(indexOfClosest !== -1) ? true ? invariant2(false, "Could not find displaced item in set") : invariant2(false) : void 0;
  var proposedIndex = indexOfClosest - 1;
  if (proposedIndex < 0) {
    return null;
  }
  var before = withoutDraggable[proposedIndex];
  return getImpact(before.descriptor.id);
};
var isHomeOf = function(draggable2, destination) {
  return draggable2.descriptor.droppableId === destination.descriptor.id;
};
var noDisplacedBy = {
  point: origin,
  value: 0
};
var emptyGroups = {
  invisible: {},
  visible: {},
  all: []
};
var noImpact = {
  displaced: emptyGroups,
  displacedBy: noDisplacedBy,
  at: null
};
var isWithin = function(lowerBound, upperBound) {
  return function(value) {
    return lowerBound <= value && value <= upperBound;
  };
};
var isPartiallyVisibleThroughFrame = function(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function(subject) {
    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    if (isContained) {
      return true;
    }
    var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
    var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
    var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;
    if (isPartiallyContained) {
      return true;
    }
    var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
    var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
    var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;
    if (isTargetBiggerThanFrame) {
      return true;
    }
    var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
    return isTargetBiggerOnOneAxis;
  };
};
var isTotallyVisibleThroughFrame = function(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function(subject) {
    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    return isContained;
  };
};
var vertical = {
  direction: "vertical",
  line: "y",
  crossAxisLine: "x",
  start: "top",
  end: "bottom",
  size: "height",
  crossAxisStart: "left",
  crossAxisEnd: "right",
  crossAxisSize: "width"
};
var horizontal = {
  direction: "horizontal",
  line: "x",
  crossAxisLine: "y",
  start: "left",
  end: "right",
  size: "width",
  crossAxisStart: "top",
  crossAxisEnd: "bottom",
  crossAxisSize: "height"
};
var isTotallyVisibleThroughFrameOnAxis = function(axis) {
  return function(frame) {
    var isWithinVertical = isWithin(frame.top, frame.bottom);
    var isWithinHorizontal = isWithin(frame.left, frame.right);
    return function(subject) {
      if (axis === vertical) {
        return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
      }
      return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    };
  };
};
var getDroppableDisplaced = function getDroppableDisplaced2(target, destination) {
  var displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
  return offsetByPosition(target, displacement);
};
var isVisibleInDroppable = function isVisibleInDroppable2(target, destination, isVisibleThroughFrameFn) {
  if (!destination.subject.active) {
    return false;
  }
  return isVisibleThroughFrameFn(destination.subject.active)(target);
};
var isVisibleInViewport = function isVisibleInViewport2(target, viewport, isVisibleThroughFrameFn) {
  return isVisibleThroughFrameFn(viewport)(target);
};
var isVisible = function isVisible2(_ref) {
  var toBeDisplaced = _ref.target, destination = _ref.destination, viewport = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
  var displacedTarget = withDroppableDisplacement2 ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
  return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport, isVisibleThroughFrameFn);
};
var isPartiallyVisible = function isPartiallyVisible2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
  }));
};
var isTotallyVisible = function isTotallyVisible2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
  }));
};
var isTotallyVisibleOnAxis = function isTotallyVisibleOnAxis2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
  }));
};
var getShouldAnimate = function getShouldAnimate2(id, last, forceShouldAnimate) {
  if (typeof forceShouldAnimate === "boolean") {
    return forceShouldAnimate;
  }
  if (!last) {
    return true;
  }
  var invisible = last.invisible, visible = last.visible;
  if (invisible[id]) {
    return false;
  }
  var previous = visible[id];
  return previous ? previous.shouldAnimate : true;
};
function getTarget3(draggable2, displacedBy) {
  var marginBox = draggable2.page.marginBox;
  var expandBy = {
    top: displacedBy.point.y,
    right: 0,
    bottom: 0,
    left: displacedBy.point.x
  };
  return getRect(expand(marginBox, expandBy));
}
function getDisplacementGroups(_ref) {
  var afterDragging = _ref.afterDragging, destination = _ref.destination, displacedBy = _ref.displacedBy, viewport = _ref.viewport, forceShouldAnimate = _ref.forceShouldAnimate, last = _ref.last;
  return afterDragging.reduce(function process2(groups, draggable2) {
    var target = getTarget3(draggable2, displacedBy);
    var id = draggable2.descriptor.id;
    groups.all.push(id);
    var isVisible3 = isPartiallyVisible({
      target,
      destination,
      viewport,
      withDroppableDisplacement: true
    });
    if (!isVisible3) {
      groups.invisible[draggable2.descriptor.id] = true;
      return groups;
    }
    var shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);
    var displacement = {
      draggableId: id,
      shouldAnimate
    };
    groups.visible[id] = displacement;
    return groups;
  }, {
    all: [],
    visible: {},
    invisible: {}
  });
}
function getIndexOfLastItem(draggables, options) {
  if (!draggables.length) {
    return 0;
  }
  var indexOfLastItem = draggables[draggables.length - 1].descriptor.index;
  return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
}
function goAtEnd(_ref) {
  var insideDestination = _ref.insideDestination, inHomeList = _ref.inHomeList, displacedBy = _ref.displacedBy, destination = _ref.destination;
  var newIndex = getIndexOfLastItem(insideDestination, {
    inHomeList
  });
  return {
    displaced: emptyGroups,
    displacedBy,
    at: {
      type: "REORDER",
      destination: {
        droppableId: destination.descriptor.id,
        index: newIndex
      }
    }
  };
}
function calculateReorderImpact(_ref2) {
  var draggable2 = _ref2.draggable, insideDestination = _ref2.insideDestination, destination = _ref2.destination, viewport = _ref2.viewport, displacedBy = _ref2.displacedBy, last = _ref2.last, index3 = _ref2.index, forceShouldAnimate = _ref2.forceShouldAnimate;
  var inHomeList = isHomeOf(draggable2, destination);
  if (index3 == null) {
    return goAtEnd({
      insideDestination,
      inHomeList,
      displacedBy,
      destination
    });
  }
  var match2 = find(insideDestination, function(item) {
    return item.descriptor.index === index3;
  });
  if (!match2) {
    return goAtEnd({
      insideDestination,
      inHomeList,
      displacedBy,
      destination
    });
  }
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var sliceFrom = insideDestination.indexOf(match2);
  var impacted = withoutDragging.slice(sliceFrom);
  var displaced = getDisplacementGroups({
    afterDragging: impacted,
    destination,
    displacedBy,
    last,
    viewport: viewport.frame,
    forceShouldAnimate
  });
  return {
    displaced,
    displacedBy,
    at: {
      type: "REORDER",
      destination: {
        droppableId: destination.descriptor.id,
        index: index3
      }
    }
  };
}
function didStartAfterCritical(draggableId, afterCritical) {
  return Boolean(afterCritical.effected[draggableId]);
}
var fromCombine = function(_ref) {
  var isMovingForward = _ref.isMovingForward, destination = _ref.destination, draggables = _ref.draggables, combine2 = _ref.combine, afterCritical = _ref.afterCritical;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var combineId = combine2.draggableId;
  var combineWith = draggables[combineId];
  var combineWithIndex = combineWith.descriptor.index;
  var didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);
  if (didCombineWithStartAfterCritical) {
    if (isMovingForward) {
      return combineWithIndex;
    }
    return combineWithIndex - 1;
  }
  if (isMovingForward) {
    return combineWithIndex + 1;
  }
  return combineWithIndex;
};
var fromReorder = function(_ref) {
  var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, insideDestination = _ref.insideDestination, location = _ref.location;
  if (!insideDestination.length) {
    return null;
  }
  var currentIndex = location.index;
  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
  var firstIndex = insideDestination[0].descriptor.index;
  var lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;
  var upperBound = isInHomeList ? lastIndex : lastIndex + 1;
  if (proposedIndex < firstIndex) {
    return null;
  }
  if (proposedIndex > upperBound) {
    return null;
  }
  return proposedIndex;
};
var moveToNextIndex = function(_ref) {
  var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var wasAt = previousImpact.at;
  !wasAt ? true ? invariant2(false, "Cannot move in direction without previous impact location") : invariant2(false) : void 0;
  if (wasAt.type === "REORDER") {
    var _newIndex = fromReorder({
      isMovingForward,
      isInHomeList,
      location: wasAt.destination,
      insideDestination
    });
    if (_newIndex == null) {
      return null;
    }
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport,
      last: previousImpact.displaced,
      displacedBy: previousImpact.displacedBy,
      index: _newIndex
    });
  }
  var newIndex = fromCombine({
    isMovingForward,
    destination,
    displaced: previousImpact.displaced,
    draggables,
    combine: wasAt.combine,
    afterCritical
  });
  if (newIndex == null) {
    return null;
  }
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport,
    last: previousImpact.displaced,
    displacedBy: previousImpact.displacedBy,
    index: newIndex
  });
};
var getCombinedItemDisplacement = function(_ref) {
  var displaced = _ref.displaced, afterCritical = _ref.afterCritical, combineWith = _ref.combineWith, displacedBy = _ref.displacedBy;
  var isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);
  if (didStartAfterCritical(combineWith, afterCritical)) {
    return isDisplaced ? origin : negate(displacedBy.point);
  }
  return isDisplaced ? displacedBy.point : origin;
};
var whenCombining = function(_ref) {
  var afterCritical = _ref.afterCritical, impact = _ref.impact, draggables = _ref.draggables;
  var combine2 = tryGetCombine(impact);
  !combine2 ? true ? invariant2(false) : invariant2(false) : void 0;
  var combineWith = combine2.draggableId;
  var center = draggables[combineWith].page.borderBox.center;
  var displaceBy = getCombinedItemDisplacement({
    displaced: impact.displaced,
    afterCritical,
    combineWith,
    displacedBy: impact.displacedBy
  });
  return add(center, displaceBy);
};
var distanceFromStartToBorderBoxCenter = function distanceFromStartToBorderBoxCenter2(axis, box) {
  return box.margin[axis.start] + box.borderBox[axis.size] / 2;
};
var distanceFromEndToBorderBoxCenter = function distanceFromEndToBorderBoxCenter2(axis, box) {
  return box.margin[axis.end] + box.borderBox[axis.size] / 2;
};
var getCrossAxisBorderBoxCenter = function getCrossAxisBorderBoxCenter2(axis, target, isMoving) {
  return target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
};
var goAfter = function goAfter2(_ref) {
  var axis = _ref.axis, moveRelativeTo = _ref.moveRelativeTo, isMoving = _ref.isMoving;
  return patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
};
var goBefore = function goBefore2(_ref2) {
  var axis = _ref2.axis, moveRelativeTo = _ref2.moveRelativeTo, isMoving = _ref2.isMoving;
  return patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
};
var goIntoStart = function goIntoStart2(_ref3) {
  var axis = _ref3.axis, moveInto = _ref3.moveInto, isMoving = _ref3.isMoving;
  return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
};
var whenReordering = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, draggables = _ref.draggables, droppable2 = _ref.droppable, afterCritical = _ref.afterCritical;
  var insideDestination = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
  var draggablePage = draggable2.page;
  var axis = droppable2.axis;
  if (!insideDestination.length) {
    return goIntoStart({
      axis,
      moveInto: droppable2.page,
      isMoving: draggablePage
    });
  }
  var displaced = impact.displaced, displacedBy = impact.displacedBy;
  var closestAfter = displaced.all[0];
  if (closestAfter) {
    var closest3 = draggables[closestAfter];
    if (didStartAfterCritical(closestAfter, afterCritical)) {
      return goBefore({
        axis,
        moveRelativeTo: closest3.page,
        isMoving: draggablePage
      });
    }
    var withDisplacement = offset4(closest3.page, displacedBy.point);
    return goBefore({
      axis,
      moveRelativeTo: withDisplacement,
      isMoving: draggablePage
    });
  }
  var last = insideDestination[insideDestination.length - 1];
  if (last.descriptor.id === draggable2.descriptor.id) {
    return draggablePage.borderBox.center;
  }
  if (didStartAfterCritical(last.descriptor.id, afterCritical)) {
    var page = offset4(last.page, negate(afterCritical.displacedBy.point));
    return goAfter({
      axis,
      moveRelativeTo: page,
      isMoving: draggablePage
    });
  }
  return goAfter({
    axis,
    moveRelativeTo: last.page,
    isMoving: draggablePage
  });
};
var withDroppableDisplacement = function(droppable2, point) {
  var frame = droppable2.frame;
  if (!frame) {
    return point;
  }
  return add(point, frame.scroll.diff.displacement);
};
var getResultWithoutDroppableDisplacement = function getResultWithoutDroppableDisplacement2(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, afterCritical = _ref.afterCritical;
  var original = draggable2.page.borderBox.center;
  var at = impact.at;
  if (!droppable2) {
    return original;
  }
  if (!at) {
    return original;
  }
  if (at.type === "REORDER") {
    return whenReordering({
      impact,
      draggable: draggable2,
      draggables,
      droppable: droppable2,
      afterCritical
    });
  }
  return whenCombining({
    impact,
    draggables,
    afterCritical
  });
};
var getPageBorderBoxCenterFromImpact = function(args) {
  var withoutDisplacement = getResultWithoutDroppableDisplacement(args);
  var droppable2 = args.droppable;
  var withDisplacement = droppable2 ? withDroppableDisplacement(droppable2, withoutDisplacement) : withoutDisplacement;
  return withDisplacement;
};
var scrollViewport = function(viewport, newScroll) {
  var diff = subtract(newScroll, viewport.scroll.initial);
  var displacement = negate(diff);
  var frame = getRect({
    top: newScroll.y,
    bottom: newScroll.y + viewport.frame.height,
    left: newScroll.x,
    right: newScroll.x + viewport.frame.width
  });
  var updated = {
    frame,
    scroll: {
      initial: viewport.scroll.initial,
      max: viewport.scroll.max,
      current: newScroll,
      diff: {
        value: diff,
        displacement
      }
    }
  };
  return updated;
};
function getDraggables(ids, draggables) {
  return ids.map(function(id) {
    return draggables[id];
  });
}
function tryGetVisible(id, groups) {
  for (var i = 0; i < groups.length; i++) {
    var displacement = groups[i].visible[id];
    if (displacement) {
      return displacement;
    }
  }
  return null;
}
var speculativelyIncrease = function(_ref) {
  var impact = _ref.impact, viewport = _ref.viewport, destination = _ref.destination, draggables = _ref.draggables, maxScrollChange = _ref.maxScrollChange;
  var scrolledViewport = scrollViewport(viewport, add(viewport.scroll.current, maxScrollChange));
  var scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
  var last = impact.displaced;
  var withViewportScroll = getDisplacementGroups({
    afterDragging: getDraggables(last.all, draggables),
    destination,
    displacedBy: impact.displacedBy,
    viewport: scrolledViewport.frame,
    last,
    forceShouldAnimate: false
  });
  var withDroppableScroll2 = getDisplacementGroups({
    afterDragging: getDraggables(last.all, draggables),
    destination: scrolledDroppable,
    displacedBy: impact.displacedBy,
    viewport: viewport.frame,
    last,
    forceShouldAnimate: false
  });
  var invisible = {};
  var visible = {};
  var groups = [last, withViewportScroll, withDroppableScroll2];
  last.all.forEach(function(id) {
    var displacement = tryGetVisible(id, groups);
    if (displacement) {
      visible[id] = displacement;
      return;
    }
    invisible[id] = true;
  });
  var newImpact = _extends({}, impact, {
    displaced: {
      all: last.all,
      invisible,
      visible
    }
  });
  return newImpact;
};
var withViewportDisplacement = function(viewport, point) {
  return add(viewport.scroll.diff.displacement, point);
};
var getClientFromPageBorderBoxCenter = function(_ref) {
  var pageBorderBoxCenter = _ref.pageBorderBoxCenter, draggable2 = _ref.draggable, viewport = _ref.viewport;
  var withoutPageScrollChange = withViewportDisplacement(viewport, pageBorderBoxCenter);
  var offset6 = subtract(withoutPageScrollChange, draggable2.page.borderBox.center);
  return add(draggable2.client.borderBox.center, offset6);
};
var isTotallyVisibleInNewLocation = function(_ref) {
  var draggable2 = _ref.draggable, destination = _ref.destination, newPageBorderBoxCenter = _ref.newPageBorderBoxCenter, viewport = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, _ref$onlyOnMainAxis = _ref.onlyOnMainAxis, onlyOnMainAxis = _ref$onlyOnMainAxis === void 0 ? false : _ref$onlyOnMainAxis;
  var changeNeeded = subtract(newPageBorderBoxCenter, draggable2.page.borderBox.center);
  var shifted = offsetByPosition(draggable2.page.borderBox, changeNeeded);
  var args = {
    target: shifted,
    destination,
    withDroppableDisplacement: withDroppableDisplacement2,
    viewport
  };
  return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
};
var moveToNextPlace = function(_ref) {
  var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, draggables = _ref.draggables, previousImpact = _ref.previousImpact, viewport = _ref.viewport, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, previousClientSelection = _ref.previousClientSelection, afterCritical = _ref.afterCritical;
  if (!destination.isEnabled) {
    return null;
  }
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var isInHomeList = isHomeOf(draggable2, destination);
  var impact = moveToNextCombine({
    isMovingForward,
    draggable: draggable2,
    destination,
    insideDestination,
    previousImpact
  }) || moveToNextIndex({
    isMovingForward,
    isInHomeList,
    draggable: draggable2,
    draggables,
    destination,
    insideDestination,
    previousImpact,
    viewport,
    afterCritical
  });
  if (!impact) {
    return null;
  }
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    afterCritical
  });
  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
    draggable: draggable2,
    destination,
    newPageBorderBoxCenter: pageBorderBoxCenter,
    viewport: viewport.frame,
    withDroppableDisplacement: false,
    onlyOnMainAxis: true
  });
  if (isVisibleInNewLocation) {
    var clientSelection = getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable: draggable2,
      viewport
    });
    return {
      clientSelection,
      impact,
      scrollJumpRequest: null
    };
  }
  var distance3 = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
  var cautious = speculativelyIncrease({
    impact,
    viewport,
    destination,
    draggables,
    maxScrollChange: distance3
  });
  return {
    clientSelection: previousClientSelection,
    impact: cautious,
    scrollJumpRequest: distance3
  };
};
var getKnownActive = function getKnownActive2(droppable2) {
  var rect = droppable2.subject.active;
  !rect ? true ? invariant2(false, "Cannot get clipped area from droppable") : invariant2(false) : void 0;
  return rect;
};
var getBestCrossAxisDroppable = function(_ref) {
  var isMovingForward = _ref.isMovingForward, pageBorderBoxCenter = _ref.pageBorderBoxCenter, source = _ref.source, droppables = _ref.droppables, viewport = _ref.viewport;
  var active = source.subject.active;
  if (!active) {
    return null;
  }
  var axis = source.axis;
  var isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
  var candidates = toDroppableList(droppables).filter(function(droppable2) {
    return droppable2 !== source;
  }).filter(function(droppable2) {
    return droppable2.isEnabled;
  }).filter(function(droppable2) {
    return Boolean(droppable2.subject.active);
  }).filter(function(droppable2) {
    return isPartiallyVisibleThroughFrame(viewport.frame)(getKnownActive(droppable2));
  }).filter(function(droppable2) {
    var activeOfTarget = getKnownActive(droppable2);
    if (isMovingForward) {
      return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
    }
    return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
  }).filter(function(droppable2) {
    var activeOfTarget = getKnownActive(droppable2);
    var isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
    return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
  }).sort(function(a, b119) {
    var first = getKnownActive(a)[axis.crossAxisStart];
    var second = getKnownActive(b119)[axis.crossAxisStart];
    if (isMovingForward) {
      return first - second;
    }
    return second - first;
  }).filter(function(droppable2, index3, array) {
    return getKnownActive(droppable2)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart];
  });
  if (!candidates.length) {
    return null;
  }
  if (candidates.length === 1) {
    return candidates[0];
  }
  var contains3 = candidates.filter(function(droppable2) {
    var isWithinDroppable = isWithin(getKnownActive(droppable2)[axis.start], getKnownActive(droppable2)[axis.end]);
    return isWithinDroppable(pageBorderBoxCenter[axis.line]);
  });
  if (contains3.length === 1) {
    return contains3[0];
  }
  if (contains3.length > 1) {
    return contains3.sort(function(a, b119) {
      return getKnownActive(a)[axis.start] - getKnownActive(b119)[axis.start];
    })[0];
  }
  return candidates.sort(function(a, b119) {
    var first = closest(pageBorderBoxCenter, getCorners(getKnownActive(a)));
    var second = closest(pageBorderBoxCenter, getCorners(getKnownActive(b119)));
    if (first !== second) {
      return first - second;
    }
    return getKnownActive(a)[axis.start] - getKnownActive(b119)[axis.start];
  })[0];
};
var getCurrentPageBorderBoxCenter = function getCurrentPageBorderBoxCenter2(draggable2, afterCritical) {
  var original = draggable2.page.borderBox.center;
  return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
};
var getCurrentPageBorderBox = function getCurrentPageBorderBox2(draggable2, afterCritical) {
  var original = draggable2.page.borderBox;
  return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
};
var getClosestDraggable = function(_ref) {
  var pageBorderBoxCenter = _ref.pageBorderBoxCenter, viewport = _ref.viewport, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
  var sorted = insideDestination.filter(function(draggable2) {
    return isTotallyVisible({
      target: getCurrentPageBorderBox(draggable2, afterCritical),
      destination,
      viewport: viewport.frame,
      withDroppableDisplacement: true
    });
  }).sort(function(a, b119) {
    var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a, afterCritical)));
    var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b119, afterCritical)));
    if (distanceToA < distanceToB) {
      return -1;
    }
    if (distanceToB < distanceToA) {
      return 1;
    }
    return a.descriptor.index - b119.descriptor.index;
  });
  return sorted[0] || null;
};
var getDisplacedBy = memoize_one_esm_default(function getDisplacedBy2(axis, displaceBy) {
  var displacement = displaceBy[axis.line];
  return {
    value: displacement,
    point: patch(axis.line, displacement)
  };
});
var getRequiredGrowthForPlaceholder = function getRequiredGrowthForPlaceholder2(droppable2, placeholderSize, draggables) {
  var axis = droppable2.axis;
  if (droppable2.descriptor.mode === "virtual") {
    return patch(axis.line, placeholderSize[axis.line]);
  }
  var availableSpace = droppable2.subject.page.contentBox[axis.size];
  var insideDroppable = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
  var spaceUsed = insideDroppable.reduce(function(sum, dimension) {
    return sum + dimension.client.marginBox[axis.size];
  }, 0);
  var requiredSpace = spaceUsed + placeholderSize[axis.line];
  var needsToGrowBy = requiredSpace - availableSpace;
  if (needsToGrowBy <= 0) {
    return null;
  }
  return patch(axis.line, needsToGrowBy);
};
var withMaxScroll = function withMaxScroll2(frame, max2) {
  return _extends({}, frame, {
    scroll: _extends({}, frame.scroll, {
      max: max2
    })
  });
};
var addPlaceholder = function addPlaceholder2(droppable2, draggable2, draggables) {
  var frame = droppable2.frame;
  !!isHomeOf(draggable2, droppable2) ? true ? invariant2(false, "Should not add placeholder space to home list") : invariant2(false) : void 0;
  !!droppable2.subject.withPlaceholder ? true ? invariant2(false, "Cannot add placeholder size to a subject when it already has one") : invariant2(false) : void 0;
  var placeholderSize = getDisplacedBy(droppable2.axis, draggable2.displaceBy).point;
  var requiredGrowth = getRequiredGrowthForPlaceholder(droppable2, placeholderSize, draggables);
  var added = {
    placeholderSize,
    increasedBy: requiredGrowth,
    oldFrameMaxScroll: droppable2.frame ? droppable2.frame.scroll.max : null
  };
  if (!frame) {
    var _subject = getSubject({
      page: droppable2.subject.page,
      withPlaceholder: added,
      axis: droppable2.axis,
      frame: droppable2.frame
    });
    return _extends({}, droppable2, {
      subject: _subject
    });
  }
  var maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;
  var newFrame = withMaxScroll(frame, maxScroll);
  var subject = getSubject({
    page: droppable2.subject.page,
    withPlaceholder: added,
    axis: droppable2.axis,
    frame: newFrame
  });
  return _extends({}, droppable2, {
    subject,
    frame: newFrame
  });
};
var removePlaceholder = function removePlaceholder2(droppable2) {
  var added = droppable2.subject.withPlaceholder;
  !added ? true ? invariant2(false, "Cannot remove placeholder form subject when there was none") : invariant2(false) : void 0;
  var frame = droppable2.frame;
  if (!frame) {
    var _subject2 = getSubject({
      page: droppable2.subject.page,
      axis: droppable2.axis,
      frame: null,
      withPlaceholder: null
    });
    return _extends({}, droppable2, {
      subject: _subject2
    });
  }
  var oldMaxScroll = added.oldFrameMaxScroll;
  !oldMaxScroll ? true ? invariant2(false, "Expected droppable with frame to have old max frame scroll when removing placeholder") : invariant2(false) : void 0;
  var newFrame = withMaxScroll(frame, oldMaxScroll);
  var subject = getSubject({
    page: droppable2.subject.page,
    axis: droppable2.axis,
    frame: newFrame,
    withPlaceholder: null
  });
  return _extends({}, droppable2, {
    subject,
    frame: newFrame
  });
};
var moveToNewDroppable = function(_ref) {
  var previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, moveRelativeTo = _ref.moveRelativeTo, insideDestination = _ref.insideDestination, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  if (!moveRelativeTo) {
    if (insideDestination.length) {
      return null;
    }
    var proposed = {
      displaced: emptyGroups,
      displacedBy: noDisplacedBy,
      at: {
        type: "REORDER",
        destination: {
          droppableId: destination.descriptor.id,
          index: 0
        }
      }
    };
    var proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact: proposed,
      draggable: draggable2,
      droppable: destination,
      draggables,
      afterCritical
    });
    var withPlaceholder = isHomeOf(draggable2, destination) ? destination : addPlaceholder(destination, draggable2, draggables);
    var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
      draggable: draggable2,
      destination: withPlaceholder,
      newPageBorderBoxCenter: proposedPageBorderBoxCenter,
      viewport: viewport.frame,
      withDroppableDisplacement: false,
      onlyOnMainAxis: true
    });
    return isVisibleInNewLocation ? proposed : null;
  }
  var isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);
  var proposedIndex = function() {
    var relativeTo = moveRelativeTo.descriptor.index;
    if (moveRelativeTo.descriptor.id === draggable2.descriptor.id) {
      return relativeTo;
    }
    if (isGoingBeforeTarget) {
      return relativeTo;
    }
    return relativeTo + 1;
  }();
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport,
    displacedBy,
    last: emptyGroups,
    index: proposedIndex
  });
};
var moveCrossAxis = function(_ref) {
  var isMovingForward = _ref.isMovingForward, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, draggable2 = _ref.draggable, isOver = _ref.isOver, draggables = _ref.draggables, droppables = _ref.droppables, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var destination = getBestCrossAxisDroppable({
    isMovingForward,
    pageBorderBoxCenter: previousPageBorderBoxCenter,
    source: isOver,
    droppables,
    viewport
  });
  if (!destination) {
    return null;
  }
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var moveRelativeTo = getClosestDraggable({
    pageBorderBoxCenter: previousPageBorderBoxCenter,
    viewport,
    destination,
    insideDestination,
    afterCritical
  });
  var impact = moveToNewDroppable({
    previousPageBorderBoxCenter,
    destination,
    draggable: draggable2,
    draggables,
    moveRelativeTo,
    insideDestination,
    viewport,
    afterCritical
  });
  if (!impact) {
    return null;
  }
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    afterCritical
  });
  var clientSelection = getClientFromPageBorderBoxCenter({
    pageBorderBoxCenter,
    draggable: draggable2,
    viewport
  });
  return {
    clientSelection,
    impact,
    scrollJumpRequest: null
  };
};
var whatIsDraggedOver = function(impact) {
  var at = impact.at;
  if (!at) {
    return null;
  }
  if (at.type === "REORDER") {
    return at.destination.droppableId;
  }
  return at.combine.droppableId;
};
var getDroppableOver = function getDroppableOver2(impact, droppables) {
  var id = whatIsDraggedOver(impact);
  return id ? droppables[id] : null;
};
var moveInDirection = function(_ref) {
  var state = _ref.state, type = _ref.type;
  var isActuallyOver = getDroppableOver(state.impact, state.dimensions.droppables);
  var isMainAxisMovementAllowed = Boolean(isActuallyOver);
  var home2 = state.dimensions.droppables[state.critical.droppable.id];
  var isOver = isActuallyOver || home2;
  var direction = isOver.axis.direction;
  var isMovingOnMainAxis = direction === "vertical" && (type === "MOVE_UP" || type === "MOVE_DOWN") || direction === "horizontal" && (type === "MOVE_LEFT" || type === "MOVE_RIGHT");
  if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
    return null;
  }
  var isMovingForward = type === "MOVE_DOWN" || type === "MOVE_RIGHT";
  var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
  var previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
  var _state$dimensions = state.dimensions, draggables = _state$dimensions.draggables, droppables = _state$dimensions.droppables;
  return isMovingOnMainAxis ? moveToNextPlace({
    isMovingForward,
    previousPageBorderBoxCenter,
    draggable: draggable2,
    destination: isOver,
    draggables,
    viewport: state.viewport,
    previousClientSelection: state.current.client.selection,
    previousImpact: state.impact,
    afterCritical: state.afterCritical
  }) : moveCrossAxis({
    isMovingForward,
    previousPageBorderBoxCenter,
    draggable: draggable2,
    isOver,
    draggables,
    droppables,
    viewport: state.viewport,
    afterCritical: state.afterCritical
  });
};
function isMovementAllowed(state) {
  return state.phase === "DRAGGING" || state.phase === "COLLECTING";
}
function isPositionInFrame(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function run(point) {
    return isWithinVertical(point.y) && isWithinHorizontal(point.x);
  };
}
function getHasOverlap(first, second) {
  return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
}
function getFurthestAway(_ref) {
  var pageBorderBox = _ref.pageBorderBox, draggable2 = _ref.draggable, candidates = _ref.candidates;
  var startCenter = draggable2.page.borderBox.center;
  var sorted = candidates.map(function(candidate) {
    var axis = candidate.axis;
    var target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);
    return {
      id: candidate.descriptor.id,
      distance: distance(startCenter, target)
    };
  }).sort(function(a, b119) {
    return b119.distance - a.distance;
  });
  return sorted[0] ? sorted[0].id : null;
}
function getDroppableOver$1(_ref2) {
  var pageBorderBox = _ref2.pageBorderBox, draggable2 = _ref2.draggable, droppables = _ref2.droppables;
  var candidates = toDroppableList(droppables).filter(function(item) {
    if (!item.isEnabled) {
      return false;
    }
    var active = item.subject.active;
    if (!active) {
      return false;
    }
    if (!getHasOverlap(pageBorderBox, active)) {
      return false;
    }
    if (isPositionInFrame(active)(pageBorderBox.center)) {
      return true;
    }
    var axis = item.axis;
    var childCenter = active.center[axis.crossAxisLine];
    var crossAxisStart = pageBorderBox[axis.crossAxisStart];
    var crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
    var isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
    var isStartContained = isContained(crossAxisStart);
    var isEndContained = isContained(crossAxisEnd);
    if (!isStartContained && !isEndContained) {
      return true;
    }
    if (isStartContained) {
      return crossAxisStart < childCenter;
    }
    return crossAxisEnd > childCenter;
  });
  if (!candidates.length) {
    return null;
  }
  if (candidates.length === 1) {
    return candidates[0].descriptor.id;
  }
  return getFurthestAway({
    pageBorderBox,
    draggable: draggable2,
    candidates
  });
}
var offsetRectByPosition = function offsetRectByPosition2(rect, point) {
  return getRect(offsetByPosition(rect, point));
};
var withDroppableScroll = function(droppable2, area) {
  var frame = droppable2.frame;
  if (!frame) {
    return area;
  }
  return offsetRectByPosition(area, frame.scroll.diff.value);
};
function getIsDisplaced(_ref) {
  var displaced = _ref.displaced, id = _ref.id;
  return Boolean(displaced.visible[id] || displaced.invisible[id]);
}
function atIndex(_ref) {
  var draggable2 = _ref.draggable, closest3 = _ref.closest, inHomeList = _ref.inHomeList;
  if (!closest3) {
    return null;
  }
  if (!inHomeList) {
    return closest3.descriptor.index;
  }
  if (closest3.descriptor.index > draggable2.descriptor.index) {
    return closest3.descriptor.index - 1;
  }
  return closest3.descriptor.index;
}
var getReorderImpact = function(_ref2) {
  var targetRect = _ref2.pageBorderBoxWithDroppableScroll, draggable2 = _ref2.draggable, destination = _ref2.destination, insideDestination = _ref2.insideDestination, last = _ref2.last, viewport = _ref2.viewport, afterCritical = _ref2.afterCritical;
  var axis = destination.axis;
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  var displacement = displacedBy.value;
  var targetStart = targetRect[axis.start];
  var targetEnd = targetRect[axis.end];
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var closest3 = find(withoutDragging, function(child) {
    var id = child.descriptor.id;
    var childCenter = child.page.borderBox.center[axis.line];
    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
    var isDisplaced = getIsDisplaced({
      displaced: last,
      id
    });
    if (didStartAfterCritical$1) {
      if (isDisplaced) {
        return targetEnd <= childCenter;
      }
      return targetStart < childCenter - displacement;
    }
    if (isDisplaced) {
      return targetEnd <= childCenter + displacement;
    }
    return targetStart < childCenter;
  });
  var newIndex = atIndex({
    draggable: draggable2,
    closest: closest3,
    inHomeList: isHomeOf(draggable2, destination)
  });
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport,
    last,
    displacedBy,
    index: newIndex
  });
};
var combineThresholdDivisor = 4;
var getCombineImpact = function(_ref) {
  var draggable2 = _ref.draggable, targetRect = _ref.pageBorderBoxWithDroppableScroll, previousImpact = _ref.previousImpact, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var axis = destination.axis;
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  var displacement = displacedBy.value;
  var targetStart = targetRect[axis.start];
  var targetEnd = targetRect[axis.end];
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var combineWith = find(withoutDragging, function(child) {
    var id = child.descriptor.id;
    var childRect = child.page.borderBox;
    var childSize = childRect[axis.size];
    var threshold = childSize / combineThresholdDivisor;
    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
    var isDisplaced = getIsDisplaced({
      displaced: previousImpact.displaced,
      id
    });
    if (didStartAfterCritical$1) {
      if (isDisplaced) {
        return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
      }
      return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
    }
    if (isDisplaced) {
      return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
    }
    return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
  });
  if (!combineWith) {
    return null;
  }
  var impact = {
    displacedBy,
    displaced: previousImpact.displaced,
    at: {
      type: "COMBINE",
      combine: {
        draggableId: combineWith.descriptor.id,
        droppableId: destination.descriptor.id
      }
    }
  };
  return impact;
};
var getDragImpact = function(_ref) {
  var pageOffset = _ref.pageOffset, draggable2 = _ref.draggable, draggables = _ref.draggables, droppables = _ref.droppables, previousImpact = _ref.previousImpact, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var pageBorderBox = offsetRectByPosition(draggable2.page.borderBox, pageOffset);
  var destinationId = getDroppableOver$1({
    pageBorderBox,
    draggable: draggable2,
    droppables
  });
  if (!destinationId) {
    return noImpact;
  }
  var destination = droppables[destinationId];
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);
  return getCombineImpact({
    pageBorderBoxWithDroppableScroll,
    draggable: draggable2,
    previousImpact,
    destination,
    insideDestination,
    afterCritical
  }) || getReorderImpact({
    pageBorderBoxWithDroppableScroll,
    draggable: draggable2,
    destination,
    insideDestination,
    last: previousImpact.displaced,
    viewport,
    afterCritical
  });
};
var patchDroppableMap = function(droppables, updated) {
  var _extends2;
  return _extends({}, droppables, (_extends2 = {}, _extends2[updated.descriptor.id] = updated, _extends2));
};
var clearUnusedPlaceholder = function clearUnusedPlaceholder2(_ref) {
  var previousImpact = _ref.previousImpact, impact = _ref.impact, droppables = _ref.droppables;
  var last = whatIsDraggedOver(previousImpact);
  var now2 = whatIsDraggedOver(impact);
  if (!last) {
    return droppables;
  }
  if (last === now2) {
    return droppables;
  }
  var lastDroppable = droppables[last];
  if (!lastDroppable.subject.withPlaceholder) {
    return droppables;
  }
  var updated = removePlaceholder(lastDroppable);
  return patchDroppableMap(droppables, updated);
};
var recomputePlaceholders = function(_ref2) {
  var draggable2 = _ref2.draggable, draggables = _ref2.draggables, droppables = _ref2.droppables, previousImpact = _ref2.previousImpact, impact = _ref2.impact;
  var cleaned = clearUnusedPlaceholder({
    previousImpact,
    impact,
    droppables
  });
  var isOver = whatIsDraggedOver(impact);
  if (!isOver) {
    return cleaned;
  }
  var droppable2 = droppables[isOver];
  if (isHomeOf(draggable2, droppable2)) {
    return cleaned;
  }
  if (droppable2.subject.withPlaceholder) {
    return cleaned;
  }
  var patched = addPlaceholder(droppable2, draggable2, draggables);
  return patchDroppableMap(cleaned, patched);
};
var update = function(_ref) {
  var state = _ref.state, forcedClientSelection = _ref.clientSelection, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport, forcedImpact = _ref.impact, scrollJumpRequest = _ref.scrollJumpRequest;
  var viewport = forcedViewport || state.viewport;
  var dimensions = forcedDimensions || state.dimensions;
  var clientSelection = forcedClientSelection || state.current.client.selection;
  var offset6 = subtract(clientSelection, state.initial.client.selection);
  var client = {
    offset: offset6,
    selection: clientSelection,
    borderBoxCenter: add(state.initial.client.borderBoxCenter, offset6)
  };
  var page = {
    selection: add(client.selection, viewport.scroll.current),
    borderBoxCenter: add(client.borderBoxCenter, viewport.scroll.current),
    offset: add(client.offset, viewport.scroll.diff.value)
  };
  var current = {
    client,
    page
  };
  if (state.phase === "COLLECTING") {
    return _extends({
      phase: "COLLECTING"
    }, state, {
      dimensions,
      viewport,
      current
    });
  }
  var draggable2 = dimensions.draggables[state.critical.draggable.id];
  var newImpact = forcedImpact || getDragImpact({
    pageOffset: page.offset,
    draggable: draggable2,
    draggables: dimensions.draggables,
    droppables: dimensions.droppables,
    previousImpact: state.impact,
    viewport,
    afterCritical: state.afterCritical
  });
  var withUpdatedPlaceholders = recomputePlaceholders({
    draggable: draggable2,
    impact: newImpact,
    previousImpact: state.impact,
    draggables: dimensions.draggables,
    droppables: dimensions.droppables
  });
  var result = _extends({}, state, {
    current,
    dimensions: {
      draggables: dimensions.draggables,
      droppables: withUpdatedPlaceholders
    },
    impact: newImpact,
    viewport,
    scrollJumpRequest: scrollJumpRequest || null,
    forceShouldAnimate: scrollJumpRequest ? false : null
  });
  return result;
};
function getDraggables$1(ids, draggables) {
  return ids.map(function(id) {
    return draggables[id];
  });
}
var recompute = function(_ref) {
  var impact = _ref.impact, viewport = _ref.viewport, draggables = _ref.draggables, destination = _ref.destination, forceShouldAnimate = _ref.forceShouldAnimate;
  var last = impact.displaced;
  var afterDragging = getDraggables$1(last.all, draggables);
  var displaced = getDisplacementGroups({
    afterDragging,
    destination,
    displacedBy: impact.displacedBy,
    viewport: viewport.frame,
    forceShouldAnimate,
    last
  });
  return _extends({}, impact, {
    displaced
  });
};
var getClientBorderBoxCenter = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    draggables,
    droppable: droppable2,
    afterCritical
  });
  return getClientFromPageBorderBoxCenter({
    pageBorderBoxCenter,
    draggable: draggable2,
    viewport
  });
};
var refreshSnap = function(_ref) {
  var state = _ref.state, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport;
  !(state.movementMode === "SNAP") ? true ? invariant2(false) : invariant2(false) : void 0;
  var needsVisibilityCheck = state.impact;
  var viewport = forcedViewport || state.viewport;
  var dimensions = forcedDimensions || state.dimensions;
  var draggables = dimensions.draggables, droppables = dimensions.droppables;
  var draggable2 = draggables[state.critical.draggable.id];
  var isOver = whatIsDraggedOver(needsVisibilityCheck);
  !isOver ? true ? invariant2(false, "Must be over a destination in SNAP movement mode") : invariant2(false) : void 0;
  var destination = droppables[isOver];
  var impact = recompute({
    impact: needsVisibilityCheck,
    viewport,
    destination,
    draggables
  });
  var clientSelection = getClientBorderBoxCenter({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    viewport,
    afterCritical: state.afterCritical
  });
  return update({
    impact,
    clientSelection,
    state,
    dimensions,
    viewport
  });
};
var getHomeLocation = function(descriptor) {
  return {
    index: descriptor.index,
    droppableId: descriptor.droppableId
  };
};
var getLiftEffect = function(_ref) {
  var draggable2 = _ref.draggable, home2 = _ref.home, draggables = _ref.draggables, viewport = _ref.viewport;
  var displacedBy = getDisplacedBy(home2.axis, draggable2.displaceBy);
  var insideHome = getDraggablesInsideDroppable(home2.descriptor.id, draggables);
  var rawIndex = insideHome.indexOf(draggable2);
  !(rawIndex !== -1) ? true ? invariant2(false, "Expected draggable to be inside home list") : invariant2(false) : void 0;
  var afterDragging = insideHome.slice(rawIndex + 1);
  var effected = afterDragging.reduce(function(previous, item) {
    previous[item.descriptor.id] = true;
    return previous;
  }, {});
  var afterCritical = {
    inVirtualList: home2.descriptor.mode === "virtual",
    displacedBy,
    effected
  };
  var displaced = getDisplacementGroups({
    afterDragging,
    destination: home2,
    displacedBy,
    last: null,
    viewport: viewport.frame,
    forceShouldAnimate: false
  });
  var impact = {
    displaced,
    displacedBy,
    at: {
      type: "REORDER",
      destination: getHomeLocation(draggable2.descriptor)
    }
  };
  return {
    impact,
    afterCritical
  };
};
var patchDimensionMap = function(dimensions, updated) {
  return {
    draggables: dimensions.draggables,
    droppables: patchDroppableMap(dimensions.droppables, updated)
  };
};
var start = function start2(key) {
  if (true) {
    {
      return;
    }
  }
};
var finish = function finish2(key) {
  if (true) {
    {
      return;
    }
  }
};
var offsetDraggable = function(_ref) {
  var draggable2 = _ref.draggable, offset$1 = _ref.offset, initialWindowScroll = _ref.initialWindowScroll;
  var client = offset4(draggable2.client, offset$1);
  var page = withScroll(client, initialWindowScroll);
  var moved = _extends({}, draggable2, {
    placeholder: _extends({}, draggable2.placeholder, {
      client
    }),
    client,
    page
  });
  return moved;
};
var getFrame = function(droppable2) {
  var frame = droppable2.frame;
  !frame ? true ? invariant2(false, "Expected Droppable to have a frame") : invariant2(false) : void 0;
  return frame;
};
var adjustAdditionsForScrollChanges = function(_ref) {
  var additions = _ref.additions, updatedDroppables = _ref.updatedDroppables, viewport = _ref.viewport;
  var windowScrollChange = viewport.scroll.diff.value;
  return additions.map(function(draggable2) {
    var droppableId = draggable2.descriptor.droppableId;
    var modified = updatedDroppables[droppableId];
    var frame = getFrame(modified);
    var droppableScrollChange = frame.scroll.diff.value;
    var totalChange = add(windowScrollChange, droppableScrollChange);
    var moved = offsetDraggable({
      draggable: draggable2,
      offset: totalChange,
      initialWindowScroll: viewport.scroll.initial
    });
    return moved;
  });
};
var publishWhileDraggingInVirtual = function(_ref) {
  var state = _ref.state, published = _ref.published;
  start();
  var withScrollChange = published.modified.map(function(update2) {
    var existing = state.dimensions.droppables[update2.droppableId];
    var scrolled = scrollDroppable(existing, update2.scroll);
    return scrolled;
  });
  var droppables = _extends({}, state.dimensions.droppables, {}, toDroppableMap(withScrollChange));
  var updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
    additions: published.additions,
    updatedDroppables: droppables,
    viewport: state.viewport
  }));
  var draggables = _extends({}, state.dimensions.draggables, {}, updatedAdditions);
  published.removals.forEach(function(id) {
    delete draggables[id];
  });
  var dimensions = {
    droppables,
    draggables
  };
  var wasOverId = whatIsDraggedOver(state.impact);
  var wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
  var draggable2 = dimensions.draggables[state.critical.draggable.id];
  var home2 = dimensions.droppables[state.critical.droppable.id];
  var _getLiftEffect = getLiftEffect({
    draggable: draggable2,
    home: home2,
    draggables,
    viewport: state.viewport
  }), onLiftImpact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
  var previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;
  var impact = getDragImpact({
    pageOffset: state.current.page.offset,
    draggable: dimensions.draggables[state.critical.draggable.id],
    draggables: dimensions.draggables,
    droppables: dimensions.droppables,
    previousImpact,
    viewport: state.viewport,
    afterCritical
  });
  finish();
  var draggingState = _extends({
    phase: "DRAGGING"
  }, state, {
    phase: "DRAGGING",
    impact,
    onLiftImpact,
    dimensions,
    afterCritical,
    forceShouldAnimate: false
  });
  if (state.phase === "COLLECTING") {
    return draggingState;
  }
  var dropPending3 = _extends({
    phase: "DROP_PENDING"
  }, draggingState, {
    phase: "DROP_PENDING",
    reason: state.reason,
    isWaiting: false
  });
  return dropPending3;
};
var isSnapping = function isSnapping2(state) {
  return state.movementMode === "SNAP";
};
var postDroppableChange = function postDroppableChange2(state, updated, isEnabledChanging) {
  var dimensions = patchDimensionMap(state.dimensions, updated);
  if (!isSnapping(state) || isEnabledChanging) {
    return update({
      state,
      dimensions
    });
  }
  return refreshSnap({
    state,
    dimensions
  });
};
function removeScrollJumpRequest(state) {
  if (state.isDragging && state.movementMode === "SNAP") {
    return _extends({
      phase: "DRAGGING"
    }, state, {
      scrollJumpRequest: null
    });
  }
  return state;
}
var idle = {
  phase: "IDLE",
  completed: null,
  shouldFlush: false
};
var reducer = function(state, action) {
  if (state === void 0) {
    state = idle;
  }
  if (action.type === "FLUSH") {
    return _extends({}, idle, {
      shouldFlush: true
    });
  }
  if (action.type === "INITIAL_PUBLISH") {
    !(state.phase === "IDLE") ? true ? invariant2(false, "INITIAL_PUBLISH must come after a IDLE phase") : invariant2(false) : void 0;
    var _action$payload = action.payload, critical = _action$payload.critical, clientSelection = _action$payload.clientSelection, viewport = _action$payload.viewport, dimensions = _action$payload.dimensions, movementMode = _action$payload.movementMode;
    var draggable2 = dimensions.draggables[critical.draggable.id];
    var home2 = dimensions.droppables[critical.droppable.id];
    var client = {
      selection: clientSelection,
      borderBoxCenter: draggable2.client.borderBox.center,
      offset: origin
    };
    var initial = {
      client,
      page: {
        selection: add(client.selection, viewport.scroll.initial),
        borderBoxCenter: add(client.selection, viewport.scroll.initial),
        offset: add(client.selection, viewport.scroll.diff.value)
      }
    };
    var isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(function(item) {
      return !item.isFixedOnPage;
    });
    var _getLiftEffect = getLiftEffect({
      draggable: draggable2,
      home: home2,
      draggables: dimensions.draggables,
      viewport
    }), impact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
    var result = {
      phase: "DRAGGING",
      isDragging: true,
      critical,
      movementMode,
      dimensions,
      initial,
      current: initial,
      isWindowScrollAllowed,
      impact,
      afterCritical,
      onLiftImpact: impact,
      viewport,
      scrollJumpRequest: null,
      forceShouldAnimate: null
    };
    return result;
  }
  if (action.type === "COLLECTION_STARTING") {
    if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
      return state;
    }
    !(state.phase === "DRAGGING") ? true ? invariant2(false, "Collection cannot start from phase " + state.phase) : invariant2(false) : void 0;
    var _result = _extends({
      phase: "COLLECTING"
    }, state, {
      phase: "COLLECTING"
    });
    return _result;
  }
  if (action.type === "PUBLISH_WHILE_DRAGGING") {
    !(state.phase === "COLLECTING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Unexpected " + action.type + " received in phase " + state.phase) : invariant2(false) : void 0;
    return publishWhileDraggingInVirtual({
      state,
      published: action.payload
    });
  }
  if (action.type === "MOVE") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, action.type + " not permitted in phase " + state.phase) : invariant2(false) : void 0;
    var _clientSelection = action.payload.client;
    if (isEqual2(_clientSelection, state.current.client.selection)) {
      return state;
    }
    return update({
      state,
      clientSelection: _clientSelection,
      impact: isSnapping(state) ? state.impact : null
    });
  }
  if (action.type === "UPDATE_DROPPABLE_SCROLL") {
    if (state.phase === "DROP_PENDING") {
      return removeScrollJumpRequest(state);
    }
    if (state.phase === "COLLECTING") {
      return removeScrollJumpRequest(state);
    }
    !isMovementAllowed(state) ? true ? invariant2(false, action.type + " not permitted in phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload2 = action.payload, id = _action$payload2.id, newScroll = _action$payload2.newScroll;
    var target = state.dimensions.droppables[id];
    if (!target) {
      return state;
    }
    var scrolled = scrollDroppable(target, newScroll);
    return postDroppableChange(state, scrolled, false);
  }
  if (action.type === "UPDATE_DROPPABLE_IS_ENABLED") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Attempting to move in an unsupported phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload3 = action.payload, _id = _action$payload3.id, isEnabled = _action$payload3.isEnabled;
    var _target = state.dimensions.droppables[_id];
    !_target ? true ? invariant2(false, "Cannot find Droppable[id: " + _id + "] to toggle its enabled state") : invariant2(false) : void 0;
    !(_target.isEnabled !== isEnabled) ? true ? invariant2(false, "Trying to set droppable isEnabled to " + String(isEnabled) + "\n      but it is already " + String(_target.isEnabled)) : invariant2(false) : void 0;
    var updated = _extends({}, _target, {
      isEnabled
    });
    return postDroppableChange(state, updated, true);
  }
  if (action.type === "UPDATE_DROPPABLE_IS_COMBINE_ENABLED") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Attempting to move in an unsupported phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload4 = action.payload, _id2 = _action$payload4.id, isCombineEnabled = _action$payload4.isCombineEnabled;
    var _target2 = state.dimensions.droppables[_id2];
    !_target2 ? true ? invariant2(false, "Cannot find Droppable[id: " + _id2 + "] to toggle its isCombineEnabled state") : invariant2(false) : void 0;
    !(_target2.isCombineEnabled !== isCombineEnabled) ? true ? invariant2(false, "Trying to set droppable isCombineEnabled to " + String(isCombineEnabled) + "\n      but it is already " + String(_target2.isCombineEnabled)) : invariant2(false) : void 0;
    var _updated = _extends({}, _target2, {
      isCombineEnabled
    });
    return postDroppableChange(state, _updated, true);
  }
  if (action.type === "MOVE_BY_WINDOW_SCROLL") {
    if (state.phase === "DROP_PENDING" || state.phase === "DROP_ANIMATING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Cannot move by window in phase " + state.phase) : invariant2(false) : void 0;
    !state.isWindowScrollAllowed ? true ? invariant2(false, "Window scrolling is currently not supported for fixed lists") : invariant2(false) : void 0;
    var _newScroll = action.payload.newScroll;
    if (isEqual2(state.viewport.scroll.current, _newScroll)) {
      return removeScrollJumpRequest(state);
    }
    var _viewport = scrollViewport(state.viewport, _newScroll);
    if (isSnapping(state)) {
      return refreshSnap({
        state,
        viewport: _viewport
      });
    }
    return update({
      state,
      viewport: _viewport
    });
  }
  if (action.type === "UPDATE_VIEWPORT_MAX_SCROLL") {
    if (!isMovementAllowed(state)) {
      return state;
    }
    var maxScroll = action.payload.maxScroll;
    if (isEqual2(maxScroll, state.viewport.scroll.max)) {
      return state;
    }
    var withMaxScroll3 = _extends({}, state.viewport, {
      scroll: _extends({}, state.viewport.scroll, {
        max: maxScroll
      })
    });
    return _extends({
      phase: "DRAGGING"
    }, state, {
      viewport: withMaxScroll3
    });
  }
  if (action.type === "MOVE_UP" || action.type === "MOVE_DOWN" || action.type === "MOVE_LEFT" || action.type === "MOVE_RIGHT") {
    if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
      return state;
    }
    !(state.phase === "DRAGGING") ? true ? invariant2(false, action.type + " received while not in DRAGGING phase") : invariant2(false) : void 0;
    var _result2 = moveInDirection({
      state,
      type: action.type
    });
    if (!_result2) {
      return state;
    }
    return update({
      state,
      impact: _result2.impact,
      clientSelection: _result2.clientSelection,
      scrollJumpRequest: _result2.scrollJumpRequest
    });
  }
  if (action.type === "DROP_PENDING") {
    var reason = action.payload.reason;
    !(state.phase === "COLLECTING") ? true ? invariant2(false, "Can only move into the DROP_PENDING phase from the COLLECTING phase") : invariant2(false) : void 0;
    var newState = _extends({
      phase: "DROP_PENDING"
    }, state, {
      phase: "DROP_PENDING",
      isWaiting: true,
      reason
    });
    return newState;
  }
  if (action.type === "DROP_ANIMATE") {
    var _action$payload5 = action.payload, completed = _action$payload5.completed, dropDuration = _action$payload5.dropDuration, newHomeClientOffset = _action$payload5.newHomeClientOffset;
    !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Cannot animate drop from phase " + state.phase) : invariant2(false) : void 0;
    var _result3 = {
      phase: "DROP_ANIMATING",
      completed,
      dropDuration,
      newHomeClientOffset,
      dimensions: state.dimensions
    };
    return _result3;
  }
  if (action.type === "DROP_COMPLETE") {
    var _completed = action.payload.completed;
    return {
      phase: "IDLE",
      completed: _completed,
      shouldFlush: false
    };
  }
  return state;
};
var beforeInitialCapture = function beforeInitialCapture2(args) {
  return {
    type: "BEFORE_INITIAL_CAPTURE",
    payload: args
  };
};
var lift = function lift2(args) {
  return {
    type: "LIFT",
    payload: args
  };
};
var initialPublish = function initialPublish2(args) {
  return {
    type: "INITIAL_PUBLISH",
    payload: args
  };
};
var publishWhileDragging = function publishWhileDragging2(args) {
  return {
    type: "PUBLISH_WHILE_DRAGGING",
    payload: args
  };
};
var collectionStarting = function collectionStarting2() {
  return {
    type: "COLLECTION_STARTING",
    payload: null
  };
};
var updateDroppableScroll = function updateDroppableScroll2(args) {
  return {
    type: "UPDATE_DROPPABLE_SCROLL",
    payload: args
  };
};
var updateDroppableIsEnabled = function updateDroppableIsEnabled2(args) {
  return {
    type: "UPDATE_DROPPABLE_IS_ENABLED",
    payload: args
  };
};
var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled2(args) {
  return {
    type: "UPDATE_DROPPABLE_IS_COMBINE_ENABLED",
    payload: args
  };
};
var move = function move2(args) {
  return {
    type: "MOVE",
    payload: args
  };
};
var moveByWindowScroll = function moveByWindowScroll2(args) {
  return {
    type: "MOVE_BY_WINDOW_SCROLL",
    payload: args
  };
};
var updateViewportMaxScroll = function updateViewportMaxScroll2(args) {
  return {
    type: "UPDATE_VIEWPORT_MAX_SCROLL",
    payload: args
  };
};
var moveUp = function moveUp2() {
  return {
    type: "MOVE_UP",
    payload: null
  };
};
var moveDown = function moveDown2() {
  return {
    type: "MOVE_DOWN",
    payload: null
  };
};
var moveRight = function moveRight2() {
  return {
    type: "MOVE_RIGHT",
    payload: null
  };
};
var moveLeft = function moveLeft2() {
  return {
    type: "MOVE_LEFT",
    payload: null
  };
};
var flush = function flush2() {
  return {
    type: "FLUSH",
    payload: null
  };
};
var animateDrop = function animateDrop2(args) {
  return {
    type: "DROP_ANIMATE",
    payload: args
  };
};
var completeDrop = function completeDrop2(args) {
  return {
    type: "DROP_COMPLETE",
    payload: args
  };
};
var drop = function drop2(args) {
  return {
    type: "DROP",
    payload: args
  };
};
var dropPending = function dropPending2(args) {
  return {
    type: "DROP_PENDING",
    payload: args
  };
};
var dropAnimationFinished = function dropAnimationFinished2() {
  return {
    type: "DROP_ANIMATION_FINISHED",
    payload: null
  };
};
function checkIndexes(insideDestination) {
  if (insideDestination.length <= 1) {
    return;
  }
  var indexes = insideDestination.map(function(d) {
    return d.descriptor.index;
  });
  var errors = {};
  for (var i = 1; i < indexes.length; i++) {
    var current = indexes[i];
    var previous = indexes[i - 1];
    if (current !== previous + 1) {
      errors[current] = true;
    }
  }
  if (!Object.keys(errors).length) {
    return;
  }
  var formatted = indexes.map(function(index3) {
    var hasError = Boolean(errors[index3]);
    return hasError ? "[🔥" + index3 + "]" : "" + index3;
  }).join(", ");
  true ? warning2("\n    Detected non-consecutive <Draggable /> indexes.\n\n    (This can cause unexpected bugs)\n\n    " + formatted + "\n  ") : void 0;
}
function validateDimensions(critical, dimensions) {
  if (true) {
    var insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);
    checkIndexes(insideDestination);
  }
}
var lift$1 = function(marshal) {
  return function(_ref) {
    var getState = _ref.getState, dispatch = _ref.dispatch;
    return function(next) {
      return function(action) {
        if (action.type !== "LIFT") {
          next(action);
          return;
        }
        var _action$payload = action.payload, id = _action$payload.id, clientSelection = _action$payload.clientSelection, movementMode = _action$payload.movementMode;
        var initial = getState();
        if (initial.phase === "DROP_ANIMATING") {
          dispatch(completeDrop({
            completed: initial.completed
          }));
        }
        !(getState().phase === "IDLE") ? true ? invariant2(false, "Unexpected phase to start a drag") : invariant2(false) : void 0;
        dispatch(flush());
        dispatch(beforeInitialCapture({
          draggableId: id,
          movementMode
        }));
        var scrollOptions = {
          shouldPublishImmediately: movementMode === "SNAP"
        };
        var request = {
          draggableId: id,
          scrollOptions
        };
        var _marshal$startPublish = marshal.startPublishing(request), critical = _marshal$startPublish.critical, dimensions = _marshal$startPublish.dimensions, viewport = _marshal$startPublish.viewport;
        validateDimensions(critical, dimensions);
        dispatch(initialPublish({
          critical,
          dimensions,
          clientSelection,
          movementMode,
          viewport
        }));
      };
    };
  };
};
var style = function(marshal) {
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "INITIAL_PUBLISH") {
          marshal.dragging();
        }
        if (action.type === "DROP_ANIMATE") {
          marshal.dropping(action.payload.completed.result.reason);
        }
        if (action.type === "FLUSH" || action.type === "DROP_COMPLETE") {
          marshal.resting();
        }
        next(action);
      };
    };
  };
};
var curves = {
  outOfTheWay: "cubic-bezier(0.2, 0, 0, 1)",
  drop: "cubic-bezier(.2,1,.1,1)"
};
var combine = {
  opacity: {
    drop: 0,
    combining: 0.7
  },
  scale: {
    drop: 0.75
  }
};
var timings = {
  outOfTheWay: 0.2,
  minDropTime: 0.33,
  maxDropTime: 0.55
};
var outOfTheWayTiming = timings.outOfTheWay + "s " + curves.outOfTheWay;
var transitions = {
  fluid: "opacity " + outOfTheWayTiming,
  snap: "transform " + outOfTheWayTiming + ", opacity " + outOfTheWayTiming,
  drop: function drop3(duration) {
    var timing = duration + "s " + curves.drop;
    return "transform " + timing + ", opacity " + timing;
  },
  outOfTheWay: "transform " + outOfTheWayTiming,
  placeholder: "height " + outOfTheWayTiming + ", width " + outOfTheWayTiming + ", margin " + outOfTheWayTiming
};
var moveTo = function moveTo2(offset6) {
  return isEqual2(offset6, origin) ? null : "translate(" + offset6.x + "px, " + offset6.y + "px)";
};
var transforms = {
  moveTo,
  drop: function drop4(offset6, isCombining) {
    var translate = moveTo(offset6);
    if (!translate) {
      return null;
    }
    if (!isCombining) {
      return translate;
    }
    return translate + " scale(" + combine.scale.drop + ")";
  }
};
var minDropTime = timings.minDropTime;
var maxDropTime = timings.maxDropTime;
var dropTimeRange = maxDropTime - minDropTime;
var maxDropTimeAtDistance = 1500;
var cancelDropModifier = 0.6;
var getDropDuration = function(_ref) {
  var current = _ref.current, destination = _ref.destination, reason = _ref.reason;
  var distance$1 = distance(current, destination);
  if (distance$1 <= 0) {
    return minDropTime;
  }
  if (distance$1 >= maxDropTimeAtDistance) {
    return maxDropTime;
  }
  var percentage = distance$1 / maxDropTimeAtDistance;
  var duration = minDropTime + dropTimeRange * percentage;
  var withDuration = reason === "CANCEL" ? duration * cancelDropModifier : duration;
  return Number(withDuration.toFixed(2));
};
var getNewHomeClientOffset = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, dimensions = _ref.dimensions, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var draggables = dimensions.draggables, droppables = dimensions.droppables;
  var droppableId = whatIsDraggedOver(impact);
  var destination = droppableId ? droppables[droppableId] : null;
  var home2 = droppables[draggable2.descriptor.droppableId];
  var newClientCenter = getClientBorderBoxCenter({
    impact,
    draggable: draggable2,
    draggables,
    afterCritical,
    droppable: destination || home2,
    viewport
  });
  var offset6 = subtract(newClientCenter, draggable2.client.borderBox.center);
  return offset6;
};
var getDropImpact = function(_ref) {
  var draggables = _ref.draggables, reason = _ref.reason, lastImpact = _ref.lastImpact, home2 = _ref.home, viewport = _ref.viewport, onLiftImpact = _ref.onLiftImpact;
  if (!lastImpact.at || reason !== "DROP") {
    var recomputedHomeImpact = recompute({
      draggables,
      impact: onLiftImpact,
      destination: home2,
      viewport,
      forceShouldAnimate: true
    });
    return {
      impact: recomputedHomeImpact,
      didDropInsideDroppable: false
    };
  }
  if (lastImpact.at.type === "REORDER") {
    return {
      impact: lastImpact,
      didDropInsideDroppable: true
    };
  }
  var withoutMovement = _extends({}, lastImpact, {
    displaced: emptyGroups
  });
  return {
    impact: withoutMovement,
    didDropInsideDroppable: true
  };
};
var drop$1 = function(_ref) {
  var getState = _ref.getState, dispatch = _ref.dispatch;
  return function(next) {
    return function(action) {
      if (action.type !== "DROP") {
        next(action);
        return;
      }
      var state = getState();
      var reason = action.payload.reason;
      if (state.phase === "COLLECTING") {
        dispatch(dropPending({
          reason
        }));
        return;
      }
      if (state.phase === "IDLE") {
        return;
      }
      var isWaitingForDrop = state.phase === "DROP_PENDING" && state.isWaiting;
      !!isWaitingForDrop ? true ? invariant2(false, "A DROP action occurred while DROP_PENDING and still waiting") : invariant2(false) : void 0;
      !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Cannot drop in phase: " + state.phase) : invariant2(false) : void 0;
      var critical = state.critical;
      var dimensions = state.dimensions;
      var draggable2 = dimensions.draggables[state.critical.draggable.id];
      var _getDropImpact = getDropImpact({
        reason,
        lastImpact: state.impact,
        afterCritical: state.afterCritical,
        onLiftImpact: state.onLiftImpact,
        home: state.dimensions.droppables[state.critical.droppable.id],
        viewport: state.viewport,
        draggables: state.dimensions.draggables
      }), impact = _getDropImpact.impact, didDropInsideDroppable = _getDropImpact.didDropInsideDroppable;
      var destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
      var combine2 = didDropInsideDroppable ? tryGetCombine(impact) : null;
      var source = {
        index: critical.draggable.index,
        droppableId: critical.droppable.id
      };
      var result = {
        draggableId: draggable2.descriptor.id,
        type: draggable2.descriptor.type,
        source,
        reason,
        mode: state.movementMode,
        destination,
        combine: combine2
      };
      var newHomeClientOffset = getNewHomeClientOffset({
        impact,
        draggable: draggable2,
        dimensions,
        viewport: state.viewport,
        afterCritical: state.afterCritical
      });
      var completed = {
        critical: state.critical,
        afterCritical: state.afterCritical,
        result,
        impact
      };
      var isAnimationRequired = !isEqual2(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);
      if (!isAnimationRequired) {
        dispatch(completeDrop({
          completed
        }));
        return;
      }
      var dropDuration = getDropDuration({
        current: state.current.client.offset,
        destination: newHomeClientOffset,
        reason
      });
      var args = {
        newHomeClientOffset,
        dropDuration,
        completed
      };
      dispatch(animateDrop(args));
    };
  };
};
var getWindowScroll3 = function() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};
function getWindowScrollBinding(update2) {
  return {
    eventName: "scroll",
    options: {
      passive: true,
      capture: false
    },
    fn: function fn(event) {
      if (event.target !== window && event.target !== window.document) {
        return;
      }
      update2();
    }
  };
}
function getScrollListener(_ref) {
  var onWindowScroll = _ref.onWindowScroll;
  function updateScroll() {
    onWindowScroll(getWindowScroll3());
  }
  var scheduled = raf_schd_esm_default(updateScroll);
  var binding = getWindowScrollBinding(scheduled);
  var unbind = noop6;
  function isActive() {
    return unbind !== noop6;
  }
  function start3() {
    !!isActive() ? true ? invariant2(false, "Cannot start scroll listener when already active") : invariant2(false) : void 0;
    unbind = bindEvents(window, [binding]);
  }
  function stop() {
    !isActive() ? true ? invariant2(false, "Cannot stop scroll listener when not active") : invariant2(false) : void 0;
    scheduled.cancel();
    unbind();
    unbind = noop6;
  }
  return {
    start: start3,
    stop,
    isActive
  };
}
var shouldEnd = function shouldEnd2(action) {
  return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
};
var scrollListener = function(store) {
  var listener = getScrollListener({
    onWindowScroll: function onWindowScroll(newScroll) {
      store.dispatch(moveByWindowScroll({
        newScroll
      }));
    }
  });
  return function(next) {
    return function(action) {
      if (!listener.isActive() && action.type === "INITIAL_PUBLISH") {
        listener.start();
      }
      if (listener.isActive() && shouldEnd(action)) {
        listener.stop();
      }
      next(action);
    };
  };
};
var getExpiringAnnounce = function(announce) {
  var wasCalled = false;
  var isExpired = false;
  var timeoutId = setTimeout(function() {
    isExpired = true;
  });
  var result = function result2(message) {
    if (wasCalled) {
      true ? warning2("Announcement already made. Not making a second announcement") : void 0;
      return;
    }
    if (isExpired) {
      true ? warning2("\n        Announcements cannot be made asynchronously.\n        Default message has already been announced.\n      ") : void 0;
      return;
    }
    wasCalled = true;
    announce(message);
    clearTimeout(timeoutId);
  };
  result.wasCalled = function() {
    return wasCalled;
  };
  return result;
};
var getAsyncMarshal = function() {
  var entries = [];
  var execute3 = function execute4(timerId) {
    var index3 = findIndex(entries, function(item) {
      return item.timerId === timerId;
    });
    !(index3 !== -1) ? true ? invariant2(false, "Could not find timer") : invariant2(false) : void 0;
    var _entries$splice = entries.splice(index3, 1), entry = _entries$splice[0];
    entry.callback();
  };
  var add3 = function add4(fn) {
    var timerId = setTimeout(function() {
      return execute3(timerId);
    });
    var entry = {
      timerId,
      callback: fn
    };
    entries.push(entry);
  };
  var flush3 = function flush4() {
    if (!entries.length) {
      return;
    }
    var shallow = [].concat(entries);
    entries.length = 0;
    shallow.forEach(function(entry) {
      clearTimeout(entry.timerId);
      entry.callback();
    });
  };
  return {
    add: add3,
    flush: flush3
  };
};
var areLocationsEqual = function areLocationsEqual2(first, second) {
  if (first == null && second == null) {
    return true;
  }
  if (first == null || second == null) {
    return false;
  }
  return first.droppableId === second.droppableId && first.index === second.index;
};
var isCombineEqual = function isCombineEqual2(first, second) {
  if (first == null && second == null) {
    return true;
  }
  if (first == null || second == null) {
    return false;
  }
  return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
};
var isCriticalEqual = function isCriticalEqual2(first, second) {
  if (first === second) {
    return true;
  }
  var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
  var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
  return isDraggableEqual && isDroppableEqual;
};
var withTimings = function withTimings2(key, fn) {
  start();
  fn();
  finish();
};
var getDragStart = function getDragStart2(critical, mode) {
  return {
    draggableId: critical.draggable.id,
    type: critical.droppable.type,
    source: {
      droppableId: critical.droppable.id,
      index: critical.draggable.index
    },
    mode
  };
};
var execute = function execute2(responder, data, announce, getDefaultMessage) {
  if (!responder) {
    announce(getDefaultMessage(data));
    return;
  }
  var willExpire = getExpiringAnnounce(announce);
  var provided = {
    announce: willExpire
  };
  responder(data, provided);
  if (!willExpire.wasCalled()) {
    announce(getDefaultMessage(data));
  }
};
var getPublisher = function(getResponders, announce) {
  var asyncMarshal = getAsyncMarshal();
  var dragging = null;
  var beforeCapture = function beforeCapture2(draggableId, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeCapture as a drag start has already been published") : invariant2(false) : void 0;
    withTimings("onBeforeCapture", function() {
      var fn = getResponders().onBeforeCapture;
      if (fn) {
        var before = {
          draggableId,
          mode
        };
        fn(before);
      }
    });
  };
  var beforeStart = function beforeStart2(critical, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant2(false) : void 0;
    withTimings("onBeforeDragStart", function() {
      var fn = getResponders().onBeforeDragStart;
      if (fn) {
        fn(getDragStart(critical, mode));
      }
    });
  };
  var start3 = function start4(critical, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant2(false) : void 0;
    var data = getDragStart(critical, mode);
    dragging = {
      mode,
      lastCritical: critical,
      lastLocation: data.source,
      lastCombine: null
    };
    asyncMarshal.add(function() {
      withTimings("onDragStart", function() {
        return execute(getResponders().onDragStart, data, announce, preset.onDragStart);
      });
    });
  };
  var update2 = function update3(critical, impact) {
    var location = tryGetDestination(impact);
    var combine2 = tryGetCombine(impact);
    !dragging ? true ? invariant2(false, "Cannot fire onDragMove when onDragStart has not been called") : invariant2(false) : void 0;
    var hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);
    if (hasCriticalChanged) {
      dragging.lastCritical = critical;
    }
    var hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);
    if (hasLocationChanged) {
      dragging.lastLocation = location;
    }
    var hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine2);
    if (hasGroupingChanged) {
      dragging.lastCombine = combine2;
    }
    if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
      return;
    }
    var data = _extends({}, getDragStart(critical, dragging.mode), {
      combine: combine2,
      destination: location
    });
    asyncMarshal.add(function() {
      withTimings("onDragUpdate", function() {
        return execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate);
      });
    });
  };
  var flush3 = function flush4() {
    !dragging ? true ? invariant2(false, "Can only flush responders while dragging") : invariant2(false) : void 0;
    asyncMarshal.flush();
  };
  var drop5 = function drop6(result) {
    !dragging ? true ? invariant2(false, "Cannot fire onDragEnd when there is no matching onDragStart") : invariant2(false) : void 0;
    dragging = null;
    withTimings("onDragEnd", function() {
      return execute(getResponders().onDragEnd, result, announce, preset.onDragEnd);
    });
  };
  var abort = function abort2() {
    if (!dragging) {
      return;
    }
    var result = _extends({}, getDragStart(dragging.lastCritical, dragging.mode), {
      combine: null,
      destination: null,
      reason: "CANCEL"
    });
    drop5(result);
  };
  return {
    beforeCapture,
    beforeStart,
    start: start3,
    update: update2,
    flush: flush3,
    drop: drop5,
    abort
  };
};
var responders = function(getResponders, announce) {
  var publisher = getPublisher(getResponders, announce);
  return function(store) {
    return function(next) {
      return function(action) {
        if (action.type === "BEFORE_INITIAL_CAPTURE") {
          publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
          return;
        }
        if (action.type === "INITIAL_PUBLISH") {
          var critical = action.payload.critical;
          publisher.beforeStart(critical, action.payload.movementMode);
          next(action);
          publisher.start(critical, action.payload.movementMode);
          return;
        }
        if (action.type === "DROP_COMPLETE") {
          var result = action.payload.completed.result;
          publisher.flush();
          next(action);
          publisher.drop(result);
          return;
        }
        next(action);
        if (action.type === "FLUSH") {
          publisher.abort();
          return;
        }
        var state = store.getState();
        if (state.phase === "DRAGGING") {
          publisher.update(state.critical, state.impact);
        }
      };
    };
  };
};
var dropAnimationFinish = function(store) {
  return function(next) {
    return function(action) {
      if (action.type !== "DROP_ANIMATION_FINISHED") {
        next(action);
        return;
      }
      var state = store.getState();
      !(state.phase === "DROP_ANIMATING") ? true ? invariant2(false, "Cannot finish a drop animating when no drop is occurring") : invariant2(false) : void 0;
      store.dispatch(completeDrop({
        completed: state.completed
      }));
    };
  };
};
var dropAnimationFlushOnScroll = function(store) {
  var unbind = null;
  var frameId = null;
  function clear() {
    if (frameId) {
      cancelAnimationFrame(frameId);
      frameId = null;
    }
    if (unbind) {
      unbind();
      unbind = null;
    }
  }
  return function(next) {
    return function(action) {
      if (action.type === "FLUSH" || action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATION_FINISHED") {
        clear();
      }
      next(action);
      if (action.type !== "DROP_ANIMATE") {
        return;
      }
      var binding = {
        eventName: "scroll",
        options: {
          capture: true,
          passive: false,
          once: true
        },
        fn: function flushDropAnimation() {
          var state = store.getState();
          if (state.phase === "DROP_ANIMATING") {
            store.dispatch(dropAnimationFinished());
          }
        }
      };
      frameId = requestAnimationFrame(function() {
        frameId = null;
        unbind = bindEvents(window, [binding]);
      });
    };
  };
};
var dimensionMarshalStopper = function(marshal) {
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "DROP_COMPLETE" || action.type === "FLUSH" || action.type === "DROP_ANIMATE") {
          marshal.stopPublishing();
        }
        next(action);
      };
    };
  };
};
var focus = function(marshal) {
  var isWatching = false;
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "INITIAL_PUBLISH") {
          isWatching = true;
          marshal.tryRecordFocus(action.payload.critical.draggable.id);
          next(action);
          marshal.tryRestoreFocusRecorded();
          return;
        }
        next(action);
        if (!isWatching) {
          return;
        }
        if (action.type === "FLUSH") {
          isWatching = false;
          marshal.tryRestoreFocusRecorded();
          return;
        }
        if (action.type === "DROP_COMPLETE") {
          isWatching = false;
          var result = action.payload.completed.result;
          if (result.combine) {
            marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
          }
          marshal.tryRestoreFocusRecorded();
        }
      };
    };
  };
};
var shouldStop = function shouldStop2(action) {
  return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
};
var autoScroll = function(autoScroller) {
  return function(store) {
    return function(next) {
      return function(action) {
        if (shouldStop(action)) {
          autoScroller.stop();
          next(action);
          return;
        }
        if (action.type === "INITIAL_PUBLISH") {
          next(action);
          var state = store.getState();
          !(state.phase === "DRAGGING") ? true ? invariant2(false, "Expected phase to be DRAGGING after INITIAL_PUBLISH") : invariant2(false) : void 0;
          autoScroller.start(state);
          return;
        }
        next(action);
        autoScroller.scroll(store.getState());
      };
    };
  };
};
var pendingDrop = function(store) {
  return function(next) {
    return function(action) {
      next(action);
      if (action.type !== "PUBLISH_WHILE_DRAGGING") {
        return;
      }
      var postActionState = store.getState();
      if (postActionState.phase !== "DROP_PENDING") {
        return;
      }
      if (postActionState.isWaiting) {
        return;
      }
      store.dispatch(drop({
        reason: postActionState.reason
      }));
    };
  };
};
var composeEnhancers = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
  name: "react-beautiful-dnd"
}) : compose;
var createStore2 = function(_ref) {
  var dimensionMarshal = _ref.dimensionMarshal, focusMarshal = _ref.focusMarshal, styleMarshal = _ref.styleMarshal, getResponders = _ref.getResponders, announce = _ref.announce, autoScroller = _ref.autoScroller;
  return createStore(reducer, composeEnhancers(applyMiddleware(style(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift$1(dimensionMarshal), drop$1, dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));
};
var clean$1 = function clean3() {
  return {
    additions: {},
    removals: {},
    modified: {}
  };
};
function createPublisher(_ref) {
  var registry = _ref.registry, callbacks = _ref.callbacks;
  var staging = clean$1();
  var frameId = null;
  var collect = function collect2() {
    if (frameId) {
      return;
    }
    callbacks.collectionStarting();
    frameId = requestAnimationFrame(function() {
      frameId = null;
      start();
      var _staging = staging, additions = _staging.additions, removals = _staging.removals, modified = _staging.modified;
      var added = Object.keys(additions).map(function(id) {
        return registry.draggable.getById(id).getDimension(origin);
      }).sort(function(a, b119) {
        return a.descriptor.index - b119.descriptor.index;
      });
      var updated = Object.keys(modified).map(function(id) {
        var entry = registry.droppable.getById(id);
        var scroll3 = entry.callbacks.getScrollWhileDragging();
        return {
          droppableId: id,
          scroll: scroll3
        };
      });
      var result = {
        additions: added,
        removals: Object.keys(removals),
        modified: updated
      };
      staging = clean$1();
      finish();
      callbacks.publish(result);
    });
  };
  var add3 = function add4(entry) {
    var id = entry.descriptor.id;
    staging.additions[id] = entry;
    staging.modified[entry.descriptor.droppableId] = true;
    if (staging.removals[id]) {
      delete staging.removals[id];
    }
    collect();
  };
  var remove = function remove2(entry) {
    var descriptor = entry.descriptor;
    staging.removals[descriptor.id] = true;
    staging.modified[descriptor.droppableId] = true;
    if (staging.additions[descriptor.id]) {
      delete staging.additions[descriptor.id];
    }
    collect();
  };
  var stop = function stop2() {
    if (!frameId) {
      return;
    }
    cancelAnimationFrame(frameId);
    frameId = null;
    staging = clean$1();
  };
  return {
    add: add3,
    remove,
    stop
  };
}
var getMaxScroll = function(_ref) {
  var scrollHeight = _ref.scrollHeight, scrollWidth = _ref.scrollWidth, height = _ref.height, width = _ref.width;
  var maxScroll = subtract({
    x: scrollWidth,
    y: scrollHeight
  }, {
    x: width,
    y: height
  });
  var adjustedMaxScroll = {
    x: Math.max(0, maxScroll.x),
    y: Math.max(0, maxScroll.y)
  };
  return adjustedMaxScroll;
};
var getDocumentElement2 = function() {
  var doc = document.documentElement;
  !doc ? true ? invariant2(false, "Cannot find document.documentElement") : invariant2(false) : void 0;
  return doc;
};
var getMaxWindowScroll = function() {
  var doc = getDocumentElement2();
  var maxScroll = getMaxScroll({
    scrollHeight: doc.scrollHeight,
    scrollWidth: doc.scrollWidth,
    width: doc.clientWidth,
    height: doc.clientHeight
  });
  return maxScroll;
};
var getViewport = function() {
  var scroll3 = getWindowScroll3();
  var maxScroll = getMaxWindowScroll();
  var top = scroll3.y;
  var left = scroll3.x;
  var doc = getDocumentElement2();
  var width = doc.clientWidth;
  var height = doc.clientHeight;
  var right = left + width;
  var bottom = top + height;
  var frame = getRect({
    top,
    left,
    right,
    bottom
  });
  var viewport = {
    frame,
    scroll: {
      initial: scroll3,
      current: scroll3,
      max: maxScroll,
      diff: {
        value: origin,
        displacement: origin
      }
    }
  };
  return viewport;
};
var getInitialPublish = function(_ref) {
  var critical = _ref.critical, scrollOptions = _ref.scrollOptions, registry = _ref.registry;
  start();
  var viewport = getViewport();
  var windowScroll = viewport.scroll.current;
  var home2 = critical.droppable;
  var droppables = registry.droppable.getAllByType(home2.type).map(function(entry) {
    return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
  });
  var draggables = registry.draggable.getAllByType(critical.draggable.type).map(function(entry) {
    return entry.getDimension(windowScroll);
  });
  var dimensions = {
    draggables: toDraggableMap(draggables),
    droppables: toDroppableMap(droppables)
  };
  finish();
  var result = {
    dimensions,
    critical,
    viewport
  };
  return result;
};
function shouldPublishUpdate(registry, dragging, entry) {
  if (entry.descriptor.id === dragging.id) {
    return false;
  }
  if (entry.descriptor.type !== dragging.type) {
    return false;
  }
  var home2 = registry.droppable.getById(entry.descriptor.droppableId);
  if (home2.descriptor.mode !== "virtual") {
    true ? warning2("\n      You are attempting to add or remove a Draggable [id: " + entry.descriptor.id + "]\n      while a drag is occurring. This is only supported for virtual lists.\n\n      See https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/virtual-lists.md\n    ") : void 0;
    return false;
  }
  return true;
}
var createDimensionMarshal = function(registry, callbacks) {
  var collection = null;
  var publisher = createPublisher({
    callbacks: {
      publish: callbacks.publishWhileDragging,
      collectionStarting: callbacks.collectionStarting
    },
    registry
  });
  var updateDroppableIsEnabled3 = function updateDroppableIsEnabled4(id, isEnabled) {
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update is enabled flag of Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    if (!collection) {
      return;
    }
    callbacks.updateDroppableIsEnabled({
      id,
      isEnabled
    });
  };
  var updateDroppableIsCombineEnabled3 = function updateDroppableIsCombineEnabled4(id, isCombineEnabled) {
    if (!collection) {
      return;
    }
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update isCombineEnabled flag of Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    callbacks.updateDroppableIsCombineEnabled({
      id,
      isCombineEnabled
    });
  };
  var updateDroppableScroll3 = function updateDroppableScroll4(id, newScroll) {
    if (!collection) {
      return;
    }
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    callbacks.updateDroppableScroll({
      id,
      newScroll
    });
  };
  var scrollDroppable2 = function scrollDroppable3(id, change) {
    if (!collection) {
      return;
    }
    registry.droppable.getById(id).callbacks.scroll(change);
  };
  var stopPublishing = function stopPublishing2() {
    if (!collection) {
      return;
    }
    publisher.stop();
    var home2 = collection.critical.droppable;
    registry.droppable.getAllByType(home2.type).forEach(function(entry) {
      return entry.callbacks.dragStopped();
    });
    collection.unsubscribe();
    collection = null;
  };
  var subscriber = function subscriber2(event) {
    !collection ? true ? invariant2(false, "Should only be subscribed when a collection is occurring") : invariant2(false) : void 0;
    var dragging = collection.critical.draggable;
    if (event.type === "ADDITION") {
      if (shouldPublishUpdate(registry, dragging, event.value)) {
        publisher.add(event.value);
      }
    }
    if (event.type === "REMOVAL") {
      if (shouldPublishUpdate(registry, dragging, event.value)) {
        publisher.remove(event.value);
      }
    }
  };
  var startPublishing = function startPublishing2(request) {
    !!collection ? true ? invariant2(false, "Cannot start capturing critical dimensions as there is already a collection") : invariant2(false) : void 0;
    var entry = registry.draggable.getById(request.draggableId);
    var home2 = registry.droppable.getById(entry.descriptor.droppableId);
    var critical = {
      draggable: entry.descriptor,
      droppable: home2.descriptor
    };
    var unsubscribe = registry.subscribe(subscriber);
    collection = {
      critical,
      unsubscribe
    };
    return getInitialPublish({
      critical,
      registry,
      scrollOptions: request.scrollOptions
    });
  };
  var marshal = {
    updateDroppableIsEnabled: updateDroppableIsEnabled3,
    updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled3,
    scrollDroppable: scrollDroppable2,
    updateDroppableScroll: updateDroppableScroll3,
    startPublishing,
    stopPublishing
  };
  return marshal;
};
var canStartDrag = function(state, id) {
  if (state.phase === "IDLE") {
    return true;
  }
  if (state.phase !== "DROP_ANIMATING") {
    return false;
  }
  if (state.completed.result.draggableId === id) {
    return false;
  }
  return state.completed.result.reason === "DROP";
};
var scrollWindow = function(change) {
  window.scrollBy(change.x, change.y);
};
var getScrollableDroppables = memoize_one_esm_default(function(droppables) {
  return toDroppableList(droppables).filter(function(droppable2) {
    if (!droppable2.isEnabled) {
      return false;
    }
    if (!droppable2.frame) {
      return false;
    }
    return true;
  });
});
var getScrollableDroppableOver = function getScrollableDroppableOver2(target, droppables) {
  var maybe = find(getScrollableDroppables(droppables), function(droppable2) {
    !droppable2.frame ? true ? invariant2(false, "Invalid result") : invariant2(false) : void 0;
    return isPositionInFrame(droppable2.frame.pageMarginBox)(target);
  });
  return maybe;
};
var getBestScrollableDroppable = function(_ref) {
  var center = _ref.center, destination = _ref.destination, droppables = _ref.droppables;
  if (destination) {
    var _dimension = droppables[destination];
    if (!_dimension.frame) {
      return null;
    }
    return _dimension;
  }
  var dimension = getScrollableDroppableOver(center, droppables);
  return dimension;
};
var config2 = {
  startFromPercentage: 0.25,
  maxScrollAtPercentage: 0.05,
  maxPixelScroll: 28,
  ease: function ease(percentage) {
    return Math.pow(percentage, 2);
  },
  durationDampening: {
    stopDampeningAt: 1200,
    accelerateAt: 360
  }
};
var getDistanceThresholds = function(container, axis) {
  var startScrollingFrom = container[axis.size] * config2.startFromPercentage;
  var maxScrollValueAt = container[axis.size] * config2.maxScrollAtPercentage;
  var thresholds = {
    startScrollingFrom,
    maxScrollValueAt
  };
  return thresholds;
};
var getPercentage = function(_ref) {
  var startOfRange = _ref.startOfRange, endOfRange = _ref.endOfRange, current = _ref.current;
  var range = endOfRange - startOfRange;
  if (range === 0) {
    true ? warning2("\n      Detected distance range of 0 in the fluid auto scroller\n      This is unexpected and would cause a divide by 0 issue.\n      Not allowing an auto scroll\n    ") : void 0;
    return 0;
  }
  var currentInRange = current - startOfRange;
  var percentage = currentInRange / range;
  return percentage;
};
var minScroll = 1;
var getValueFromDistance = function(distanceToEdge, thresholds) {
  if (distanceToEdge > thresholds.startScrollingFrom) {
    return 0;
  }
  if (distanceToEdge <= thresholds.maxScrollValueAt) {
    return config2.maxPixelScroll;
  }
  if (distanceToEdge === thresholds.startScrollingFrom) {
    return minScroll;
  }
  var percentageFromMaxScrollValueAt = getPercentage({
    startOfRange: thresholds.maxScrollValueAt,
    endOfRange: thresholds.startScrollingFrom,
    current: distanceToEdge
  });
  var percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
  var scroll3 = config2.maxPixelScroll * config2.ease(percentageFromStartScrollingFrom);
  return Math.ceil(scroll3);
};
var accelerateAt = config2.durationDampening.accelerateAt;
var stopAt = config2.durationDampening.stopDampeningAt;
var dampenValueByTime = function(proposedScroll, dragStartTime) {
  var startOfRange = dragStartTime;
  var endOfRange = stopAt;
  var now2 = Date.now();
  var runTime = now2 - startOfRange;
  if (runTime >= stopAt) {
    return proposedScroll;
  }
  if (runTime < accelerateAt) {
    return minScroll;
  }
  var betweenAccelerateAtAndStopAtPercentage = getPercentage({
    startOfRange: accelerateAt,
    endOfRange,
    current: runTime
  });
  var scroll3 = proposedScroll * config2.ease(betweenAccelerateAtAndStopAtPercentage);
  return Math.ceil(scroll3);
};
var getValue = function(_ref) {
  var distanceToEdge = _ref.distanceToEdge, thresholds = _ref.thresholds, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var scroll3 = getValueFromDistance(distanceToEdge, thresholds);
  if (scroll3 === 0) {
    return 0;
  }
  if (!shouldUseTimeDampening) {
    return scroll3;
  }
  return Math.max(dampenValueByTime(scroll3, dragStartTime), minScroll);
};
var getScrollOnAxis = function(_ref) {
  var container = _ref.container, distanceToEdges = _ref.distanceToEdges, dragStartTime = _ref.dragStartTime, axis = _ref.axis, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var thresholds = getDistanceThresholds(container, axis);
  var isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];
  if (isCloserToEnd) {
    return getValue({
      distanceToEdge: distanceToEdges[axis.end],
      thresholds,
      dragStartTime,
      shouldUseTimeDampening
    });
  }
  return -1 * getValue({
    distanceToEdge: distanceToEdges[axis.start],
    thresholds,
    dragStartTime,
    shouldUseTimeDampening
  });
};
var adjustForSizeLimits = function(_ref) {
  var container = _ref.container, subject = _ref.subject, proposedScroll = _ref.proposedScroll;
  var isTooBigVertically = subject.height > container.height;
  var isTooBigHorizontally = subject.width > container.width;
  if (!isTooBigHorizontally && !isTooBigVertically) {
    return proposedScroll;
  }
  if (isTooBigHorizontally && isTooBigVertically) {
    return null;
  }
  return {
    x: isTooBigHorizontally ? 0 : proposedScroll.x,
    y: isTooBigVertically ? 0 : proposedScroll.y
  };
};
var clean$2 = apply(function(value) {
  return value === 0 ? 0 : value;
});
var getScroll = function(_ref) {
  var dragStartTime = _ref.dragStartTime, container = _ref.container, subject = _ref.subject, center = _ref.center, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var distanceToEdges = {
    top: center.y - container.top,
    right: container.right - center.x,
    bottom: container.bottom - center.y,
    left: center.x - container.left
  };
  var y = getScrollOnAxis({
    container,
    distanceToEdges,
    dragStartTime,
    axis: vertical,
    shouldUseTimeDampening
  });
  var x = getScrollOnAxis({
    container,
    distanceToEdges,
    dragStartTime,
    axis: horizontal,
    shouldUseTimeDampening
  });
  var required2 = clean$2({
    x,
    y
  });
  if (isEqual2(required2, origin)) {
    return null;
  }
  var limited = adjustForSizeLimits({
    container,
    subject,
    proposedScroll: required2
  });
  if (!limited) {
    return null;
  }
  return isEqual2(limited, origin) ? null : limited;
};
var smallestSigned = apply(function(value) {
  if (value === 0) {
    return 0;
  }
  return value > 0 ? 1 : -1;
});
var getOverlap = /* @__PURE__ */ function() {
  var getRemainder = function getRemainder2(target, max2) {
    if (target < 0) {
      return target;
    }
    if (target > max2) {
      return target - max2;
    }
    return 0;
  };
  return function(_ref) {
    var current = _ref.current, max2 = _ref.max, change = _ref.change;
    var targetScroll = add(current, change);
    var overlap = {
      x: getRemainder(targetScroll.x, max2.x),
      y: getRemainder(targetScroll.y, max2.y)
    };
    if (isEqual2(overlap, origin)) {
      return null;
    }
    return overlap;
  };
}();
var canPartiallyScroll = function canPartiallyScroll2(_ref2) {
  var rawMax = _ref2.max, current = _ref2.current, change = _ref2.change;
  var max2 = {
    x: Math.max(current.x, rawMax.x),
    y: Math.max(current.y, rawMax.y)
  };
  var smallestChange = smallestSigned(change);
  var overlap = getOverlap({
    max: max2,
    current,
    change: smallestChange
  });
  if (!overlap) {
    return true;
  }
  if (smallestChange.x !== 0 && overlap.x === 0) {
    return true;
  }
  if (smallestChange.y !== 0 && overlap.y === 0) {
    return true;
  }
  return false;
};
var canScrollWindow = function canScrollWindow2(viewport, change) {
  return canPartiallyScroll({
    current: viewport.scroll.current,
    max: viewport.scroll.max,
    change
  });
};
var getWindowOverlap = function getWindowOverlap2(viewport, change) {
  if (!canScrollWindow(viewport, change)) {
    return null;
  }
  var max2 = viewport.scroll.max;
  var current = viewport.scroll.current;
  return getOverlap({
    current,
    max: max2,
    change
  });
};
var canScrollDroppable = function canScrollDroppable2(droppable2, change) {
  var frame = droppable2.frame;
  if (!frame) {
    return false;
  }
  return canPartiallyScroll({
    current: frame.scroll.current,
    max: frame.scroll.max,
    change
  });
};
var getDroppableOverlap = function getDroppableOverlap2(droppable2, change) {
  var frame = droppable2.frame;
  if (!frame) {
    return null;
  }
  if (!canScrollDroppable(droppable2, change)) {
    return null;
  }
  return getOverlap({
    current: frame.scroll.current,
    max: frame.scroll.max,
    change
  });
};
var getWindowScrollChange = function(_ref) {
  var viewport = _ref.viewport, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var scroll3 = getScroll({
    dragStartTime,
    container: viewport.frame,
    subject,
    center,
    shouldUseTimeDampening
  });
  return scroll3 && canScrollWindow(viewport, scroll3) ? scroll3 : null;
};
var getDroppableScrollChange = function(_ref) {
  var droppable2 = _ref.droppable, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var frame = droppable2.frame;
  if (!frame) {
    return null;
  }
  var scroll3 = getScroll({
    dragStartTime,
    container: frame.pageMarginBox,
    subject,
    center,
    shouldUseTimeDampening
  });
  return scroll3 && canScrollDroppable(droppable2, scroll3) ? scroll3 : null;
};
var scroll$1 = function(_ref) {
  var state = _ref.state, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening, scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
  var center = state.current.page.borderBoxCenter;
  var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
  var subject = draggable2.page.marginBox;
  if (state.isWindowScrollAllowed) {
    var viewport = state.viewport;
    var _change = getWindowScrollChange({
      dragStartTime,
      viewport,
      subject,
      center,
      shouldUseTimeDampening
    });
    if (_change) {
      scrollWindow2(_change);
      return;
    }
  }
  var droppable2 = getBestScrollableDroppable({
    center,
    destination: whatIsDraggedOver(state.impact),
    droppables: state.dimensions.droppables
  });
  if (!droppable2) {
    return;
  }
  var change = getDroppableScrollChange({
    dragStartTime,
    droppable: droppable2,
    subject,
    center,
    shouldUseTimeDampening
  });
  if (change) {
    scrollDroppable2(droppable2.descriptor.id, change);
  }
};
var createFluidScroller = function(_ref) {
  var scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
  var scheduleWindowScroll = raf_schd_esm_default(scrollWindow2);
  var scheduleDroppableScroll = raf_schd_esm_default(scrollDroppable2);
  var dragging = null;
  var tryScroll = function tryScroll2(state) {
    !dragging ? true ? invariant2(false, "Cannot fluid scroll if not dragging") : invariant2(false) : void 0;
    var _dragging = dragging, shouldUseTimeDampening = _dragging.shouldUseTimeDampening, dragStartTime = _dragging.dragStartTime;
    scroll$1({
      state,
      scrollWindow: scheduleWindowScroll,
      scrollDroppable: scheduleDroppableScroll,
      dragStartTime,
      shouldUseTimeDampening
    });
  };
  var start$1 = function start$12(state) {
    start();
    !!dragging ? true ? invariant2(false, "Cannot start auto scrolling when already started") : invariant2(false) : void 0;
    var dragStartTime = Date.now();
    var wasScrollNeeded = false;
    var fakeScrollCallback = function fakeScrollCallback2() {
      wasScrollNeeded = true;
    };
    scroll$1({
      state,
      dragStartTime: 0,
      shouldUseTimeDampening: false,
      scrollWindow: fakeScrollCallback,
      scrollDroppable: fakeScrollCallback
    });
    dragging = {
      dragStartTime,
      shouldUseTimeDampening: wasScrollNeeded
    };
    finish();
    if (wasScrollNeeded) {
      tryScroll(state);
    }
  };
  var stop = function stop2() {
    if (!dragging) {
      return;
    }
    scheduleWindowScroll.cancel();
    scheduleDroppableScroll.cancel();
    dragging = null;
  };
  return {
    start: start$1,
    stop,
    scroll: tryScroll
  };
};
var createJumpScroller = function(_ref) {
  var move3 = _ref.move, scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow;
  var moveByOffset = function moveByOffset2(state, offset6) {
    var client = add(state.current.client.selection, offset6);
    move3({
      client
    });
  };
  var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan2(droppable2, change) {
    if (!canScrollDroppable(droppable2, change)) {
      return change;
    }
    var overlap = getDroppableOverlap(droppable2, change);
    if (!overlap) {
      scrollDroppable2(droppable2.descriptor.id, change);
      return null;
    }
    var whatTheDroppableCanScroll = subtract(change, overlap);
    scrollDroppable2(droppable2.descriptor.id, whatTheDroppableCanScroll);
    var remainder = subtract(change, whatTheDroppableCanScroll);
    return remainder;
  };
  var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan2(isWindowScrollAllowed, viewport, change) {
    if (!isWindowScrollAllowed) {
      return change;
    }
    if (!canScrollWindow(viewport, change)) {
      return change;
    }
    var overlap = getWindowOverlap(viewport, change);
    if (!overlap) {
      scrollWindow2(change);
      return null;
    }
    var whatTheWindowCanScroll = subtract(change, overlap);
    scrollWindow2(whatTheWindowCanScroll);
    var remainder = subtract(change, whatTheWindowCanScroll);
    return remainder;
  };
  var jumpScroller = function jumpScroller2(state) {
    var request = state.scrollJumpRequest;
    if (!request) {
      return;
    }
    var destination = whatIsDraggedOver(state.impact);
    !destination ? true ? invariant2(false, "Cannot perform a jump scroll when there is no destination") : invariant2(false) : void 0;
    var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);
    if (!droppableRemainder) {
      return;
    }
    var viewport = state.viewport;
    var windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport, droppableRemainder);
    if (!windowRemainder) {
      return;
    }
    moveByOffset(state, windowRemainder);
  };
  return jumpScroller;
};
var createAutoScroller = function(_ref) {
  var scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow, move3 = _ref.move;
  var fluidScroller = createFluidScroller({
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2
  });
  var jumpScroll = createJumpScroller({
    move: move3,
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2
  });
  var scroll3 = function scroll4(state) {
    if (state.phase !== "DRAGGING") {
      return;
    }
    if (state.movementMode === "FLUID") {
      fluidScroller.scroll(state);
      return;
    }
    if (!state.scrollJumpRequest) {
      return;
    }
    jumpScroll(state);
  };
  var scroller = {
    scroll: scroll3,
    start: fluidScroller.start,
    stop: fluidScroller.stop
  };
  return scroller;
};
var prefix$1 = "data-rbd";
var dragHandle = function() {
  var base = prefix$1 + "-drag-handle";
  return {
    base,
    draggableId: base + "-draggable-id",
    contextId: base + "-context-id"
  };
}();
var draggable = function() {
  var base = prefix$1 + "-draggable";
  return {
    base,
    contextId: base + "-context-id",
    id: base + "-id"
  };
}();
var droppable = function() {
  var base = prefix$1 + "-droppable";
  return {
    base,
    contextId: base + "-context-id",
    id: base + "-id"
  };
}();
var scrollContainer = {
  contextId: prefix$1 + "-scroll-container-context-id"
};
var makeGetSelector = function makeGetSelector2(context) {
  return function(attribute) {
    return "[" + attribute + '="' + context + '"]';
  };
};
var getStyles = function getStyles2(rules, property) {
  return rules.map(function(rule) {
    var value = rule.styles[property];
    if (!value) {
      return "";
    }
    return rule.selector + " { " + value + " }";
  }).join(" ");
};
var noPointerEvents = "pointer-events: none;";
var getStyles$1 = function(contextId) {
  var getSelector2 = makeGetSelector(contextId);
  var dragHandle$1 = function() {
    var grabCursor = "\n      cursor: -webkit-grab;\n      cursor: grab;\n    ";
    return {
      selector: getSelector2(dragHandle.contextId),
      styles: {
        always: "\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",
        resting: grabCursor,
        dragging: noPointerEvents,
        dropAnimating: grabCursor
      }
    };
  }();
  var draggable$1 = function() {
    var transition = "\n      transition: " + transitions.outOfTheWay + ";\n    ";
    return {
      selector: getSelector2(draggable.contextId),
      styles: {
        dragging: transition,
        dropAnimating: transition,
        userCancel: transition
      }
    };
  }();
  var droppable$1 = {
    selector: getSelector2(droppable.contextId),
    styles: {
      always: "overflow-anchor: none;"
    }
  };
  var body = {
    selector: "body",
    styles: {
      dragging: "\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "
    }
  };
  var rules = [draggable$1, dragHandle$1, droppable$1, body];
  return {
    always: getStyles(rules, "always"),
    resting: getStyles(rules, "resting"),
    dragging: getStyles(rules, "dragging"),
    dropAnimating: getStyles(rules, "dropAnimating"),
    userCancel: getStyles(rules, "userCancel")
  };
};
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react28.useLayoutEffect : import_react28.useEffect;
var getHead = function getHead2() {
  var head = document.querySelector("head");
  !head ? true ? invariant2(false, "Cannot find the head to append a style to") : invariant2(false) : void 0;
  return head;
};
var createStyleEl = function createStyleEl2(nonce) {
  var el = document.createElement("style");
  if (nonce) {
    el.setAttribute("nonce", nonce);
  }
  el.type = "text/css";
  return el;
};
function useStyleMarshal(contextId, nonce) {
  var styles = useMemo20(function() {
    return getStyles$1(contextId);
  }, [contextId]);
  var alwaysRef = (0, import_react28.useRef)(null);
  var dynamicRef = (0, import_react28.useRef)(null);
  var setDynamicStyle = useCallback36(memoize_one_esm_default(function(proposed) {
    var el = dynamicRef.current;
    !el ? true ? invariant2(false, "Cannot set dynamic style element if it is not set") : invariant2(false) : void 0;
    el.textContent = proposed;
  }), []);
  var setAlwaysStyle = useCallback36(function(proposed) {
    var el = alwaysRef.current;
    !el ? true ? invariant2(false, "Cannot set dynamic style element if it is not set") : invariant2(false) : void 0;
    el.textContent = proposed;
  }, []);
  useIsomorphicLayoutEffect2(function() {
    !(!alwaysRef.current && !dynamicRef.current) ? true ? invariant2(false, "style elements already mounted") : invariant2(false) : void 0;
    var always = createStyleEl(nonce);
    var dynamic = createStyleEl(nonce);
    alwaysRef.current = always;
    dynamicRef.current = dynamic;
    always.setAttribute(prefix$1 + "-always", contextId);
    dynamic.setAttribute(prefix$1 + "-dynamic", contextId);
    getHead().appendChild(always);
    getHead().appendChild(dynamic);
    setAlwaysStyle(styles.always);
    setDynamicStyle(styles.resting);
    return function() {
      var remove = function remove2(ref2) {
        var current = ref2.current;
        !current ? true ? invariant2(false, "Cannot unmount ref as it is not set") : invariant2(false) : void 0;
        getHead().removeChild(current);
        ref2.current = null;
      };
      remove(alwaysRef);
      remove(dynamicRef);
    };
  }, [nonce, setAlwaysStyle, setDynamicStyle, styles.always, styles.resting, contextId]);
  var dragging = useCallback36(function() {
    return setDynamicStyle(styles.dragging);
  }, [setDynamicStyle, styles.dragging]);
  var dropping = useCallback36(function(reason) {
    if (reason === "DROP") {
      setDynamicStyle(styles.dropAnimating);
      return;
    }
    setDynamicStyle(styles.userCancel);
  }, [setDynamicStyle, styles.dropAnimating, styles.userCancel]);
  var resting = useCallback36(function() {
    if (!dynamicRef.current) {
      return;
    }
    setDynamicStyle(styles.resting);
  }, [setDynamicStyle, styles.resting]);
  var marshal = useMemo20(function() {
    return {
      dragging,
      dropping,
      resting
    };
  }, [dragging, dropping, resting]);
  return marshal;
}
var getWindowFromEl = function(el) {
  return el && el.ownerDocument ? el.ownerDocument.defaultView : window;
};
function isHtmlElement(el) {
  return el instanceof getWindowFromEl(el).HTMLElement;
}
function findDragHandle(contextId, draggableId) {
  var selector = "[" + dragHandle.contextId + '="' + contextId + '"]';
  var possible = toArray(document.querySelectorAll(selector));
  if (!possible.length) {
    true ? warning2('Unable to find any drag handles in the context "' + contextId + '"') : void 0;
    return null;
  }
  var handle = find(possible, function(el) {
    return el.getAttribute(dragHandle.draggableId) === draggableId;
  });
  if (!handle) {
    true ? warning2('Unable to find drag handle with id "' + draggableId + '" as no handle with a matching id was found') : void 0;
    return null;
  }
  if (!isHtmlElement(handle)) {
    true ? warning2("drag handle needs to be a HTMLElement") : void 0;
    return null;
  }
  return handle;
}
function useFocusMarshal(contextId) {
  var entriesRef = (0, import_react28.useRef)({});
  var recordRef = (0, import_react28.useRef)(null);
  var restoreFocusFrameRef = (0, import_react28.useRef)(null);
  var isMountedRef = (0, import_react28.useRef)(false);
  var register = useCallback36(function register2(id, focus2) {
    var entry = {
      id,
      focus: focus2
    };
    entriesRef.current[id] = entry;
    return function unregister() {
      var entries = entriesRef.current;
      var current = entries[id];
      if (current !== entry) {
        delete entries[id];
      }
    };
  }, []);
  var tryGiveFocus = useCallback36(function tryGiveFocus2(tryGiveFocusTo) {
    var handle = findDragHandle(contextId, tryGiveFocusTo);
    if (handle && handle !== document.activeElement) {
      handle.focus();
    }
  }, [contextId]);
  var tryShiftRecord = useCallback36(function tryShiftRecord2(previous, redirectTo) {
    if (recordRef.current === previous) {
      recordRef.current = redirectTo;
    }
  }, []);
  var tryRestoreFocusRecorded = useCallback36(function tryRestoreFocusRecorded2() {
    if (restoreFocusFrameRef.current) {
      return;
    }
    if (!isMountedRef.current) {
      return;
    }
    restoreFocusFrameRef.current = requestAnimationFrame(function() {
      restoreFocusFrameRef.current = null;
      var record = recordRef.current;
      if (record) {
        tryGiveFocus(record);
      }
    });
  }, [tryGiveFocus]);
  var tryRecordFocus = useCallback36(function tryRecordFocus2(id) {
    recordRef.current = null;
    var focused = document.activeElement;
    if (!focused) {
      return;
    }
    if (focused.getAttribute(dragHandle.draggableId) !== id) {
      return;
    }
    recordRef.current = id;
  }, []);
  useIsomorphicLayoutEffect2(function() {
    isMountedRef.current = true;
    return function clearFrameOnUnmount() {
      isMountedRef.current = false;
      var frameId = restoreFocusFrameRef.current;
      if (frameId) {
        cancelAnimationFrame(frameId);
      }
    };
  }, []);
  var marshal = useMemo20(function() {
    return {
      register,
      tryRecordFocus,
      tryRestoreFocusRecorded,
      tryShiftRecord
    };
  }, [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
  return marshal;
}
function createRegistry() {
  var entries = {
    draggables: {},
    droppables: {}
  };
  var subscribers = [];
  function subscribe(cb) {
    subscribers.push(cb);
    return function unsubscribe() {
      var index3 = subscribers.indexOf(cb);
      if (index3 === -1) {
        return;
      }
      subscribers.splice(index3, 1);
    };
  }
  function notify2(event) {
    if (subscribers.length) {
      subscribers.forEach(function(cb) {
        return cb(event);
      });
    }
  }
  function findDraggableById(id) {
    return entries.draggables[id] || null;
  }
  function getDraggableById(id) {
    var entry = findDraggableById(id);
    !entry ? true ? invariant2(false, "Cannot find draggable entry with id [" + id + "]") : invariant2(false) : void 0;
    return entry;
  }
  var draggableAPI = {
    register: function register(entry) {
      entries.draggables[entry.descriptor.id] = entry;
      notify2({
        type: "ADDITION",
        value: entry
      });
    },
    update: function update2(entry, last) {
      var current = entries.draggables[last.descriptor.id];
      if (!current) {
        return;
      }
      if (current.uniqueId !== entry.uniqueId) {
        return;
      }
      delete entries.draggables[last.descriptor.id];
      entries.draggables[entry.descriptor.id] = entry;
    },
    unregister: function unregister(entry) {
      var draggableId = entry.descriptor.id;
      var current = findDraggableById(draggableId);
      if (!current) {
        return;
      }
      if (entry.uniqueId !== current.uniqueId) {
        return;
      }
      delete entries.draggables[draggableId];
      notify2({
        type: "REMOVAL",
        value: entry
      });
    },
    getById: getDraggableById,
    findById: findDraggableById,
    exists: function exists(id) {
      return Boolean(findDraggableById(id));
    },
    getAllByType: function getAllByType(type) {
      return values2(entries.draggables).filter(function(entry) {
        return entry.descriptor.type === type;
      });
    }
  };
  function findDroppableById(id) {
    return entries.droppables[id] || null;
  }
  function getDroppableById(id) {
    var entry = findDroppableById(id);
    !entry ? true ? invariant2(false, "Cannot find droppable entry with id [" + id + "]") : invariant2(false) : void 0;
    return entry;
  }
  var droppableAPI = {
    register: function register(entry) {
      entries.droppables[entry.descriptor.id] = entry;
    },
    unregister: function unregister(entry) {
      var current = findDroppableById(entry.descriptor.id);
      if (!current) {
        return;
      }
      if (entry.uniqueId !== current.uniqueId) {
        return;
      }
      delete entries.droppables[entry.descriptor.id];
    },
    getById: getDroppableById,
    findById: findDroppableById,
    exists: function exists(id) {
      return Boolean(findDroppableById(id));
    },
    getAllByType: function getAllByType(type) {
      return values2(entries.droppables).filter(function(entry) {
        return entry.descriptor.type === type;
      });
    }
  };
  function clean4() {
    entries.draggables = {};
    entries.droppables = {};
    subscribers.length = 0;
  }
  return {
    draggable: draggableAPI,
    droppable: droppableAPI,
    subscribe,
    clean: clean4
  };
}
function useRegistry() {
  var registry = useMemo20(createRegistry, []);
  (0, import_react28.useEffect)(function() {
    return function unmount() {
      requestAnimationFrame(registry.clean);
    };
  }, [registry]);
  return registry;
}
var StoreContext = import_react28.default.createContext(null);
var getBodyElement = function() {
  var body = document.body;
  !body ? true ? invariant2(false, "Cannot find document.body") : invariant2(false) : void 0;
  return body;
};
var visuallyHidden = {
  position: "absolute",
  width: "1px",
  height: "1px",
  margin: "-1px",
  border: "0",
  padding: "0",
  overflow: "hidden",
  clip: "rect(0 0 0 0)",
  "clip-path": "inset(100%)"
};
var getId = function getId2(contextId) {
  return "rbd-announcement-" + contextId;
};
function useAnnouncer(contextId) {
  var id = useMemo20(function() {
    return getId(contextId);
  }, [contextId]);
  var ref2 = (0, import_react28.useRef)(null);
  (0, import_react28.useEffect)(function setup() {
    var el = document.createElement("div");
    ref2.current = el;
    el.id = id;
    el.setAttribute("aria-live", "assertive");
    el.setAttribute("aria-atomic", "true");
    _extends(el.style, visuallyHidden);
    getBodyElement().appendChild(el);
    return function cleanup2() {
      setTimeout(function remove() {
        var body = getBodyElement();
        if (body.contains(el)) {
          body.removeChild(el);
        }
        if (el === ref2.current) {
          ref2.current = null;
        }
      });
    };
  }, [id]);
  var announce = useCallback36(function(message) {
    var el = ref2.current;
    if (el) {
      el.textContent = message;
      return;
    }
    true ? warning2('\n      A screen reader message was trying to be announced but it was unable to do so.\n      This can occur if you unmount your <DragDropContext /> in your onDragEnd.\n      Consider calling provided.announce() before the unmount so that the instruction will\n      not be lost for users relying on a screen reader.\n\n      Message not passed to screen reader:\n\n      "' + message + '"\n    ') : void 0;
  }, []);
  return announce;
}
var count2 = 0;
var defaults = {
  separator: "::"
};
function useUniqueId(prefix2, options) {
  if (options === void 0) {
    options = defaults;
  }
  return useMemo20(function() {
    return "" + prefix2 + options.separator + count2++;
  }, [options.separator, prefix2]);
}
function getElementId(_ref) {
  var contextId = _ref.contextId, uniqueId = _ref.uniqueId;
  return "rbd-hidden-text-" + contextId + "-" + uniqueId;
}
function useHiddenTextElement(_ref2) {
  var contextId = _ref2.contextId, text2 = _ref2.text;
  var uniqueId = useUniqueId("hidden-text", {
    separator: "-"
  });
  var id = useMemo20(function() {
    return getElementId({
      contextId,
      uniqueId
    });
  }, [uniqueId, contextId]);
  (0, import_react28.useEffect)(function mount() {
    var el = document.createElement("div");
    el.id = id;
    el.textContent = text2;
    el.style.display = "none";
    getBodyElement().appendChild(el);
    return function unmount() {
      var body = getBodyElement();
      if (body.contains(el)) {
        body.removeChild(el);
      }
    };
  }, [id, text2]);
  return id;
}
var AppContext = import_react28.default.createContext(null);
var peerDependencies = {
  react: "^16.8.5 || ^17.0.0 || ^18.0.0",
  "react-dom": "^16.8.5 || ^17.0.0 || ^18.0.0"
};
var semver = /(\d+)\.(\d+)\.(\d+)/;
var getVersion = function getVersion2(value) {
  var result = semver.exec(value);
  !(result != null) ? true ? invariant2(false, "Unable to parse React version " + value) : invariant2(false) : void 0;
  var major = Number(result[1]);
  var minor = Number(result[2]);
  var patch3 = Number(result[3]);
  return {
    major,
    minor,
    patch: patch3,
    raw: value
  };
};
var isSatisfied = function isSatisfied2(expected, actual) {
  if (actual.major > expected.major) {
    return true;
  }
  if (actual.major < expected.major) {
    return false;
  }
  if (actual.minor > expected.minor) {
    return true;
  }
  if (actual.minor < expected.minor) {
    return false;
  }
  return actual.patch >= expected.patch;
};
var checkReactVersion = function(peerDepValue, actualValue) {
  var peerDep = getVersion(peerDepValue);
  var actual = getVersion(actualValue);
  if (isSatisfied(peerDep, actual)) {
    return;
  }
  true ? warning2("\n    React version: [" + actual.raw + "]\n    does not satisfy expected peer dependency version: [" + peerDep.raw + "]\n\n    This can result in run time bugs, and even fatal crashes\n  ") : void 0;
};
var suffix = "\n  We expect a html5 doctype: <!doctype html>\n  This is to ensure consistent browser layout and measurement\n\n  More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/doctype.md\n";
var checkDoctype = function(doc) {
  var doctype = doc.doctype;
  if (!doctype) {
    true ? warning2("\n      No <!doctype html> found.\n\n      " + suffix + "\n    ") : void 0;
    return;
  }
  if (doctype.name.toLowerCase() !== "html") {
    true ? warning2("\n      Unexpected <!doctype> found: (" + doctype.name + ")\n\n      " + suffix + "\n    ") : void 0;
  }
  if (doctype.publicId !== "") {
    true ? warning2("\n      Unexpected <!doctype> publicId found: (" + doctype.publicId + ")\n      A html5 doctype does not have a publicId\n\n      " + suffix + "\n    ") : void 0;
  }
};
function useDev(useHook) {
  if (true) {
    useHook();
  }
}
function useDevSetupWarning(fn, inputs) {
  useDev(function() {
    (0, import_react28.useEffect)(function() {
      try {
        fn();
      } catch (e) {
        error2("\n          A setup problem was encountered.\n\n          > " + e.message + "\n        ");
      }
    }, inputs);
  });
}
function useStartupValidation() {
  useDevSetupWarning(function() {
    checkReactVersion(peerDependencies.react, import_react28.default.version);
    checkDoctype(document);
  }, []);
}
function usePrevious2(current) {
  var ref2 = (0, import_react28.useRef)(current);
  (0, import_react28.useEffect)(function() {
    ref2.current = current;
  });
  return ref2;
}
function create() {
  var lock = null;
  function isClaimed() {
    return Boolean(lock);
  }
  function isActive(value) {
    return value === lock;
  }
  function claim(abandon) {
    !!lock ? true ? invariant2(false, "Cannot claim lock as it is already claimed") : invariant2(false) : void 0;
    var newLock = {
      abandon
    };
    lock = newLock;
    return newLock;
  }
  function release() {
    !lock ? true ? invariant2(false, "Cannot release lock when there is no lock") : invariant2(false) : void 0;
    lock = null;
  }
  function tryAbandon() {
    if (lock) {
      lock.abandon();
      release();
    }
  }
  return {
    isClaimed,
    isActive,
    claim,
    release,
    tryAbandon
  };
}
var tab = 9;
var enter = 13;
var escape = 27;
var space = 32;
var pageUp = 33;
var pageDown = 34;
var end = 35;
var home = 36;
var arrowLeft = 37;
var arrowUp = 38;
var arrowRight = 39;
var arrowDown = 40;
var _preventedKeys;
var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
var preventStandardKeyEvents = function(event) {
  if (preventedKeys[event.keyCode]) {
    event.preventDefault();
  }
};
var supportedEventName = function() {
  var base = "visibilitychange";
  if (typeof document === "undefined") {
    return base;
  }
  var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
  var supported = find(candidates, function(eventName) {
    return "on" + eventName in document;
  });
  return supported || base;
}();
var primaryButton = 0;
var sloppyClickThreshold = 5;
function isSloppyClickThresholdExceeded(original, current) {
  return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
}
var idle$1 = {
  type: "IDLE"
};
function getCaptureBindings(_ref) {
  var cancel = _ref.cancel, completed = _ref.completed, getPhase = _ref.getPhase, setPhase = _ref.setPhase;
  return [{
    eventName: "mousemove",
    fn: function fn(event) {
      var button = event.button, clientX = event.clientX, clientY = event.clientY;
      if (button !== primaryButton) {
        return;
      }
      var point = {
        x: clientX,
        y: clientY
      };
      var phase = getPhase();
      if (phase.type === "DRAGGING") {
        event.preventDefault();
        phase.actions.move(point);
        return;
      }
      !(phase.type === "PENDING") ? true ? invariant2(false, "Cannot be IDLE") : invariant2(false) : void 0;
      var pending = phase.point;
      if (!isSloppyClickThresholdExceeded(pending, point)) {
        return;
      }
      event.preventDefault();
      var actions = phase.actions.fluidLift(point);
      setPhase({
        type: "DRAGGING",
        actions
      });
    }
  }, {
    eventName: "mouseup",
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      phase.actions.drop({
        shouldBlockNextClick: true
      });
      completed();
    }
  }, {
    eventName: "mousedown",
    fn: function fn(event) {
      if (getPhase().type === "DRAGGING") {
        event.preventDefault();
      }
      cancel();
    }
  }, {
    eventName: "keydown",
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type === "PENDING") {
        cancel();
        return;
      }
      if (event.keyCode === escape) {
        event.preventDefault();
        cancel();
        return;
      }
      preventStandardKeyEvents(event);
    }
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "scroll",
    options: {
      passive: true,
      capture: false
    },
    fn: function fn() {
      if (getPhase().type === "PENDING") {
        cancel();
      }
    }
  }, {
    eventName: "webkitmouseforcedown",
    fn: function fn(event) {
      var phase = getPhase();
      !(phase.type !== "IDLE") ? true ? invariant2(false, "Unexpected phase") : invariant2(false) : void 0;
      if (phase.actions.shouldRespectForcePress()) {
        cancel();
        return;
      }
      event.preventDefault();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useMouseSensor(api) {
  var phaseRef = (0, import_react28.useRef)(idle$1);
  var unbindEventsRef = (0, import_react28.useRef)(noop6);
  var startCaptureBinding = useMemo20(function() {
    return {
      eventName: "mousedown",
      fn: function onMouseDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.button !== primaryButton) {
          return;
        }
        if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        event.preventDefault();
        var point = {
          x: event.clientX,
          y: event.clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    };
  }, [api]);
  var preventForcePressBinding = useMemo20(function() {
    return {
      eventName: "webkitmouseforcewillbegin",
      fn: function fn(event) {
        if (event.defaultPrevented) {
          return;
        }
        var id = api.findClosestDraggableId(event);
        if (!id) {
          return;
        }
        var options = api.findOptionsForDraggable(id);
        if (!options) {
          return;
        }
        if (options.shouldRespectForcePress) {
          return;
        }
        if (!api.canGetLock(id)) {
          return;
        }
        event.preventDefault();
      }
    };
  }, [api]);
  var listenForCapture = useCallback36(function listenForCapture2() {
    var options = {
      passive: false,
      capture: true
    };
    unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
  }, [preventForcePressBinding, startCaptureBinding]);
  var stop = useCallback36(function() {
    var current = phaseRef.current;
    if (current.type === "IDLE") {
      return;
    }
    phaseRef.current = idle$1;
    unbindEventsRef.current();
    listenForCapture();
  }, [listenForCapture]);
  var cancel = useCallback36(function() {
    var phase = phaseRef.current;
    stop();
    if (phase.type === "DRAGGING") {
      phase.actions.cancel({
        shouldBlockNextClick: true
      });
    }
    if (phase.type === "PENDING") {
      phase.actions.abort();
    }
  }, [stop]);
  var bindCapturingEvents = useCallback36(function bindCapturingEvents2() {
    var options = {
      capture: true,
      passive: false
    };
    var bindings = getCaptureBindings({
      cancel,
      completed: stop,
      getPhase: function getPhase() {
        return phaseRef.current;
      },
      setPhase: function setPhase(phase) {
        phaseRef.current = phase;
      }
    });
    unbindEventsRef.current = bindEvents(window, bindings, options);
  }, [cancel, stop]);
  var startPendingDrag = useCallback36(function startPendingDrag2(actions, point) {
    !(phaseRef.current.type === "IDLE") ? true ? invariant2(false, "Expected to move from IDLE to PENDING drag") : invariant2(false) : void 0;
    phaseRef.current = {
      type: "PENDING",
      point,
      actions
    };
    bindCapturingEvents();
  }, [bindCapturingEvents]);
  useIsomorphicLayoutEffect2(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
    };
  }, [listenForCapture]);
}
var _scrollJumpKeys;
function noop$1() {
}
var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end] = true, _scrollJumpKeys);
function getDraggingBindings(actions, stop) {
  function cancel() {
    stop();
    actions.cancel();
  }
  function drop5() {
    stop();
    actions.drop();
  }
  return [{
    eventName: "keydown",
    fn: function fn(event) {
      if (event.keyCode === escape) {
        event.preventDefault();
        cancel();
        return;
      }
      if (event.keyCode === space) {
        event.preventDefault();
        drop5();
        return;
      }
      if (event.keyCode === arrowDown) {
        event.preventDefault();
        actions.moveDown();
        return;
      }
      if (event.keyCode === arrowUp) {
        event.preventDefault();
        actions.moveUp();
        return;
      }
      if (event.keyCode === arrowRight) {
        event.preventDefault();
        actions.moveRight();
        return;
      }
      if (event.keyCode === arrowLeft) {
        event.preventDefault();
        actions.moveLeft();
        return;
      }
      if (scrollJumpKeys[event.keyCode]) {
        event.preventDefault();
        return;
      }
      preventStandardKeyEvents(event);
    }
  }, {
    eventName: "mousedown",
    fn: cancel
  }, {
    eventName: "mouseup",
    fn: cancel
  }, {
    eventName: "click",
    fn: cancel
  }, {
    eventName: "touchstart",
    fn: cancel
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "wheel",
    fn: cancel,
    options: {
      passive: true
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useKeyboardSensor(api) {
  var unbindEventsRef = (0, import_react28.useRef)(noop$1);
  var startCaptureBinding = useMemo20(function() {
    return {
      eventName: "keydown",
      fn: function onKeyDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.keyCode !== space) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var preDrag = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!preDrag) {
          return;
        }
        event.preventDefault();
        var isCapturing = true;
        var actions = preDrag.snapLift();
        unbindEventsRef.current();
        function stop() {
          !isCapturing ? true ? invariant2(false, "Cannot stop capturing a keyboard drag when not capturing") : invariant2(false) : void 0;
          isCapturing = false;
          unbindEventsRef.current();
          listenForCapture();
        }
        unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
          capture: true,
          passive: false
        });
      }
    };
  }, [api]);
  var listenForCapture = useCallback36(function tryStartCapture() {
    var options = {
      passive: false,
      capture: true
    };
    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
  }, [startCaptureBinding]);
  useIsomorphicLayoutEffect2(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
    };
  }, [listenForCapture]);
}
var idle$2 = {
  type: "IDLE"
};
var timeForLongPress = 120;
var forcePressThreshold = 0.15;
function getWindowBindings(_ref) {
  var cancel = _ref.cancel, getPhase = _ref.getPhase;
  return [{
    eventName: "orientationchange",
    fn: cancel
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "contextmenu",
    fn: function fn(event) {
      event.preventDefault();
    }
  }, {
    eventName: "keydown",
    fn: function fn(event) {
      if (getPhase().type !== "DRAGGING") {
        cancel();
        return;
      }
      if (event.keyCode === escape) {
        event.preventDefault();
      }
      cancel();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function getHandleBindings(_ref2) {
  var cancel = _ref2.cancel, completed = _ref2.completed, getPhase = _ref2.getPhase;
  return [{
    eventName: "touchmove",
    options: {
      capture: false
    },
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      phase.hasMoved = true;
      var _event$touches$ = event.touches[0], clientX = _event$touches$.clientX, clientY = _event$touches$.clientY;
      var point = {
        x: clientX,
        y: clientY
      };
      event.preventDefault();
      phase.actions.move(point);
    }
  }, {
    eventName: "touchend",
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      phase.actions.drop({
        shouldBlockNextClick: true
      });
      completed();
    }
  }, {
    eventName: "touchcancel",
    fn: function fn(event) {
      if (getPhase().type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      cancel();
    }
  }, {
    eventName: "touchforcechange",
    fn: function fn(event) {
      var phase = getPhase();
      !(phase.type !== "IDLE") ? true ? invariant2(false) : invariant2(false) : void 0;
      var touch = event.touches[0];
      if (!touch) {
        return;
      }
      var isForcePress = touch.force >= forcePressThreshold;
      if (!isForcePress) {
        return;
      }
      var shouldRespect = phase.actions.shouldRespectForcePress();
      if (phase.type === "PENDING") {
        if (shouldRespect) {
          cancel();
        }
        return;
      }
      if (shouldRespect) {
        if (phase.hasMoved) {
          event.preventDefault();
          return;
        }
        cancel();
        return;
      }
      event.preventDefault();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useTouchSensor(api) {
  var phaseRef = (0, import_react28.useRef)(idle$2);
  var unbindEventsRef = (0, import_react28.useRef)(noop6);
  var getPhase = useCallback36(function getPhase2() {
    return phaseRef.current;
  }, []);
  var setPhase = useCallback36(function setPhase2(phase) {
    phaseRef.current = phase;
  }, []);
  var startCaptureBinding = useMemo20(function() {
    return {
      eventName: "touchstart",
      fn: function onTouchStart(event) {
        if (event.defaultPrevented) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        var touch = event.touches[0];
        var clientX = touch.clientX, clientY = touch.clientY;
        var point = {
          x: clientX,
          y: clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    };
  }, [api]);
  var listenForCapture = useCallback36(function listenForCapture2() {
    var options = {
      capture: true,
      passive: false
    };
    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
  }, [startCaptureBinding]);
  var stop = useCallback36(function() {
    var current = phaseRef.current;
    if (current.type === "IDLE") {
      return;
    }
    if (current.type === "PENDING") {
      clearTimeout(current.longPressTimerId);
    }
    setPhase(idle$2);
    unbindEventsRef.current();
    listenForCapture();
  }, [listenForCapture, setPhase]);
  var cancel = useCallback36(function() {
    var phase = phaseRef.current;
    stop();
    if (phase.type === "DRAGGING") {
      phase.actions.cancel({
        shouldBlockNextClick: true
      });
    }
    if (phase.type === "PENDING") {
      phase.actions.abort();
    }
  }, [stop]);
  var bindCapturingEvents = useCallback36(function bindCapturingEvents2() {
    var options = {
      capture: true,
      passive: false
    };
    var args = {
      cancel,
      completed: stop,
      getPhase
    };
    var unbindTarget = bindEvents(window, getHandleBindings(args), options);
    var unbindWindow = bindEvents(window, getWindowBindings(args), options);
    unbindEventsRef.current = function unbindAll() {
      unbindTarget();
      unbindWindow();
    };
  }, [cancel, getPhase, stop]);
  var startDragging = useCallback36(function startDragging2() {
    var phase = getPhase();
    !(phase.type === "PENDING") ? true ? invariant2(false, "Cannot start dragging from phase " + phase.type) : invariant2(false) : void 0;
    var actions = phase.actions.fluidLift(phase.point);
    setPhase({
      type: "DRAGGING",
      actions,
      hasMoved: false
    });
  }, [getPhase, setPhase]);
  var startPendingDrag = useCallback36(function startPendingDrag2(actions, point) {
    !(getPhase().type === "IDLE") ? true ? invariant2(false, "Expected to move from IDLE to PENDING drag") : invariant2(false) : void 0;
    var longPressTimerId = setTimeout(startDragging, timeForLongPress);
    setPhase({
      type: "PENDING",
      point,
      actions,
      longPressTimerId
    });
    bindCapturingEvents();
  }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
  useIsomorphicLayoutEffect2(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
      var phase = getPhase();
      if (phase.type === "PENDING") {
        clearTimeout(phase.longPressTimerId);
        setPhase(idle$2);
      }
    };
  }, [getPhase, listenForCapture, setPhase]);
  useIsomorphicLayoutEffect2(function webkitHack() {
    var unbind = bindEvents(window, [{
      eventName: "touchmove",
      fn: function fn() {
      },
      options: {
        capture: false,
        passive: false
      }
    }]);
    return unbind;
  }, []);
}
function useValidateSensorHooks(sensorHooks) {
  useDev(function() {
    var previousRef = usePrevious2(sensorHooks);
    useDevSetupWarning(function() {
      !(previousRef.current.length === sensorHooks.length) ? true ? invariant2(false, "Cannot change the amount of sensor hooks after mounting") : invariant2(false) : void 0;
    });
  });
}
var interactiveTagNames = {
  input: true,
  button: true,
  textarea: true,
  select: true,
  option: true,
  optgroup: true,
  video: true,
  audio: true
};
function isAnInteractiveElement(parent, current) {
  if (current == null) {
    return false;
  }
  var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);
  if (hasAnInteractiveTag) {
    return true;
  }
  var attribute = current.getAttribute("contenteditable");
  if (attribute === "true" || attribute === "") {
    return true;
  }
  if (current === parent) {
    return false;
  }
  return isAnInteractiveElement(parent, current.parentElement);
}
function isEventInInteractiveElement(draggable2, event) {
  var target = event.target;
  if (!isHtmlElement(target)) {
    return false;
  }
  return isAnInteractiveElement(draggable2, target);
}
var getBorderBoxCenterPosition = function(el) {
  return getRect(el.getBoundingClientRect()).center;
};
function isElement2(el) {
  return el instanceof getWindowFromEl(el).Element;
}
var supportedMatchesName = function() {
  var base = "matches";
  if (typeof document === "undefined") {
    return base;
  }
  var candidates = [base, "msMatchesSelector", "webkitMatchesSelector"];
  var value = find(candidates, function(name) {
    return name in Element.prototype;
  });
  return value || base;
}();
function closestPonyfill(el, selector) {
  if (el == null) {
    return null;
  }
  if (el[supportedMatchesName](selector)) {
    return el;
  }
  return closestPonyfill(el.parentElement, selector);
}
function closest$1(el, selector) {
  if (el.closest) {
    return el.closest(selector);
  }
  return closestPonyfill(el, selector);
}
function getSelector(contextId) {
  return "[" + dragHandle.contextId + '="' + contextId + '"]';
}
function findClosestDragHandleFromEvent(contextId, event) {
  var target = event.target;
  if (!isElement2(target)) {
    true ? warning2("event.target must be a Element") : void 0;
    return null;
  }
  var selector = getSelector(contextId);
  var handle = closest$1(target, selector);
  if (!handle) {
    return null;
  }
  if (!isHtmlElement(handle)) {
    true ? warning2("drag handle must be a HTMLElement") : void 0;
    return null;
  }
  return handle;
}
function tryGetClosestDraggableIdFromEvent(contextId, event) {
  var handle = findClosestDragHandleFromEvent(contextId, event);
  if (!handle) {
    return null;
  }
  return handle.getAttribute(dragHandle.draggableId);
}
function findDraggable(contextId, draggableId) {
  var selector = "[" + draggable.contextId + '="' + contextId + '"]';
  var possible = toArray(document.querySelectorAll(selector));
  var draggable$1 = find(possible, function(el) {
    return el.getAttribute(draggable.id) === draggableId;
  });
  if (!draggable$1) {
    return null;
  }
  if (!isHtmlElement(draggable$1)) {
    true ? warning2("Draggable element is not a HTMLElement") : void 0;
    return null;
  }
  return draggable$1;
}
function preventDefault(event) {
  event.preventDefault();
}
function _isActive(_ref) {
  var expected = _ref.expected, phase = _ref.phase, isLockActive = _ref.isLockActive, shouldWarn = _ref.shouldWarn;
  if (!isLockActive()) {
    if (shouldWarn) {
      true ? warning2("\n        Cannot perform action.\n        The sensor no longer has an action lock.\n\n        Tips:\n\n        - Throw away your action handlers when forceStop() is called\n        - Check actions.isActive() if you really need to\n      ") : void 0;
    }
    return false;
  }
  if (expected !== phase) {
    if (shouldWarn) {
      true ? warning2("\n        Cannot perform action.\n        The actions you used belong to an outdated phase\n\n        Current phase: " + expected + "\n        You called an action from outdated phase: " + phase + "\n\n        Tips:\n\n        - Do not use preDragActions actions after calling preDragActions.lift()\n      ") : void 0;
    }
    return false;
  }
  return true;
}
function canStart(_ref2) {
  var lockAPI = _ref2.lockAPI, store = _ref2.store, registry = _ref2.registry, draggableId = _ref2.draggableId;
  if (lockAPI.isClaimed()) {
    return false;
  }
  var entry = registry.draggable.findById(draggableId);
  if (!entry) {
    true ? warning2("Unable to find draggable with id: " + draggableId) : void 0;
    return false;
  }
  if (!entry.options.isEnabled) {
    return false;
  }
  if (!canStartDrag(store.getState(), draggableId)) {
    return false;
  }
  return true;
}
function tryStart(_ref3) {
  var lockAPI = _ref3.lockAPI, contextId = _ref3.contextId, store = _ref3.store, registry = _ref3.registry, draggableId = _ref3.draggableId, forceSensorStop = _ref3.forceSensorStop, sourceEvent = _ref3.sourceEvent;
  var shouldStart = canStart({
    lockAPI,
    store,
    registry,
    draggableId
  });
  if (!shouldStart) {
    return null;
  }
  var entry = registry.draggable.getById(draggableId);
  var el = findDraggable(contextId, entry.descriptor.id);
  if (!el) {
    true ? warning2("Unable to find draggable element with id: " + draggableId) : void 0;
    return null;
  }
  if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
    return null;
  }
  var lock = lockAPI.claim(forceSensorStop || noop6);
  var phase = "PRE_DRAG";
  function getShouldRespectForcePress() {
    return entry.options.shouldRespectForcePress;
  }
  function isLockActive() {
    return lockAPI.isActive(lock);
  }
  function tryDispatch(expected, getAction) {
    if (_isActive({
      expected,
      phase,
      isLockActive,
      shouldWarn: true
    })) {
      store.dispatch(getAction());
    }
  }
  var tryDispatchWhenDragging = tryDispatch.bind(null, "DRAGGING");
  function lift$12(args) {
    function completed() {
      lockAPI.release();
      phase = "COMPLETED";
    }
    if (phase !== "PRE_DRAG") {
      completed();
      !(phase === "PRE_DRAG") ? true ? invariant2(false, "Cannot lift in phase " + phase) : invariant2(false) : void 0;
    }
    store.dispatch(lift(args.liftActionArgs));
    phase = "DRAGGING";
    function finish3(reason, options) {
      if (options === void 0) {
        options = {
          shouldBlockNextClick: false
        };
      }
      args.cleanup();
      if (options.shouldBlockNextClick) {
        var unbind = bindEvents(window, [{
          eventName: "click",
          fn: preventDefault,
          options: {
            once: true,
            passive: false,
            capture: true
          }
        }]);
        setTimeout(unbind);
      }
      completed();
      store.dispatch(drop({
        reason
      }));
    }
    return _extends({
      isActive: function isActive() {
        return _isActive({
          expected: "DRAGGING",
          phase,
          isLockActive,
          shouldWarn: false
        });
      },
      shouldRespectForcePress: getShouldRespectForcePress,
      drop: function drop5(options) {
        return finish3("DROP", options);
      },
      cancel: function cancel(options) {
        return finish3("CANCEL", options);
      }
    }, args.actions);
  }
  function fluidLift(clientSelection) {
    var move$1 = raf_schd_esm_default(function(client) {
      tryDispatchWhenDragging(function() {
        return move({
          client
        });
      });
    });
    var api = lift$12({
      liftActionArgs: {
        id: draggableId,
        clientSelection,
        movementMode: "FLUID"
      },
      cleanup: function cleanup2() {
        return move$1.cancel();
      },
      actions: {
        move: move$1
      }
    });
    return _extends({}, api, {
      move: move$1
    });
  }
  function snapLift() {
    var actions = {
      moveUp: function moveUp$1() {
        return tryDispatchWhenDragging(moveUp);
      },
      moveRight: function moveRight$1() {
        return tryDispatchWhenDragging(moveRight);
      },
      moveDown: function moveDown$1() {
        return tryDispatchWhenDragging(moveDown);
      },
      moveLeft: function moveLeft$1() {
        return tryDispatchWhenDragging(moveLeft);
      }
    };
    return lift$12({
      liftActionArgs: {
        id: draggableId,
        clientSelection: getBorderBoxCenterPosition(el),
        movementMode: "SNAP"
      },
      cleanup: noop6,
      actions
    });
  }
  function abortPreDrag() {
    var shouldRelease = _isActive({
      expected: "PRE_DRAG",
      phase,
      isLockActive,
      shouldWarn: true
    });
    if (shouldRelease) {
      lockAPI.release();
    }
  }
  var preDrag = {
    isActive: function isActive() {
      return _isActive({
        expected: "PRE_DRAG",
        phase,
        isLockActive,
        shouldWarn: false
      });
    },
    shouldRespectForcePress: getShouldRespectForcePress,
    fluidLift,
    snapLift,
    abort: abortPreDrag
  };
  return preDrag;
}
var defaultSensors = [useMouseSensor, useKeyboardSensor, useTouchSensor];
function useSensorMarshal(_ref4) {
  var contextId = _ref4.contextId, store = _ref4.store, registry = _ref4.registry, customSensors = _ref4.customSensors, enableDefaultSensors = _ref4.enableDefaultSensors;
  var useSensors = [].concat(enableDefaultSensors ? defaultSensors : [], customSensors || []);
  var lockAPI = (0, import_react28.useState)(function() {
    return create();
  })[0];
  var tryAbandonLock = useCallback36(function tryAbandonLock2(previous, current) {
    if (previous.isDragging && !current.isDragging) {
      lockAPI.tryAbandon();
    }
  }, [lockAPI]);
  useIsomorphicLayoutEffect2(function listenToStore() {
    var previous = store.getState();
    var unsubscribe = store.subscribe(function() {
      var current = store.getState();
      tryAbandonLock(previous, current);
      previous = current;
    });
    return unsubscribe;
  }, [lockAPI, store, tryAbandonLock]);
  useIsomorphicLayoutEffect2(function() {
    return lockAPI.tryAbandon;
  }, [lockAPI.tryAbandon]);
  var canGetLock = useCallback36(function(draggableId) {
    return canStart({
      lockAPI,
      registry,
      store,
      draggableId
    });
  }, [lockAPI, registry, store]);
  var tryGetLock = useCallback36(function(draggableId, forceStop, options) {
    return tryStart({
      lockAPI,
      registry,
      contextId,
      store,
      draggableId,
      forceSensorStop: forceStop,
      sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
    });
  }, [contextId, lockAPI, registry, store]);
  var findClosestDraggableId = useCallback36(function(event) {
    return tryGetClosestDraggableIdFromEvent(contextId, event);
  }, [contextId]);
  var findOptionsForDraggable = useCallback36(function(id) {
    var entry = registry.draggable.findById(id);
    return entry ? entry.options : null;
  }, [registry.draggable]);
  var tryReleaseLock = useCallback36(function tryReleaseLock2() {
    if (!lockAPI.isClaimed()) {
      return;
    }
    lockAPI.tryAbandon();
    if (store.getState().phase !== "IDLE") {
      store.dispatch(flush());
    }
  }, [lockAPI, store]);
  var isLockClaimed = useCallback36(lockAPI.isClaimed, [lockAPI]);
  var api = useMemo20(function() {
    return {
      canGetLock,
      tryGetLock,
      findClosestDraggableId,
      findOptionsForDraggable,
      tryReleaseLock,
      isLockClaimed
    };
  }, [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);
  useValidateSensorHooks(useSensors);
  for (var i = 0; i < useSensors.length; i++) {
    useSensors[i](api);
  }
}
var createResponders = function createResponders2(props) {
  return {
    onBeforeCapture: props.onBeforeCapture,
    onBeforeDragStart: props.onBeforeDragStart,
    onDragStart: props.onDragStart,
    onDragEnd: props.onDragEnd,
    onDragUpdate: props.onDragUpdate
  };
};
function getStore(lazyRef) {
  !lazyRef.current ? true ? invariant2(false, "Could not find store from lazy ref") : invariant2(false) : void 0;
  return lazyRef.current;
}
function App(props) {
  var contextId = props.contextId, setCallbacks = props.setCallbacks, sensors = props.sensors, nonce = props.nonce, dragHandleUsageInstructions2 = props.dragHandleUsageInstructions;
  var lazyStoreRef = (0, import_react28.useRef)(null);
  useStartupValidation();
  var lastPropsRef = usePrevious2(props);
  var getResponders = useCallback36(function() {
    return createResponders(lastPropsRef.current);
  }, [lastPropsRef]);
  var announce = useAnnouncer(contextId);
  var dragHandleUsageInstructionsId = useHiddenTextElement({
    contextId,
    text: dragHandleUsageInstructions2
  });
  var styleMarshal = useStyleMarshal(contextId, nonce);
  var lazyDispatch = useCallback36(function(action) {
    getStore(lazyStoreRef).dispatch(action);
  }, []);
  var marshalCallbacks = useMemo20(function() {
    return bindActionCreators({
      publishWhileDragging,
      updateDroppableScroll,
      updateDroppableIsEnabled,
      updateDroppableIsCombineEnabled,
      collectionStarting
    }, lazyDispatch);
  }, [lazyDispatch]);
  var registry = useRegistry();
  var dimensionMarshal = useMemo20(function() {
    return createDimensionMarshal(registry, marshalCallbacks);
  }, [registry, marshalCallbacks]);
  var autoScroller = useMemo20(function() {
    return createAutoScroller(_extends({
      scrollWindow,
      scrollDroppable: dimensionMarshal.scrollDroppable
    }, bindActionCreators({
      move
    }, lazyDispatch)));
  }, [dimensionMarshal.scrollDroppable, lazyDispatch]);
  var focusMarshal = useFocusMarshal(contextId);
  var store = useMemo20(function() {
    return createStore2({
      announce,
      autoScroller,
      dimensionMarshal,
      focusMarshal,
      getResponders,
      styleMarshal
    });
  }, [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);
  if (true) {
    if (lazyStoreRef.current && lazyStoreRef.current !== store) {
      true ? warning2("unexpected store change") : void 0;
    }
  }
  lazyStoreRef.current = store;
  var tryResetStore = useCallback36(function() {
    var current = getStore(lazyStoreRef);
    var state = current.getState();
    if (state.phase !== "IDLE") {
      current.dispatch(flush());
    }
  }, []);
  var isDragging = useCallback36(function() {
    var state = getStore(lazyStoreRef).getState();
    return state.isDragging || state.phase === "DROP_ANIMATING";
  }, []);
  var appCallbacks = useMemo20(function() {
    return {
      isDragging,
      tryAbort: tryResetStore
    };
  }, [isDragging, tryResetStore]);
  setCallbacks(appCallbacks);
  var getCanLift = useCallback36(function(id) {
    return canStartDrag(getStore(lazyStoreRef).getState(), id);
  }, []);
  var getIsMovementAllowed = useCallback36(function() {
    return isMovementAllowed(getStore(lazyStoreRef).getState());
  }, []);
  var appContext = useMemo20(function() {
    return {
      marshal: dimensionMarshal,
      focus: focusMarshal,
      contextId,
      canLift: getCanLift,
      isMovementAllowed: getIsMovementAllowed,
      dragHandleUsageInstructionsId,
      registry
    };
  }, [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
  useSensorMarshal({
    contextId,
    store,
    registry,
    customSensors: sensors,
    enableDefaultSensors: props.enableDefaultSensors !== false
  });
  (0, import_react28.useEffect)(function() {
    return tryResetStore;
  }, [tryResetStore]);
  return import_react28.default.createElement(AppContext.Provider, {
    value: appContext
  }, import_react28.default.createElement(Provider_default, {
    context: StoreContext,
    store
  }, props.children));
}
var count$1 = 0;
function useInstanceCount() {
  return useMemo20(function() {
    return "" + count$1++;
  }, []);
}
function DragDropContext(props) {
  var contextId = useInstanceCount();
  var dragHandleUsageInstructions2 = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;
  return import_react28.default.createElement(ErrorBoundary, null, function(setCallbacks) {
    return import_react28.default.createElement(App, {
      nonce: props.nonce,
      contextId,
      setCallbacks,
      dragHandleUsageInstructions: dragHandleUsageInstructions2,
      enableDefaultSensors: props.enableDefaultSensors,
      sensors: props.sensors,
      onBeforeCapture: props.onBeforeCapture,
      onBeforeDragStart: props.onBeforeDragStart,
      onDragStart: props.onDragStart,
      onDragUpdate: props.onDragUpdate,
      onDragEnd: props.onDragEnd
    }, props.children);
  });
}
var isEqual$1 = function isEqual4(base) {
  return function(value) {
    return base === value;
  };
};
var isScroll = isEqual$1("scroll");
var isAuto = isEqual$1("auto");
var isVisible$1 = isEqual$1("visible");
var isEither = function isEither2(overflow, fn) {
  return fn(overflow.overflowX) || fn(overflow.overflowY);
};
var isBoth = function isBoth2(overflow, fn) {
  return fn(overflow.overflowX) && fn(overflow.overflowY);
};
var isElementScrollable = function isElementScrollable2(el) {
  var style3 = window.getComputedStyle(el);
  var overflow = {
    overflowX: style3.overflowX,
    overflowY: style3.overflowY
  };
  return isEither(overflow, isScroll) || isEither(overflow, isAuto);
};
var isBodyScrollable = function isBodyScrollable2() {
  if (false) {
    return false;
  }
  var body = getBodyElement();
  var html = document.documentElement;
  !html ? true ? invariant2(false) : invariant2(false) : void 0;
  if (!isElementScrollable(body)) {
    return false;
  }
  var htmlStyle = window.getComputedStyle(html);
  var htmlOverflow = {
    overflowX: htmlStyle.overflowX,
    overflowY: htmlStyle.overflowY
  };
  if (isBoth(htmlOverflow, isVisible$1)) {
    return false;
  }
  true ? warning2("\n    We have detected that your <body> element might be a scroll container.\n    We have found no reliable way of detecting whether the <body> element is a scroll container.\n    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)\n\n    Because we cannot determine if the <body> is a scroll container, and generally it is not one,\n    we will be treating the <body> as *not* a scroll container\n\n    More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/how-we-detect-scroll-containers.md\n  ") : void 0;
  return false;
};
var getClosestScrollable = function getClosestScrollable2(el) {
  if (el == null) {
    return null;
  }
  if (el === document.body) {
    return isBodyScrollable() ? el : null;
  }
  if (el === document.documentElement) {
    return null;
  }
  if (!isElementScrollable(el)) {
    return getClosestScrollable2(el.parentElement);
  }
  return el;
};
var checkForNestedScrollContainers = function(scrollable) {
  if (!scrollable) {
    return;
  }
  var anotherScrollParent = getClosestScrollable(scrollable.parentElement);
  if (!anotherScrollParent) {
    return;
  }
  true ? warning2("\n    Droppable: unsupported nested scroll container detected.\n    A Droppable can only have one scroll parent (which can be itself)\n    Nested scroll containers are currently not supported.\n\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\n  ") : void 0;
};
var getScroll$1 = function(el) {
  return {
    x: el.scrollLeft,
    y: el.scrollTop
  };
};
var getIsFixed = function getIsFixed2(el) {
  if (!el) {
    return false;
  }
  var style3 = window.getComputedStyle(el);
  if (style3.position === "fixed") {
    return true;
  }
  return getIsFixed2(el.parentElement);
};
var getEnv = function(start3) {
  var closestScrollable = getClosestScrollable(start3);
  var isFixedOnPage = getIsFixed(start3);
  return {
    closestScrollable,
    isFixedOnPage
  };
};
var getDroppableDimension = function(_ref) {
  var descriptor = _ref.descriptor, isEnabled = _ref.isEnabled, isCombineEnabled = _ref.isCombineEnabled, isFixedOnPage = _ref.isFixedOnPage, direction = _ref.direction, client = _ref.client, page = _ref.page, closest3 = _ref.closest;
  var frame = function() {
    if (!closest3) {
      return null;
    }
    var scrollSize = closest3.scrollSize, frameClient = closest3.client;
    var maxScroll = getMaxScroll({
      scrollHeight: scrollSize.scrollHeight,
      scrollWidth: scrollSize.scrollWidth,
      height: frameClient.paddingBox.height,
      width: frameClient.paddingBox.width
    });
    return {
      pageMarginBox: closest3.page.marginBox,
      frameClient,
      scrollSize,
      shouldClipSubject: closest3.shouldClipSubject,
      scroll: {
        initial: closest3.scroll,
        current: closest3.scroll,
        max: maxScroll,
        diff: {
          value: origin,
          displacement: origin
        }
      }
    };
  }();
  var axis = direction === "vertical" ? vertical : horizontal;
  var subject = getSubject({
    page,
    withPlaceholder: null,
    axis,
    frame
  });
  var dimension = {
    descriptor,
    isCombineEnabled,
    isFixedOnPage,
    axis,
    isEnabled,
    client,
    page,
    frame,
    subject
  };
  return dimension;
};
var getClient = function getClient2(targetRef, closestScrollable) {
  var base = getBox(targetRef);
  if (!closestScrollable) {
    return base;
  }
  if (targetRef !== closestScrollable) {
    return base;
  }
  var top = base.paddingBox.top - closestScrollable.scrollTop;
  var left = base.paddingBox.left - closestScrollable.scrollLeft;
  var bottom = top + closestScrollable.scrollHeight;
  var right = left + closestScrollable.scrollWidth;
  var paddingBox = {
    top,
    right,
    bottom,
    left
  };
  var borderBox = expand(paddingBox, base.border);
  var client = createBox({
    borderBox,
    margin: base.margin,
    border: base.border,
    padding: base.padding
  });
  return client;
};
var getDimension = function(_ref) {
  var ref2 = _ref.ref, descriptor = _ref.descriptor, env = _ref.env, windowScroll = _ref.windowScroll, direction = _ref.direction, isDropDisabled = _ref.isDropDisabled, isCombineEnabled = _ref.isCombineEnabled, shouldClipSubject = _ref.shouldClipSubject;
  var closestScrollable = env.closestScrollable;
  var client = getClient(ref2, closestScrollable);
  var page = withScroll(client, windowScroll);
  var closest3 = function() {
    if (!closestScrollable) {
      return null;
    }
    var frameClient = getBox(closestScrollable);
    var scrollSize = {
      scrollHeight: closestScrollable.scrollHeight,
      scrollWidth: closestScrollable.scrollWidth
    };
    return {
      client: frameClient,
      page: withScroll(frameClient, windowScroll),
      scroll: getScroll$1(closestScrollable),
      scrollSize,
      shouldClipSubject
    };
  }();
  var dimension = getDroppableDimension({
    descriptor,
    isEnabled: !isDropDisabled,
    isCombineEnabled,
    isFixedOnPage: env.isFixedOnPage,
    direction,
    client,
    page,
    closest: closest3
  });
  return dimension;
};
var immediate = {
  passive: false
};
var delayed = {
  passive: true
};
var getListenerOptions = function(options) {
  return options.shouldPublishImmediately ? immediate : delayed;
};
function useRequiredContext(Context) {
  var result = (0, import_react28.useContext)(Context);
  !result ? true ? invariant2(false, "Could not find required context") : invariant2(false) : void 0;
  return result;
}
var getClosestScrollableFromDrag = function getClosestScrollableFromDrag2(dragging) {
  return dragging && dragging.env.closestScrollable || null;
};
function useDroppablePublisher(args) {
  var whileDraggingRef = (0, import_react28.useRef)(null);
  var appContext = useRequiredContext(AppContext);
  var uniqueId = useUniqueId("droppable");
  var registry = appContext.registry, marshal = appContext.marshal;
  var previousRef = usePrevious2(args);
  var descriptor = useMemo20(function() {
    return {
      id: args.droppableId,
      type: args.type,
      mode: args.mode
    };
  }, [args.droppableId, args.mode, args.type]);
  var publishedDescriptorRef = (0, import_react28.useRef)(descriptor);
  var memoizedUpdateScroll = useMemo20(function() {
    return memoize_one_esm_default(function(x, y) {
      !whileDraggingRef.current ? true ? invariant2(false, "Can only update scroll when dragging") : invariant2(false) : void 0;
      var scroll4 = {
        x,
        y
      };
      marshal.updateDroppableScroll(descriptor.id, scroll4);
    });
  }, [descriptor.id, marshal]);
  var getClosestScroll = useCallback36(function() {
    var dragging = whileDraggingRef.current;
    if (!dragging || !dragging.env.closestScrollable) {
      return origin;
    }
    return getScroll$1(dragging.env.closestScrollable);
  }, []);
  var updateScroll = useCallback36(function() {
    var scroll4 = getClosestScroll();
    memoizedUpdateScroll(scroll4.x, scroll4.y);
  }, [getClosestScroll, memoizedUpdateScroll]);
  var scheduleScrollUpdate = useMemo20(function() {
    return raf_schd_esm_default(updateScroll);
  }, [updateScroll]);
  var onClosestScroll = useCallback36(function() {
    var dragging = whileDraggingRef.current;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !(dragging && closest3) ? true ? invariant2(false, "Could not find scroll options while scrolling") : invariant2(false) : void 0;
    var options = dragging.scrollOptions;
    if (options.shouldPublishImmediately) {
      updateScroll();
      return;
    }
    scheduleScrollUpdate();
  }, [scheduleScrollUpdate, updateScroll]);
  var getDimensionAndWatchScroll = useCallback36(function(windowScroll, options) {
    !!whileDraggingRef.current ? true ? invariant2(false, "Cannot collect a droppable while a drag is occurring") : invariant2(false) : void 0;
    var previous = previousRef.current;
    var ref2 = previous.getDroppableRef();
    !ref2 ? true ? invariant2(false, "Cannot collect without a droppable ref") : invariant2(false) : void 0;
    var env = getEnv(ref2);
    var dragging = {
      ref: ref2,
      descriptor,
      env,
      scrollOptions: options
    };
    whileDraggingRef.current = dragging;
    var dimension = getDimension({
      ref: ref2,
      descriptor,
      env,
      windowScroll,
      direction: previous.direction,
      isDropDisabled: previous.isDropDisabled,
      isCombineEnabled: previous.isCombineEnabled,
      shouldClipSubject: !previous.ignoreContainerClipping
    });
    var scrollable = env.closestScrollable;
    if (scrollable) {
      scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);
      scrollable.addEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
      if (true) {
        checkForNestedScrollContainers(scrollable);
      }
    }
    return dimension;
  }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
  var getScrollWhileDragging = useCallback36(function() {
    var dragging = whileDraggingRef.current;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !(dragging && closest3) ? true ? invariant2(false, "Can only recollect Droppable client for Droppables that have a scroll container") : invariant2(false) : void 0;
    return getScroll$1(closest3);
  }, []);
  var dragStopped = useCallback36(function() {
    var dragging = whileDraggingRef.current;
    !dragging ? true ? invariant2(false, "Cannot stop drag when no active drag") : invariant2(false) : void 0;
    var closest3 = getClosestScrollableFromDrag(dragging);
    whileDraggingRef.current = null;
    if (!closest3) {
      return;
    }
    scheduleScrollUpdate.cancel();
    closest3.removeAttribute(scrollContainer.contextId);
    closest3.removeEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
  }, [onClosestScroll, scheduleScrollUpdate]);
  var scroll3 = useCallback36(function(change) {
    var dragging = whileDraggingRef.current;
    !dragging ? true ? invariant2(false, "Cannot scroll when there is no drag") : invariant2(false) : void 0;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !closest3 ? true ? invariant2(false, "Cannot scroll a droppable with no closest scrollable") : invariant2(false) : void 0;
    closest3.scrollTop += change.y;
    closest3.scrollLeft += change.x;
  }, []);
  var callbacks = useMemo20(function() {
    return {
      getDimensionAndWatchScroll,
      getScrollWhileDragging,
      dragStopped,
      scroll: scroll3
    };
  }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll3]);
  var entry = useMemo20(function() {
    return {
      uniqueId,
      descriptor,
      callbacks
    };
  }, [callbacks, descriptor, uniqueId]);
  useIsomorphicLayoutEffect2(function() {
    publishedDescriptorRef.current = entry.descriptor;
    registry.droppable.register(entry);
    return function() {
      if (whileDraggingRef.current) {
        true ? warning2("Unsupported: changing the droppableId or type of a Droppable during a drag") : void 0;
        dragStopped();
      }
      registry.droppable.unregister(entry);
    };
  }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);
  useIsomorphicLayoutEffect2(function() {
    if (!whileDraggingRef.current) {
      return;
    }
    marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
  }, [args.isDropDisabled, marshal]);
  useIsomorphicLayoutEffect2(function() {
    if (!whileDraggingRef.current) {
      return;
    }
    marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
  }, [args.isCombineEnabled, marshal]);
}
function noop$2() {
}
var empty = {
  width: 0,
  height: 0,
  margin: noSpacing2
};
var getSize = function getSize2(_ref) {
  var isAnimatingOpenOnMount = _ref.isAnimatingOpenOnMount, placeholder2 = _ref.placeholder, animate = _ref.animate;
  if (isAnimatingOpenOnMount) {
    return empty;
  }
  if (animate === "close") {
    return empty;
  }
  return {
    height: placeholder2.client.borderBox.height,
    width: placeholder2.client.borderBox.width,
    margin: placeholder2.client.margin
  };
};
var getStyle = function getStyle2(_ref2) {
  var isAnimatingOpenOnMount = _ref2.isAnimatingOpenOnMount, placeholder2 = _ref2.placeholder, animate = _ref2.animate;
  var size5 = getSize({
    isAnimatingOpenOnMount,
    placeholder: placeholder2,
    animate
  });
  return {
    display: placeholder2.display,
    boxSizing: "border-box",
    width: size5.width,
    height: size5.height,
    marginTop: size5.margin.top,
    marginRight: size5.margin.right,
    marginBottom: size5.margin.bottom,
    marginLeft: size5.margin.left,
    flexShrink: "0",
    flexGrow: "0",
    pointerEvents: "none",
    transition: animate !== "none" ? transitions.placeholder : null
  };
};
function Placeholder(props) {
  var animateOpenTimerRef = (0, import_react28.useRef)(null);
  var tryClearAnimateOpenTimer = useCallback36(function() {
    if (!animateOpenTimerRef.current) {
      return;
    }
    clearTimeout(animateOpenTimerRef.current);
    animateOpenTimerRef.current = null;
  }, []);
  var animate = props.animate, onTransitionEnd = props.onTransitionEnd, onClose = props.onClose, contextId = props.contextId;
  var _useState = (0, import_react28.useState)(props.animate === "open"), isAnimatingOpenOnMount = _useState[0], setIsAnimatingOpenOnMount = _useState[1];
  (0, import_react28.useEffect)(function() {
    if (!isAnimatingOpenOnMount) {
      return noop$2;
    }
    if (animate !== "open") {
      tryClearAnimateOpenTimer();
      setIsAnimatingOpenOnMount(false);
      return noop$2;
    }
    if (animateOpenTimerRef.current) {
      return noop$2;
    }
    animateOpenTimerRef.current = setTimeout(function() {
      animateOpenTimerRef.current = null;
      setIsAnimatingOpenOnMount(false);
    });
    return tryClearAnimateOpenTimer;
  }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
  var onSizeChangeEnd = useCallback36(function(event) {
    if (event.propertyName !== "height") {
      return;
    }
    onTransitionEnd();
    if (animate === "close") {
      onClose();
    }
  }, [animate, onClose, onTransitionEnd]);
  var style3 = getStyle({
    isAnimatingOpenOnMount,
    animate: props.animate,
    placeholder: props.placeholder
  });
  return import_react28.default.createElement(props.placeholder.tagName, {
    style: style3,
    "data-rbd-placeholder-context-id": contextId,
    onTransitionEnd: onSizeChangeEnd,
    ref: props.innerRef
  });
}
var Placeholder$1 = import_react28.default.memo(Placeholder);
var DroppableContext = import_react28.default.createContext(null);
function checkIsValidInnerRef(el) {
  !(el && isHtmlElement(el)) ? true ? invariant2(false, "\n    provided.innerRef has not been provided with a HTMLElement.\n\n    You can find a guide on using the innerRef callback functions at:\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\n  ") : invariant2(false) : void 0;
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function runChecks(args, checks) {
  checks.forEach(function(check) {
    return check(args);
  });
}
var shared = [function required(_ref) {
  var props = _ref.props;
  !props.droppableId ? true ? invariant2(false, "A Droppable requires a droppableId prop") : invariant2(false) : void 0;
  !(typeof props.droppableId === "string") ? true ? invariant2(false, "A Droppable requires a [string] droppableId. Provided: [" + typeof props.droppableId + "]") : invariant2(false) : void 0;
}, function _boolean(_ref2) {
  var props = _ref2.props;
  !isBoolean(props.isDropDisabled) ? true ? invariant2(false, "isDropDisabled must be a boolean") : invariant2(false) : void 0;
  !isBoolean(props.isCombineEnabled) ? true ? invariant2(false, "isCombineEnabled must be a boolean") : invariant2(false) : void 0;
  !isBoolean(props.ignoreContainerClipping) ? true ? invariant2(false, "ignoreContainerClipping must be a boolean") : invariant2(false) : void 0;
}, function ref(_ref3) {
  var getDroppableRef = _ref3.getDroppableRef;
  checkIsValidInnerRef(getDroppableRef());
}];
var standard = [function placeholder(_ref4) {
  var props = _ref4.props, getPlaceholderRef = _ref4.getPlaceholderRef;
  if (!props.placeholder) {
    return;
  }
  var ref2 = getPlaceholderRef();
  if (ref2) {
    return;
  }
  true ? warning2('\n      Droppable setup issue [droppableId: "' + props.droppableId + '"]:\n      DroppableProvided > placeholder could not be found.\n\n      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.\n      More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n    ') : void 0;
}];
var virtual = [function hasClone(_ref5) {
  var props = _ref5.props;
  !props.renderClone ? true ? invariant2(false, "Must provide a clone render function (renderClone) for virtual lists") : invariant2(false) : void 0;
}, function hasNoPlaceholder(_ref6) {
  var getPlaceholderRef = _ref6.getPlaceholderRef;
  !!getPlaceholderRef() ? true ? invariant2(false, "Expected virtual list to not have a placeholder") : invariant2(false) : void 0;
}];
function useValidation(args) {
  useDevSetupWarning(function() {
    runChecks(args, shared);
    if (args.props.mode === "standard") {
      runChecks(args, standard);
    }
    if (args.props.mode === "virtual") {
      runChecks(args, virtual);
    }
  });
}
var AnimateInOut = function(_React$PureComponent) {
  _inheritsLoose(AnimateInOut2, _React$PureComponent);
  function AnimateInOut2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this.state = {
      isVisible: Boolean(_this.props.on),
      data: _this.props.on,
      animate: _this.props.shouldAnimate && _this.props.on ? "open" : "none"
    };
    _this.onClose = function() {
      if (_this.state.animate !== "close") {
        return;
      }
      _this.setState({
        isVisible: false
      });
    };
    return _this;
  }
  AnimateInOut2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (!props.shouldAnimate) {
      return {
        isVisible: Boolean(props.on),
        data: props.on,
        animate: "none"
      };
    }
    if (props.on) {
      return {
        isVisible: true,
        data: props.on,
        animate: "open"
      };
    }
    if (state.isVisible) {
      return {
        isVisible: true,
        data: state.data,
        animate: "close"
      };
    }
    return {
      isVisible: false,
      animate: "close",
      data: null
    };
  };
  var _proto = AnimateInOut2.prototype;
  _proto.render = function render() {
    if (!this.state.isVisible) {
      return null;
    }
    var provided = {
      onClose: this.onClose,
      data: this.state.data,
      animate: this.state.animate
    };
    return this.props.children(provided);
  };
  return AnimateInOut2;
}(import_react28.default.PureComponent);
var zIndexOptions = {
  dragging: 5e3,
  dropAnimating: 4500
};
var getDraggingTransition = function getDraggingTransition2(shouldAnimateDragMovement, dropping) {
  if (dropping) {
    return transitions.drop(dropping.duration);
  }
  if (shouldAnimateDragMovement) {
    return transitions.snap;
  }
  return transitions.fluid;
};
var getDraggingOpacity = function getDraggingOpacity2(isCombining, isDropAnimating) {
  if (!isCombining) {
    return null;
  }
  return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
};
var getShouldDraggingAnimate = function getShouldDraggingAnimate2(dragging) {
  if (dragging.forceShouldAnimate != null) {
    return dragging.forceShouldAnimate;
  }
  return dragging.mode === "SNAP";
};
function getDraggingStyle(dragging) {
  var dimension = dragging.dimension;
  var box = dimension.client;
  var offset6 = dragging.offset, combineWith = dragging.combineWith, dropping = dragging.dropping;
  var isCombining = Boolean(combineWith);
  var shouldAnimate = getShouldDraggingAnimate(dragging);
  var isDropAnimating = Boolean(dropping);
  var transform = isDropAnimating ? transforms.drop(offset6, isCombining) : transforms.moveTo(offset6);
  var style3 = {
    position: "fixed",
    top: box.marginBox.top,
    left: box.marginBox.left,
    boxSizing: "border-box",
    width: box.borderBox.width,
    height: box.borderBox.height,
    transition: getDraggingTransition(shouldAnimate, dropping),
    transform,
    opacity: getDraggingOpacity(isCombining, isDropAnimating),
    zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
    pointerEvents: "none"
  };
  return style3;
}
function getSecondaryStyle(secondary) {
  return {
    transform: transforms.moveTo(secondary.offset),
    transition: secondary.shouldAnimateDisplacement ? null : "none"
  };
}
function getStyle$1(mapped) {
  return mapped.type === "DRAGGING" ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
}
function getDimension$1(descriptor, el, windowScroll) {
  if (windowScroll === void 0) {
    windowScroll = origin;
  }
  var computedStyles = window.getComputedStyle(el);
  var borderBox = el.getBoundingClientRect();
  var client = calculateBox(borderBox, computedStyles);
  var page = withScroll(client, windowScroll);
  var placeholder2 = {
    client,
    tagName: el.tagName.toLowerCase(),
    display: computedStyles.display
  };
  var displaceBy = {
    x: client.marginBox.width,
    y: client.marginBox.height
  };
  var dimension = {
    descriptor,
    placeholder: placeholder2,
    displaceBy,
    client,
    page
  };
  return dimension;
}
function useDraggablePublisher(args) {
  var uniqueId = useUniqueId("draggable");
  var descriptor = args.descriptor, registry = args.registry, getDraggableRef = args.getDraggableRef, canDragInteractiveElements = args.canDragInteractiveElements, shouldRespectForcePress = args.shouldRespectForcePress, isEnabled = args.isEnabled;
  var options = useMemo20(function() {
    return {
      canDragInteractiveElements,
      shouldRespectForcePress,
      isEnabled
    };
  }, [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
  var getDimension2 = useCallback36(function(windowScroll) {
    var el = getDraggableRef();
    !el ? true ? invariant2(false, "Cannot get dimension when no ref is set") : invariant2(false) : void 0;
    return getDimension$1(descriptor, el, windowScroll);
  }, [descriptor, getDraggableRef]);
  var entry = useMemo20(function() {
    return {
      uniqueId,
      descriptor,
      options,
      getDimension: getDimension2
    };
  }, [descriptor, getDimension2, options, uniqueId]);
  var publishedRef = (0, import_react28.useRef)(entry);
  var isFirstPublishRef = (0, import_react28.useRef)(true);
  useIsomorphicLayoutEffect2(function() {
    registry.draggable.register(publishedRef.current);
    return function() {
      return registry.draggable.unregister(publishedRef.current);
    };
  }, [registry.draggable]);
  useIsomorphicLayoutEffect2(function() {
    if (isFirstPublishRef.current) {
      isFirstPublishRef.current = false;
      return;
    }
    var last = publishedRef.current;
    publishedRef.current = entry;
    registry.draggable.update(entry, last);
  }, [entry, registry.draggable]);
}
function useValidation$1(props, contextId, getRef) {
  useDevSetupWarning(function() {
    function prefix2(id2) {
      return "Draggable[id: " + id2 + "]: ";
    }
    var id = props.draggableId;
    !id ? true ? invariant2(false, "Draggable requires a draggableId") : invariant2(false) : void 0;
    !(typeof id === "string") ? true ? invariant2(false, "Draggable requires a [string] draggableId.\n      Provided: [type: " + typeof id + "] (value: " + id + ")") : invariant2(false) : void 0;
    !isInteger(props.index) ? true ? invariant2(false, prefix2(id) + " requires an integer index prop") : invariant2(false) : void 0;
    if (props.mapped.type === "DRAGGING") {
      return;
    }
    checkIsValidInnerRef(getRef());
    if (props.isEnabled) {
      !findDragHandle(contextId, id) ? true ? invariant2(false, prefix2(id) + " Unable to find drag handle") : invariant2(false) : void 0;
    }
  });
}
function useClonePropValidation(isClone) {
  useDev(function() {
    var initialRef = (0, import_react28.useRef)(isClone);
    useDevSetupWarning(function() {
      !(isClone === initialRef.current) ? true ? invariant2(false, "Draggable isClone prop value changed during component life") : invariant2(false) : void 0;
    }, [isClone]);
  });
}
function preventHtml5Dnd(event) {
  event.preventDefault();
}
function Draggable(props) {
  var ref2 = (0, import_react28.useRef)(null);
  var setRef2 = useCallback36(function(el) {
    ref2.current = el;
  }, []);
  var getRef = useCallback36(function() {
    return ref2.current;
  }, []);
  var _useRequiredContext = useRequiredContext(AppContext), contextId = _useRequiredContext.contextId, dragHandleUsageInstructionsId = _useRequiredContext.dragHandleUsageInstructionsId, registry = _useRequiredContext.registry;
  var _useRequiredContext2 = useRequiredContext(DroppableContext), type = _useRequiredContext2.type, droppableId = _useRequiredContext2.droppableId;
  var descriptor = useMemo20(function() {
    return {
      id: props.draggableId,
      index: props.index,
      type,
      droppableId
    };
  }, [props.draggableId, props.index, type, droppableId]);
  var children2 = props.children, draggableId = props.draggableId, isEnabled = props.isEnabled, shouldRespectForcePress = props.shouldRespectForcePress, canDragInteractiveElements = props.canDragInteractiveElements, isClone = props.isClone, mapped = props.mapped, dropAnimationFinishedAction = props.dropAnimationFinished;
  useValidation$1(props, contextId, getRef);
  useClonePropValidation(isClone);
  if (!isClone) {
    var forPublisher = useMemo20(function() {
      return {
        descriptor,
        registry,
        getDraggableRef: getRef,
        canDragInteractiveElements,
        shouldRespectForcePress,
        isEnabled
      };
    }, [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
    useDraggablePublisher(forPublisher);
  }
  var dragHandleProps = useMemo20(function() {
    return isEnabled ? {
      tabIndex: 0,
      role: "button",
      "aria-describedby": dragHandleUsageInstructionsId,
      "data-rbd-drag-handle-draggable-id": draggableId,
      "data-rbd-drag-handle-context-id": contextId,
      draggable: false,
      onDragStart: preventHtml5Dnd
    } : null;
  }, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
  var onMoveEnd = useCallback36(function(event) {
    if (mapped.type !== "DRAGGING") {
      return;
    }
    if (!mapped.dropping) {
      return;
    }
    if (event.propertyName !== "transform") {
      return;
    }
    dropAnimationFinishedAction();
  }, [dropAnimationFinishedAction, mapped]);
  var provided = useMemo20(function() {
    var style3 = getStyle$1(mapped);
    var onTransitionEnd = mapped.type === "DRAGGING" && mapped.dropping ? onMoveEnd : null;
    var result = {
      innerRef: setRef2,
      draggableProps: {
        "data-rbd-draggable-context-id": contextId,
        "data-rbd-draggable-id": draggableId,
        style: style3,
        onTransitionEnd
      },
      dragHandleProps
    };
    return result;
  }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef2]);
  var rubric = useMemo20(function() {
    return {
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    };
  }, [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
  return children2(provided, mapped.snapshot, rubric);
}
var isStrictEqual = function(a, b119) {
  return a === b119;
};
var whatIsDraggedOverFromResult = function(result) {
  var combine2 = result.combine, destination = result.destination;
  if (destination) {
    return destination.droppableId;
  }
  if (combine2) {
    return combine2.droppableId;
  }
  return null;
};
var getCombineWithFromResult = function getCombineWithFromResult2(result) {
  return result.combine ? result.combine.draggableId : null;
};
var getCombineWithFromImpact = function getCombineWithFromImpact2(impact) {
  return impact.at && impact.at.type === "COMBINE" ? impact.at.combine.draggableId : null;
};
function getDraggableSelector() {
  var memoizedOffset = memoize_one_esm_default(function(x, y) {
    return {
      x,
      y
    };
  });
  var getMemoizedSnapshot = memoize_one_esm_default(function(mode, isClone, draggingOver, combineWith, dropping) {
    return {
      isDragging: true,
      isClone,
      isDropAnimating: Boolean(dropping),
      dropAnimation: dropping,
      mode,
      draggingOver,
      combineWith,
      combineTargetFor: null
    };
  });
  var getMemoizedProps = memoize_one_esm_default(function(offset6, mode, dimension, isClone, draggingOver, combineWith, forceShouldAnimate) {
    return {
      mapped: {
        type: "DRAGGING",
        dropping: null,
        draggingOver,
        combineWith,
        mode,
        offset: offset6,
        dimension,
        forceShouldAnimate,
        snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
      }
    };
  });
  var selector = function selector2(state, ownProps) {
    if (state.isDragging) {
      if (state.critical.draggable.id !== ownProps.draggableId) {
        return null;
      }
      var offset6 = state.current.client.offset;
      var dimension = state.dimensions.draggables[ownProps.draggableId];
      var draggingOver = whatIsDraggedOver(state.impact);
      var combineWith = getCombineWithFromImpact(state.impact);
      var forceShouldAnimate = state.forceShouldAnimate;
      return getMemoizedProps(memoizedOffset(offset6.x, offset6.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (completed.result.draggableId !== ownProps.draggableId) {
        return null;
      }
      var isClone = ownProps.isClone;
      var _dimension = state.dimensions.draggables[ownProps.draggableId];
      var result = completed.result;
      var mode = result.mode;
      var _draggingOver = whatIsDraggedOverFromResult(result);
      var _combineWith = getCombineWithFromResult(result);
      var duration = state.dropDuration;
      var dropping = {
        duration,
        curve: curves.drop,
        moveTo: state.newHomeClientOffset,
        opacity: _combineWith ? combine.opacity.drop : null,
        scale: _combineWith ? combine.scale.drop : null
      };
      return {
        mapped: {
          type: "DRAGGING",
          offset: state.newHomeClientOffset,
          dimension: _dimension,
          dropping,
          draggingOver: _draggingOver,
          combineWith: _combineWith,
          mode,
          forceShouldAnimate: null,
          snapshot: getMemoizedSnapshot(mode, isClone, _draggingOver, _combineWith, dropping)
        }
      };
    }
    return null;
  };
  return selector;
}
function getSecondarySnapshot(combineTargetFor) {
  return {
    isDragging: false,
    isDropAnimating: false,
    isClone: false,
    dropAnimation: null,
    mode: null,
    draggingOver: null,
    combineTargetFor,
    combineWith: null
  };
}
var atRest = {
  mapped: {
    type: "SECONDARY",
    offset: origin,
    combineTargetFor: null,
    shouldAnimateDisplacement: true,
    snapshot: getSecondarySnapshot(null)
  }
};
function getSecondarySelector() {
  var memoizedOffset = memoize_one_esm_default(function(x, y) {
    return {
      x,
      y
    };
  });
  var getMemoizedSnapshot = memoize_one_esm_default(getSecondarySnapshot);
  var getMemoizedProps = memoize_one_esm_default(function(offset6, combineTargetFor, shouldAnimateDisplacement) {
    if (combineTargetFor === void 0) {
      combineTargetFor = null;
    }
    return {
      mapped: {
        type: "SECONDARY",
        offset: offset6,
        combineTargetFor,
        shouldAnimateDisplacement,
        snapshot: getMemoizedSnapshot(combineTargetFor)
      }
    };
  });
  var getFallback = function getFallback2(combineTargetFor) {
    return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
  };
  var getProps = function getProps2(ownId, draggingId, impact, afterCritical) {
    var visualDisplacement = impact.displaced.visible[ownId];
    var isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
    var combine2 = tryGetCombine(impact);
    var combineTargetFor = combine2 && combine2.draggableId === ownId ? draggingId : null;
    if (!visualDisplacement) {
      if (!isAfterCriticalInVirtualList) {
        return getFallback(combineTargetFor);
      }
      if (impact.displaced.invisible[ownId]) {
        return null;
      }
      var change = negate(afterCritical.displacedBy.point);
      var _offset = memoizedOffset(change.x, change.y);
      return getMemoizedProps(_offset, combineTargetFor, true);
    }
    if (isAfterCriticalInVirtualList) {
      return getFallback(combineTargetFor);
    }
    var displaceBy = impact.displacedBy.point;
    var offset6 = memoizedOffset(displaceBy.x, displaceBy.y);
    return getMemoizedProps(offset6, combineTargetFor, visualDisplacement.shouldAnimate);
  };
  var selector = function selector2(state, ownProps) {
    if (state.isDragging) {
      if (state.critical.draggable.id === ownProps.draggableId) {
        return null;
      }
      return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (completed.result.draggableId === ownProps.draggableId) {
        return null;
      }
      return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
    }
    return null;
  };
  return selector;
}
var makeMapStateToProps = function makeMapStateToProps2() {
  var draggingSelector = getDraggableSelector();
  var secondarySelector = getSecondarySelector();
  var selector = function selector2(state, ownProps) {
    return draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
  };
  return selector;
};
var mapDispatchToProps = {
  dropAnimationFinished
};
var ConnectedDraggable = connect_default(makeMapStateToProps, mapDispatchToProps, null, {
  context: StoreContext,
  pure: true,
  areStatePropsEqual: isStrictEqual
})(Draggable);
function PrivateDraggable(props) {
  var droppableContext = useRequiredContext(DroppableContext);
  var isUsingCloneFor = droppableContext.isUsingCloneFor;
  if (isUsingCloneFor === props.draggableId && !props.isClone) {
    return null;
  }
  return import_react28.default.createElement(ConnectedDraggable, props);
}
function PublicDraggable(props) {
  var isEnabled = typeof props.isDragDisabled === "boolean" ? !props.isDragDisabled : true;
  var canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
  var shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
  return import_react28.default.createElement(PrivateDraggable, _extends({}, props, {
    isClone: false,
    isEnabled,
    canDragInteractiveElements,
    shouldRespectForcePress
  }));
}
function Droppable(props) {
  var appContext = (0, import_react28.useContext)(AppContext);
  !appContext ? true ? invariant2(false, "Could not find app context") : invariant2(false) : void 0;
  var contextId = appContext.contextId, isMovementAllowed2 = appContext.isMovementAllowed;
  var droppableRef = (0, import_react28.useRef)(null);
  var placeholderRef = (0, import_react28.useRef)(null);
  var children2 = props.children, droppableId = props.droppableId, type = props.type, mode = props.mode, direction = props.direction, ignoreContainerClipping = props.ignoreContainerClipping, isDropDisabled = props.isDropDisabled, isCombineEnabled = props.isCombineEnabled, snapshot = props.snapshot, useClone = props.useClone, updateViewportMaxScroll3 = props.updateViewportMaxScroll, getContainerForClone = props.getContainerForClone;
  var getDroppableRef = useCallback36(function() {
    return droppableRef.current;
  }, []);
  var setDroppableRef = useCallback36(function(value) {
    droppableRef.current = value;
  }, []);
  var getPlaceholderRef = useCallback36(function() {
    return placeholderRef.current;
  }, []);
  var setPlaceholderRef = useCallback36(function(value) {
    placeholderRef.current = value;
  }, []);
  useValidation({
    props,
    getDroppableRef,
    getPlaceholderRef
  });
  var onPlaceholderTransitionEnd = useCallback36(function() {
    if (isMovementAllowed2()) {
      updateViewportMaxScroll3({
        maxScroll: getMaxWindowScroll()
      });
    }
  }, [isMovementAllowed2, updateViewportMaxScroll3]);
  useDroppablePublisher({
    droppableId,
    type,
    mode,
    direction,
    isDropDisabled,
    isCombineEnabled,
    ignoreContainerClipping,
    getDroppableRef
  });
  var placeholder2 = import_react28.default.createElement(AnimateInOut, {
    on: props.placeholder,
    shouldAnimate: props.shouldAnimatePlaceholder
  }, function(_ref) {
    var onClose = _ref.onClose, data = _ref.data, animate = _ref.animate;
    return import_react28.default.createElement(Placeholder$1, {
      placeholder: data,
      onClose,
      innerRef: setPlaceholderRef,
      animate,
      contextId,
      onTransitionEnd: onPlaceholderTransitionEnd
    });
  });
  var provided = useMemo20(function() {
    return {
      innerRef: setDroppableRef,
      placeholder: placeholder2,
      droppableProps: {
        "data-rbd-droppable-id": droppableId,
        "data-rbd-droppable-context-id": contextId
      }
    };
  }, [contextId, droppableId, placeholder2, setDroppableRef]);
  var isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
  var droppableContext = useMemo20(function() {
    return {
      droppableId,
      type,
      isUsingCloneFor
    };
  }, [droppableId, isUsingCloneFor, type]);
  function getClone() {
    if (!useClone) {
      return null;
    }
    var dragging = useClone.dragging, render = useClone.render;
    var node = import_react28.default.createElement(PrivateDraggable, {
      draggableId: dragging.draggableId,
      index: dragging.source.index,
      isClone: true,
      isEnabled: true,
      shouldRespectForcePress: false,
      canDragInteractiveElements: true
    }, function(draggableProvided, draggableSnapshot) {
      return render(draggableProvided, draggableSnapshot, dragging);
    });
    return import_react_dom6.default.createPortal(node, getContainerForClone());
  }
  return import_react28.default.createElement(DroppableContext.Provider, {
    value: droppableContext
  }, children2(provided, snapshot), getClone());
}
var isMatchingType = function isMatchingType2(type, critical) {
  return type === critical.droppable.type;
};
var getDraggable = function getDraggable2(critical, dimensions) {
  return dimensions.draggables[critical.draggable.id];
};
var makeMapStateToProps$1 = function makeMapStateToProps3() {
  var idleWithAnimation = {
    placeholder: null,
    shouldAnimatePlaceholder: true,
    snapshot: {
      isDraggingOver: false,
      draggingOverWith: null,
      draggingFromThisWith: null,
      isUsingPlaceholder: false
    },
    useClone: null
  };
  var idleWithoutAnimation = _extends({}, idleWithAnimation, {
    shouldAnimatePlaceholder: false
  });
  var getDraggableRubric = memoize_one_esm_default(function(descriptor) {
    return {
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    };
  });
  var getMapProps = memoize_one_esm_default(function(id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) {
    var draggableId = dragging.descriptor.id;
    var isHome = dragging.descriptor.droppableId === id;
    if (isHome) {
      var useClone = renderClone ? {
        render: renderClone,
        dragging: getDraggableRubric(dragging.descriptor)
      } : null;
      var _snapshot = {
        isDraggingOver: isDraggingOverForConsumer,
        draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
        draggingFromThisWith: draggableId,
        isUsingPlaceholder: true
      };
      return {
        placeholder: dragging.placeholder,
        shouldAnimatePlaceholder: false,
        snapshot: _snapshot,
        useClone
      };
    }
    if (!isEnabled) {
      return idleWithoutAnimation;
    }
    if (!isDraggingOverForImpact) {
      return idleWithAnimation;
    }
    var snapshot = {
      isDraggingOver: isDraggingOverForConsumer,
      draggingOverWith: draggableId,
      draggingFromThisWith: null,
      isUsingPlaceholder: true
    };
    return {
      placeholder: dragging.placeholder,
      shouldAnimatePlaceholder: true,
      snapshot,
      useClone: null
    };
  });
  var selector = function selector2(state, ownProps) {
    var id = ownProps.droppableId;
    var type = ownProps.type;
    var isEnabled = !ownProps.isDropDisabled;
    var renderClone = ownProps.renderClone;
    if (state.isDragging) {
      var critical = state.critical;
      if (!isMatchingType(type, critical)) {
        return idleWithoutAnimation;
      }
      var dragging = getDraggable(critical, state.dimensions);
      var isDraggingOver = whatIsDraggedOver(state.impact) === id;
      return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (!isMatchingType(type, completed.critical)) {
        return idleWithoutAnimation;
      }
      var _dragging = getDraggable(completed.critical, state.dimensions);
      return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, _dragging, renderClone);
    }
    if (state.phase === "IDLE" && state.completed && !state.shouldFlush) {
      var _completed = state.completed;
      if (!isMatchingType(type, _completed.critical)) {
        return idleWithoutAnimation;
      }
      var wasOver = whatIsDraggedOver(_completed.impact) === id;
      var wasCombining = Boolean(_completed.impact.at && _completed.impact.at.type === "COMBINE");
      var isHome = _completed.critical.droppable.id === id;
      if (wasOver) {
        return wasCombining ? idleWithAnimation : idleWithoutAnimation;
      }
      if (isHome) {
        return idleWithAnimation;
      }
      return idleWithoutAnimation;
    }
    return idleWithoutAnimation;
  };
  return selector;
};
var mapDispatchToProps$1 = {
  updateViewportMaxScroll
};
function getBody() {
  !document.body ? true ? invariant2(false, "document.body is not ready") : invariant2(false) : void 0;
  return document.body;
}
var defaultProps2 = {
  mode: "standard",
  type: "DEFAULT",
  direction: "vertical",
  isDropDisabled: false,
  isCombineEnabled: false,
  ignoreContainerClipping: false,
  renderClone: null,
  getContainerForClone: getBody
};
var ConnectedDroppable = connect_default(makeMapStateToProps$1, mapDispatchToProps$1, null, {
  context: StoreContext,
  pure: true,
  areStatePropsEqual: isStrictEqual
})(Droppable);
ConnectedDroppable.defaultProps = defaultProps2;

// node_modules/react-virtualized-auto-sizer/dist/react-virtualized-auto-sizer.esm.js
var import_react29 = __toESM(require_react());
var windowObject;
if (typeof window !== "undefined") {
  windowObject = window;
} else if (typeof self !== "undefined") {
  windowObject = self;
} else {
  windowObject = global;
}
var cancelFrame = null;
var requestFrame = null;
var TIMEOUT_DURATION = 20;
var clearTimeoutFn = windowObject.clearTimeout;
var setTimeoutFn = windowObject.setTimeout;
var cancelAnimationFrameFn = windowObject.cancelAnimationFrame || windowObject.mozCancelAnimationFrame || windowObject.webkitCancelAnimationFrame;
var requestAnimationFrameFn = windowObject.requestAnimationFrame || windowObject.mozRequestAnimationFrame || windowObject.webkitRequestAnimationFrame;
if (cancelAnimationFrameFn == null || requestAnimationFrameFn == null) {
  cancelFrame = clearTimeoutFn;
  requestFrame = function requestAnimationFrameViaSetTimeout(callback) {
    return setTimeoutFn(callback, TIMEOUT_DURATION);
  };
} else {
  cancelFrame = function cancelFrame2([animationFrameID, timeoutID]) {
    cancelAnimationFrameFn(animationFrameID);
    clearTimeoutFn(timeoutID);
  };
  requestFrame = function requestAnimationFrameWithSetTimeoutFallback(callback) {
    const animationFrameID = requestAnimationFrameFn(function animationFrameCallback() {
      clearTimeoutFn(timeoutID);
      callback();
    });
    const timeoutID = setTimeoutFn(function timeoutCallback() {
      cancelAnimationFrameFn(animationFrameID);
      callback();
    }, TIMEOUT_DURATION);
    return [animationFrameID, timeoutID];
  };
}
function createDetectElementResize(nonce) {
  let animationKeyframes;
  let animationName;
  let animationStartEvent;
  let animationStyle;
  let checkTriggers;
  let resetTriggers;
  let scrollListener2;
  const attachEvent = typeof document !== "undefined" && document.attachEvent;
  if (!attachEvent) {
    resetTriggers = function(element) {
      const triggers = element.__resizeTriggers__, expand3 = triggers.firstElementChild, contract = triggers.lastElementChild, expandChild = expand3.firstElementChild;
      contract.scrollLeft = contract.scrollWidth;
      contract.scrollTop = contract.scrollHeight;
      expandChild.style.width = expand3.offsetWidth + 1 + "px";
      expandChild.style.height = expand3.offsetHeight + 1 + "px";
      expand3.scrollLeft = expand3.scrollWidth;
      expand3.scrollTop = expand3.scrollHeight;
    };
    checkTriggers = function(element) {
      return element.offsetWidth !== element.__resizeLast__.width || element.offsetHeight !== element.__resizeLast__.height;
    };
    scrollListener2 = function(e) {
      if (e.target.className && typeof e.target.className.indexOf === "function" && e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) {
        return;
      }
      const element = this;
      resetTriggers(this);
      if (this.__resizeRAF__) {
        cancelFrame(this.__resizeRAF__);
      }
      this.__resizeRAF__ = requestFrame(function animationFrame() {
        if (checkTriggers(element)) {
          element.__resizeLast__.width = element.offsetWidth;
          element.__resizeLast__.height = element.offsetHeight;
          element.__resizeListeners__.forEach(function forEachResizeListener(fn) {
            fn.call(element, e);
          });
        }
      });
    };
    let animation = false;
    let keyframeprefix = "";
    animationStartEvent = "animationstart";
    const domPrefixes = "Webkit Moz O ms".split(" ");
    let startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" ");
    let pfx = "";
    {
      const elm = document.createElement("fakeelement");
      if (elm.style.animationName !== void 0) {
        animation = true;
      }
      if (animation === false) {
        for (let i = 0; i < domPrefixes.length; i++) {
          if (elm.style[domPrefixes[i] + "AnimationName"] !== void 0) {
            pfx = domPrefixes[i];
            keyframeprefix = "-" + pfx.toLowerCase() + "-";
            animationStartEvent = startEvents[i];
            animation = true;
            break;
          }
        }
      }
    }
    animationName = "resizeanim";
    animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";
    animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";
  }
  const createStyles = function(doc) {
    if (!doc.getElementById("detectElementResize")) {
      const css = (animationKeyframes ? animationKeyframes : "") + ".resize-triggers { " + (animationStyle ? animationStyle : "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }', head = doc.head || doc.getElementsByTagName("head")[0], style3 = doc.createElement("style");
      style3.id = "detectElementResize";
      style3.type = "text/css";
      if (nonce != null) {
        style3.setAttribute("nonce", nonce);
      }
      if (style3.styleSheet) {
        style3.styleSheet.cssText = css;
      } else {
        style3.appendChild(doc.createTextNode(css));
      }
      head.appendChild(style3);
    }
  };
  const addResizeListener = function(element, fn) {
    if (attachEvent) {
      element.attachEvent("onresize", fn);
    } else {
      if (!element.__resizeTriggers__) {
        const doc = element.ownerDocument;
        const elementStyle = windowObject.getComputedStyle(element);
        if (elementStyle && elementStyle.position === "static") {
          element.style.position = "relative";
        }
        createStyles(doc);
        element.__resizeLast__ = {};
        element.__resizeListeners__ = [];
        (element.__resizeTriggers__ = doc.createElement("div")).className = "resize-triggers";
        const expandTrigger = doc.createElement("div");
        expandTrigger.className = "expand-trigger";
        expandTrigger.appendChild(doc.createElement("div"));
        const contractTrigger = doc.createElement("div");
        contractTrigger.className = "contract-trigger";
        element.__resizeTriggers__.appendChild(expandTrigger);
        element.__resizeTriggers__.appendChild(contractTrigger);
        element.appendChild(element.__resizeTriggers__);
        resetTriggers(element);
        element.addEventListener("scroll", scrollListener2, true);
        if (animationStartEvent) {
          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
            if (e.animationName === animationName) {
              resetTriggers(element);
            }
          };
          element.__resizeTriggers__.addEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
        }
      }
      element.__resizeListeners__.push(fn);
    }
  };
  const removeResizeListener = function(element, fn) {
    if (attachEvent) {
      element.detachEvent("onresize", fn);
    } else {
      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
      if (!element.__resizeListeners__.length) {
        element.removeEventListener("scroll", scrollListener2, true);
        if (element.__resizeTriggers__.__animationListener__) {
          element.__resizeTriggers__.removeEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
          element.__resizeTriggers__.__animationListener__ = null;
        }
        try {
          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
        } catch (e) {
        }
      }
    }
  };
  return {
    addResizeListener,
    removeResizeListener
  };
}
var AutoSizer = class extends import_react29.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      height: this.props.defaultHeight || 0,
      width: this.props.defaultWidth || 0
    };
    this._autoSizer = null;
    this._detectElementResize = null;
    this._didLogDeprecationWarning = false;
    this._parentNode = null;
    this._resizeObserver = null;
    this._timeoutId = null;
    this._onResize = () => {
      this._timeoutId = null;
      const {
        disableHeight,
        disableWidth,
        onResize
      } = this.props;
      if (this._parentNode) {
        const style3 = window.getComputedStyle(this._parentNode) || {};
        const paddingLeft = parseFloat(style3.paddingLeft || "0");
        const paddingRight = parseFloat(style3.paddingRight || "0");
        const paddingTop = parseFloat(style3.paddingTop || "0");
        const paddingBottom = parseFloat(style3.paddingBottom || "0");
        const rect = this._parentNode.getBoundingClientRect();
        const height = rect.height - paddingTop - paddingBottom;
        const width = rect.width - paddingLeft - paddingRight;
        if (!disableHeight && this.state.height !== height || !disableWidth && this.state.width !== width) {
          this.setState({
            height,
            width
          });
          const maybeLogDeprecationWarning = () => {
            if (!this._didLogDeprecationWarning) {
              this._didLogDeprecationWarning = true;
              console.warn("scaledWidth and scaledHeight parameters have been deprecated; use width and height instead");
            }
          };
          if (typeof onResize === "function") {
            onResize({
              height,
              width,
              // TODO Remove these params in the next major release
              get scaledHeight() {
                maybeLogDeprecationWarning();
                return height;
              },
              get scaledWidth() {
                maybeLogDeprecationWarning();
                return width;
              }
            });
          }
        }
      }
    };
    this._setRef = (autoSizer) => {
      this._autoSizer = autoSizer;
    };
  }
  componentDidMount() {
    const {
      nonce
    } = this.props;
    const parentNode = this._autoSizer ? this._autoSizer.parentNode : null;
    if (parentNode != null && parentNode.ownerDocument && parentNode.ownerDocument.defaultView && parentNode instanceof parentNode.ownerDocument.defaultView.HTMLElement) {
      this._parentNode = parentNode;
      const ResizeObserverInstance = parentNode.ownerDocument.defaultView.ResizeObserver;
      if (ResizeObserverInstance != null) {
        this._resizeObserver = new ResizeObserverInstance(() => {
          this._timeoutId = setTimeout(this._onResize, 0);
        });
        this._resizeObserver.observe(parentNode);
      } else {
        this._detectElementResize = createDetectElementResize(nonce);
        this._detectElementResize.addResizeListener(parentNode, this._onResize);
      }
      this._onResize();
    }
  }
  componentWillUnmount() {
    if (this._parentNode) {
      if (this._detectElementResize) {
        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
      }
      if (this._timeoutId !== null) {
        clearTimeout(this._timeoutId);
      }
      if (this._resizeObserver) {
        this._resizeObserver.disconnect();
      }
    }
  }
  render() {
    const {
      children: children2,
      defaultHeight,
      defaultWidth,
      disableHeight = false,
      disableWidth = false,
      doNotBailOutOnEmptyChildren = false,
      nonce,
      onResize,
      style: style3 = {},
      tagName = "div",
      ...rest
    } = this.props;
    const {
      height,
      width
    } = this.state;
    const outerStyle = {
      overflow: "visible"
    };
    const childParams = {};
    let bailoutOnChildren = false;
    if (!disableHeight) {
      if (height === 0) {
        bailoutOnChildren = true;
      }
      outerStyle.height = 0;
      childParams.height = height;
      childParams.scaledHeight = height;
    }
    if (!disableWidth) {
      if (width === 0) {
        bailoutOnChildren = true;
      }
      outerStyle.width = 0;
      childParams.width = width;
      childParams.scaledWidth = width;
    }
    if (doNotBailOutOnEmptyChildren) {
      bailoutOnChildren = false;
    }
    return (0, import_react29.createElement)(tagName, {
      ref: this._setRef,
      style: {
        ...outerStyle,
        ...style3
      },
      ...rest
    }, !bailoutOnChildren && children2(childParams));
  }
};

// node_modules/react-window/dist/index.esm.js
var import_react30 = __toESM(require_react());
var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
var now = hasNativePerformanceNow ? function() {
  return performance.now();
} : function() {
  return Date.now();
};
function cancelTimeout(timeoutID) {
  cancelAnimationFrame(timeoutID.id);
}
function requestTimeout(callback, delay) {
  var start3 = now();
  function tick() {
    if (now() - start3 >= delay) {
      callback.call(null);
    } else {
      timeoutID.id = requestAnimationFrame(tick);
    }
  }
  var timeoutID = {
    id: requestAnimationFrame(tick)
  };
  return timeoutID;
}
var size4 = -1;
function getScrollbarSize(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (size4 === -1 || recalculate) {
    var div = document.createElement("div");
    var style3 = div.style;
    style3.width = "50px";
    style3.height = "50px";
    style3.overflow = "scroll";
    document.body.appendChild(div);
    size4 = div.offsetWidth - div.clientWidth;
    document.body.removeChild(div);
  }
  return size4;
}
var cachedRTLResult = null;
function getRTLOffsetType(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (cachedRTLResult === null || recalculate) {
    var outerDiv = document.createElement("div");
    var outerStyle = outerDiv.style;
    outerStyle.width = "50px";
    outerStyle.height = "50px";
    outerStyle.overflow = "scroll";
    outerStyle.direction = "rtl";
    var innerDiv = document.createElement("div");
    var innerStyle = innerDiv.style;
    innerStyle.width = "100px";
    innerStyle.height = "100px";
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);
    if (outerDiv.scrollLeft > 0) {
      cachedRTLResult = "positive-descending";
    } else {
      outerDiv.scrollLeft = 1;
      if (outerDiv.scrollLeft === 0) {
        cachedRTLResult = "negative";
      } else {
        cachedRTLResult = "positive-ascending";
      }
    }
    document.body.removeChild(outerDiv);
    return cachedRTLResult;
  }
  return cachedRTLResult;
}
var IS_SCROLLING_DEBOUNCE_INTERVAL = 150;
var defaultItemKey = function defaultItemKey2(_ref) {
  var columnIndex = _ref.columnIndex, data = _ref.data, rowIndex = _ref.rowIndex;
  return rowIndex + ":" + columnIndex;
};
var devWarningsOverscanCount = null;
var devWarningsOverscanRowsColumnsCount = null;
var devWarningsTagName = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsOverscanCount = /* @__PURE__ */ new WeakSet();
    devWarningsOverscanRowsColumnsCount = /* @__PURE__ */ new WeakSet();
    devWarningsTagName = /* @__PURE__ */ new WeakSet();
  }
}
function createGridComponent(_ref2) {
  var _class;
  var getColumnOffset3 = _ref2.getColumnOffset, getColumnStartIndexForOffset3 = _ref2.getColumnStartIndexForOffset, getColumnStopIndexForStartIndex3 = _ref2.getColumnStopIndexForStartIndex, getColumnWidth3 = _ref2.getColumnWidth, getEstimatedTotalHeight4 = _ref2.getEstimatedTotalHeight, getEstimatedTotalWidth4 = _ref2.getEstimatedTotalWidth, getOffsetForColumnAndAlignment3 = _ref2.getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment3 = _ref2.getOffsetForRowAndAlignment, getRowHeight3 = _ref2.getRowHeight, getRowOffset3 = _ref2.getRowOffset, getRowStartIndexForOffset3 = _ref2.getRowStartIndexForOffset, getRowStopIndexForStartIndex3 = _ref2.getRowStopIndexForStartIndex, initInstanceProps5 = _ref2.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref2.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(Grid, _PureComponent);
    function Grid(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._resetIsScrollingTimeoutId = null;
      _this._outerRef = void 0;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        horizontalScrollDirection: "forward",
        scrollLeft: typeof _this.props.initialScrollLeft === "number" ? _this.props.initialScrollLeft : 0,
        scrollTop: typeof _this.props.initialScrollTop === "number" ? _this.props.initialScrollTop : 0,
        scrollUpdateWasRequested: false,
        verticalScrollDirection: "forward"
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {
        return _this.props.onItemsRendered({
          overscanColumnStartIndex,
          overscanColumnStopIndex,
          overscanRowStartIndex,
          overscanRowStopIndex,
          visibleColumnStartIndex,
          visibleColumnStopIndex,
          visibleRowStartIndex,
          visibleRowStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          horizontalScrollDirection,
          scrollLeft,
          scrollTop,
          verticalScrollDirection,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(rowIndex, columnIndex) {
        var _this$props = _this.props, columnWidth = _this$props.columnWidth, direction = _this$props.direction, rowHeight = _this$props.rowHeight;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);
        var key = rowIndex + ":" + columnIndex;
        var style3;
        if (itemStyleCache.hasOwnProperty(key)) {
          style3 = itemStyleCache[key];
        } else {
          var _offset = getColumnOffset3(_this.props, columnIndex, _this._instanceProps);
          var isRtl = direction === "rtl";
          itemStyleCache[key] = style3 = {
            position: "absolute",
            left: isRtl ? void 0 : _offset,
            right: isRtl ? _offset : void 0,
            top: getRowOffset3(_this.props, rowIndex, _this._instanceProps),
            height: getRowHeight3(_this.props, rowIndex, _this._instanceProps),
            width: getColumnWidth3(_this.props, columnIndex, _this._instanceProps)
          };
        }
        return style3;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
        return {};
      });
      _this._onScroll = function(event) {
        var _event$currentTarget = event.currentTarget, clientHeight = _event$currentTarget.clientHeight, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop, scrollHeight = _event$currentTarget.scrollHeight, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
            return null;
          }
          var direction = _this.props.direction;
          var calculatedScrollLeft = scrollLeft;
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                calculatedScrollLeft = -scrollLeft;
                break;
              case "positive-descending":
                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));
          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
            scrollLeft: calculatedScrollLeft,
            scrollTop: calculatedScrollTop,
            verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward",
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref2) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref2;
        if (typeof outerRef === "function") {
          outerRef(ref2);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref2;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1);
        });
      };
      return _this;
    }
    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = Grid.prototype;
    _proto.scrollTo = function scrollTo(_ref3) {
      var scrollLeft = _ref3.scrollLeft, scrollTop = _ref3.scrollTop;
      if (scrollLeft !== void 0) {
        scrollLeft = Math.max(0, scrollLeft);
      }
      if (scrollTop !== void 0) {
        scrollTop = Math.max(0, scrollTop);
      }
      this.setState(function(prevState) {
        if (scrollLeft === void 0) {
          scrollLeft = prevState.scrollLeft;
        }
        if (scrollTop === void 0) {
          scrollTop = prevState.scrollTop;
        }
        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
          return null;
        }
        return {
          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
          scrollLeft,
          scrollTop,
          scrollUpdateWasRequested: true,
          verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward"
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem2(_ref4) {
      var _ref4$align = _ref4.align, align = _ref4$align === void 0 ? "auto" : _ref4$align, columnIndex = _ref4.columnIndex, rowIndex = _ref4.rowIndex;
      var _this$props2 = this.props, columnCount = _this$props2.columnCount, height = _this$props2.height, rowCount = _this$props2.rowCount, width = _this$props2.width;
      var _this$state = this.state, scrollLeft = _this$state.scrollLeft, scrollTop = _this$state.scrollTop;
      var scrollbarSize = getScrollbarSize();
      if (columnIndex !== void 0) {
        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));
      }
      if (rowIndex !== void 0) {
        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;
      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;
      this.scrollTo({
        scrollLeft: columnIndex !== void 0 ? getOffsetForColumnAndAlignment3(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,
        scrollTop: rowIndex !== void 0 ? getOffsetForRowAndAlignment3(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop
      });
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, initialScrollLeft = _this$props3.initialScrollLeft, initialScrollTop = _this$props3.initialScrollTop;
      if (this._outerRef != null) {
        var outerRef = this._outerRef;
        if (typeof initialScrollLeft === "number") {
          outerRef.scrollLeft = initialScrollLeft;
        }
        if (typeof initialScrollTop === "number") {
          outerRef.scrollTop = initialScrollTop;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var direction = this.props.direction;
      var _this$state2 = this.state, scrollLeft = _this$state2.scrollLeft, scrollTop = _this$state2.scrollTop, scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "rtl") {
          switch (getRTLOffsetType()) {
            case "negative":
              outerRef.scrollLeft = -scrollLeft;
              break;
            case "positive-ascending":
              outerRef.scrollLeft = scrollLeft;
              break;
            default:
              var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;
              break;
          }
        } else {
          outerRef.scrollLeft = Math.max(0, scrollLeft);
        }
        outerRef.scrollTop = Math.max(0, scrollTop);
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props4 = this.props, children2 = _this$props4.children, className = _this$props4.className, columnCount = _this$props4.columnCount, direction = _this$props4.direction, height = _this$props4.height, innerRef = _this$props4.innerRef, innerElementType = _this$props4.innerElementType, innerTagName = _this$props4.innerTagName, itemData = _this$props4.itemData, _this$props4$itemKey = _this$props4.itemKey, itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey, outerElementType = _this$props4.outerElementType, outerTagName = _this$props4.outerTagName, rowCount = _this$props4.rowCount, style3 = _this$props4.style, useIsScrolling = _this$props4.useIsScrolling, width = _this$props4.width;
      var isScrolling = this.state.isScrolling;
      var _this$_getHorizontalR = this._getHorizontalRangeToRender(), columnStartIndex = _this$_getHorizontalR[0], columnStopIndex = _this$_getHorizontalR[1];
      var _this$_getVerticalRan = this._getVerticalRangeToRender(), rowStartIndex = _this$_getVerticalRan[0], rowStopIndex = _this$_getVerticalRan[1];
      var items = [];
      if (columnCount > 0 && rowCount) {
        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {
          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {
            items.push((0, import_react30.createElement)(children2, {
              columnIndex: _columnIndex,
              data: itemData,
              isScrolling: useIsScrolling ? isScrolling : void 0,
              key: itemKey({
                columnIndex: _columnIndex,
                data: itemData,
                rowIndex: _rowIndex
              }),
              rowIndex: _rowIndex,
              style: this._getItemStyle(_rowIndex, _columnIndex)
            }));
          }
        }
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      return (0, import_react30.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll: this._onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction
        }, style3)
      }, (0, import_react30.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: estimatedTotalHeight,
          pointerEvents: isScrolling ? "none" : void 0,
          width: estimatedTotalWidth
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      var _this$props5 = this.props, columnCount = _this$props5.columnCount, onItemsRendered = _this$props5.onItemsRendered, onScroll = _this$props5.onScroll, rowCount = _this$props5.rowCount;
      if (typeof onItemsRendered === "function") {
        if (columnCount > 0 && rowCount > 0) {
          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(), _overscanColumnStartIndex = _this$_getHorizontalR2[0], _overscanColumnStopIndex = _this$_getHorizontalR2[1], _visibleColumnStartIndex = _this$_getHorizontalR2[2], _visibleColumnStopIndex = _this$_getHorizontalR2[3];
          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(), _overscanRowStartIndex = _this$_getVerticalRan2[0], _overscanRowStopIndex = _this$_getVerticalRan2[1], _visibleRowStartIndex = _this$_getVerticalRan2[2], _visibleRowStopIndex = _this$_getVerticalRan2[3];
          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);
        }
      }
      if (typeof onScroll === "function") {
        var _this$state3 = this.state, _horizontalScrollDirection = _this$state3.horizontalScrollDirection, _scrollLeft = _this$state3.scrollLeft, _scrollTop = _this$state3.scrollTop, _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested, _verticalScrollDirection = _this$state3.verticalScrollDirection;
        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);
      }
    };
    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {
      var _this$props6 = this.props, columnCount = _this$props6.columnCount, overscanColumnCount = _this$props6.overscanColumnCount, overscanColumnsCount = _this$props6.overscanColumnsCount, overscanCount = _this$props6.overscanCount, rowCount = _this$props6.rowCount;
      var _this$state4 = this.state, horizontalScrollDirection = _this$state4.horizontalScrollDirection, isScrolling = _this$state4.isScrolling, scrollLeft = _this$state4.scrollLeft;
      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getColumnStartIndexForOffset3(this.props, scrollLeft, this._instanceProps);
      var stopIndex = getColumnStopIndexForStartIndex3(this.props, startIndex, scrollLeft, this._instanceProps);
      var overscanBackward = !isScrolling || horizontalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || horizontalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {
      var _this$props7 = this.props, columnCount = _this$props7.columnCount, overscanCount = _this$props7.overscanCount, overscanRowCount = _this$props7.overscanRowCount, overscanRowsCount = _this$props7.overscanRowsCount, rowCount = _this$props7.rowCount;
      var _this$state5 = this.state, isScrolling = _this$state5.isScrolling, verticalScrollDirection = _this$state5.verticalScrollDirection, scrollTop = _this$state5.scrollTop;
      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getRowStartIndexForOffset3(this.props, scrollTop, this._instanceProps);
      var stopIndex = getRowStopIndexForStartIndex3(this.props, startIndex, scrollTop, this._instanceProps);
      var overscanBackward = !isScrolling || verticalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || verticalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return Grid;
  }(import_react30.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps = function validateSharedProps2(_ref5, _ref6) {
  var children2 = _ref5.children, direction = _ref5.direction, height = _ref5.height, innerTagName = _ref5.innerTagName, outerTagName = _ref5.outerTagName, overscanColumnsCount = _ref5.overscanColumnsCount, overscanCount = _ref5.overscanCount, overscanRowsCount = _ref5.overscanRowsCount, width = _ref5.width;
  var instance = _ref6.instance;
  if (true) {
    if (typeof overscanCount === "number") {
      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {
        devWarningsOverscanCount.add(instance);
        console.warn("The overscanCount prop has been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (typeof overscanColumnsCount === "number" || typeof overscanRowsCount === "number") {
      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {
        devWarningsOverscanRowsColumnsCount.add(instance);
        console.warn("The overscanColumnsCount and overscanRowsCount props have been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName && !devWarningsTagName.has(instance)) {
        devWarningsTagName.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    if (children2 == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children2 === null ? "null" : typeof children2) + '" was specified.'));
    }
    switch (direction) {
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
    }
    if (typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Grids must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    }
    if (typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Grids must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE = 50;
var getEstimatedTotalHeight = function getEstimatedTotalHeight2(_ref, _ref2) {
  var rowCount = _ref.rowCount;
  var rowMetadataMap = _ref2.rowMetadataMap, estimatedRowHeight = _ref2.estimatedRowHeight, lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredRowIndex >= rowCount) {
    lastMeasuredRowIndex = rowCount - 1;
  }
  if (lastMeasuredRowIndex >= 0) {
    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getEstimatedTotalWidth = function getEstimatedTotalWidth2(_ref3, _ref4) {
  var columnCount = _ref3.columnCount;
  var columnMetadataMap = _ref4.columnMetadataMap, estimatedColumnWidth = _ref4.estimatedColumnWidth, lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredColumnIndex >= columnCount) {
    lastMeasuredColumnIndex = columnCount - 1;
  }
  if (lastMeasuredColumnIndex >= 0) {
    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getItemMetadata = function getItemMetadata2(itemType, props, index3, instanceProps) {
  var itemMetadataMap, itemSize, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    itemSize = props.columnWidth;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    itemSize = props.rowHeight;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  if (index3 > lastMeasuredIndex) {
    var offset6 = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset6 = itemMetadata.offset + itemMetadata.size;
    }
    for (var i = lastMeasuredIndex + 1; i <= index3; i++) {
      var size5 = itemSize(i);
      itemMetadataMap[i] = {
        offset: offset6,
        size: size5
      };
      offset6 += size5;
    }
    if (itemType === "column") {
      instanceProps.lastMeasuredColumnIndex = index3;
    } else {
      instanceProps.lastMeasuredRowIndex = index3;
    }
  }
  return itemMetadataMap[index3];
};
var findNearestItem = function findNearestItem2(itemType, props, instanceProps, offset6) {
  var itemMetadataMap, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset6) {
    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset6);
  } else {
    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset6);
  }
};
var findNearestItemBinarySearch = function findNearestItemBinarySearch2(itemType, props, instanceProps, high, low, offset6) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;
    if (currentOffset === offset6) {
      return middle;
    } else if (currentOffset < offset6) {
      low = middle + 1;
    } else if (currentOffset > offset6) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch = function findNearestItemExponentialSearch2(itemType, props, instanceProps, index3, offset6) {
  var itemCount = itemType === "column" ? props.columnCount : props.rowCount;
  var interval = 1;
  while (index3 < itemCount && getItemMetadata(itemType, props, index3, instanceProps).offset < offset6) {
    index3 += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index3, itemCount - 1), Math.floor(index3 / 2), offset6);
};
var getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment2(itemType, props, index3, align, scrollOffset, instanceProps, scrollbarSize) {
  var size5 = itemType === "column" ? props.width : props.height;
  var itemMetadata = getItemMetadata(itemType, props, index3, instanceProps);
  var estimatedTotalSize = itemType === "column" ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);
  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size5, itemMetadata.offset));
  var minOffset = Math.max(0, itemMetadata.offset - size5 + scrollbarSize + itemMetadata.size);
  if (align === "smart") {
    if (scrollOffset >= minOffset - size5 && scrollOffset <= maxOffset + size5) {
      align = "auto";
    } else {
      align = "center";
    }
  }
  switch (align) {
    case "start":
      return maxOffset;
    case "end":
      return minOffset;
    case "center":
      return Math.round(minOffset + (maxOffset - minOffset) / 2);
    case "auto":
    default:
      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
        return scrollOffset;
      } else if (minOffset > maxOffset) {
        return minOffset;
      } else if (scrollOffset < minOffset) {
        return minOffset;
      } else {
        return maxOffset;
      }
  }
};
var VariableSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset(props, index3, instanceProps) {
    return getItemMetadata("column", props, index3, instanceProps).offset;
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {
    return findNearestItem("column", props, instanceProps, scrollLeft);
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {
    var columnCount = props.columnCount, width = props.width;
    var itemMetadata = getItemMetadata("column", props, startIndex, instanceProps);
    var maxOffset = scrollLeft + width;
    var offset6 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < columnCount - 1 && offset6 < maxOffset) {
      stopIndex++;
      offset6 += getItemMetadata("column", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  getColumnWidth: function getColumnWidth(props, index3, instanceProps) {
    return instanceProps.columnMetadataMap[index3].size;
  },
  getEstimatedTotalHeight,
  getEstimatedTotalWidth,
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index3, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("column", props, index3, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index3, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("row", props, index3, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getRowOffset: function getRowOffset(props, index3, instanceProps) {
    return getItemMetadata("row", props, index3, instanceProps).offset;
  },
  getRowHeight: function getRowHeight(props, index3, instanceProps) {
    return instanceProps.rowMetadataMap[index3].size;
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {
    return findNearestItem("row", props, instanceProps, scrollTop);
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {
    var rowCount = props.rowCount, height = props.height;
    var itemMetadata = getItemMetadata("row", props, startIndex, instanceProps);
    var maxOffset = scrollTop + height;
    var offset6 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < rowCount - 1 && offset6 < maxOffset) {
      stopIndex++;
      offset6 += getItemMetadata("row", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps(props, instance) {
    var _ref5 = props, estimatedColumnWidth = _ref5.estimatedColumnWidth, estimatedRowHeight = _ref5.estimatedRowHeight;
    var instanceProps = {
      columnMetadataMap: {},
      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,
      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,
      lastMeasuredColumnIndex: -1,
      lastMeasuredRowIndex: -1,
      rowMetadataMap: {}
    };
    instance.resetAfterColumnIndex = function(columnIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        columnIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterRowIndex = function(rowIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        rowIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterIndices = function(_ref6) {
      var columnIndex = _ref6.columnIndex, rowIndex = _ref6.rowIndex, _ref6$shouldForceUpda = _ref6.shouldForceUpdate, shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;
      if (typeof columnIndex === "number") {
        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);
      }
      if (typeof rowIndex === "number") {
        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);
      }
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps(_ref7) {
    var columnWidth = _ref7.columnWidth, rowHeight = _ref7.rowHeight;
    if (true) {
      if (typeof columnWidth !== "function") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a function. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      } else if (typeof rowHeight !== "function") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a function. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;
var defaultItemKey$1 = function defaultItemKey3(index3, data) {
  return index3;
};
var devWarningsDirection = null;
var devWarningsTagName$1 = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsDirection = /* @__PURE__ */ new WeakSet();
    devWarningsTagName$1 = /* @__PURE__ */ new WeakSet();
  }
}
function createListComponent(_ref) {
  var _class;
  var getItemOffset3 = _ref.getItemOffset, getEstimatedTotalSize4 = _ref.getEstimatedTotalSize, getItemSize3 = _ref.getItemSize, getOffsetForIndexAndAlignment5 = _ref.getOffsetForIndexAndAlignment, getStartIndexForOffset3 = _ref.getStartIndexForOffset, getStopIndexForStartIndex3 = _ref.getStopIndexForStartIndex, initInstanceProps5 = _ref.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(List2, _PureComponent);
    function List2(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._outerRef = void 0;
      _this._resetIsScrollingTimeoutId = null;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        scrollDirection: "forward",
        scrollOffset: typeof _this.props.initialScrollOffset === "number" ? _this.props.initialScrollOffset : 0,
        scrollUpdateWasRequested: false
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
        return _this.props.onItemsRendered({
          overscanStartIndex,
          overscanStopIndex,
          visibleStartIndex,
          visibleStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          scrollDirection,
          scrollOffset,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(index3) {
        var _this$props = _this.props, direction = _this$props.direction, itemSize = _this$props.itemSize, layout = _this$props.layout;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);
        var style3;
        if (itemStyleCache.hasOwnProperty(index3)) {
          style3 = itemStyleCache[index3];
        } else {
          var _offset = getItemOffset3(_this.props, index3, _this._instanceProps);
          var size5 = getItemSize3(_this.props, index3, _this._instanceProps);
          var isHorizontal = direction === "horizontal" || layout === "horizontal";
          var isRtl = direction === "rtl";
          var offsetHorizontal = isHorizontal ? _offset : 0;
          itemStyleCache[index3] = style3 = {
            position: "absolute",
            left: isRtl ? void 0 : offsetHorizontal,
            right: isRtl ? offsetHorizontal : void 0,
            top: !isHorizontal ? _offset : 0,
            height: !isHorizontal ? size5 : "100%",
            width: isHorizontal ? size5 : "100%"
          };
        }
        return style3;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
        return {};
      });
      _this._onScrollHorizontal = function(event) {
        var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollLeft) {
            return null;
          }
          var direction = _this.props.direction;
          var scrollOffset = scrollLeft;
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                scrollOffset = -scrollLeft;
                break;
              case "positive-descending":
                scrollOffset = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._onScrollVertical = function(event) {
        var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollTop) {
            return null;
          }
          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref2) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref2;
        if (typeof outerRef === "function") {
          outerRef(ref2);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref2;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1, null);
        });
      };
      return _this;
    }
    List2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps$1(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = List2.prototype;
    _proto.scrollTo = function scrollTo(scrollOffset) {
      scrollOffset = Math.max(0, scrollOffset);
      this.setState(function(prevState) {
        if (prevState.scrollOffset === scrollOffset) {
          return null;
        }
        return {
          scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
          scrollOffset,
          scrollUpdateWasRequested: true
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem2(index3, align) {
      if (align === void 0) {
        align = "auto";
      }
      var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout = _this$props2.layout;
      var scrollOffset = this.state.scrollOffset;
      index3 = Math.max(0, Math.min(index3, itemCount - 1));
      var scrollbarSize = 0;
      if (this._outerRef) {
        var outerRef = this._outerRef;
        if (layout === "vertical") {
          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;
        } else {
          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;
        }
      }
      this.scrollTo(getOffsetForIndexAndAlignment5(this.props, index3, align, scrollOffset, this._instanceProps, scrollbarSize));
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, direction = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout = _this$props3.layout;
      if (typeof initialScrollOffset === "number" && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "horizontal" || layout === "horizontal") {
          outerRef.scrollLeft = initialScrollOffset;
        } else {
          outerRef.scrollTop = initialScrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var _this$props4 = this.props, direction = _this$props4.direction, layout = _this$props4.layout;
      var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "horizontal" || layout === "horizontal") {
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                outerRef.scrollLeft = -scrollOffset;
                break;
              case "positive-ascending":
                outerRef.scrollLeft = scrollOffset;
                break;
              default:
                var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                break;
            }
          } else {
            outerRef.scrollLeft = scrollOffset;
          }
        } else {
          outerRef.scrollTop = scrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props5 = this.props, children2 = _this$props5.children, className = _this$props5.className, direction = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style3 = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;
      var isScrolling = this.state.isScrolling;
      var isHorizontal = direction === "horizontal" || layout === "horizontal";
      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;
      var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];
      var items = [];
      if (itemCount > 0) {
        for (var _index = startIndex; _index <= stopIndex; _index++) {
          items.push((0, import_react30.createElement)(children2, {
            data: itemData,
            key: itemKey(_index, itemData),
            index: _index,
            isScrolling: useIsScrolling ? isScrolling : void 0,
            style: this._getItemStyle(_index)
          }));
        }
      }
      var estimatedTotalSize = getEstimatedTotalSize4(this.props, this._instanceProps);
      return (0, import_react30.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction
        }, style3)
      }, (0, import_react30.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: isHorizontal ? "100%" : estimatedTotalSize,
          pointerEvents: isScrolling ? "none" : void 0,
          width: isHorizontal ? estimatedTotalSize : "100%"
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      if (typeof this.props.onItemsRendered === "function") {
        var itemCount = this.props.itemCount;
        if (itemCount > 0) {
          var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];
          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
        }
      }
      if (typeof this.props.onScroll === "function") {
        var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
      }
    };
    _proto._getRangeToRender = function _getRangeToRender() {
      var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;
      var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;
      if (itemCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getStartIndexForOffset3(this.props, scrollOffset, this._instanceProps);
      var stopIndex = getStopIndexForStartIndex3(this.props, startIndex, scrollOffset, this._instanceProps);
      var overscanBackward = !isScrolling || scrollDirection === "backward" ? Math.max(1, overscanCount) : 1;
      var overscanForward = !isScrolling || scrollDirection === "forward" ? Math.max(1, overscanCount) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return List2;
  }(import_react30.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    layout: "vertical",
    overscanCount: 2,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps$1 = function validateSharedProps3(_ref2, _ref3) {
  var children2 = _ref2.children, direction = _ref2.direction, height = _ref2.height, layout = _ref2.layout, innerTagName = _ref2.innerTagName, outerTagName = _ref2.outerTagName, width = _ref2.width;
  var instance = _ref3.instance;
  if (true) {
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {
        devWarningsTagName$1.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    switch (direction) {
      case "horizontal":
      case "vertical":
        if (devWarningsDirection && !devWarningsDirection.has(instance)) {
          devWarningsDirection.add(instance);
          console.warn('The direction prop should be either "ltr" (default) or "rtl". Please use the layout prop to specify "vertical" (default) or "horizontal" orientation.');
        }
        break;
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
    }
    switch (layout) {
      case "horizontal":
      case "vertical":
        break;
      default:
        throw Error('An invalid "layout" prop has been specified. Value should be either "horizontal" or "vertical". ' + ('"' + layout + '" was specified.'));
    }
    if (children2 == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children2 === null ? "null" : typeof children2) + '" was specified.'));
    }
    if (isHorizontal && typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Horizontal lists must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    } else if (!isHorizontal && typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Vertical lists must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;
var getItemMetadata$1 = function getItemMetadata3(props, index3, instanceProps) {
  var _ref = props, itemSize = _ref.itemSize;
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  if (index3 > lastMeasuredIndex) {
    var offset6 = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset6 = itemMetadata.offset + itemMetadata.size;
    }
    for (var i = lastMeasuredIndex + 1; i <= index3; i++) {
      var size5 = itemSize(i);
      itemMetadataMap[i] = {
        offset: offset6,
        size: size5
      };
      offset6 += size5;
    }
    instanceProps.lastMeasuredIndex = index3;
  }
  return itemMetadataMap[index3];
};
var findNearestItem$1 = function findNearestItem3(props, instanceProps, offset6) {
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset6) {
    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset6);
  } else {
    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset6);
  }
};
var findNearestItemBinarySearch$1 = function findNearestItemBinarySearch3(props, instanceProps, high, low, offset6) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;
    if (currentOffset === offset6) {
      return middle;
    } else if (currentOffset < offset6) {
      low = middle + 1;
    } else if (currentOffset > offset6) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch3(props, instanceProps, index3, offset6) {
  var itemCount = props.itemCount;
  var interval = 1;
  while (index3 < itemCount && getItemMetadata$1(props, index3, instanceProps).offset < offset6) {
    index3 += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index3, itemCount - 1), Math.floor(index3 / 2), offset6);
};
var getEstimatedTotalSize = function getEstimatedTotalSize2(_ref2, _ref3) {
  var itemCount = _ref2.itemCount;
  var itemMetadataMap = _ref3.itemMetadataMap, estimatedItemSize = _ref3.estimatedItemSize, lastMeasuredIndex = _ref3.lastMeasuredIndex;
  var totalSizeOfMeasuredItems = 0;
  if (lastMeasuredIndex >= itemCount) {
    lastMeasuredIndex = itemCount - 1;
  }
  if (lastMeasuredIndex >= 0) {
    var itemMetadata = itemMetadataMap[lastMeasuredIndex];
    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
};
var VariableSizeList = createListComponent({
  getItemOffset: function getItemOffset(props, index3, instanceProps) {
    return getItemMetadata$1(props, index3, instanceProps).offset;
  },
  getItemSize: function getItemSize(props, index3, instanceProps) {
    return instanceProps.itemMetadataMap[index3].size;
  },
  getEstimatedTotalSize,
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment3(props, index3, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction = props.direction, height = props.height, layout = props.layout, width = props.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size5 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, index3, instanceProps);
    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);
    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size5, itemMetadata.offset));
    var minOffset = Math.max(0, itemMetadata.offset - size5 + itemMetadata.size + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size5 && scrollOffset <= maxOffset + size5) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        return Math.round(minOffset + (maxOffset - minOffset) / 2);
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset(props, offset6, instanceProps) {
    return findNearestItem$1(props, instanceProps, offset6);
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {
    var direction = props.direction, height = props.height, itemCount = props.itemCount, layout = props.layout, width = props.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size5 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);
    var maxOffset = scrollOffset + size5;
    var offset6 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < itemCount - 1 && offset6 < maxOffset) {
      stopIndex++;
      offset6 += getItemMetadata$1(props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps2(props, instance) {
    var _ref4 = props, estimatedItemSize = _ref4.estimatedItemSize;
    var instanceProps = {
      itemMetadataMap: {},
      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,
      lastMeasuredIndex: -1
    };
    instance.resetAfterIndex = function(index3, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index3 - 1);
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps2(_ref5) {
    var itemSize = _ref5.itemSize;
    if (true) {
      if (typeof itemSize !== "function") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a function. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});
var FixedSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset2(_ref, index3) {
    var columnWidth = _ref.columnWidth;
    return index3 * columnWidth;
  },
  getColumnWidth: function getColumnWidth2(_ref2, index3) {
    var columnWidth = _ref2.columnWidth;
    return columnWidth;
  },
  getRowOffset: function getRowOffset2(_ref3, index3) {
    var rowHeight = _ref3.rowHeight;
    return index3 * rowHeight;
  },
  getRowHeight: function getRowHeight2(_ref4, index3) {
    var rowHeight = _ref4.rowHeight;
    return rowHeight;
  },
  getEstimatedTotalHeight: function getEstimatedTotalHeight3(_ref5) {
    var rowCount = _ref5.rowCount, rowHeight = _ref5.rowHeight;
    return rowHeight * rowCount;
  },
  getEstimatedTotalWidth: function getEstimatedTotalWidth3(_ref6) {
    var columnCount = _ref6.columnCount, columnWidth = _ref6.columnWidth;
    return columnWidth * columnCount;
  },
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment2(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {
    var columnCount = _ref7.columnCount, columnWidth = _ref7.columnWidth, width = _ref7.width;
    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);
    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);
    if (align === "smart") {
      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(width / 2)) {
          return 0;
        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
          return lastColumnOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
          return scrollLeft;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollLeft < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment2(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {
    var rowHeight = _ref8.rowHeight, height = _ref8.height, rowCount = _ref8.rowCount;
    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);
    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);
    if (align === "smart") {
      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(height / 2)) {
          return 0;
        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
          return lastRowOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollTop >= minOffset && scrollTop <= maxOffset) {
          return scrollTop;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollTop < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset2(_ref9, scrollLeft) {
    var columnWidth = _ref9.columnWidth, columnCount = _ref9.columnCount;
    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex2(_ref10, startIndex, scrollLeft) {
    var columnWidth = _ref10.columnWidth, columnCount = _ref10.columnCount, width = _ref10.width;
    var left = startIndex * columnWidth;
    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);
    return Math.max(0, Math.min(
      columnCount - 1,
      startIndex + numVisibleColumns - 1
      // -1 is because stop index is inclusive
    ));
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset2(_ref11, scrollTop) {
    var rowHeight = _ref11.rowHeight, rowCount = _ref11.rowCount;
    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex2(_ref12, startIndex, scrollTop) {
    var rowHeight = _ref12.rowHeight, rowCount = _ref12.rowCount, height = _ref12.height;
    var top = startIndex * rowHeight;
    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);
    return Math.max(0, Math.min(
      rowCount - 1,
      startIndex + numVisibleRows - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps3(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps3(_ref13) {
    var columnWidth = _ref13.columnWidth, rowHeight = _ref13.rowHeight;
    if (true) {
      if (typeof columnWidth !== "number") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a number. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      }
      if (typeof rowHeight !== "number") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a number. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var FixedSizeList = createListComponent({
  getItemOffset: function getItemOffset2(_ref, index3) {
    var itemSize = _ref.itemSize;
    return index3 * itemSize;
  },
  getItemSize: function getItemSize2(_ref2, index3) {
    var itemSize = _ref2.itemSize;
    return itemSize;
  },
  getEstimatedTotalSize: function getEstimatedTotalSize3(_ref3) {
    var itemCount = _ref3.itemCount, itemSize = _ref3.itemSize;
    return itemSize * itemCount;
  },
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment4(_ref4, index3, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout = _ref4.layout, width = _ref4.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size5 = isHorizontal ? width : height;
    var lastItemOffset = Math.max(0, itemCount * itemSize - size5);
    var maxOffset = Math.min(lastItemOffset, index3 * itemSize);
    var minOffset = Math.max(0, index3 * itemSize - size5 + itemSize + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size5 && scrollOffset <= maxOffset + size5) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center": {
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(size5 / 2)) {
          return 0;
        } else if (middleOffset > lastItemOffset + Math.floor(size5 / 2)) {
          return lastItemOffset;
        } else {
          return middleOffset;
        }
      }
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset2(_ref5, offset6) {
    var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;
    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset6 / itemSize)));
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex2(_ref6, startIndex, scrollOffset) {
    var direction = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout = _ref6.layout, width = _ref6.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var offset6 = startIndex * itemSize;
    var size5 = isHorizontal ? width : height;
    var numVisibleItems = Math.ceil((size5 + scrollOffset - offset6) / itemSize);
    return Math.max(0, Math.min(
      itemCount - 1,
      startIndex + numVisibleItems - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps4(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps4(_ref7) {
    var itemSize = _ref7.itemSize;
    if (true) {
      if (typeof itemSize !== "number") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a number. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextArea.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var React846 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/ClearButton.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/i18n/en.json
var en_default11 = {
  "label_clear-button": "Clear"
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/i18n/ru.json
var ru_default11 = {
  "label_clear-button": "Очистить"
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/i18n/index.js
var i18n_default10 = addComponentKeysets({ en: en_default11, ru: ru_default11 }, `${NAMESPACE}clear-button`);

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/ClearButton.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/ClearButton.css";
var b49 = block("clear-button");
var ICON_SIZE = 16;
var mapTextInputSizeToButtonSize = (textInputSize) => {
  switch (textInputSize) {
    case "s": {
      return "xs";
    }
    case "m": {
      return "s";
    }
    case "l": {
      return "m";
    }
    case "xl": {
      return "l";
    }
    default: {
      throw new Error(`Unknown text input size "${textInputSize}"`);
    }
  }
};
var ClearButton = (props) => {
  const { size: size5, className, onClick } = props;
  const preventDefaultHandler = (event) => {
    event.preventDefault();
  };
  return (0, import_jsx_runtime81.jsx)(Button2, { size: size5, className: b49(null, className), onClick, onMouseDown: preventDefaultHandler, "aria-label": i18n_default10("label_clear-button"), children: (0, import_jsx_runtime81.jsx)(Icon, { data: Xmark_default, size: ICON_SIZE }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/OuterAdditionalContent/OuterAdditionalContent.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/controls/utils.js
var CONTROL_ERROR_MESSAGE_QA = "control-error-message-qa";
var CONTROL_ERROR_ICON_QA = "control-error-icon-qa";
var prepareAutoComplete = (autoComplete) => {
  if (typeof autoComplete === "boolean") {
    return autoComplete ? "on" : "off";
  } else {
    return autoComplete;
  }
};
var getInputControlState = (validationStateProp) => {
  return validationStateProp === "invalid" ? "error" : void 0;
};
var errorPropsMapper = (errorProps) => {
  const { error: errorProp, errorMessage: errorMessageProp, errorPlacement, validationState: validationStateProp } = errorProps;
  let errorMessage;
  if (typeof errorProp === "string") {
    errorMessage = errorProp;
  }
  if (errorMessageProp) {
    errorMessage = errorMessageProp;
  }
  let validationState;
  if (validationStateProp === "invalid" || Boolean(errorProp)) {
    validationState = "invalid";
  }
  return { errorMessage, errorPlacement, validationState };
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/OuterAdditionalContent/OuterAdditionalContent.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/common/OuterAdditionalContent/OuterAdditionalContent.css";
var b50 = block("outer-additional-content");
var OuterAdditionalContent = ({ errorMessage, note: note2, noteId, errorMessageId }) => {
  return errorMessage || note2 ? (0, import_jsx_runtime82.jsxs)("div", { className: b50(), children: [errorMessage && (0, import_jsx_runtime82.jsx)("div", { className: b50("error"), id: errorMessageId, "data-qa": CONTROL_ERROR_MESSAGE_QA, children: errorMessage }), note2 && (0, import_jsx_runtime82.jsx)("div", { className: b50("note"), id: noteId, children: note2 })] }) : null;
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextAreaControl.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var React845 = __toESM(require_react(), 1);
var b51 = block("text-area");
var calculateLinesByScrollHeight = (args) => {
  const { height, lineHeight } = args;
  const paddingTop = Number.isNaN(args.paddingTop) ? 0 : args.paddingTop;
  const paddingBottom = Number.isNaN(args.paddingBottom) ? 0 : args.paddingBottom;
  return (height - paddingTop - paddingBottom) / lineHeight;
};
function TextAreaControl(props) {
  var _a;
  const { name, id, tabIndex, autoComplete, placeholder: placeholder2, value, defaultValue, controlRef, controlProps, size: size5, rows, minRows = 1, maxRows, autoFocus, disabled, readOnly, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress } = props;
  const innerControlRef = React845.useRef(null);
  const handleRef = useForkRef(controlRef, innerControlRef);
  const textareaRows = Math.max(rows || minRows, 1);
  const innerValue = value || ((_a = innerControlRef == null ? void 0 : innerControlRef.current) == null ? void 0 : _a.value);
  const resizeHeight = React845.useCallback(() => {
    const control = innerControlRef == null ? void 0 : innerControlRef.current;
    const parent = control == null ? void 0 : control.parentElement;
    if (control && parent && !rows) {
      const controlStyles = getComputedStyle(control);
      const lineHeight = parseInt(controlStyles.getPropertyValue("line-height"), 10);
      const paddingTop = parseInt(controlStyles.getPropertyValue("padding-top"), 10);
      const paddingBottom = parseInt(controlStyles.getPropertyValue("padding-bottom"), 10);
      const linesWithCarriageReturn = ((innerValue == null ? void 0 : innerValue.match(/\n/g)) || []).length + 1;
      const parentHeight = parent.style.height;
      parent.style.height = `${parent.offsetHeight}px`;
      control.style.height = `${lineHeight + paddingTop + paddingBottom}px`;
      const overflow = control.style.overflow;
      control.style.overflow = "hidden";
      const linesByScrollHeight = calculateLinesByScrollHeight({
        height: control.scrollHeight,
        paddingTop,
        paddingBottom,
        lineHeight
      });
      const linesCount = Math.max(linesByScrollHeight, linesWithCarriageReturn);
      if (maxRows && maxRows < linesCount) {
        control.style.height = `${maxRows * lineHeight + paddingTop + paddingBottom}px`;
      } else if (minRows && minRows > linesCount) {
        control.style.height = `${Math.min(minRows, maxRows || Infinity) * lineHeight + paddingTop + paddingBottom}px`;
      } else {
        control.style.height = `${control.scrollHeight}px`;
      }
      control.style.overflow = overflow;
      parent.style.height = parentHeight;
    }
  }, [rows, maxRows, minRows, innerValue]);
  useResizeObserver({
    ref: rows ? void 0 : innerControlRef,
    onResize: resizeHeight
  });
  React845.useEffect(() => {
    resizeHeight();
  }, [resizeHeight, size5, value]);
  return (0, import_jsx_runtime83.jsx)("textarea", { ...controlProps, ref: handleRef, style: {
    ...controlProps.style,
    height: rows ? "auto" : void 0
  }, className: b51("control", controlProps.className), name, id, tabIndex, placeholder: placeholder2, value, defaultValue, rows: textareaRows, autoFocus, autoComplete, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress, disabled: disabled ?? controlProps.disabled, readOnly: readOnly ?? controlProps.readOnly });
}

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextArea.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextArea.css";
var b52 = block("text-area");
var TextArea = React846.forwardRef(function TextArea2(props, ref2) {
  const { view = "normal", size: size5 = "m", pin = "round-round", name, value, defaultValue, disabled, readOnly, hasClear = false, error: error3, errorMessage: errorMessageProp, validationState: validationStateProp, autoComplete, id: idProp, tabIndex, style: style3, className, qa, controlProps, note: note2, onUpdate, onChange } = props;
  const { errorMessage, validationState } = errorPropsMapper({
    error: error3,
    errorMessage: errorMessageProp,
    validationState: validationStateProp
  });
  const [inputValue, setInputValue] = useControlledState(value, defaultValue ?? "", onUpdate);
  const innerControlRef = React846.useRef(null);
  const fieldRef = useFormResetHandler({ initialValue: inputValue, onReset: setInputValue });
  const handleRef = useForkRef(props.controlRef, innerControlRef, fieldRef);
  const [hasVerticalScrollbar, setHasVerticalScrollbar] = React846.useState(false);
  const state = getInputControlState(validationState);
  const innerId = useUniqId();
  const isErrorMsgVisible = validationState === "invalid" && Boolean(errorMessage);
  const isClearControlVisible = Boolean(hasClear && !disabled && !readOnly && inputValue);
  const id = idProp || innerId;
  const errorMessageId = useUniqId();
  const noteId = useUniqId();
  const ariaDescribedBy = [
    controlProps == null ? void 0 : controlProps["aria-describedby"],
    note2 ? noteId : void 0,
    isErrorMsgVisible ? errorMessageId : void 0
  ].filter(Boolean).join(" ");
  const commonProps = {
    id,
    tabIndex,
    name,
    onChange(event) {
      setInputValue(event.target.value);
      if (onChange) {
        onChange(event);
      }
    },
    autoComplete: prepareAutoComplete(autoComplete),
    controlProps: {
      ...controlProps,
      "aria-describedby": ariaDescribedBy || void 0,
      "aria-invalid": validationState === "invalid" || void 0
    }
  };
  const handleClear = (event) => {
    const control = innerControlRef.current;
    if (control) {
      control.focus();
      const syntheticEvent = Object.create(event);
      syntheticEvent.target = control;
      syntheticEvent.currentTarget = control;
      control.value = "";
      if (onChange) {
        onChange(syntheticEvent);
      }
    }
    setInputValue("");
  };
  React846.useEffect(() => {
    const control = innerControlRef.current;
    if (control) {
      const currHasVerticalScrollbar = control.scrollHeight > control.clientHeight;
      if (hasVerticalScrollbar !== currHasVerticalScrollbar) {
        setHasVerticalScrollbar(currHasVerticalScrollbar);
      }
    }
  }, [inputValue, hasVerticalScrollbar]);
  return (0, import_jsx_runtime84.jsxs)("span", { ref: ref2, style: style3, className: b52({
    view,
    size: size5,
    disabled,
    state,
    pin: view === "clear" ? void 0 : pin,
    "has-clear": isClearControlVisible,
    "has-scrollbar": hasVerticalScrollbar
  }, className), "data-qa": qa, children: [(0, import_jsx_runtime84.jsxs)("span", { className: b52("content"), children: [(0, import_jsx_runtime84.jsx)(TextAreaControl, { ...props, ...commonProps, controlRef: handleRef }), isClearControlVisible && (0, import_jsx_runtime84.jsx)(ClearButton, { className: b52("clear", { size: size5 }), size: mapTextInputSizeToButtonSize(size5), onClick: handleClear })] }), (0, import_jsx_runtime84.jsx)(OuterAdditionalContent, { errorMessage: isErrorMsgVisible ? errorMessage : null, errorMessageId, note: note2, noteId })] });
});

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInput.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
var React859 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/Popover.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var React851 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/Popover.classname.js
var cnPopover = block("popover-legacy");

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/components/Buttons/Buttons.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/components/Buttons/helpers/getButtonView.js
var getButtonView2 = (theme, isAction = false) => {
  switch (theme) {
    case "special":
      return isAction ? "normal-contrast" : "flat-contrast";
    case "announcement":
      return isAction ? "normal-contrast" : "outlined";
    default:
      return isAction ? "normal" : "flat";
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/components/Buttons/Buttons.js
var Buttons = ({ theme, tooltipActionButton, tooltipCancelButton }) => {
  if (!tooltipActionButton && !tooltipCancelButton) {
    return null;
  }
  return (0, import_jsx_runtime85.jsxs)("div", { className: cnPopover("tooltip-buttons"), children: [tooltipActionButton && (0, import_jsx_runtime85.jsx)(Button2, { view: getButtonView2(theme, true), width: "max", onClick: tooltipActionButton.onClick, className: cnPopover("tooltip-button"), children: tooltipActionButton.text }), tooltipCancelButton && (0, import_jsx_runtime85.jsx)(Button2, { view: getButtonView2(theme, false), width: "max", onClick: tooltipCancelButton.onClick, className: cnPopover("tooltip-button"), children: tooltipCancelButton.text })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/components/Content/Content.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var Content = ({ secondary, htmlContent, content, className }) => {
  if (!htmlContent && !content) {
    return null;
  }
  if (htmlContent) {
    return (0, import_jsx_runtime86.jsx)("div", { className: cnPopover("tooltip-content", { secondary }, className), dangerouslySetInnerHTML: {
      __html: htmlContent
    } });
  }
  if (content) {
    return (0, import_jsx_runtime86.jsx)("div", { className: cnPopover("tooltip-content", { secondary }, className), children: content });
  }
  return null;
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/components/Links/Links.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var React848 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Link/Link.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var React847 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Link/Link.css";
var b53 = block("link");
var Link = React847.forwardRef(function Link2({ view = "normal", visitable = false, underline = false, href, children: children2, extraProps, qa, onClickCapture, ...props }, ref2) {
  const handleClickCapture = React847.useCallback((event) => {
    eventBroker.publish({
      componentId: "Link",
      eventId: "click",
      domEvent: event
    });
    if (onClickCapture) {
      onClickCapture(event);
    }
  }, [onClickCapture]);
  return (0, import_jsx_runtime87.jsx)("a", { ...props, ...extraProps, ref: ref2, href, rel: props.target === "_blank" && !props.rel ? "noopener noreferrer" : props.rel, onClickCapture: handleClickCapture, className: b53({ view, visitable, underline }, props.className), "data-qa": qa, children: children2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/components/Links/Links.js
var Links = ({ links }) => {
  if (links.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime88.jsx)("div", { className: cnPopover("tooltip-links"), children: links.map((link, index3) => {
    const { text: text2, href, target = "_blank", onClick } = link;
    return (0, import_jsx_runtime88.jsxs)(React848.Fragment, { children: [(0, import_jsx_runtime88.jsx)(Link, { href, target, onClick, className: cnPopover("tooltip-link"), children: text2 }), (0, import_jsx_runtime88.jsx)("br", {})] }, `link-${index3}`);
  }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/components/Trigger/Trigger.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var React849 = __toESM(require_react(), 1);
var Trigger = ({ open, openOnHover, disabled, className, openTooltip, closeTooltip, closedManually, onClick, children: children2 }) => {
  const handleClick = async (event) => {
    const shouldPreventClosingByClick = open && openOnHover;
    if (disabled || shouldPreventClosingByClick) {
      return;
    }
    const shouldToggleTooltip = !onClick || await onClick(event);
    if (!shouldToggleTooltip) {
      return;
    }
    const toggleTooltip = () => {
      const nextOpen = !open;
      if (nextOpen) {
        openTooltip();
        closedManually.current = false;
      } else {
        closeTooltip();
        closedManually.current = true;
      }
    };
    toggleTooltip();
  };
  const { onKeyDown } = useActionHandlers(handleClick);
  return typeof children2 === "function" ? (0, import_jsx_runtime89.jsx)(React849.Fragment, { children: children2({ onClick: handleClick, onKeyDown, open }) }) : (
    // The event handler should only be used to capture bubbled events
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, import_jsx_runtime89.jsx)("div", { className, onClick: handleClick, onKeyDown: onClick ? onKeyDown : void 0, children: children2 })
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/config.js
var PopoverBehavior;
(function(PopoverBehavior2) {
  PopoverBehavior2["Immediate"] = "immediate";
  PopoverBehavior2["Delayed"] = "delayed";
  PopoverBehavior2["DelayedClosing"] = "delayedClosing";
})(PopoverBehavior || (PopoverBehavior = {}));
var delayByBehavior = {
  [PopoverBehavior.Immediate]: [0, 0],
  [PopoverBehavior.Delayed]: [300, 300],
  [PopoverBehavior.DelayedClosing]: [0, 300]
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/hooks/useOpen.js
var React850 = __toESM(require_react(), 1);
var useOpen = ({ initialOpen, disabled, autoclosable, onOpenChange, delayOpening, delayClosing, behavior, shouldBeOpen }) => {
  const openingTimeout = React850.useRef(null);
  const closingTimeout = React850.useRef(null);
  const [isOpen, setIsOpen] = React850.useState(initialOpen);
  const unsetOpeningTimeout = React850.useCallback(() => {
    if (openingTimeout.current) {
      clearTimeout(openingTimeout.current);
      openingTimeout.current = null;
    }
  }, []);
  const unsetClosingTimeout = React850.useCallback(() => {
    if (closingTimeout.current) {
      clearTimeout(closingTimeout.current);
      closingTimeout.current = null;
    }
  }, []);
  React850.useEffect(() => {
    return () => {
      unsetOpeningTimeout();
      unsetClosingTimeout();
    };
  }, [unsetClosingTimeout, unsetOpeningTimeout]);
  const setTooltipOpen = React850.useCallback((open) => {
    setIsOpen(open);
    shouldBeOpen.current = open;
    onOpenChange == null ? void 0 : onOpenChange(open);
  }, [onOpenChange, shouldBeOpen]);
  const openTooltip = React850.useCallback(() => {
    unsetOpeningTimeout();
    setTooltipOpen(true);
  }, [setTooltipOpen, unsetOpeningTimeout]);
  const closeTooltip = React850.useCallback(() => {
    unsetClosingTimeout();
    setTooltipOpen(false);
  }, [setTooltipOpen, unsetClosingTimeout]);
  React850.useEffect(() => {
    if (disabled) {
      closeTooltip();
    }
  }, [disabled, closeTooltip]);
  useUpdateEffect(() => {
    if (autoclosable && !shouldBeOpen.current) {
      closeTooltip();
    }
  }, [autoclosable, closeTooltip, shouldBeOpen]);
  const [defaultDelayOpening, defaultDelayClosing] = delayByBehavior[behavior];
  const openTooltipDelayed = React850.useCallback(() => {
    openingTimeout.current = setTimeout(() => {
      openingTimeout.current = null;
      openTooltip();
    }, delayOpening ?? defaultDelayOpening);
  }, [defaultDelayOpening, delayOpening, openTooltip]);
  const closeTooltipDelayed = React850.useCallback(() => {
    closingTimeout.current = setTimeout(() => {
      closingTimeout.current = null;
      closeTooltip();
    }, delayClosing ?? defaultDelayClosing);
  }, [closeTooltip, defaultDelayClosing, delayClosing]);
  return {
    isOpen,
    closingTimeout,
    openTooltip,
    openTooltipDelayed,
    unsetOpeningTimeout,
    closeTooltip,
    closeTooltipDelayed,
    unsetClosingTimeout
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/Popover.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/legacy/Popover/Popover.css";
var Popover2 = React851.forwardRef(function({ initialOpen = false, disabled = false, autoclosable = true, openOnHover = true, delayOpening, delayClosing, behavior = PopoverBehavior.Delayed, placement, offset: offset6 = {}, tooltipOffset, tooltipClassName, theme = "info", size: size5 = "s", hasArrow = true, hasClose = false, className, children: children2, title, content, htmlContent, contentClassName, links, forceLinksAppearance = false, tooltipActionButton, tooltipCancelButton, onOpenChange, onCloseClick, onClick, anchorRef, anchorElement, strategy, qa, disablePortal = false, tooltipId, focusTrap, autoFocus, restoreFocusRef }, ref2) {
  const direction = useDirection();
  const controlRef = React851.useRef(null);
  const closedManually = React851.useRef(false);
  const shouldBeOpen = React851.useRef(initialOpen);
  const { isOpen, closingTimeout, openTooltip, openTooltipDelayed, unsetOpeningTimeout, closeTooltip, closeTooltipDelayed, unsetClosingTimeout } = useOpen({
    initialOpen,
    disabled,
    autoclosable,
    onOpenChange,
    delayOpening,
    delayClosing,
    behavior,
    shouldBeOpen
  });
  const popupPlacement = React851.useMemo(() => {
    if (placement) {
      return placement;
    }
    return direction === "rtl" ? ["left", "bottom"] : ["right", "bottom"];
  }, [direction, placement]);
  React851.useImperativeHandle(ref2, () => ({
    openTooltip,
    closeTooltip
  }), [openTooltip, closeTooltip]);
  const handleCloseClick = async (event) => {
    closeTooltip();
    onCloseClick == null ? void 0 : onCloseClick(event);
  };
  const hasTitle = Boolean(title);
  const hasAnchor = Boolean(anchorRef || anchorElement);
  const popoverTitleId = `popover-${tooltipId ?? ""}-title-${useUniqId()}`;
  const tooltip = (0, import_jsx_runtime90.jsx)(Popup, { id: tooltipId, role: openOnHover ? "tooltip" : "dialog", strategy, anchorElement, anchorRef: anchorRef || controlRef, className: cnPopover("tooltip", {
    theme,
    size: size5,
    ["with-close"]: hasClose,
    "force-links-appearance": forceLinksAppearance
  }, tooltipClassName), open: isOpen, placement: popupPlacement, hasArrow, offset: tooltipOffset, onClose: hasAnchor ? void 0 : closeTooltip, qa: qa ? `${qa}-tooltip` : "", disablePortal, initialFocus: autoFocus ? 0 : void 0, modal: focusTrap, returnFocus: restoreFocusRef, "aria-labelledby": title ? popoverTitleId : void 0, children: (0, import_jsx_runtime90.jsxs)(React851.Fragment, { children: [title && (0, import_jsx_runtime90.jsx)("h3", { id: popoverTitleId, className: cnPopover("tooltip-title"), children: title }), (0, import_jsx_runtime90.jsx)(Content, { secondary: hasTitle ? theme !== "announcement" : false, content, htmlContent, className: contentClassName }), links && (0, import_jsx_runtime90.jsx)(Links, { links }), (0, import_jsx_runtime90.jsx)(Buttons, { theme, tooltipActionButton, tooltipCancelButton }), hasClose && (0, import_jsx_runtime90.jsx)("div", { className: cnPopover("tooltip-close"), children: (0, import_jsx_runtime90.jsx)(Button2, { size: "s", view: "flat-secondary", onClick: handleCloseClick, "aria-label": "Close", children: (0, import_jsx_runtime90.jsx)(Icon, { data: Xmark_default, size: 16 }) }) })] }) });
  if (hasAnchor) {
    return tooltip;
  }
  const onMouseEnter = () => {
    unsetClosingTimeout();
    if (!isOpen && !disabled && !closedManually.current) {
      openTooltipDelayed();
    } else {
      shouldBeOpen.current = true;
    }
  };
  const onMouseLeave = () => {
    if (autoclosable && !closedManually.current && !closingTimeout.current) {
      unsetOpeningTimeout();
      closeTooltipDelayed();
    } else {
      shouldBeOpen.current = false;
    }
    closedManually.current = false;
  };
  if (offset6 && (typeof offset6.top === "number" || typeof offset6.left === "number")) {
    warnOnce('[Popover] Physical names (top, left) of "offset" property are deprecated. Use logical names (block, inline) instead.');
  }
  return (0, import_jsx_runtime90.jsxs)("div", { ref: controlRef, className: cnPopover({ disabled }, className), onMouseEnter: openOnHover ? onMouseEnter : void 0, onMouseLeave: openOnHover ? onMouseLeave : void 0, onFocus: openOnHover ? onMouseEnter : void 0, onBlur: openOnHover ? onMouseLeave : void 0, style: {
    top: offset6.top,
    left: offset6.left,
    insetBlockStart: offset6.block,
    insetInlineStart: offset6.inline
  }, "data-qa": qa, children: [(0, import_jsx_runtime90.jsx)(Trigger, { closeTooltip, openTooltip, open: isOpen, openOnHover, className: cnPopover("handler"), disabled, onClick, closedManually, children: children2 }), tooltip] });
});
Popover2.displayName = "Popover";

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Tabs/Tabs.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
var React855 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Tabs/TabsContext.js
var React852 = __toESM(require_react(), 1);
var TabsContext = React852.createContext({
  activeTabId: void 0
});
TabsContext.displayName = "TabsContext";

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Tabs/TabsItem.js
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
var React854 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Label/Label.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
var React853 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Label/constants.js
var LabelQa = {
  copyButton: "copy-button",
  closeButton: "close-button",
  mainButton: "main-button"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Label/Label.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Label/Label.css";
var b54 = block("label");
var iconSizeMap = {
  xs: 12,
  s: 14,
  m: 16
};
var Label = React853.forwardRef(function Label2(props, ref2) {
  const { type = "default", theme = "normal", size: size5 = "xs", title, icon, children: children2, onCloseClick, className, disabled, copyText: copyText2, closeButtonLabel, copyButtonLabel, interactive = false, value, onCopy, onClick, qa } = props;
  const hasContent = Boolean(children2 !== "" && React853.Children.count(children2) > 0);
  const typeClose = type === "close" && hasContent;
  const typeCopy = type === "copy" && hasContent;
  const typeInfo = type === "info";
  const hasOnClick = typeof onClick === "function";
  const hasCopy = Boolean(typeCopy && copyText2);
  const isInteractive = (hasOnClick || hasCopy || typeInfo || interactive) && !disabled;
  const iconSize = iconSizeMap[size5];
  const startIcon = icon && (0, import_jsx_runtime91.jsx)("div", { className: b54("addon", { side: hasContent ? "start" : void 0, type: "icon" }), children: icon });
  const content = hasContent && (0, import_jsx_runtime91.jsxs)("div", { className: b54("text"), children: [(0, import_jsx_runtime91.jsx)("div", { className: b54("content"), children: children2 }), Boolean(value) && (0, import_jsx_runtime91.jsxs)("div", { className: b54("value"), children: [(0, import_jsx_runtime91.jsx)("div", { className: b54("separator"), children: ":" }), (0, import_jsx_runtime91.jsx)("div", { className: b54("key"), children: value })] })] });
  const renderLabel = (status) => {
    let actionButton;
    if (typeCopy) {
      actionButton = (0, import_jsx_runtime91.jsx)("button", { type: "button", "aria-label": copyButtonLabel || void 0, onClick: hasOnClick ? onClick : void 0, disabled, className: b54("addon", {
        side: "end",
        type: "button",
        action: hasOnClick ? "click" : "copy"
      }), "data-qa": LabelQa.copyButton, children: (0, import_jsx_runtime91.jsx)(ClipboardIcon, { status: status || "pending", size: iconSize }) });
    } else if (typeInfo) {
      actionButton = (0, import_jsx_runtime91.jsx)("div", { className: b54("addon", {
        side: "end",
        type: "icon"
      }), children: (0, import_jsx_runtime91.jsx)(Icon, { size: iconSize, data: CircleInfo_default }) });
    } else if (typeClose) {
      actionButton = (0, import_jsx_runtime91.jsx)("button", { type: "button", onClick: onCloseClick, "aria-label": closeButtonLabel || void 0, disabled, className: b54("addon", {
        side: "end",
        type: "button",
        action: "close"
      }), "data-qa": LabelQa.closeButton, children: (0, import_jsx_runtime91.jsx)(Icon, { size: iconSize, data: Xmark_default }) });
    }
    return (0, import_jsx_runtime91.jsxs)("div", { ref: ref2, className: b54({
      theme,
      size: size5,
      interactive: isInteractive,
      disabled
    }, className), title, "data-qa": qa, children: [startIcon, hasOnClick ? (0, import_jsx_runtime91.jsx)("button", { disabled, type: "button", onClick, className: b54("main-button"), "data-qa": LabelQa.mainButton, children: content }) : content, actionButton] });
  };
  if (hasCopy && copyText2 && !hasOnClick) {
    return (0, import_jsx_runtime91.jsx)(CopyToClipboard, { text: copyText2, onCopy, timeout: 1e3, children: (status) => renderLabel(status) });
  }
  return renderLabel();
});

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Tabs/TabsItem.js
var b55 = block("tabs-legacy");
function TabsItem({ id, className, title, meta, hint, icon, counter, label, active, disabled, hasOverflow, extraProps, onClick, qa }) {
  const { activeTabId } = React854.useContext(TabsContext);
  const isActive = typeof active === "boolean" ? active : activeTabId === id;
  const handleClick = () => {
    onClick(id);
  };
  const handleKeyDown = (event) => {
    if (event.key === " ") {
      onClick(id);
    }
  };
  const htmlTitle = React854.useMemo(() => {
    if (hint !== void 0) {
      return hint;
    }
    if (typeof title === "string") {
      return title;
    }
    return void 0;
  }, [hint, title]);
  return (0, import_jsx_runtime92.jsxs)("div", { ...extraProps, role: "tab", "aria-selected": isActive, "aria-disabled": disabled === true, tabIndex: disabled ? -1 : 0, className: b55("item", { active: isActive, disabled, overflow: Boolean(hasOverflow) }, className), title: htmlTitle, onClick: handleClick, onKeyDown: handleKeyDown, "data-qa": qa, children: [(0, import_jsx_runtime92.jsxs)("div", { className: b55("item-content"), children: [icon && (0, import_jsx_runtime92.jsx)("div", { className: b55("item-icon"), children: icon }), (0, import_jsx_runtime92.jsx)("div", { className: b55("item-title"), children: title || id }), counter !== void 0 && (0, import_jsx_runtime92.jsx)("div", { className: b55("item-counter"), children: counter }), label && (0, import_jsx_runtime92.jsx)(Label, { className: b55("item-label"), theme: label.theme, children: label.content })] }), meta && (0, import_jsx_runtime92.jsx)("div", { className: b55("item-meta"), children: meta })] });
}
TabsItem.displayName = "Tabs.Item";

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Tabs/Tabs.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/legacy/Tabs/Tabs.css";
var b56 = block("tabs-legacy");
var TabsDirection;
(function(TabsDirection2) {
  TabsDirection2["Horizontal"] = "horizontal";
  TabsDirection2["Vertical"] = "vertical";
})(TabsDirection || (TabsDirection = {}));
var getActiveTabId = (activeTab, allowNotSelected, items) => {
  var _a;
  if (activeTab) {
    return activeTab;
  }
  if (allowNotSelected || (items == null ? void 0 : items.length) === 0) {
    return void 0;
  }
  return (_a = items == null ? void 0 : items[0]) == null ? void 0 : _a.id;
};
var emptyTabsList = [];
var TabsComponent = React855.forwardRef(({ direction = TabsDirection.Horizontal, size: size5 = "m", activeTab, allowNotSelected = false, items = emptyTabsList, children: children2, className, onSelectTab, wrapTo, qa, ...restProps }, ref2) => {
  const activeTabId = getActiveTabId(activeTab, allowNotSelected, items);
  const tabsContextValue = React855.useMemo(() => ({ activeTabId }), [activeTabId]);
  const tabs = React855.useMemo(() => {
    const handleTabClick = (tabId) => {
      if (onSelectTab) {
        onSelectTab(tabId);
      }
    };
    return items.map((item, index3) => {
      const tabItemNode = (0, import_jsx_runtime93.jsx)(TabsItem, { ...item, onClick: handleTabClick }, item.id);
      if (wrapTo) {
        return wrapTo(item, tabItemNode, index3);
      }
      return tabItemNode;
    });
  }, [items, onSelectTab, wrapTo]);
  return (0, import_jsx_runtime93.jsx)("div", { ...filterDOMProps(restProps, { labelable: true }), role: "tablist", className: b56({ direction, size: size5 }, className), "data-qa": qa, ref: ref2, children: (0, import_jsx_runtime93.jsx)(TabsContext.Provider, { value: tabsContextValue, children: children2 || tabs }) });
});
TabsComponent.displayName = "Tabs";
var Tabs = Object.assign(TabsComponent, { Item: TabsItem });

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var React857 = __toESM(require_react(), 1);
var import_throttle2 = __toESM(require_throttle(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/BreadcrumbsItem.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
var React856 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/BreadcrumbsButton.js
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var b57 = block("breadcrumbs-legacy");
function BreadcrumbsButton(props) {
  return (0, import_jsx_runtime94.jsx)("button", { ...props, type: "button", className: b57("switcher", { more: true }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/BreadcrumbsItem.js
var b58 = block("breadcrumbs-legacy");
function Item({ item, isCurrent, isPrevCurrent, renderItemContent, renderItem }) {
  const children2 = renderItemContent ? renderItemContent(item, isCurrent, isPrevCurrent) : item.text;
  if (renderItem) {
    return renderItem({ item, children: children2, isCurrent, isPrevCurrent });
  }
  const itemTitle = item.title || item.text;
  if (isPrevCurrent || !isCurrent) {
    if (item.href !== void 0) {
      return (0, import_jsx_runtime95.jsx)(Link, { view: "secondary", href: item.href, title: itemTitle, onClick: item.action, className: b58("item", { "prev-current": isPrevCurrent }), children: children2 }, item.text);
    }
    return (0, import_jsx_runtime95.jsx)(BreadcrumbsButton, { title: itemTitle, onClick: item.action, children: children2 }, item.text);
  }
  return (0, import_jsx_runtime95.jsx)("div", { title: itemTitle, className: b58("item", { current: true }), children: children2 });
}
var BreadcrumbsItem2 = React856.memo(Item);
BreadcrumbsItem2.displayName = "Breadcrumbs.Item";

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/BreadcrumbsMore.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/i18n/en.json
var en_default12 = {
  label_more: "Show more"
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/i18n/ru.json
var ru_default12 = {
  label_more: "Показать больше"
};

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/i18n/index.js
var COMPONENT9 = "Breadcrumbs";
var i18n_default11 = addComponentKeysets({ en: en_default12, ru: ru_default12 }, COMPONENT9);

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/BreadcrumbsMore.js
var b59 = block("breadcrumbs-legacy");
function BreadcrumbsMore({ popupStyle, popupPlacement, items }) {
  return (0, import_jsx_runtime96.jsx)(DropdownMenuExport, { items, popupProps: {
    className: b59("popup", {
      staircase: popupStyle === "staircase"
    }),
    placement: popupPlacement
  }, renderSwitcher: ({ onClick }) => (0, import_jsx_runtime96.jsx)(BreadcrumbsButton, { title: i18n_default11("label_more"), onClick, children: "..." }) });
}
BreadcrumbsMore.displayName = "Breadcrumbs.More";

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/BreadcrumbsSeparator.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
var b60 = block("breadcrumbs-legacy");
function BreadcrumbsSeparator2({ renderItemDivider }) {
  return (0, import_jsx_runtime97.jsx)("div", { "aria-hidden": true, className: b60("divider"), children: renderItemDivider ? renderItemDivider() : "/" });
}
BreadcrumbsSeparator2.displayName = "Breadcrumbs.Separator";

// node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/Breadcrumbs.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/legacy/Breadcrumbs/Breadcrumbs.css";
var b61 = block("breadcrumbs-legacy");
var LastDisplayedItemsCount;
(function(LastDisplayedItemsCount2) {
  LastDisplayedItemsCount2[LastDisplayedItemsCount2["One"] = 1] = "One";
  LastDisplayedItemsCount2[LastDisplayedItemsCount2["Two"] = 2] = "Two";
})(LastDisplayedItemsCount || (LastDisplayedItemsCount = {}));
var FirstDisplayedItemsCount;
(function(FirstDisplayedItemsCount2) {
  FirstDisplayedItemsCount2[FirstDisplayedItemsCount2["Zero"] = 0] = "Zero";
  FirstDisplayedItemsCount2[FirstDisplayedItemsCount2["One"] = 1] = "One";
})(FirstDisplayedItemsCount || (FirstDisplayedItemsCount = {}));

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/AdditionalContent.js
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
var React858 = __toESM(require_react(), 1);
var b62 = block("text-input");
var AdditionalContent = React858.forwardRef(function AdditionalContent2({ placement, children: children2, onClick }, ref2) {
  if (!children2) {
    return null;
  }
  return (
    // It is used to focus the control input if non-interaction element is provided.
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    (0, import_jsx_runtime99.jsx)("div", { ref: ref2, className: b62("additional-content", { placement }), onClick, children: children2 })
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInputControl.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
var b63 = block("text-input");
function TextInputControl(props) {
  const { controlProps, controlRef, type, name, id, tabIndex, autoComplete, placeholder: placeholder2, value, defaultValue, autoFocus, disabled, readOnly, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress } = props;
  return (0, import_jsx_runtime100.jsx)("input", { ...controlProps, ref: controlRef, className: b63("control", { type: "input" }, controlProps.className), type, name, id, tabIndex, placeholder: placeholder2, value, defaultValue, autoFocus, autoComplete, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress, disabled: disabled ?? controlProps.disabled, readOnly: readOnly ?? controlProps.readOnly });
}

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInput.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInput.css";
var b64 = block("text-input");
var TextInput = React859.forwardRef(function TextInput2(props, ref2) {
  const { view = "normal", size: size5 = "m", pin = "round-round", name, value, defaultValue, label, disabled, readOnly, hasClear = false, error: error3, errorMessage: errorMessageProp, errorPlacement: errorPlacementProp = "outside", validationState: validationStateProp, autoComplete, id: idProp, tabIndex, style: style3, className, qa, controlProps: controlPropsProp, startContent, endContent, note: note2, onUpdate, onChange } = props;
  const { errorMessage, errorPlacement, validationState } = errorPropsMapper({
    error: error3,
    errorMessage: errorMessageProp,
    errorPlacement: errorPlacementProp,
    validationState: validationStateProp
  });
  const [inputValue, setInputValue] = useControlledState(value, defaultValue ?? "", onUpdate);
  const innerControlRef = React859.useRef(null);
  const fieldRef = useFormResetHandler({ initialValue: inputValue, onReset: setInputValue });
  const handleRef = useForkRef(props.controlRef, innerControlRef, fieldRef);
  const labelRef = React859.useRef(null);
  const startContentRef = React859.useRef(null);
  const state = getInputControlState(validationState);
  const isLabelVisible = Boolean(label);
  const isErrorMsgVisible = validationState === "invalid" && Boolean(errorMessage) && errorPlacement === "outside";
  const isErrorIconVisible = validationState === "invalid" && Boolean(errorMessage) && errorPlacement === "inside";
  const isClearControlVisible = Boolean(hasClear && !disabled && !readOnly && inputValue);
  const isStartContentVisible = Boolean(startContent);
  const isEndContentVisible = Boolean(endContent);
  const isAutoCompleteOff = isLabelVisible && !idProp && !name && typeof autoComplete === "undefined";
  const innerId = useUniqId();
  const id = isLabelVisible ? idProp || innerId : idProp;
  const labelSize = useElementSize(isLabelVisible ? labelRef : null, size5);
  const startContentSize = useElementSize(isStartContentVisible ? startContentRef : null, size5);
  const errorMessageId = useUniqId();
  const noteId = useUniqId();
  const ariaDescribedBy = [
    controlPropsProp == null ? void 0 : controlPropsProp["aria-describedby"],
    note2 ? noteId : void 0,
    isErrorMsgVisible ? errorMessageId : void 0
  ].filter(Boolean).join(" ");
  const controlProps = {
    ...controlPropsProp,
    style: {
      ...controlPropsProp == null ? void 0 : controlPropsProp.style,
      ...isLabelVisible && labelSize.width ? { paddingInlineStart: `${labelSize.width}px` } : {}
    },
    "aria-invalid": validationState === "invalid" || void 0,
    "aria-describedby": ariaDescribedBy || void 0
  };
  const commonProps = {
    id,
    tabIndex,
    name,
    onChange(event) {
      setInputValue(event.target.value);
      if (onChange) {
        onChange(event);
      }
    },
    autoComplete: isAutoCompleteOff ? "off" : prepareAutoComplete(autoComplete),
    controlProps
  };
  const handleClear = (event) => {
    setInputValue("");
    const control = innerControlRef.current;
    if (control) {
      const syntheticEvent = Object.create(event);
      syntheticEvent.target = control;
      syntheticEvent.currentTarget = control;
      control.value = "";
      if (onChange) {
        onChange(syntheticEvent);
      }
    }
  };
  const handleAdditionalContentClick = (event) => {
    var _a, _b;
    const needActivateInput = !event.currentTarget.contains(document.activeElement) && event.currentTarget.contains(event.target);
    const hasSelection = Boolean((_a = document.getSelection()) == null ? void 0 : _a.toString());
    if (needActivateInput && !hasSelection) {
      (_b = innerControlRef.current) == null ? void 0 : _b.focus();
    }
  };
  return (0, import_jsx_runtime101.jsxs)("span", { ref: ref2, style: style3, className: b64({
    view,
    size: size5,
    disabled,
    state,
    pin: view === "clear" ? void 0 : pin,
    "has-clear": isClearControlVisible,
    "has-start-content": isStartContentVisible,
    "has-end-content": isEndContentVisible
  }, className), "data-qa": qa, children: [(0, import_jsx_runtime101.jsxs)("span", { className: b64("content"), children: [isStartContentVisible && (0, import_jsx_runtime101.jsx)(AdditionalContent, { ref: startContentRef, placement: "start", onClick: handleAdditionalContentClick, children: startContent }), isLabelVisible && (0, import_jsx_runtime101.jsx)("label", { ref: labelRef, style: {
    insetInlineStart: isStartContentVisible ? startContentSize.width : void 0,
    maxWidth: `calc(50% - ${startContentSize.width}px)`
  }, className: b64("label"), title: label, htmlFor: id, children: `${label}` }), (0, import_jsx_runtime101.jsx)(TextInputControl, { ...props, ...commonProps, controlRef: handleRef }), isClearControlVisible && (0, import_jsx_runtime101.jsx)(ClearButton, { size: mapTextInputSizeToButtonSize(size5), onClick: handleClear, className: b64("clear", { size: size5 }) }), isErrorIconVisible && (0, import_jsx_runtime101.jsx)(Popover2, { content: errorMessage, children: (0, import_jsx_runtime101.jsx)("span", { "data-qa": CONTROL_ERROR_ICON_QA, children: (0, import_jsx_runtime101.jsx)(Icon, { data: TriangleExclamation_default, className: b64("error-icon"), size: size5 === "s" ? 12 : 16 }) }) }), isEndContentVisible && (0, import_jsx_runtime101.jsx)(AdditionalContent, { placement: "end", onClick: handleAdditionalContentClick, children: endContent })] }), (0, import_jsx_runtime101.jsx)(OuterAdditionalContent, { note: note2, errorMessage: isErrorMsgVisible ? errorMessage : null, noteId, errorMessageId })] });
});

// node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/PasswordInput.js
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var React860 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/constants.js
var PasswordInputQa = {
  revealButton: "reveal-button",
  copyButton: "copy-button"
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/i18n/en.json
var en_default13 = {
  "label_show-password": "Show password",
  "label_hide-password": "Hide password"
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/i18n/ru.json
var ru_default13 = {
  "label_show-password": "Показать пароль",
  "label_hide-password": "Скрыть пароль"
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/i18n/index.js
var COMPONENT10 = "PasswordInput";
var i18n2 = addComponentKeysets({ en: en_default13, ru: ru_default13 }, COMPONENT10);

// node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/utils.js
var getActionButtonSizeAndIconSize = (textInputSize) => {
  let actionButtonSize = "s";
  let iconSize = 16;
  switch (textInputSize) {
    case "s": {
      actionButtonSize = "xs";
      iconSize = 12;
      break;
    }
    case "l": {
      actionButtonSize = "m";
      break;
    }
    case "xl": {
      actionButtonSize = "l";
    }
  }
  return { actionButtonSize, iconSize };
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/PasswordInput.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/PasswordInput/PasswordInput.css";
var b65 = block("password-input");
var PasswordInput = (props) => {
  const { autoComplete, controlProps, endContent, hideCopyButton = false, hideRevealButton = false, showCopyTooltip = false, showRevealTooltip = false, size: size5 = "m" } = props;
  const [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue ?? "", props.onUpdate);
  const [revealValue, setRevealValue] = useControlledState(props.revealValue, false, props.onRevealValueUpdate);
  const { actionButtonSize, iconSize } = getActionButtonSizeAndIconSize(size5);
  const additionalEndContent = (0, import_jsx_runtime102.jsxs)(React860.Fragment, { children: [endContent, inputValue && !hideCopyButton && !props.disabled ? (0, import_jsx_runtime102.jsx)(ClipboardButton, { view: "flat-secondary", text: inputValue, hasTooltip: showCopyTooltip, size: actionButtonSize, className: b65("copy-button"), qa: PasswordInputQa.copyButton }) : null, hideRevealButton ? null : (0, import_jsx_runtime102.jsx)(ActionTooltip, { disabled: !showRevealTooltip, title: revealValue ? i18n2("label_hide-password") : i18n2("label_show-password"), children: (0, import_jsx_runtime102.jsx)(Button2, { qa: PasswordInputQa.revealButton, view: "flat-secondary", disabled: props.disabled, onClick: () => setRevealValue(!revealValue), size: actionButtonSize, onMouseDown: (event) => event.preventDefault(), "aria-label": revealValue ? i18n2("label_hide-password") : i18n2("label_show-password"), children: (0, import_jsx_runtime102.jsx)(Icon, { data: revealValue ? EyeSlash_default : Eye_default, size: iconSize }) }) })] });
  return (0, import_jsx_runtime102.jsx)(TextInput, { ...props, type: revealValue ? "text" : "password", endContent: additionalEndContent, autoComplete: autoComplete ? autoComplete : "new-password", controlProps: {
    ...controlProps,
    className: b65("input-control", controlProps == null ? void 0 : controlProps.className)
  }, value: inputValue, onUpdate: setInputValue });
};

// node_modules/@gravity-ui/uikit/build/esm/components/List/ListLoadingIndicator.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
var React861 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Loader/Loader.js
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Loader/Loader.css";
var b66 = block("loader");
function Loader({ size: size5 = "s", className, qa }) {
  return (0, import_jsx_runtime103.jsxs)("div", { className: b66({ size: size5 }, className), "data-qa": qa, children: [(0, import_jsx_runtime103.jsx)("div", { className: b66("left") }), (0, import_jsx_runtime103.jsx)("div", { className: b66("center") }), (0, import_jsx_runtime103.jsx)("div", { className: b66("right") })] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/List/ListLoadingIndicator.js
var b67 = block("list");
var ListLoadingIndicator = (props) => {
  const ref2 = React861.useRef(null);
  useIntersection({ element: ref2.current, onIntersect: props == null ? void 0 : props.onIntersect });
  return (0, import_jsx_runtime104.jsx)("div", { ref: ref2, className: b67("loading-indicator"), children: (0, import_jsx_runtime104.jsx)(Loader, { qa: "list-loader" }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/List/components/ListItem.js
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var React862 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/List/constants.js
var ListQa = {
  ACTIVE_ITEM: "list-active-item"
};
var listNavigationIgnoredKeys = [
  // Tab key should focus the next element
  KeyCode.TAB
];

// node_modules/@gravity-ui/uikit/build/esm/components/List/components/ListItem.js
var b68 = block("list");
var defaultRenderItem = (item) => String(item);
function getStyle3(provided, style3) {
  if (!style3) {
    return provided == null ? void 0 : provided.draggableProps.style;
  }
  return {
    ...provided == null ? void 0 : provided.draggableProps.style,
    ...style3
  };
}
var _ListItem = class _ListItem extends React862.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "node", null);
    __publicField(this, "getNode", () => this.node);
    __publicField(this, "setRef", (node) => {
      var _a;
      this.node = node;
      (_a = this.props.provided) == null ? void 0 : _a.innerRef(node);
    });
    __publicField(this, "onClick", (event) => {
      if (!this.props.onClick) {
        return;
      }
      this.props.onClick(this.props.item, this.props.itemIndex, false, event);
    });
    __publicField(this, "onClickCapture", (event) => {
      _ListItem.publishEvent({
        domEvent: event,
        eventId: "click"
      });
    });
    __publicField(this, "onMouseEnter", () => !this.props.item.disabled && this.props.onActivate(this.props.itemIndex));
  }
  render() {
    var _a, _b;
    const { item, height, style: style3, sortable, sortHandleAlign, itemClassName, selected, active, role = "listitem", isDragging = false } = this.props;
    const fixedStyle = {
      height,
      ...style3,
      right: void 0
    };
    return (
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events
      (0, import_jsx_runtime105.jsxs)("div", { role, "aria-selected": selected, "aria-disabled": item.disabled, "data-qa": active ? ListQa.ACTIVE_ITEM : void 0, className: b68("item", {
        sortable,
        active,
        selected,
        inactive: item.disabled,
        "sort-handle-align": sortHandleAlign,
        dragging: isDragging
      }, itemClassName), ...(_a = this.props.provided) == null ? void 0 : _a.draggableProps, ...(_b = this.props.provided) == null ? void 0 : _b.dragHandleProps, style: getStyle3(this.props.provided, fixedStyle), onClick: item.disabled ? void 0 : this.onClick, onClickCapture: item.disabled ? void 0 : this.onClickCapture, onMouseEnter: this.onMouseEnter, ref: this.setRef, id: `${this.props.listId}-item-${this.props.itemIndex}`, children: [this.renderSortIcon(), this.renderContent()] })
    );
  }
  renderSortIcon() {
    const { sortable } = this.props;
    return sortable ? (0, import_jsx_runtime105.jsx)("div", { className: b68("item-sort-icon"), children: (0, import_jsx_runtime105.jsx)(Icon, { data: Grip_default, size: 12 }) }) : null;
  }
  renderContent() {
    const { renderItem = defaultRenderItem, item, active, itemIndex } = this.props;
    return (0, import_jsx_runtime105.jsx)("div", { className: b68("item-content"), children: renderItem(item, active, itemIndex) });
  }
};
__publicField(_ListItem, "publishEvent", eventBroker.withEventPublisher("List"));
var ListItem = _ListItem;

// node_modules/@gravity-ui/uikit/build/esm/components/List/components/SimpleContainer.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var React863 = __toESM(require_react(), 1);
var import_range = __toESM(require_range(), 1);
function getRefs(count3) {
  return (0, import_range.default)(count3).reduce((acc, index3) => {
    acc[index3] = React863.createRef();
    return acc;
  }, {});
}
var SimpleContainer = class extends React863.Component {
  constructor(props) {
    super(props);
    __publicField(this, "node", null);
    __publicField(this, "setRef", (node) => {
      var _a;
      this.node = node;
      (_a = this.props.provided) == null ? void 0 : _a.innerRef(node);
    });
    this.state = {
      refsList: getRefs(props.itemCount)
    };
  }
  static getDerivedStateFromProps({ itemCount }, prevState) {
    const refsCount = Object.keys(prevState.refsList).length;
    if (itemCount === refsCount) {
      return prevState;
    } else {
      return {
        refsList: getRefs(itemCount)
      };
    }
  }
  render() {
    const children2 = React863.Children.map(this.props.children, (child, index3) => React863.cloneElement(child, { ref: this.state.refsList[index3] }));
    return (0, import_jsx_runtime106.jsx)("div", { ref: this.setRef, children: children2 });
  }
  scrollToItem(index3) {
    var _a, _b, _c, _d;
    const listItem = (_a = this.state.refsList[index3]) == null ? void 0 : _a.current;
    if (listItem && typeof listItem.getNode === "function") {
      const node = listItem.getNode();
      if (node) {
        if (!((_c = (_b = this.props).onScrollToItem) == null ? void 0 : _c.call(_b, node))) {
          (_d = node.scrollIntoView) == null ? void 0 : _d.call(node, { block: "nearest" });
        }
      }
    }
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/List/List.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/List/List.css";
var b69 = block("list");
var DEFAULT_ITEM_HEIGHT = 28;
var DEFAULT_PAGE_SIZE = 10;
var listDefaultProps = {
  items: [],
  itemClassName: "",
  filterable: true,
  sortable: false,
  virtualized: true,
  deactivateOnLeave: true
};
var reorder = (list, startIndex, endIndex) => {
  const result = Array.from(list);
  const [removed] = result.splice(startIndex, 1);
  result.splice(endIndex, 0, removed);
  return result;
};
var ListContainer = React864.forwardRef((props, ref2) => {
  return (0, import_jsx_runtime107.jsx)(VariableSizeList, { ref: ref2, ...props, direction: useDirection() });
});
ListContainer.displayName = "ListContainer";
var _List = class _List extends React864.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "state", {
      items: this.props.items,
      activeItem: this.props.activeItemIndex,
      filter: ""
    });
    __publicField(this, "refFilter", React864.createRef());
    __publicField(this, "refContainer", React864.createRef());
    __publicField(this, "blurTimer", null);
    __publicField(this, "loadingItem", { value: "__LIST_ITEM_LOADING__", disabled: false });
    __publicField(this, "uniqId", getUniqId());
    __publicField(this, "onKeyDown", (event) => {
      const { activeItem, pageSize } = this.state;
      if (listNavigationIgnoredKeys.includes(event.key)) {
        return;
      }
      const isInputTarget = event.target instanceof HTMLInputElement;
      switch (event.key) {
        case "ArrowDown": {
          this.handleKeyMove(event, 1, -1);
          break;
        }
        case "ArrowUp": {
          this.handleKeyMove(event, -1);
          break;
        }
        case "PageDown": {
          this.handleKeyMove(event, pageSize ?? DEFAULT_PAGE_SIZE);
          break;
        }
        case "PageUp": {
          this.handleKeyMove(event, -(pageSize ?? DEFAULT_PAGE_SIZE));
          break;
        }
        case "Home": {
          if (isInputTarget) {
            return;
          }
          this.handleKeyMove(event, this.state.items.length - (activeItem || 0));
          break;
        }
        case "End": {
          if (isInputTarget) {
            return;
          }
          this.handleKeyMove(event, -(activeItem || 0) - 1);
          break;
        }
        case "Enter": {
          if (typeof activeItem === "number" && this.props.onItemClick) {
            this.props.onItemClick(this.state.items[activeItem], activeItem, true, event);
          }
          break;
        }
        default: {
          if (this.refFilter.current) {
            this.refFilter.current.focus();
          }
        }
      }
    });
    __publicField(this, "renderItemContent", (item, isItemActive, itemIndex) => {
      const { onLoadMore } = this.props;
      if ((0, import_isObject.default)(item) && "value" in item && item.value === this.loadingItem.value) {
        return (0, import_jsx_runtime107.jsx)(ListLoadingIndicator, { onIntersect: itemIndex === 0 ? void 0 : onLoadMore });
      }
      return this.props.renderItem ? this.props.renderItem(item, isItemActive, itemIndex) : defaultRenderItem(item);
    });
    __publicField(this, "renderItem", ({ index: index3, style: style3, height, provided, isDragging }) => {
      const { sortHandleAlign, role } = this.props;
      const { items, activeItem } = this.state;
      const item = this.getItemsWithLoading()[index3];
      const sortable = this.props.sortable && items.length > 1 && !this.getFilter();
      const active = index3 === activeItem || index3 === this.props.activeItemIndex;
      const selected = Array.isArray(this.props.selectedItemIndex) ? this.props.selectedItemIndex.includes(index3) : index3 === this.props.selectedItemIndex;
      return (0, import_jsx_runtime107.jsx)(ListItem, { style: style3, height, itemIndex: index3, item, sortable, sortHandleAlign, renderItem: this.renderItemContent, itemClassName: this.props.itemClassName, active, selected, onActivate: this.onItemActivate, onClick: this.props.onItemClick, role: role === "listbox" ? "option" : "listitem", listId: this.props.id ?? this.uniqId, provided, isDragging }, index3);
    });
    __publicField(this, "renderVirtualizedItem", ({ index: index3, style: style3 }) => {
      return (0, import_jsx_runtime107.jsx)(PublicDraggable, { draggableId: String(index3), index: index3, children: (provided) => this.renderItem({ index: index3, style: style3, provided }) }, `item-key-${index3}`);
    });
    __publicField(this, "filterItem", (filter) => (item) => {
      return String(item).includes(filter);
    });
    __publicField(this, "scrollToIndex", (index3) => {
      const container = this.refContainer.current;
      if (container) {
        container.scrollToItem(index3);
      }
    });
    __publicField(this, "deactivate", () => {
      if (!this.blurTimer) {
        return;
      }
      this.blurTimer = null;
      if (this.props.deactivateOnLeave) {
        this.setState({ activeItem: void 0 });
      }
    });
    __publicField(this, "handleFocus", () => {
      if (this.blurTimer) {
        clearTimeout(this.blurTimer);
        this.blurTimer = null;
      }
    });
    __publicField(this, "handleBlur", () => {
      if (!this.blurTimer) {
        this.blurTimer = setTimeout(this.deactivate, 50);
      }
    });
    __publicField(this, "onUpdateFilterInternal", (value) => {
      const { items, filterItem = this.filterItem, onFilterEnd } = this.props;
      this.setState({
        filter: value,
        items: value ? items.filter(filterItem(value)) : items
      }, () => {
        if (onFilterEnd) {
          onFilterEnd({ items: this.state.items });
        }
      });
    });
    __publicField(this, "onFilterUpdate", (value) => {
      if (this.props.onFilterUpdate) {
        this.props.onFilterUpdate(value);
      } else {
        this.onUpdateFilterInternal(value);
      }
    });
    __publicField(this, "onItemsRendered", ({ visibleStartIndex, visibleStopIndex }) => {
      this.setState({
        pageSize: visibleStopIndex - visibleStartIndex
      });
    });
    __publicField(this, "onItemActivate", (index3) => {
      if (!this.state.sorting) {
        this.activateItem(index3, false);
      }
    });
    __publicField(this, "onMouseLeave", () => {
      this.handleBlur();
    });
    __publicField(this, "onSortStart", () => {
      this.setState({ sorting: true });
    });
    __publicField(this, "onSortEnd", (result) => {
      if (!result.destination) {
        this.setState({ sorting: false });
        return;
      }
      if (result.source.index === result.destination.index) {
        this.setState({ sorting: false });
        return;
      }
      const oldIndex = result.source.index;
      const newIndex = result.destination.index;
      if (this.props.onSortEnd) {
        this.props.onSortEnd({ oldIndex, newIndex });
      }
      const nextItems = reorder(this.getItems(), oldIndex, newIndex);
      this.setState({
        activeItem: newIndex,
        items: nextItems,
        sorting: false
      });
    });
    __publicField(this, "getItemHeight", (index3) => {
      const { itemHeight } = this.props;
      if (typeof itemHeight === "function") {
        const { items } = this.state;
        return itemHeight(items[index3], index3);
      }
      return itemHeight;
    });
    __publicField(this, "getVirtualizedItemHeight", (index3) => {
      return this.getItemHeight(index3) || DEFAULT_ITEM_HEIGHT;
    });
  }
  static moveListElement(list, oldIndex, newIndex) {
    if (oldIndex !== newIndex) {
      const [item] = list.splice(oldIndex, 1);
      list.splice(newIndex, 0, item);
    }
    return list;
  }
  static findNextIndex(list, index3, step) {
    const dataLength = list.length;
    let currentIndex = (index3 + dataLength) % dataLength;
    for (let i = 0; i < dataLength; i += 1) {
      if (list[currentIndex] && !list[currentIndex].disabled) {
        return currentIndex;
      }
      currentIndex = (currentIndex + dataLength + step) % dataLength;
    }
    return void 0;
  }
  componentDidMount() {
    this.activateItem(this.props.activeItemIndex, true);
  }
  componentDidUpdate(prevProps, prevState) {
    if (!(0, import_isEqual.default)(this.props.items, prevProps.items)) {
      const filter = this.getFilter();
      const internalFiltering = filter && !this.props.onFilterUpdate;
      if (internalFiltering) {
        this.onUpdateFilterInternal(filter);
      } else {
        this.setState({ items: this.props.items });
      }
    }
    if (this.props.activeItemIndex !== prevProps.activeItemIndex) {
      this.activateItem(this.props.activeItemIndex);
    }
    if (this.props.onChangeActive && this.state.activeItem !== prevState.activeItem) {
      this.props.onChangeActive(this.state.activeItem);
    }
  }
  componentWillUnmount() {
    this.blurTimer = null;
  }
  render() {
    const { id, emptyPlaceholder, virtualized, className, itemsClassName, qa, role = "list" } = this.props;
    const { items } = this.state;
    return (0, import_jsx_runtime107.jsx)(MobileContext.Consumer, { children: ({ mobile }) => (
      // The event handler should only be used to capture bubbled events
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      (0, import_jsx_runtime107.jsxs)("div", { className: b69({ mobile }, className), "data-qa": qa, tabIndex: -1, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.onKeyDown, children: [this.renderFilter(), (0, import_jsx_runtime107.jsxs)("div", { id, className: b69("items", { virtualized }, itemsClassName), style: this.getItemsStyle(), onMouseLeave: this.onMouseLeave, role, children: [this.renderItems(), items.length === 0 && Boolean(emptyPlaceholder) && (0, import_jsx_runtime107.jsx)("div", { className: b69("empty-placeholder"), children: emptyPlaceholder })] })] })
    ) });
  }
  getItems() {
    return this.state.items;
  }
  getItemsWithLoading() {
    if (this.props.sortable) {
      return this.getItems();
    }
    return this.props.loading ? [...this.state.items, this.loadingItem] : this.getItems();
  }
  getActiveItem() {
    return typeof this.state.activeItem === "number" ? this.state.activeItem : null;
  }
  activateItem(index3, scrollTo = true) {
    this.setState({ activeItem: index3 }, () => {
      if (typeof index3 === "number" && scrollTo) {
        this.scrollToIndex(index3);
      }
    });
  }
  renderFilter() {
    const { size: size5, filterable, filter = this.state.filter, filterPlaceholder, filterClassName = "", autoFocus } = this.props;
    if (!filterable) {
      return null;
    }
    return (0, import_jsx_runtime107.jsx)("div", { className: b69("filter", filterClassName), children: (0, import_jsx_runtime107.jsx)(TextInput, { controlRef: this.refFilter, size: size5, placeholder: filterPlaceholder, value: filter, hasClear: true, onUpdate: this.onFilterUpdate, autoFocus }) });
  }
  renderSimpleContainer() {
    const { sortable } = this.props;
    const items = this.getItemsWithLoading();
    if (sortable) {
      return (0, import_jsx_runtime107.jsx)(DragDropContext, { onDragStart: this.onSortStart, onDragEnd: this.onSortEnd, children: (0, import_jsx_runtime107.jsx)(ConnectedDroppable, { droppableId: "droppable", renderClone: (provided, snapshot, rubric) => {
        return this.renderItem({
          index: rubric.source.index,
          provided,
          isDragging: snapshot.isDragging
        });
      }, children: (droppableProvided) => (0, import_jsx_runtime107.jsx)(SimpleContainer, { ref: this.refContainer, itemCount: items.length, provided: droppableProvided, onScrollToItem: this.props.onScrollToItem, children: items.map((_item, index3) => {
        return (0, import_jsx_runtime107.jsx)(PublicDraggable, { draggableId: String(index3), index: index3, children: (provided, snapshot) => {
          return this.renderItem({
            index: index3,
            isDragging: snapshot.isDragging,
            provided,
            height: this.getItemHeight(index3)
          });
        } }, `item-key-${index3}`);
      }) }) }) });
    }
    return (0, import_jsx_runtime107.jsx)(SimpleContainer, { itemCount: items.length, ref: this.refContainer, onScrollToItem: this.props.onScrollToItem, children: items.map((_item, index3) => this.renderItem({ index: index3, height: this.getItemHeight(index3) })) });
  }
  renderVirtualizedContainer() {
    const items = [...this.getItemsWithLoading()];
    if (this.props.sortable) {
      return (0, import_jsx_runtime107.jsx)(DragDropContext, { onDragStart: this.onSortStart, onDragEnd: this.onSortEnd, children: (0, import_jsx_runtime107.jsx)(ConnectedDroppable, { droppableId: "droppable", mode: "virtual", renderClone: (provided, snapshot, rubric) => {
        return this.renderItem({
          index: rubric.source.index,
          provided,
          isDragging: snapshot.isDragging
        });
      }, children: (droppableProvided) => (0, import_jsx_runtime107.jsx)(AutoSizer, { children: ({ width, height }) => (0, import_jsx_runtime107.jsx)(ListContainer, {
        ref: this.refContainer,
        outerRef: droppableProvided.innerRef,
        width,
        height,
        itemSize: this.getVirtualizedItemHeight,
        itemData: items,
        itemCount: items.length,
        overscanCount: 10,
        onItemsRendered: this.onItemsRendered,
        // this property used to rerender items in viewport
        // must be last, typescript skips checks for all props behind ts-ignore/ts-expect-error
        // @ts-expect-error
        activeItem: this.state.activeItem,
        children: this.renderVirtualizedItem
      }) }) }) });
    }
    return (0, import_jsx_runtime107.jsx)(AutoSizer, { children: ({ width, height }) => (0, import_jsx_runtime107.jsx)(ListContainer, {
      ref: this.refContainer,
      width,
      height,
      itemSize: this.getVirtualizedItemHeight,
      itemData: items,
      itemCount: items.length,
      overscanCount: 10,
      onItemsRendered: this.onItemsRendered,
      // this property used to rerender items in viewport
      // must be last, typescript skips checks for all props behind ts-ignore/ts-expect-error
      // @ts-expect-error
      activeItem: this.state.activeItem,
      children: this.renderItem
    }) });
  }
  renderItems() {
    if (this.props.virtualized) {
      return this.renderVirtualizedContainer();
    } else {
      return this.renderSimpleContainer();
    }
  }
  getFilter() {
    const { filter = this.state.filter } = this.props;
    return filter;
  }
  getItemsStyle() {
    let { itemsHeight } = this.props;
    if (typeof itemsHeight === "function") {
      itemsHeight = itemsHeight(this.state.items);
    }
    return itemsHeight ? { height: itemsHeight } : void 0;
  }
  handleKeyMove(event, step, defaultItemIndex = 0) {
    const { activeItem = defaultItemIndex } = this.state;
    event.preventDefault();
    const items = this.getItemsWithLoading();
    this.activateItem(_List.findNextIndex(items, activeItem + step, Math.sign(step)));
  }
};
__publicField(_List, "defaultProps", listDefaultProps);
var List = _List;

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.js
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
var React866 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/SheetContent.js
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
var React865 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/constants.js
var sheetBlock = block("sheet");
var SheetQa = {
  VEIL: "sheet-veil"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/utils.js
var Point = class {
  constructor(x, y) {
    __publicField(this, "x");
    __publicField(this, "y");
    __publicField(this, "timeStamp");
    this.x = x;
    this.y = y;
    this.timeStamp = Date.now();
  }
};
var VelocityTracker = class {
  constructor(len = 5) {
    __publicField(this, "pointsLen");
    __publicField(this, "points", []);
    this.pointsLen = len;
    this.clear();
  }
  clear() {
    this.points = new Array(this.pointsLen);
  }
  addMovement({ x, y }) {
    this.points.pop();
    this.points.unshift(new Point(x, y));
  }
  getYAcceleration(lastPointCount = 1) {
    const endPoint = this.points[0];
    const startPoint = this.points[lastPointCount];
    if (!endPoint || !startPoint) {
      return 0;
    }
    return (endPoint.y - startPoint.y) / Math.pow(endPoint.timeStamp - startPoint.timeStamp, 2);
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/SheetContent.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.css";
var TRANSITION_DURATION3 = "0.3s";
var HIDE_THRESHOLD = 50;
var ACCELERATION_Y_MAX = 0.08;
var ACCELERATION_Y_MIN = -0.02;
var DEFAULT_MAX_CONTENT_HEIGHT_FROM_VIEWPORT_COEFFICIENT = 0.9;
var WINDOW_RESIZE_TIMEOUT = 50;
var hashHistory = [];
function warnAboutOutOfRange() {
  warnOnce('[Sheet] The value of the "maxContentHeightCoefficient" property must be between 0 and 1');
}
var SheetContent = class extends React865.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "veilRef", React865.createRef());
    __publicField(this, "sheetRef", React865.createRef());
    __publicField(this, "sheetTopRef", React865.createRef());
    __publicField(this, "sheetMarginBoxRef", React865.createRef());
    __publicField(this, "sheetScrollContainerRef", React865.createRef());
    __publicField(this, "velocityTracker", new VelocityTracker());
    __publicField(this, "observer", null);
    __publicField(this, "resizeWindowTimer", null);
    __publicField(this, "state", {
      startScrollTop: 0,
      startY: 0,
      deltaY: 0,
      prevSheetHeight: 0,
      swipeAreaTouched: false,
      contentTouched: false,
      veilTouched: false,
      isAnimating: false,
      inWindowResizeScope: false,
      delayedResize: false
    });
    __publicField(this, "setStyles", ({ status, deltaHeight = 0 }) => {
      if (!this.sheetRef.current || !this.veilRef.current) {
        return;
      }
      const visibleHeight = this.sheetHeight - deltaHeight;
      const translate = status === "showing" ? `translate3d(0, -${visibleHeight}px, 0)` : "translate3d(0, 0, 0)";
      let opacity = 0;
      if (status === "showing") {
        opacity = deltaHeight === 0 ? 1 : visibleHeight / this.sheetHeight;
      }
      this.veilRef.current.style.opacity = String(opacity);
      this.sheetRef.current.style.transform = translate;
    });
    __publicField(this, "getAvailableContentHeight", (sheetHeight) => {
      let heightCoefficient = DEFAULT_MAX_CONTENT_HEIGHT_FROM_VIEWPORT_COEFFICIENT;
      if (typeof this.props.maxContentHeightCoefficient === "number" && this.props.maxContentHeightCoefficient >= 0 && this.props.maxContentHeightCoefficient <= 1) {
        heightCoefficient = this.props.maxContentHeightCoefficient;
      } else if (typeof this.props.maxContentHeightCoefficient === "number") {
        warnAboutOutOfRange();
      }
      const availableViewportHeight = window.innerHeight * heightCoefficient - this.sheetTopHeight;
      if (this.props.alwaysFullHeight) {
        return availableViewportHeight;
      }
      const availableContentHeight = sheetHeight >= availableViewportHeight ? availableViewportHeight : sheetHeight;
      return availableContentHeight;
    });
    __publicField(this, "show", () => {
      this.setState({ isAnimating: true }, () => {
        this.setStyles({ status: "showing" });
        this.setHash();
      });
    });
    __publicField(this, "hide", () => {
      this.setState({ isAnimating: true }, () => {
        this.setStyles({ status: "hiding" });
        this.removeHash();
      });
    });
    __publicField(this, "onSwipeAreaTouchStart", (e) => {
      this.velocityTracker.clear();
      this.setState({
        startY: e.nativeEvent.touches[0].clientY,
        swipeAreaTouched: true
      });
    });
    __publicField(this, "onContentTouchStart", (e) => {
      if (!this.props.allowHideOnContentScroll || this.state.swipeAreaTouched) {
        return;
      }
      this.velocityTracker.clear();
      this.setState({
        startY: e.nativeEvent.touches[0].clientY,
        startScrollTop: this.sheetScrollTop,
        contentTouched: true
      });
    });
    __publicField(this, "onSwipeAriaTouchMove", (e) => {
      const delta = e.nativeEvent.touches[0].clientY - this.state.startY;
      this.velocityTracker.addMovement({
        x: e.nativeEvent.touches[0].clientX,
        y: e.nativeEvent.touches[0].clientY
      });
      this.setState({ deltaY: delta });
      if (delta <= 0) {
        return;
      }
      this.setStyles({ status: "showing", deltaHeight: delta });
    });
    __publicField(this, "onContentTouchMove", (e) => {
      if (!this.props.allowHideOnContentScroll) {
        return;
      }
      if (!this.state.startY) {
        this.onContentTouchStart(e);
        return;
      }
      const { startScrollTop, swipeAreaTouched } = this.state;
      if (swipeAreaTouched || this.sheetScrollTop > 0 || startScrollTop > 0 && startScrollTop !== this.sheetScrollTop) {
        return;
      }
      const delta = e.nativeEvent.touches[0].clientY - this.state.startY;
      this.velocityTracker.addMovement({
        x: e.nativeEvent.touches[0].clientX,
        y: e.nativeEvent.touches[0].clientY
      });
      if (delta <= 0) {
        this.setState({ deltaY: 0 });
        return;
      }
      this.setState({ deltaY: delta });
      this.setStyles({ status: "showing", deltaHeight: delta });
    });
    __publicField(this, "onTouchEndAction", (deltaY) => {
      const accelerationY = this.velocityTracker.getYAcceleration();
      if (this.sheetHeight <= deltaY) {
        this.props.hideSheet();
      } else if (deltaY > HIDE_THRESHOLD && accelerationY <= ACCELERATION_Y_MAX && accelerationY >= ACCELERATION_Y_MIN || accelerationY > ACCELERATION_Y_MAX) {
        this.hide();
      } else if (deltaY !== 0) {
        this.show();
      }
    });
    __publicField(this, "onSwipeAriaTouchEnd", () => {
      const { deltaY } = this.state;
      this.onTouchEndAction(deltaY);
      this.setState({
        startY: 0,
        deltaY: 0,
        swipeAreaTouched: false
      });
    });
    __publicField(this, "onContentTouchEnd", () => {
      const { deltaY, swipeAreaTouched } = this.state;
      if (!this.props.allowHideOnContentScroll || swipeAreaTouched) {
        return;
      }
      this.onTouchEndAction(deltaY);
      this.setState({
        startY: 0,
        deltaY: 0,
        contentTouched: false
      });
    });
    __publicField(this, "onVeilClick", () => {
      if (this.state.isAnimating) {
        return;
      }
      this.setState({ veilTouched: true });
      this.hide();
    });
    __publicField(this, "onVeilTransitionEnd", () => {
      this.setState({ isAnimating: false });
      if (this.veilOpacity === "0") {
        this.props.hideSheet();
        return;
      }
      if (this.state.delayedResize) {
        this.onResizeWindow();
        this.setState({ delayedResize: false });
      }
    });
    __publicField(this, "onContentTransitionEnd", (e) => {
      if (e.propertyName === "height") {
        if (this.sheetScrollContainerRef.current) {
          this.sheetScrollContainerRef.current.style.transition = "none";
        }
      }
    });
    __publicField(this, "onResizeWindow", () => {
      if (this.state.isAnimating) {
        this.setState({ delayedResize: true });
        return;
      }
      this.setState({ inWindowResizeScope: true });
      if (this.resizeWindowTimer) {
        window.clearTimeout(this.resizeWindowTimer);
      }
      this.resizeWindowTimer = window.setTimeout(() => {
        this.onResize();
      }, WINDOW_RESIZE_TIMEOUT);
    });
    __publicField(this, "onResize", () => {
      if (!this.sheetRef.current || !this.sheetScrollContainerRef.current) {
        return;
      }
      const sheetContentHeight = this.sheetContentHeight;
      if (sheetContentHeight === this.state.prevSheetHeight && !this.state.inWindowResizeScope) {
        return;
      }
      const availableContentHeight = this.getAvailableContentHeight(sheetContentHeight);
      this.sheetScrollContainerRef.current.style.transition = this.state.prevSheetHeight > sheetContentHeight ? `height 0s ease ${TRANSITION_DURATION3}` : "none";
      this.sheetScrollContainerRef.current.style.height = `${availableContentHeight}px`;
      this.sheetRef.current.style.transform = `translate3d(0, -${availableContentHeight + this.sheetTopHeight}px, 0)`;
      this.setState({ prevSheetHeight: sheetContentHeight, inWindowResizeScope: false });
    });
  }
  componentDidMount() {
    this.addListeners();
    this.show();
    const initialHeight = this.getAvailableContentHeight(this.sheetContentHeight);
    this.setInitialStyles(initialHeight);
    this.setState({
      prevSheetHeight: initialHeight
    });
  }
  componentDidUpdate(prevProps) {
    const { visible, location } = this.props;
    if (!prevProps.visible && visible) {
      this.show();
    }
    if (prevProps.visible && !visible || this.shouldClose(prevProps)) {
      this.hide();
    }
    if (prevProps.location.pathname !== location.pathname) {
      hashHistory = [];
    }
  }
  componentWillUnmount() {
    this.removeListeners();
  }
  render() {
    const { content, contentClassName, swipeAreaClassName, hideTopBar, title } = this.props;
    const { deltaY, swipeAreaTouched, contentTouched, veilTouched } = this.state;
    const veilTransitionMod = {
      "with-transition": !deltaY || veilTouched
    };
    const sheetTransitionMod = {
      "with-transition": veilTransitionMod["with-transition"]
    };
    const contentMod = {
      "without-scroll": deltaY > 0 && contentTouched || swipeAreaTouched
    };
    const marginBoxMod = {
      "always-full-height": this.props.alwaysFullHeight
    };
    return (0, import_jsx_runtime108.jsxs)(React865.Fragment, { children: [(0, import_jsx_runtime108.jsx)("div", { ref: this.veilRef, className: sheetBlock("veil", veilTransitionMod), onClick: this.onVeilClick, onTransitionEnd: this.onVeilTransitionEnd, role: "presentation", "data-qa": SheetQa.VEIL }), (0, import_jsx_runtime108.jsxs)("div", { ref: this.sheetRef, className: sheetBlock("sheet", sheetTransitionMod), role: "dialog", "aria-modal": "true", "aria-label": title, children: [!hideTopBar && (0, import_jsx_runtime108.jsx)("div", { ref: this.sheetTopRef, className: sheetBlock("sheet-top"), children: (0, import_jsx_runtime108.jsx)("div", { className: sheetBlock("sheet-top-resizer") }) }), (0, import_jsx_runtime108.jsx)("div", { className: sheetBlock("sheet-swipe-area", swipeAreaClassName), onTouchStart: this.onSwipeAreaTouchStart, onTouchMove: this.onSwipeAriaTouchMove, onTouchEnd: this.onSwipeAriaTouchEnd }), (0, import_jsx_runtime108.jsx)("div", { ref: this.sheetScrollContainerRef, className: sheetBlock("sheet-scroll-container", contentMod), onTouchStart: this.onContentTouchStart, onTouchMove: this.onContentTouchMove, onTouchEnd: this.onContentTouchEnd, onTransitionEnd: this.onContentTransitionEnd, children: (0, import_jsx_runtime108.jsx)("div", { ref: this.sheetMarginBoxRef, className: sheetBlock("sheet-margin-box", marginBoxMod), children: (0, import_jsx_runtime108.jsx)("div", { className: sheetBlock("sheet-margin-box-border-compensation"), children: (0, import_jsx_runtime108.jsxs)("div", { className: sheetBlock("sheet-content", contentClassName), children: [title && (0, import_jsx_runtime108.jsx)("div", { className: sheetBlock("sheet-content-title"), children: title }), content] }) }) }) })] })] });
  }
  get veilOpacity() {
    var _a;
    return ((_a = this.veilRef.current) == null ? void 0 : _a.style.opacity) || 0;
  }
  get sheetTopHeight() {
    var _a;
    return ((_a = this.sheetTopRef.current) == null ? void 0 : _a.getBoundingClientRect().height) || 0;
  }
  get sheetHeight() {
    var _a;
    return ((_a = this.sheetRef.current) == null ? void 0 : _a.getBoundingClientRect().height) || 0;
  }
  get sheetScrollTop() {
    var _a;
    return ((_a = this.sheetScrollContainerRef.current) == null ? void 0 : _a.scrollTop) || 0;
  }
  get sheetContentHeight() {
    var _a;
    return ((_a = this.sheetMarginBoxRef.current) == null ? void 0 : _a.getBoundingClientRect().height) || 0;
  }
  setInitialStyles(initialHeight) {
    if (this.sheetScrollContainerRef.current && this.sheetMarginBoxRef.current) {
      this.sheetScrollContainerRef.current.style.height = `${initialHeight}px`;
    }
  }
  addListeners() {
    window.addEventListener("resize", this.onResizeWindow);
    if (this.sheetMarginBoxRef.current) {
      this.observer = new ResizeObserver(() => {
        if (!this.state.inWindowResizeScope) {
          this.onResize();
        }
      });
      this.observer.observe(this.sheetMarginBoxRef.current);
    }
  }
  removeListeners() {
    window.removeEventListener("resize", this.onResizeWindow);
    if (this.observer) {
      this.observer.disconnect();
    }
  }
  setHash() {
    const { id, platform: platform2, location, history } = this.props;
    if (platform2 === Platform.BROWSER) {
      return;
    }
    const newLocation = { ...location, hash: id };
    switch (platform2) {
      case Platform.IOS:
        if (location.hash) {
          hashHistory.push(location.hash);
        }
        history.replace(newLocation);
        break;
      case Platform.ANDROID:
        history.push(newLocation);
        break;
    }
  }
  removeHash() {
    const { id, platform: platform2, location, history } = this.props;
    if (platform2 === Platform.BROWSER || location.hash !== `#${id}`) {
      return;
    }
    switch (platform2) {
      case Platform.IOS:
        history.replace({ ...location, hash: hashHistory.pop() ?? "" });
        break;
      case Platform.ANDROID:
        history.goBack();
        break;
    }
  }
  shouldClose(prevProps) {
    const { id, platform: platform2, location, history } = this.props;
    return platform2 !== Platform.BROWSER && history.action === "POP" && prevProps.location.hash !== location.hash && location.hash !== `#${id}`;
  }
};
__publicField(SheetContent, "defaultProps", {
  id: "sheet",
  allowHideOnContentScroll: true
});
function withRouterWrapper(Component13) {
  const ComponentWithRouter = (props) => {
    const { useHistory, useLocation, ...remainingProps } = props;
    return (0, import_jsx_runtime108.jsx)(Component13, { ...remainingProps, history: useHistory(), location: useLocation() });
  };
  const componentName = Component13.displayName || Component13.name || "Component";
  ComponentWithRouter.displayName = `withRouterWrapper(${componentName})`;
  return ComponentWithRouter;
}
var SheetContentContainer = withMobile(withRouterWrapper(SheetContent));

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.css";
var Sheet = ({ children: children2, onClose, visible, id, title, className, contentClassName, swipeAreaClassName, allowHideOnContentScroll, hideTopBar, maxContentHeightCoefficient, alwaysFullHeight, container, disablePortal, qa }) => {
  const [open, setOpen] = React866.useState(visible);
  const [prevVisible, setPrevVisible] = React866.useState(visible);
  if (!prevVisible && visible) {
    setOpen(true);
  }
  if (visible !== prevVisible) {
    setPrevVisible(visible);
  }
  const hideSheet = () => {
    if (onClose) {
      onClose();
    }
    setOpen(false);
  };
  if (!open) {
    return null;
  }
  return (0, import_jsx_runtime109.jsx)(Portal, { container, disablePortal, children: (0, import_jsx_runtime109.jsx)(FloatingOverlay, { "data-qa": qa, className: sheetBlock(null, className), lockScroll: open, style: { overflow: void 0 }, children: (0, import_jsx_runtime109.jsx)(SheetContentContainer, { id, content: children2, contentClassName, swipeAreaClassName, title, visible, allowHideOnContentScroll, hideTopBar, hideSheet, maxContentHeightCoefficient, alwaysFullHeight }) }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreviewActions/MobileActionsMenu/MobileActionsMenu.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreviewActions/MobileActionsMenu/MobileActionsMenu.css";
var cn3 = block("file-preview-actions-mobile");
var renderListItem = (item) => {
  return (0, import_jsx_runtime110.jsxs)("div", { className: cn3("list-item"), children: [item.icon, (0, import_jsx_runtime110.jsx)(Text, { variant: "body-2", title: item.title, ellipsis: true, children: item.title })] });
};
var MobileActionsMenu = ({ actions, fileName, isCustomImage }) => {
  const [showMobileMenu, setShowMobileMenu] = React867.useState(false);
  const handleMobileMenuClose = React867.useCallback(() => {
    setShowMobileMenu(false);
  }, []);
  const handleItemClick = React867.useCallback((item, _, __, event) => {
    var _a;
    if (event) {
      (_a = item.onClick) == null ? void 0 : _a.call(item, event);
    }
    setShowMobileMenu(false);
  }, []);
  const handleMobileButtonClick = () => {
    setShowMobileMenu(true);
  };
  const buttonView = isCustomImage ? "raised" : "flat";
  return (0, import_jsx_runtime110.jsxs)(React867.Fragment, { children: [(0, import_jsx_runtime110.jsx)(Button2, { view: buttonView, className: cn3("actions-menu"), onClick: handleMobileButtonClick, size: "s", children: (0, import_jsx_runtime110.jsx)(Icon, { data: EllipsisVertical_default, height: 16, width: 16 }) }), (0, import_jsx_runtime110.jsx)(Sheet, { className: cn3("sheet"), visible: showMobileMenu, onClose: handleMobileMenuClose, title: fileName, children: (0, import_jsx_runtime110.jsx)(List, { items: actions, filterable: false, renderItem: renderListItem, itemHeight: 44, virtualized: false, onItemClick: handleItemClick }) })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreviewActions/FilePreviewActions.js
var FilePreviewActions = ({ actions, fileName, hoverabelPanelClassName, isCustomImage }) => {
  const mobile = useMobile();
  if (mobile) {
    return (0, import_jsx_runtime111.jsx)(MobileActionsMenu, { actions, fileName, isCustomImage });
  }
  return (0, import_jsx_runtime111.jsx)(DesktopActionsMenu, { actions, hoverabelPanelClassName });
};

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/types.js
var FILE_TYPES = [
  "default",
  "image",
  "video",
  "code",
  "archive",
  "music",
  "audio",
  "text",
  "pdf",
  "table"
];

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/utils.js
var isFilePreviewFileType = (str) => FILE_TYPES.includes(str.toLowerCase());
var APPLICATION_MIME_TO_TYPE = {
  "application/x-compressed": "archive",
  "application/x-troff-msvideo": "video",
  "application/macbinary": "code",
  "application/mac-binary": "code",
  "application/x-binary": "code",
  "application/x-macbinary": "code",
  "application/bmp": "image",
  "application/x-bmp": "image",
  "application/x-win-bitmap": "image",
  "application/vnd.msexcel": "image",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "text",
  "application/x-msdownload": "code",
  "application/x-gzip": "archive",
  "application/java-archive": "code",
  "application/x-java-application": "code",
  "application/x-jar": "code",
  "application/x-javascript": "code",
  "application/json": "code",
  "application/ogg": "audio",
  "application/pdf": "pdf",
  "application/octet-stream": "pdf",
  "application/x-httpd-php": "code",
  "application/php": "code",
  "application/x-php": "code",
  "application/x-httpd-php-source": "code",
  "application/msword": "text",
  "application/x-rar": "archive",
  "application/rar": "archive",
  "application/x-rar-compressed": "archive",
  "application/x-tar": "archive",
  "application/x-gzip-compressed": "archive",
  "application/xhtml+xml": "code",
  "application/excel": "table",
  "application/msexcel": "table",
  "application/x-msexcel": "table",
  "application/x-ms-excel": "table",
  "application/x-excel": "table",
  "application/x-dos_ms_excel": "table",
  "application/xls": "table",
  "application/x-xls": "table",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "table",
  "application/vnd.ms-excel": "table",
  "application/xml": "code",
  "application/x-zip": "archive",
  "application/zip": "archive",
  "application/x-zip-compressed": "archive",
  "application/s-compressed": "archive",
  "multipart/x-zip": "archive"
};
function getFileType(arg) {
  const fileType = typeof arg === "string" ? arg : arg.type;
  if (isFilePreviewFileType(fileType)) {
    return fileType;
  }
  const splittedFileType = fileType.split("/")[0];
  if (isFilePreviewFileType(splittedFileType)) {
    return splittedFileType;
  }
  return APPLICATION_MIME_TO_TYPE[fileType] || "default";
}

// node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreview.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/FilePreview/FilePreview.css";
var cn4 = block("file-preview");
var FILE_ICON = {
  default: FileQuestion_default,
  image: Picture_default,
  video: Filmstrip_default,
  code: Code_default,
  archive: FileZipper_default,
  audio: MusicNote_default,
  music: MusicNote_default,
  text: TextAlignLeft_default,
  pdf: LogoAcrobat_default,
  table: LayoutHeaderCellsLarge_default
};
function FilePreview(props) {
  const { className, qa, file, imageSrc, description, onClick, view = "default", selected } = props;
  const actions = view === "default" && "actions" in props ? props.actions : void 0;
  const [previewSrc, setPreviewSrc] = React868.useState(imageSrc);
  const type = getFileType(file);
  const mobile = useMobile();
  const { onKeyDown } = useActionHandlers(onClick);
  React868.useEffect(() => {
    if (imageSrc || type !== "image")
      return void 0;
    try {
      const createdUrl = URL.createObjectURL(file);
      setPreviewSrc(createdUrl);
      return () => {
        URL.revokeObjectURL(createdUrl);
      };
    } catch {
      return void 0;
    }
  }, [file, imageSrc, type]);
  const clickable = Boolean(onClick);
  const withActions = Boolean(actions == null ? void 0 : actions.length);
  const isPreviewString = typeof previewSrc === "string";
  const compact = view === "compact";
  return (0, import_jsx_runtime112.jsxs)("div", { className: cn4({ mobile, view }, className), "data-qa": qa, children: [(0, import_jsx_runtime112.jsxs)("div", { className: cn4("card", {
    clickable,
    hoverable: !selected && (clickable || withActions),
    selected
  }), role: clickable ? "button" : void 0, onKeyDown: clickable ? onKeyDown : void 0, tabIndex: clickable ? 0 : void 0, onClick, children: [isPreviewString ? (0, import_jsx_runtime112.jsx)("div", { className: cn4("image-container"), children: (0, import_jsx_runtime112.jsx)("img", { className: cn4("image"), src: previewSrc, alt: file.name }) }) : (0, import_jsx_runtime112.jsx)("div", { className: cn4("icon-container"), children: (0, import_jsx_runtime112.jsx)("div", { className: cn4("icon", { type }), children: (0, import_jsx_runtime112.jsx)(Icon, { className: cn4("icon-svg"), data: FILE_ICON[type], size: 20 }) }) }), !compact && (0, import_jsx_runtime112.jsxs)(React868.Fragment, { children: [(0, import_jsx_runtime112.jsx)(Text, { className: cn4("name"), color: "secondary", ellipsis: true, title: file.name, children: file.name }), Boolean(description) && (0, import_jsx_runtime112.jsx)(Text, { className: cn4("description"), color: "secondary", ellipsis: true, title: description, children: description })] })] }), (actions == null ? void 0 : actions.length) && (0, import_jsx_runtime112.jsx)(FilePreviewActions, { hoverabelPanelClassName: cn4("actions-panel"), fileName: file.name, isCustomImage: isPreviewString, actions })] });
}
FilePreview.displayName = "FilePreview";

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/NumberInput.js
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
var React869 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/NumericArrows/NumericArrows.js
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/i18n/en.json
var en_default14 = {
  label_increment: "Increment",
  label_decrement: "Decrement"
};

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/i18n/ru.json
var ru_default14 = {
  label_increment: "Увеличить",
  label_decrement: "Уменьшить"
};

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/i18n/index.js
var COMPONENT11 = "NumberInput";
var i18n_default12 = addComponentKeysets({ en: en_default14, ru: ru_default14 }, COMPONENT11);

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/utils.js
var INCREMENT_BUTTON_QA = "increment-button-qa";
var DECREMENT_BUTTON_QA = "decrement-button-qa";
var CONTROL_BUTTONS_QA = "control-buttons-qa";
function getInputPattern(withoutFraction, positiveOnly = false) {
  return `^([${positiveOnly ? "" : "\\-"}\\+]?\\d+${withoutFraction ? "" : "(?:(?:.|,)?\\d+)?"})+$`;
}
var pastedInputParsingRegex = /^([-+]?)(?:\D*)(\d*)(\.|,)?(\d*)(?:\D*)$/;
function prepareStringValue(value) {
  return value.replace(",", ".").replace(/\s/g, "").replace(/[^\d.+-]/g, "");
}
function getPossibleNumberSubstring(value, allowDecimal) {
  const preparedString = prepareStringValue(value);
  const match2 = pastedInputParsingRegex.exec(preparedString);
  if (!match2 || value.length > 0 && preparedString.length === 0) {
    return void 0;
  }
  const possibleNumberString = [
    match2[1],
    // sign
    match2[2],
    // integer part
    allowDecimal ? match2[3] : void 0,
    // dot
    match2[4]
    // fraction
  ].filter(Boolean).join("");
  return possibleNumberString;
}
function getParsedValue(value) {
  if (value === void 0 || value === "") {
    return { valid: true, value: null };
  }
  const parsedValueOrNaN = Number(value);
  const isValidValue = !Number.isNaN(parsedValueOrNaN);
  const parsedValue = isValidValue ? parsedValueOrNaN : null;
  return { valid: isValidValue, value: parsedValue };
}
function roundIfNecessary(value, allowDecimal) {
  return allowDecimal ? value : Math.floor(value);
}
function getInternalState(props) {
  const { min: externalMin, max: externalMax, step: externalStep = 1, shiftMultiplier: externalShiftMultiplier, value: externalValue, allowDecimal, defaultValue: externalDefaultValue } = props;
  const { min: rangedMin, max: rangedMax } = externalMin && externalMax && externalMin > externalMax ? {
    min: externalMax,
    max: externalMin
  } : { min: externalMin, max: externalMax };
  const min2 = rangedMin !== void 0 && rangedMin >= Number.MIN_SAFE_INTEGER ? rangedMin : void 0;
  const max2 = rangedMax !== void 0 && rangedMax <= Number.MAX_SAFE_INTEGER ? rangedMax : void 0;
  const step = roundIfNecessary(Math.abs(externalStep), allowDecimal) || 1;
  const shiftMultiplier = roundIfNecessary(externalShiftMultiplier, allowDecimal) || 10;
  const value = externalValue ? roundIfNecessary(externalValue, allowDecimal) : externalValue;
  const defaultValue = externalDefaultValue ? roundIfNecessary(externalDefaultValue, allowDecimal) : externalDefaultValue;
  return { min: min2, max: max2, step, shiftMultiplier, value, defaultValue };
}
function clampToNearestStepValue({ value, step, min: originalMin, max: max2 = Number.MAX_SAFE_INTEGER, direction }) {
  const base = originalMin || 0;
  const min2 = originalMin ?? Number.MIN_SAFE_INTEGER;
  let clampedValue = toFixedNumber(value, step);
  if (clampedValue > max2) {
    clampedValue = max2;
  } else if (clampedValue < min2) {
    clampedValue = min2;
  }
  if (!Number.isInteger(value) || !Number.isInteger(step)) {
    return clampedValue;
  }
  const amountOfStepsDiff = Math.floor((clampedValue - base) / step);
  const stepDeviation = clampedValue - base - step * amountOfStepsDiff;
  if (stepDeviation !== 0) {
    const smallerPossibleValue = base + amountOfStepsDiff * step;
    const greaterPossibleValue = base + (amountOfStepsDiff + 1) * step;
    const smallerValueIsPreferrable = direction ? direction === "up" : greaterPossibleValue - clampedValue > clampedValue - smallerPossibleValue;
    if ((greaterPossibleValue > max2 || smallerValueIsPreferrable) && smallerPossibleValue >= min2) {
      return smallerPossibleValue;
    }
    if (greaterPossibleValue <= max2) {
      return greaterPossibleValue;
    }
  }
  return toFixedNumber(clampedValue, step);
}
function updateCursorPosition(inputRef, eventRawValue = "", computedEventValue = "") {
  var _a, _b;
  const currentSelectionEndPosition = ((_a = inputRef.current) == null ? void 0 : _a.selectionEnd) ?? eventRawValue.length;
  if (eventRawValue !== computedEventValue) {
    const startingPossiblyChangedPart = eventRawValue.slice(0, currentSelectionEndPosition);
    const trailingUnchangedLength = eventRawValue.length - startingPossiblyChangedPart.length;
    const newStartingPart = computedEventValue.slice(0, computedEventValue.length - trailingUnchangedLength);
    (_b = inputRef.current) == null ? void 0 : _b.setRangeText(newStartingPart, 0, startingPossiblyChangedPart.length, "end");
  }
}
function areStringRepresentationOfNumbersEqual(v1, v2) {
  if (v1 === v2) {
    return true;
  }
  const { valid: v1Valid, value: v1Value } = getParsedValue(v1);
  const { valid: v2Valid, value: v2Value } = getParsedValue(v2);
  if (v1Valid && v2Valid) {
    return v1Value === v2Value;
  }
  const v1OnlyNumbers = v1.replace(/\D/g, "");
  const v2OnlyNumbers = v2.replace(/\D/g, "");
  if (v1OnlyNumbers.length === v2OnlyNumbers.length && v1OnlyNumbers.length === 0) {
    return true;
  }
  return false;
}
function toFixedNumber(value, baseStep) {
  var _a;
  const stepDecimalDigits = ((_a = baseStep.toString().split(".")[1]) == null ? void 0 : _a.length) || 0;
  return parseFloat(value.toFixed(stepDecimalDigits));
}

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/NumericArrows/NumericArrows.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/NumericArrows/NumericArrows.css";
var b70 = block("numeric-arrows");
function NumericArrows({ className, size: size5, disabled, onUpClick, onDownClick, ...restProps }) {
  const commonBtnProps = {
    size: "s",
    pin: "brick-brick",
    view: "flat-secondary",
    disabled,
    tabIndex: -1,
    width: "max",
    "aria-hidden": "true"
  };
  return (0, import_jsx_runtime113.jsxs)(Flex, { direction: "column", className: b70({ size: size5 }, className), qa: CONTROL_BUTTONS_QA, ...restProps, children: [(0, import_jsx_runtime113.jsx)(Button2, { className: b70("arrow-btn"), qa: INCREMENT_BUTTON_QA, ...commonBtnProps, onClick: onUpClick, "aria-label": i18n_default12("label_increment"), children: (0, import_jsx_runtime113.jsx)(Icon, { data: ChevronUp_default, size: 12 }) }), (0, import_jsx_runtime113.jsx)("span", { className: b70("separator") }), (0, import_jsx_runtime113.jsx)(Button2, { className: b70("arrow-btn"), qa: DECREMENT_BUTTON_QA, ...commonBtnProps, onClick: onDownClick, "aria-label": i18n_default12("label_decrement"), children: (0, import_jsx_runtime113.jsx)(Icon, { data: ChevronDown_default, size: 12 }) })] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/NumberInput.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/NumberInput/NumberInput.css";
var b71 = block("number-input");
function getStringValue(value) {
  return value === null ? "" : String(value);
}
var NumberInput = React869.forwardRef(function NumberInput2({ endContent, defaultValue: externalDefaultValue, ...props }, ref2) {
  var _a;
  const { value: externalValue, onChange: handleChange, onUpdate: externalOnUpdate, min: externalMin, max: externalMax, shiftMultiplier: externalShiftMultiplier = 10, step: externalStep, size: size5 = "m", view = "normal", disabled, hiddenControls, validationState, onBlur, onKeyDown, allowDecimal = false, className } = props;
  const { min: min2, max: max2, step: baseStep, value: internalValue, defaultValue, shiftMultiplier } = getInternalState({
    min: externalMin,
    max: externalMax,
    step: externalStep,
    shiftMultiplier: externalShiftMultiplier,
    allowDecimal,
    value: externalValue,
    defaultValue: externalDefaultValue
  });
  const [value, setValue] = useControlledState(internalValue, defaultValue ?? null, externalOnUpdate);
  const [inputValue, setInputValue] = React869.useState(getStringValue(value));
  React869.useEffect(() => {
    const stringPropsValue = getStringValue(value);
    setInputValue((currentInputValue) => {
      if (!areStringRepresentationOfNumbersEqual(currentInputValue, stringPropsValue)) {
        return stringPropsValue;
      }
      return currentInputValue;
    });
  }, [value]);
  const clamp2 = !(allowDecimal && !externalStep);
  const safeValue = value ?? 0;
  const state = getInputControlState(validationState);
  const canIncrementNumber = safeValue < (max2 ?? Number.MAX_SAFE_INTEGER);
  const canDecrementNumber = safeValue > (min2 ?? Number.MIN_SAFE_INTEGER);
  const innerControlRef = React869.useRef(null);
  const fieldRef = useFormResetHandler({
    initialValue: value,
    onReset: setValue
  });
  const handleRef = useForkRef(props.controlRef, innerControlRef, fieldRef);
  const handleValueDelta = (e, direction) => {
    const step = e.shiftKey ? shiftMultiplier * baseStep : baseStep;
    const deltaWithSign = direction === "up" ? step : -step;
    if (direction === "up" ? canIncrementNumber : canDecrementNumber) {
      const newValue = clampToNearestStepValue({
        value: safeValue + deltaWithSign,
        step: baseStep,
        min: min2,
        max: max2,
        direction
      });
      setValue == null ? void 0 : setValue(newValue);
      setInputValue(newValue.toString());
    }
  };
  const handleKeyDown = (e) => {
    if (e.key === KeyCode.ARROW_DOWN) {
      e.preventDefault();
      handleValueDelta(e, "down");
    } else if (e.key === KeyCode.ARROW_UP) {
      e.preventDefault();
      handleValueDelta(e, "up");
    } else if (e.key === KeyCode.HOME) {
      e.preventDefault();
      if (min2 !== void 0) {
        setValue == null ? void 0 : setValue(min2);
        setInputValue(min2.toString());
      }
    } else if (e.key === KeyCode.END) {
      e.preventDefault();
      if (max2 !== void 0) {
        const newValue = clampToNearestStepValue({
          value: max2,
          step: baseStep,
          min: min2,
          max: max2
        });
        setValue == null ? void 0 : setValue(newValue);
        setInputValue(newValue.toString());
      }
    }
    onKeyDown == null ? void 0 : onKeyDown(e);
  };
  const handleBlur = (e) => {
    if (clamp2 && value !== null) {
      const clampedValue = clampToNearestStepValue({
        value,
        step: baseStep,
        min: min2,
        max: max2
      });
      if (value !== clampedValue) {
        setValue == null ? void 0 : setValue(clampedValue);
      }
      setInputValue(clampedValue.toString());
    }
    onBlur == null ? void 0 : onBlur(e);
  };
  const handleUpdate = (v) => {
    setInputValue(v);
    const preparedStringValue = getPossibleNumberSubstring(v, allowDecimal);
    updateCursorPosition(innerControlRef, v, preparedStringValue);
    const { valid, value: parsedNumberValue } = getParsedValue(preparedStringValue);
    if (valid && parsedNumberValue !== value) {
      setValue == null ? void 0 : setValue(parsedNumberValue);
    }
  };
  const handleInput = (e) => {
    const preparedStringValue = getPossibleNumberSubstring(e.currentTarget.value, allowDecimal);
    updateCursorPosition(innerControlRef, e.currentTarget.value, preparedStringValue);
  };
  return (0, import_jsx_runtime114.jsx)(TextInput, { ...props, className: b71({ size: size5, view, state }, className), controlProps: {
    onInput: handleInput,
    ...props.controlProps,
    role: "spinbutton",
    inputMode: allowDecimal ? "decimal" : "numeric",
    pattern: ((_a = props.controlProps) == null ? void 0 : _a.pattern) ?? getInputPattern(allowDecimal, false),
    "aria-valuemin": props.min,
    "aria-valuemax": props.max,
    "aria-valuenow": value === null ? void 0 : value
  }, controlRef: handleRef, value: inputValue, onChange: handleChange, onUpdate: handleUpdate, onKeyDown: handleKeyDown, onBlur: handleBlur, ref: ref2, endContent: (0, import_jsx_runtime114.jsxs)(React869.Fragment, { children: [endContent, hiddenControls ? null : (0, import_jsx_runtime114.jsx)(NumericArrows, { className: b71("arrows"), size: size5, disabled, onUpClick: (e) => {
    var _a2;
    (_a2 = innerControlRef.current) == null ? void 0 : _a2.focus();
    handleValueDelta(e, "up");
  }, onDownClick: (e) => {
    var _a2;
    (_a2 = innerControlRef.current) == null ? void 0 : _a2.focus();
    handleValueDelta(e, "down");
  } })] }) });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Overlay/Overlay.js
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Overlay/Overlay.css";
var b72 = block("overlay");
function Overlay({ className, background = "base", visible = false, children: children2 }) {
  return (0, import_jsx_runtime115.jsxs)("div", { className: b72({ visible }, className), children: [(0, import_jsx_runtime115.jsx)("div", { className: b72("background", { style: background }) }), children2 && (0, import_jsx_runtime115.jsx)("div", { className: b72("children"), children: children2 })] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/Pagination.js
var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationEllipsis/PaginationEllipsis.js
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationEllipsis/PaginationEllipsis.css";
var b73 = block("pagination-ellipsis");
var PaginationEllipsis = ({ size: size5, className }) => {
  return (0, import_jsx_runtime116.jsx)("div", { className: b73({ size: size5 }, className), children: "..." });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPage/PaginationPage.js
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/constants.js
var PaginationQa = {
  PaginationPageSizer: "pagination-page-sizer",
  PaginationPageSizerOption: "pagination-page-sizer-option",
  PaginationInput: "pagination-input",
  PaginationPage: "pagination-page",
  PaginationButtonFirst: "pagination-button-first",
  PaginationButtonPrevious: "pagination-button-previous",
  PaginationButtonNext: "pagination-button-next"
};
var getPaginationPageQa = (pageNumber) => {
  return `${PaginationQa.PaginationPage}-${pageNumber}`;
};
var getPaginationPageSizeOptionQa = (pageSizeOption) => {
  return `${PaginationQa.PaginationPageSizerOption}-${pageSizeOption}`;
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPage/PaginationPage.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPage/PaginationPage.css";
var b74 = block("pagination-page");
var PaginationPage = ({ item, size: size5, pageSize, className, onUpdate }) => {
  const qa = getPaginationPageQa(item.page);
  if (item.simple) {
    return (0, import_jsx_runtime117.jsx)("div", { "data-qa": qa, className: b74("simple", { size: size5 }, className), children: item.page });
  }
  const view = item.current ? "normal" : "flat";
  return (0, import_jsx_runtime117.jsx)(Button2, { size: size5, view, selected: item.current, className, onClick: () => onUpdate(item.page, pageSize), qa, children: item.page }, view);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageOf/PaginationPageOf.js
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/i18n/en.json
var en_default15 = {
  button_previous: "Previous",
  button_next: "Next",
  button_first: "First",
  "label_input-placeholder": "Page #",
  "label_page-of": "of",
  label_select_size: "Select page size"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/i18n/ru.json
var ru_default15 = {
  button_previous: "Предыдущая",
  button_next: "Следующая",
  button_first: "Первая",
  "label_input-placeholder": "Стр.",
  "label_page-of": "из",
  label_select_size: "Выбрать размер страницы"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/i18n/index.js
var COMPONENT12 = "Pagination";
var i18n_default13 = addComponentKeysets({ en: en_default15, ru: ru_default15 }, COMPONENT12);

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageOf/PaginationPageOf.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageOf/PaginationPageOf.css";
var b75 = block("pagination-page-of");
var PaginationPageOf = ({ size: size5, className }) => {
  return (0, import_jsx_runtime118.jsx)("div", { className: b75({ size: size5 }, className), children: i18n_default13("label_page-of") });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationButton/PaginationButton.js
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var PaginationButton = ({ item, size: size5, className, page, pageSize, onUpdate, compact }) => {
  let button = null;
  const { disabled } = item;
  switch (item.action) {
    case "first":
      button = (0, import_jsx_runtime119.jsxs)(Button2, { size: size5, view: "outlined", className, onClick: () => onUpdate(1, pageSize), title: compact ? i18n_default13("button_first") : void 0, disabled, qa: PaginationQa.PaginationButtonFirst, children: [(0, import_jsx_runtime119.jsx)(Icon, { data: ChevronsLeft_default, size: "16" }), compact ? void 0 : i18n_default13("button_first")] });
      break;
    case "previous":
      button = (0, import_jsx_runtime119.jsxs)(Button2, { size: size5, view: "outlined", className, onClick: () => onUpdate(page - 1, pageSize), title: compact ? i18n_default13("button_previous") : void 0, disabled, qa: PaginationQa.PaginationButtonPrevious, children: [(0, import_jsx_runtime119.jsx)(Icon, { data: ChevronLeft_default, size: "16" }), compact ? void 0 : i18n_default13("button_previous")] });
      break;
    case "next":
      button = (0, import_jsx_runtime119.jsxs)(Button2, { size: size5, view: "outlined", className, onClick: () => onUpdate(page + 1, pageSize), title: compact ? i18n_default13("button_next") : void 0, disabled, qa: PaginationQa.PaginationButtonNext, children: [(0, import_jsx_runtime119.jsx)(Icon, { data: ChevronRight_default, size: "16" }), compact ? void 0 : i18n_default13("button_next")] });
      break;
  }
  return button;
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationInput/PaginationInput.js
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var React870 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationInput/PaginationInput.css";
var b76 = block("pagination-input");
var PaginationInput = ({ numberOfPages, size: size5, pageSize, onUpdate, className }) => {
  const [value, setValue] = React870.useState("");
  const handleUpdateValue = (inputValue) => {
    if (inputValue === "" || /^[1-9][0-9]*$/.test(inputValue)) {
      setValue(inputValue);
    }
  };
  const handleUpdate = (inputValue) => {
    if (!inputValue) {
      return;
    }
    let numValue = Number(inputValue);
    if (!Number.isInteger(numValue)) {
      setValue("");
      return;
    }
    const hasUpperLimit = numberOfPages > 0;
    if (numValue > numberOfPages) {
      numValue = hasUpperLimit ? numberOfPages : numValue;
    } else if (numValue < 1) {
      numValue = 1;
    }
    setValue("");
    onUpdate(numValue, pageSize);
  };
  const handleBlur = (event) => handleUpdate(event.currentTarget.value);
  const handleKeyUp = (event) => {
    if (event.key === KeyCode.ENTER) {
      handleUpdate(event.currentTarget.value);
    }
  };
  return (0, import_jsx_runtime120.jsx)(TextInput, { className: b76({ size: size5 }, className), placeholder: i18n_default13("label_input-placeholder"), size: size5, value, onUpdate: handleUpdateValue, onBlur: handleBlur, onKeyUp: handleKeyUp, qa: PaginationQa.PaginationInput });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageSizer/PaginationPageSizer.js
var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Select/Select.js
var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
var React881 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/EmptyOptions/EmptyOptions.js
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/EmptyOptions/EmptyOptions.css";
var b77 = block("select-empty-placeholder");
var EmptyOptions = ({ renderEmptyOptions, filter }) => {
  return (0, import_jsx_runtime121.jsx)("div", { className: b77({ empty: !renderEmptyOptions }), children: renderEmptyOptions == null ? void 0 : renderEmptyOptions({ filter }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectControl/SelectControl.js
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var React871 = __toESM(require_react(), 1);
var import_isEmpty = __toESM(require_isEmpty(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Select/constants.js
var selectBlock = block("select");
var selectControlBlock = block("select-control");
var selectControlButtonBlock = block("select-control__button");
var selectListBlock = block("select-list");
var selectClearBlock = block("select-clear");
var SIZE_TO_ITEM_HEIGHT = {
  s: 28,
  m: 28,
  l: 32,
  xl: 36
};
var MOBILE_ITEM_HEIGHT = 32;
var GROUP_ITEM_MARGIN_TOP = 5;
var BORDER_WIDTH = 1;
var POPUP_MIN_WIDTH_IN_VIRTUALIZE_CASE = 100;
var QUICK_SEARCH_TIMEOUT = 2e3;
var DEFAULT_VIRTUALIZATION_THRESHOLD = 50;
var SelectQa = {
  LIST: "select-list",
  POPUP: "select-popup",
  SHEET: "select-sheet",
  CLEAR: "select-clear",
  FILTER_INPUT: "select-filter-input"
};
var FLATTEN_KEY = Symbol("flatten");

// node_modules/@gravity-ui/uikit/build/esm/components/Select/i18n/en.json
var en_default16 = {
  label_clear: "Clear",
  "label_show-error-info": "Show popup with error info",
  label_filter: "Filter"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/i18n/ru.json
var ru_default16 = {
  label_clear: "Очистить",
  "label_show-error-info": "Показать попап с информацей об ошибке",
  label_filter: "Фильтр"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/i18n/index.js
var COMPONENT13 = "Select";
var i18n_default14 = addComponentKeysets({ en: en_default16, ru: ru_default16 }, COMPONENT13);

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectClear/SelectClear.js
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectClear/SelectClear.css";
var SelectClear = (props) => {
  const { size: size5, onClick, onMouseEnter, onMouseLeave, renderIcon } = props;
  const icon = renderIcon ? renderIcon() : (0, import_jsx_runtime122.jsx)(Icon, { className: selectClearBlock("clear"), data: Xmark_default });
  return (0, import_jsx_runtime122.jsx)("button", { className: selectClearBlock({ size: size5 }), "aria-label": i18n_default14("label_clear"), onClick, onMouseEnter, onMouseLeave, "data-qa": SelectQa.CLEAR, type: "button", children: icon });
};
SelectClear.displayName = "SelectClear";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectCounter/SelectCounter.js
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectCounter/SelectCounter.css";
var b78 = block("select-counter");
function SelectCounter({ count: count3, size: size5, disabled }) {
  return (0, import_jsx_runtime123.jsx)("div", { className: b78({ size: size5 }), children: (0, import_jsx_runtime123.jsx)(Text, { variant: size5 === "xl" ? "body-2" : "body-1", color: disabled ? "hint" : "primary", className: b78("text"), children: count3 }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectControl/SelectControl.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectControl/SelectControl.css";
var SelectControl = React871.forwardRef((props, ref2) => {
  const { toggleOpen, clearValue, onKeyDown, renderControl, view, size: size5, pin, selectedOptionsContent, className, qa, label, placeholder: placeholder2, isErrorVisible, errorMessage, open, disabled, value, hasClear, popupId, selectId, activeIndex, renderCounter, hasCounter, title } = props;
  const showOptionsText = Boolean(selectedOptionsContent);
  const showPlaceholder = Boolean(placeholder2 && !showOptionsText);
  const hasValue2 = Array.isArray(value) && !(0, import_isEmpty.default)(value.filter(Boolean));
  const errorTooltipId = useUniqId();
  const [isDisabledButtonAnimation, setIsDisabledButtonAnimation] = React871.useState(false);
  const controlMods = {
    open,
    size: size5,
    pin,
    disabled,
    error: isErrorVisible,
    "has-clear": hasClear,
    "no-active": isDisabledButtonAnimation,
    "has-value": hasValue2
  };
  const buttonMods = {
    open,
    size: size5,
    view,
    pin,
    disabled,
    error: isErrorVisible
  };
  const handleControlClick = React871.useCallback((e) => {
    if (e && e.currentTarget !== document.activeElement && "focus" in e.currentTarget) {
      e.currentTarget.focus();
    }
    toggleOpen();
  }, [toggleOpen]);
  const disableButtonAnimation = React871.useCallback(() => {
    setIsDisabledButtonAnimation(true);
  }, []);
  const enableButtonAnimation = React871.useCallback(() => {
    setIsDisabledButtonAnimation(false);
  }, []);
  const handleOnClearIconClick = React871.useCallback(() => {
    setIsDisabledButtonAnimation(false);
    clearValue();
  }, [clearValue]);
  const renderCounterComponent = () => {
    if (!hasCounter) {
      return null;
    }
    const count3 = value.length;
    const counterComponent = (0, import_jsx_runtime124.jsx)(SelectCounter, { count: count3, size: size5, disabled });
    return renderCounter ? renderCounter(counterComponent, { count: count3, size: size5, disabled }) : counterComponent;
  };
  const renderClearIcon = (args) => {
    const valueIsEmpty = value.length === 0;
    if (!hasClear || valueIsEmpty || disabled) {
      return null;
    }
    return (0, import_jsx_runtime124.jsx)(SelectClear, { size: size5, onClick: handleOnClearIconClick, onMouseEnter: disableButtonAnimation, onMouseLeave: enableButtonAnimation, renderIcon: args.renderIcon });
  };
  const triggerProps = {
    ...filterDOMProps(props, { labelable: true }),
    id: selectId,
    role: "combobox",
    "aria-controls": open ? popupId : void 0,
    "aria-haspopup": "listbox",
    "aria-expanded": open,
    "aria-activedescendant": activeIndex === void 0 ? void 0 : `${popupId}-item-${activeIndex}`,
    onClick: handleControlClick,
    onKeyDown,
    disabled
  };
  if (renderControl) {
    return renderControl({
      onClear: clearValue,
      renderClear: renderClearIcon,
      renderCounter: renderCounterComponent,
      ref: ref2,
      open,
      disabled,
      triggerProps
    }, { value });
  }
  return (0, import_jsx_runtime124.jsx)(React871.Fragment, { children: (0, import_jsx_runtime124.jsxs)("div", { className: selectControlBlock(controlMods), role: "group", children: [(0, import_jsx_runtime124.jsxs)("button", { ref: ref2, className: selectControlButtonBlock(buttonMods, className), type: "button", "data-qa": qa, title, tabIndex: 0, ...triggerProps, children: [label && (0, import_jsx_runtime124.jsx)("span", { className: selectControlBlock("label"), children: label }), showPlaceholder && (0, import_jsx_runtime124.jsx)("span", { className: selectControlBlock("placeholder"), children: placeholder2 }), showOptionsText && (0, import_jsx_runtime124.jsx)("span", { className: selectControlBlock("option-text"), children: selectedOptionsContent })] }), renderCounterComponent(), renderClearIcon({}), errorMessage && (0, import_jsx_runtime124.jsx)(Popover2, { content: errorMessage, tooltipId: errorTooltipId, children: (0, import_jsx_runtime124.jsx)("button", { "aria-label": i18n_default14("label_show-error-info"), "aria-describedby": errorTooltipId, className: selectControlBlock("error-icon"), children: (0, import_jsx_runtime124.jsx)(Icon, { data: TriangleExclamation_default, size: size5 === "s" ? 12 : 16 }) }) }), (0, import_jsx_runtime124.jsx)(Icon, { className: selectControlBlock("chevron-icon", { disabled }), data: ChevronDown_default, "aria-hidden": "true" })] }) });
});
SelectControl.displayName = "SelectControl";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectFilter/SelectFilter.js
var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
var React872 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectFilter/SelectFilter.css";
var b79 = block("select-filter");
var style2 = {
  padding: "4px 4px 0"
};
var SelectFilter = React872.forwardRef((props, ref2) => {
  const { onChange, onKeyDown, renderFilter, size: size5, value, placeholder: placeholder2, popupId, activeIndex } = props;
  const inputRef = React872.useRef(null);
  React872.useImperativeHandle(ref2, () => ({
    focus: () => {
      var _a;
      return (_a = inputRef.current) == null ? void 0 : _a.focus({ preventScroll: true });
    }
  }), []);
  const inputProps = {
    value,
    placeholder: placeholder2,
    size: 1,
    onKeyDown,
    onChange: (e) => {
      onChange(e.target.value);
    },
    "aria-label": i18n_default14("label_filter"),
    "aria-controls": popupId,
    "aria-activedescendant": activeIndex === void 0 ? void 0 : `${popupId}-item-${activeIndex}`
  };
  if (renderFilter) {
    return renderFilter({ onChange, onKeyDown, value, ref: inputRef, style: style2, inputProps });
  }
  return (0, import_jsx_runtime125.jsx)("div", { className: b79(), style: style2, children: (0, import_jsx_runtime125.jsx)(TextInput, { controlRef: inputRef, controlProps: {
    className: b79("input"),
    size: 1,
    "aria-label": inputProps["aria-label"],
    "aria-controls": inputProps["aria-controls"],
    "aria-activedescendant": inputProps["aria-activedescendant"]
  }, size: size5, value, placeholder: placeholder2, onUpdate: onChange, onKeyDown, qa: SelectQa.FILTER_INPUT }) });
});
SelectFilter.displayName = "SelectFilter";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectList.js
var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
var React875 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Select/utils.js
var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
var React873 = __toESM(require_react(), 1);
var isSelectGroupTitle = (option) => {
  return Boolean(option && "label" in option);
};
var getFlattenOptions = (options) => {
  const flatten = options.reduce((acc, option) => {
    if ("label" in option) {
      acc.push({ label: option.label, disabled: true, data: option.data });
      acc.push(...option.options || []);
    } else {
      acc.push(option);
    }
    return acc;
  }, []);
  Object.defineProperty(flatten, FLATTEN_KEY, {
    enumerable: false,
    value: {}
  });
  return flatten;
};
var getPopupItemHeight = (args) => {
  const { getOptionHeight, getOptionGroupHeight, size: size5, option, index: index3, mobile } = args;
  let itemHeight = mobile ? MOBILE_ITEM_HEIGHT : SIZE_TO_ITEM_HEIGHT[size5];
  if (isSelectGroupTitle(option)) {
    const marginTop = index3 === 0 ? 0 : GROUP_ITEM_MARGIN_TOP;
    itemHeight = option.label === "" ? 0 : itemHeight;
    return getOptionGroupHeight ? getOptionGroupHeight(option, index3) : itemHeight + marginTop;
  }
  return getOptionHeight ? getOptionHeight(option, index3) : itemHeight;
};
var getOptionsHeight = (args) => {
  const { getOptionHeight, getOptionGroupHeight, size: size5, options, mobile } = args;
  return options.reduce((height, option, index3) => {
    return height + getPopupItemHeight({ getOptionHeight, getOptionGroupHeight, size: size5, option, index: index3, mobile });
  }, 0);
};
var getOptionText = (option) => {
  if (typeof option.content === "string") {
    return option.content;
  }
  if (typeof option.children === "string") {
    return option.children;
  }
  if (option.text) {
    return option.text;
  }
  return option.value;
};
var getSelectedOptionsContent = (options, value, renderSelectedOption) => {
  if (value.length === 0) {
    return null;
  }
  const flattenSimpleOptions = options.filter((opt) => !isSelectGroupTitle(opt));
  const selectedOptions = value.reduce((acc, val) => {
    const selectedOption = flattenSimpleOptions.find((opt) => opt.value === val);
    acc.push(selectedOption || { value: val });
    return acc;
  }, []);
  if (renderSelectedOption) {
    return selectedOptions.map((option, index3) => {
      return (0, import_jsx_runtime126.jsx)(React873.Fragment, { children: renderSelectedOption(option, index3) }, option.value);
    });
  } else {
    return selectedOptions.map((option) => {
      return getOptionText(option);
    }).join(", ");
  }
};
var getTypedChildrenArray = (children2) => {
  return React873.Children.toArray(children2);
};
var getOptionsFromOptgroupChildren = (children2) => {
  return React873.Children.toArray(children2).reduce((acc, { props }) => {
    if ("value" in props) {
      acc.push(props);
    }
    return acc;
  }, []);
};
var getOptionsFromChildren = (children2) => {
  return getTypedChildrenArray(children2).reduce((acc, { props }) => {
    if ("label" in props) {
      const options = props.options || getOptionsFromOptgroupChildren(props.children);
      acc.push({
        options,
        label: props.label
      });
    }
    if ("value" in props) {
      acc.push({ ...props });
    }
    return acc;
  }, []);
};
var getNextQuickSearch = (keyCode, quickSearch) => {
  const writingSystemKeyPressed = keyCode.length === 1;
  const backspacePressed = keyCode === KeyCode.BACKSPACE;
  let nextQuickSearch = "";
  if (backspacePressed && quickSearch.length) {
    nextQuickSearch = quickSearch.slice(0, quickSearch.length - 1);
  } else if (writingSystemKeyPressed) {
    nextQuickSearch = (quickSearch + keyCode).trim();
  }
  return nextQuickSearch;
};
var getEscapedRegExp = (string) => {
  return new RegExp(string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "i");
};
var findItemIndexByQuickSearch = (quickSearch, items) => {
  if (!items) {
    return -1;
  }
  return items.findIndex((item) => {
    if (isSelectGroupTitle(item)) {
      return false;
    }
    if (item.disabled) {
      return false;
    }
    const optionText = getOptionText(item);
    return getEscapedRegExp(quickSearch).test(optionText);
  });
};
var getListItems = (listRef) => {
  var _a;
  return ((_a = listRef == null ? void 0 : listRef.current) == null ? void 0 : _a.getItems()) || [];
};
var getActiveItem = (listRef) => {
  var _a;
  const items = getListItems(listRef);
  const activeItemIndex = (_a = listRef == null ? void 0 : listRef.current) == null ? void 0 : _a.getActiveItem();
  return typeof activeItemIndex === "number" ? items[activeItemIndex] : void 0;
};
var isOptionMatchedByFilter = (option, filter) => {
  const lowerOptionText = getOptionText(option).toLocaleLowerCase();
  const lowerFilter = filter.toLocaleLowerCase();
  return lowerOptionText.indexOf(lowerFilter) !== -1;
};
var getFilteredFlattenOptions = (args) => {
  const { options, filter, filterOption } = args;
  const filteredOptions = options.filter((option) => {
    if (isSelectGroupTitle(option)) {
      return true;
    }
    return filterOption ? filterOption(option, filter) : isOptionMatchedByFilter(option, filter);
  });
  return filteredOptions.reduce((acc, option, index3) => {
    const groupTitle = isSelectGroupTitle(option);
    const previousGroupTitle = isSelectGroupTitle(acc[acc.length - 1]);
    const isLastOption = index3 === filteredOptions.length - 1;
    if (groupTitle && previousGroupTitle) {
      acc.pop();
    }
    if (!groupTitle || groupTitle && !isLastOption) {
      acc.push(option);
    }
    return acc;
  }, []);
};
function scrollToItem(node) {
  const container = node.offsetParent;
  if (container instanceof HTMLElement) {
    const height = container.offsetHeight;
    const scrollTop = container.scrollTop;
    const top = node.offsetTop;
    const bottom = top + node.offsetHeight;
    if (bottom >= scrollTop + height) {
      container.scrollTo({ top: top - height + node.offsetHeight });
    } else if (top <= scrollTop) {
      container.scrollTo({ top });
    }
  }
  return true;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/GroupLabel.js
var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
var b80 = block("select-list");
var GroupLabel = ({ option, renderOptionGroup }) => {
  if (renderOptionGroup) {
    return (0, import_jsx_runtime127.jsx)("div", { className: b80("group-label-custom"), children: renderOptionGroup(option) });
  } else {
    return (0, import_jsx_runtime127.jsx)("div", { className: b80("group-label", { empty: option.label === "" }), children: (0, import_jsx_runtime127.jsx)("div", { className: b80("group-label-content"), children: option.label }) });
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/OptionWrap.js
var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
var b81 = block("select-list");
var DefaultOption = ({ option }) => {
  const { content, children: children2, disabled, title } = option;
  return (0, import_jsx_runtime128.jsx)("span", { title, className: b81("option-default-label", { disabled }), children: content || children2 });
};
var OptionWrap = (props) => {
  const { renderOption, value, option, multiple } = props;
  const selected = value.indexOf(option.value) !== -1;
  const optionContent = renderOption ? renderOption(option) : (0, import_jsx_runtime128.jsx)(DefaultOption, { option });
  return (0, import_jsx_runtime128.jsxs)("div", { "data-qa": option.qa, className: b81("option", { colored: selected && !multiple, disabled: option.disabled }), children: [multiple && (0, import_jsx_runtime128.jsx)(Icon, { className: b81("tick-icon", { shown: selected && multiple }), data: Check_default }), optionContent] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectLoadingIndicator.js
var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
var React874 = __toESM(require_react(), 1);
var SelectLoadingIndicator = (props) => {
  const ref2 = React874.useRef(null);
  useIntersection({ element: ref2.current, onIntersect: props == null ? void 0 : props.onIntersect });
  return (0, import_jsx_runtime129.jsx)("div", { ref: ref2, className: selectListBlock("loading-indicator"), children: (0, import_jsx_runtime129.jsx)(Loader, {}) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectList.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectList.css";
var loadingOption = { value: "__SELECT_LIST_ITEM_LOADING__", disabled: true };
var SelectList = React875.forwardRef((props, ref2) => {
  const { onOptionClick, renderOption, renderOptionGroup, getOptionHeight, getOptionGroupHeight, size: size5, flattenOptions, value, multiple, virtualized, mobile, loading, onLoadMore, id, activeIndex, onChangeActive } = props;
  const items = React875.useMemo(() => loading ? [...flattenOptions, loadingOption] : flattenOptions, [flattenOptions, loading]);
  const selectedIndexes = React875.useMemo(() => flattenOptions.reduce((acc, option, index3) => {
    if ("value" in option && value.includes(option.value)) {
      acc.push(index3);
    }
    return acc;
  }, []), [flattenOptions, value]);
  const optionsHeight = getOptionsHeight({
    options: items,
    getOptionHeight,
    getOptionGroupHeight,
    size: size5,
    mobile
  });
  const getItemHeight = React875.useCallback((option, index3) => {
    return getPopupItemHeight({
      getOptionHeight,
      getOptionGroupHeight,
      size: size5,
      option,
      index: index3,
      mobile
    });
  }, [getOptionHeight, getOptionGroupHeight, mobile, size5]);
  const renderItem = React875.useCallback((option, _isItemActive, itemIndex) => {
    if ("label" in option) {
      const wrappedRenderOptionGroup = renderOptionGroup ? (optionLocal) => {
        return renderOptionGroup(optionLocal, {
          itemHeight: getItemHeight(optionLocal, itemIndex)
        });
      } : void 0;
      return (0, import_jsx_runtime130.jsx)(GroupLabel, { option, renderOptionGroup: wrappedRenderOptionGroup });
    }
    if (option.value === loadingOption.value) {
      return (0, import_jsx_runtime130.jsx)(SelectLoadingIndicator, { onIntersect: itemIndex === 0 ? void 0 : onLoadMore });
    }
    const wrappedRenderOption = renderOption ? (optionLocal) => {
      return renderOption(optionLocal, {
        itemHeight: getItemHeight(optionLocal, itemIndex)
      });
    } : void 0;
    return (0, import_jsx_runtime130.jsx)(OptionWrap, { option, value, multiple, renderOption: wrappedRenderOption });
  }, [renderOption, renderOptionGroup, value, multiple, getItemHeight, onLoadMore]);
  return (0, import_jsx_runtime130.jsx)(List, { ref: ref2, className: selectListBlock({ size: size5, virtualized, mobile }), qa: SelectQa.LIST, itemClassName: selectListBlock("item"), itemHeight: getItemHeight, itemsHeight: virtualized ? optionsHeight : void 0, items, filterable: false, virtualized, renderItem, onItemClick: onOptionClick, selectedItemIndex: selectedIndexes, id, role: "listbox", activeItemIndex: activeIndex, onChangeActive, deactivateOnLeave: false, onScrollToItem: scrollToItem });
});
SelectList.displayName = "SelectList";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/SelectPopup.js
var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
var React876 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/middlewares.js
var adjustBorderWidth = (width) => {
  return width - BORDER_WIDTH * 2;
};
var getMinWidth = (referenceWidth, virtualized) => {
  if (virtualized) {
    return referenceWidth > POPUP_MIN_WIDTH_IN_VIRTUALIZE_CASE ? referenceWidth : POPUP_MIN_WIDTH_IN_VIRTUALIZE_CASE;
  }
  return adjustBorderWidth(referenceWidth);
};
var getPopupWidth = (width, controlWidth, virtualized) => {
  let popupWidth = controlWidth;
  if (typeof width === "number") {
    popupWidth = width;
  } else if (width === "fit") {
    popupWidth = adjustBorderWidth(controlWidth);
  } else {
    popupWidth = getMinWidth(controlWidth, virtualized);
  }
  return `${popupWidth}px`;
};
function sameWidthMiddleware(args) {
  const { width, virtualized } = args;
  return size3({
    apply(state) {
      const skip = typeof width !== "number" && Boolean(state.elements.floating.style.maxWidth);
      if (skip) {
        return;
      }
      const popupWidth = getPopupWidth(width, state.rects.reference.width, virtualized);
      const floatingStyle = {};
      if (typeof width !== "number" && width !== "fit") {
        floatingStyle.minWidth = popupWidth;
        floatingStyle.width = void 0;
      } else {
        floatingStyle.minWidth = popupWidth;
        floatingStyle.width = popupWidth;
      }
      floatingStyle.maxWidth = `max(90vw, ${adjustBorderWidth(state.rects.reference.width)}px)`;
      Object.assign(state.elements.floating.style, floatingStyle);
    }
  });
}
function getMiddlewares(args) {
  return [
    offset3({ mainAxis: BORDER_WIDTH, crossAxis: BORDER_WIDTH }),
    flip3({ altBoundary: args.disablePortal }),
    shift3({
      limiter: limitShift3(),
      crossAxis: true,
      padding: 10,
      altBoundary: args.disablePortal
    }),
    sameWidthMiddleware(args)
  ];
}

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/SelectPopup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/SelectPopup.css";
var b82 = block("select-popup");
var DEFAULT_PLACEMENT2 = ["bottom-start", "bottom-end", "top-start", "top-end"];
var SelectPopup = React876.forwardRef(({ handleClose, onAfterOpen, onAfterClose, width, open, placement = DEFAULT_PLACEMENT2, controlRef, children: children2, className, disablePortal, virtualized, mobile, id }, ref2) => mobile ? (0, import_jsx_runtime131.jsx)(Sheet, { qa: SelectQa.SHEET, className, visible: Boolean(open), onClose: handleClose, children: children2 }) : (0, import_jsx_runtime131.jsx)(Popup, { className: b82(null, className), qa: SelectQa.POPUP, anchorRef: ref2, placement, open, onClose: handleClose, disablePortal, returnFocus: controlRef, floatingMiddlewares: getMiddlewares({ width, disablePortal, virtualized }), id, onTransitionIn: onAfterOpen, onTransitionOutComplete: onAfterClose, children: children2 }));
SelectPopup.displayName = "SelectPopup";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/HiddenSelect/HiddenSelect.js
var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
var React877 = __toESM(require_react(), 1);
function HiddenSelect(props) {
  const { name, value, disabled, form, onReset } = props;
  const ref2 = useFormResetHandler({ onReset, initialValue: value });
  if (!name || disabled) {
    return null;
  }
  if (value.length === 0) {
    return (0, import_jsx_runtime132.jsx)("input", { ref: ref2, type: "hidden", name, value, form, disabled });
  }
  return (0, import_jsx_runtime132.jsx)(React877.Fragment, { children: value.map((v, i) => (0, import_jsx_runtime132.jsx)("input", { ref: i === 0 ? ref2 : void 0, value: v, type: "hidden", name, form, disabled }, v)) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Select/hooks/useQuickSearch.js
var React878 = __toESM(require_react(), 1);
var useQuickSearch = (props) => {
  const { onChange, open, disabled } = props;
  const [search, setSearch] = React878.useState("");
  const [timer, setTimer] = React878.useState();
  const handleTimer = React878.useCallback((nextSearch) => {
    clearTimeout(timer);
    if (nextSearch) {
      const nextTimer = window.setTimeout(() => setSearch(""), QUICK_SEARCH_TIMEOUT);
      setTimer(nextTimer);
    }
  }, [timer]);
  const handleSearch = React878.useCallback((e) => {
    e.stopPropagation();
    const nextSearch = getNextQuickSearch(e.key, search);
    if (search !== nextSearch) {
      handleTimer(nextSearch);
      setSearch(nextSearch);
    }
  }, [handleTimer, search]);
  React878.useEffect(() => {
    if (open && !disabled) {
      document.addEventListener("keydown", handleSearch);
    } else if (!open && !disabled) {
      setSearch("");
    }
    return () => {
      if (open && !disabled) {
        document.removeEventListener("keydown", handleSearch);
      }
    };
  }, [handleSearch, open, disabled]);
  React878.useEffect(() => {
    if (!open) {
      clearTimeout(timer);
    }
    return () => clearTimeout(timer);
  }, [open, timer]);
  React878.useEffect(() => {
    onChange(search);
  }, [onChange, search]);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/hooks/useActiveItemIndex.js
var React879 = __toESM(require_react(), 1);
function useActiveItemIndex({ options, value, open }) {
  const [activeIndex, setActiveIndex] = React879.useState(() => {
    if (open) {
      return getInitialActiveItemIndex(options, value);
    }
    return void 0;
  });
  const [prevOpen, setPrevOpen] = React879.useState(open);
  if (prevOpen !== open) {
    setPrevOpen(open);
    if (open) {
      setActiveIndex(getInitialActiveItemIndex(options, value));
    }
  }
  const activeIndexFinal = open && activeIndex !== void 0 && activeIndex < options.length && !options[activeIndex].disabled ? activeIndex : void 0;
  return [activeIndexFinal, setActiveIndex];
}
function getInitialActiveItemIndex(options, value) {
  let itemIndex = -1;
  if (value.length > 0) {
    itemIndex = options.findIndex((item) => "value" in item && value.includes(item.value) && !item.disabled);
  }
  if (itemIndex === -1) {
    itemIndex = options.findIndex((item) => "value" in item && !item.disabled);
  }
  return itemIndex === -1 ? void 0 : itemIndex;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Select/hooks-public/useSelectOptions/index.js
var React880 = __toESM(require_react(), 1);
var import_get = __toESM(require_get(), 1);
function isFlattenOptions(options) {
  return (0, import_get.default)(options, [FLATTEN_KEY]);
}
function getSelectFilteredOptions(options) {
  if (!isFlattenOptions(options)) {
    throw Error("You should use options generated by useSelectOptions hook");
  }
  return (0, import_get.default)(options, [FLATTEN_KEY, "filteredOptions"]);
}
function useSelectOptions(props) {
  const { filter = "", filterable, filterOption } = props;
  const options = React880.useMemo(() => {
    return isFlattenOptions(props.options) ? props.options : getFlattenOptions(props.options);
  }, [props.options]);
  const filteredOptions = React880.useMemo(() => {
    return filterable ? getFilteredFlattenOptions({ options, filter, filterOption }) : options;
  }, [filter, filterable, filterOption, options]);
  options[FLATTEN_KEY]["filteredOptions"] = filteredOptions;
  return options;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Select/tech-components.js
var Option = (_props) => null;
var OptionGroup = (_props) => null;

// node_modules/@gravity-ui/uikit/build/esm/components/Select/Select.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/Select.css";
var DEFAULT_RENDER_POPUP = ({ renderFilter, renderList }) => {
  return (0, import_jsx_runtime133.jsxs)(React881.Fragment, { children: [renderFilter(), renderList()] });
};
var Select = React881.forwardRef(function Select2(props, ref2) {
  const { onUpdate, onOpenChange, onFilterChange, renderControl, renderFilter, renderOption, renderOptionGroup, renderSelectedOption, renderEmptyOptions, renderPopup = DEFAULT_RENDER_POPUP, getOptionHeight, getOptionGroupHeight, filterOption, name, form, className, controlClassName, popupClassName, qa, value: propsValue, defaultValue, defaultOpen, open: propsOpen, label, placeholder: placeholder2, filterPlaceholder, width, popupWidth, popupPlacement, error: error3, virtualizationThreshold = DEFAULT_VIRTUALIZATION_THRESHOLD, view = "normal", size: size5 = "m", pin = "round-round", multiple = false, disabled = false, filterable = false, filter: propsFilter, disablePortal, hasClear = false, onClose, id, hasCounter, renderCounter, title } = props;
  const mobile = useMobile();
  const [filter, setFilter] = useControlledState(propsFilter, "", onFilterChange);
  const controlWrapRef = React881.useRef(null);
  const controlRef = React881.useRef(null);
  const filterRef = React881.useRef(null);
  const listRef = React881.useRef(null);
  const handleControlRef = useForkRef(ref2, controlRef);
  const { value, open, toggleOpen, setValue, handleSelection, handleClearValue } = useSelect({
    onUpdate,
    value: propsValue,
    defaultValue,
    defaultOpen,
    multiple,
    open: propsOpen,
    onClose,
    onOpenChange,
    disabled
  });
  React881.useEffect(() => {
    if (!open && filterable && mobile) {
      setTimeout(() => {
        setFilter("");
      }, 300);
    }
  }, [open, filterable, setFilter, mobile]);
  const propsOptions = props.options || getOptionsFromChildren(props.children);
  const options = useSelectOptions({
    options: propsOptions,
    filter,
    filterable,
    filterOption
  });
  const filteredOptions = getSelectFilteredOptions(options);
  const selectedOptionsContent = getSelectedOptionsContent(options, value, renderSelectedOption);
  const virtualized = filteredOptions.length >= virtualizationThreshold;
  const { errorMessage, errorPlacement, validationState } = errorPropsMapper({
    error: error3,
    errorMessage: props.errorMessage,
    errorPlacement: props.errorPlacement || "outside",
    validationState: props.validationState
  });
  const errorMessageId = useUniqId();
  const isErrorStateVisible = validationState === "invalid";
  const isErrorMsgVisible = isErrorStateVisible && Boolean(errorMessage) && errorPlacement === "outside";
  const isErrorIconVisible = isErrorStateVisible && Boolean(errorMessage) && errorPlacement === "inside";
  const handleOptionClick = React881.useCallback((option) => {
    var _a, _b;
    if (!option || (option == null ? void 0 : option.disabled) || "label" in option) {
      return;
    }
    if (multiple) {
      const activeItemIndex = (_a = listRef == null ? void 0 : listRef.current) == null ? void 0 : _a.getActiveItem();
      if (!mobile) {
        (_b = filterRef.current) == null ? void 0 : _b.focus();
      }
      if (typeof activeItemIndex === "number") {
        setTimeout(() => {
          var _a2;
          (_a2 = listRef == null ? void 0 : listRef.current) == null ? void 0 : _a2.activateItem(activeItemIndex, true);
        }, 50);
      }
    }
    handleSelection(option);
  }, [handleSelection, mobile, multiple]);
  const handleControlKeyDown = React881.useCallback((e) => {
    var _a;
    if ([KeyCode.ENTER, KeyCode.SPACEBAR].includes(e.key) && open) {
      e.preventDefault();
      if (e.key === KeyCode.SPACEBAR) {
        handleOptionClick(getActiveItem(listRef));
      }
    }
    if ([KeyCode.ARROW_DOWN, KeyCode.ARROW_UP].includes(e.key) && !open) {
      e.preventDefault();
      toggleOpen();
    }
    if (e.key === KeyCode.ESCAPE && open) {
      toggleOpen(false);
    }
    (_a = listRef == null ? void 0 : listRef.current) == null ? void 0 : _a.onKeyDown(e);
  }, [handleOptionClick, open, toggleOpen]);
  const handleFilterKeyDown = React881.useCallback((e) => {
    var _a;
    (_a = listRef == null ? void 0 : listRef.current) == null ? void 0 : _a.onKeyDown(e);
  }, []);
  const handleQuickSearchChange = React881.useCallback((search) => {
    var _a;
    if (search) {
      const itemIndex = findItemIndexByQuickSearch(search, getListItems(listRef));
      if (typeof itemIndex === "number" && itemIndex !== -1) {
        (_a = listRef == null ? void 0 : listRef.current) == null ? void 0 : _a.activateItem(itemIndex, true);
      }
    }
  }, []);
  useQuickSearch({
    onChange: handleQuickSearchChange,
    open,
    disabled: filterable
  });
  const mods = {
    ...width === "max" && { width }
  };
  const inlineStyles = {};
  if (typeof width === "number") {
    inlineStyles.width = width;
  }
  const handleClose = React881.useCallback(() => toggleOpen(false), [toggleOpen]);
  const { onFocus, onBlur } = props;
  const { focusWithinProps } = useFocusWithin({
    onFocusWithin: onFocus,
    onBlurWithin: React881.useCallback((e) => {
      onBlur == null ? void 0 : onBlur(e);
      if (!mobile) {
        handleClose();
      }
    }, [handleClose, mobile, onBlur])
  });
  const uniqId = useUniqId();
  const selectId = id ?? uniqId;
  const popupId = `select-popup-${selectId}`;
  const [activeIndex, setActiveIndex] = useActiveItemIndex({
    options: filteredOptions,
    open,
    value
  });
  const _renderFilter = () => {
    if (filterable) {
      return (0, import_jsx_runtime133.jsx)(SelectFilter, { ref: filterRef, size: size5, value: filter, placeholder: filterPlaceholder, onChange: setFilter, onKeyDown: handleFilterKeyDown, renderFilter, popupId, activeIndex });
    }
    return null;
  };
  const _renderList = () => {
    if (filteredOptions.length || props.loading) {
      return (0, import_jsx_runtime133.jsx)(SelectList, { ref: listRef, size: size5, value, mobile, flattenOptions: filteredOptions, multiple, virtualized, onOptionClick: handleOptionClick, renderOption, renderOptionGroup, getOptionHeight, getOptionGroupHeight, loading: props.loading, onLoadMore: props.onLoadMore, id: popupId, activeIndex, onChangeActive: setActiveIndex });
    }
    return (0, import_jsx_runtime133.jsx)(EmptyOptions, { filter, renderEmptyOptions });
  };
  return (0, import_jsx_runtime133.jsxs)("div", { ref: controlWrapRef, className: selectBlock(mods, className), ...focusWithinProps, style: inlineStyles, tabIndex: -1, children: [(0, import_jsx_runtime133.jsx)(SelectControl, { ...filterDOMProps(props, { labelable: true }), toggleOpen, hasClear, clearValue: handleClearValue, ref: handleControlRef, className: controlClassName, qa, view, size: size5, pin, label, placeholder: placeholder2, selectedOptionsContent, isErrorVisible: isErrorStateVisible, errorMessage: isErrorIconVisible ? errorMessage : void 0, open, disabled, onKeyDown: handleControlKeyDown, renderControl, value, popupId, selectId, activeIndex, hasCounter: multiple && hasCounter, renderCounter, title }), (0, import_jsx_runtime133.jsx)(SelectPopup, { ref: controlWrapRef, className: popupClassName, controlRef, width: popupWidth, open, handleClose, disablePortal, virtualized, mobile, placement: popupPlacement, onAfterOpen: filterable ? () => {
    var _a;
    (_a = filterRef.current) == null ? void 0 : _a.focus();
  } : void 0, onAfterClose: filterable ? () => {
    setFilter("");
  } : void 0, children: renderPopup({ renderFilter: _renderFilter, renderList: _renderList }) }), (0, import_jsx_runtime133.jsx)(OuterAdditionalContent, { errorMessage: isErrorMsgVisible ? errorMessage : null, errorMessageId }), (0, import_jsx_runtime133.jsx)(HiddenSelect, { name, value, disabled, form, onReset: setValue })] });
});
Select.Option = Option;
Select.OptionGroup = OptionGroup;

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/utils.js
var import_uniq = __toESM(require_uniq(), 1);
function getNumerationList({ page, numberOfPages, mobile }) {
  return mobile ? getMobileNumerationList(page, numberOfPages) : getDesktopNumerationList(page, numberOfPages);
}
function getMobileNumerationList(page, numberOfPages) {
  const list = [page, "pageOf", numberOfPages];
  return list;
}
function getDesktopNumerationList(page, numberOfPages) {
  const prevPage = Math.max(page - 1, 1);
  let rightPage = Math.min(page + 1, numberOfPages);
  const list = [prevPage, page, rightPage];
  if (page === 1) {
    rightPage = Math.min(rightPage + 1, numberOfPages);
    list.push(rightPage);
  }
  if (numberOfPages - rightPage >= 2) {
    list.push("ellipsis");
  }
  if (numberOfPages - page === 1) {
    list.unshift(Math.max(page - 2, 1));
  }
  if (page === numberOfPages) {
    list.unshift(Math.max(page - 2, 1));
    list.unshift(Math.max(page - 3, 1));
  }
  list.push(numberOfPages);
  return (0, import_uniq.default)(list);
}
function getNumberOfPages(pageSize, total = 0) {
  return Math.floor((total - 1) / pageSize) + 1;
}
function getResultTotal(total) {
  return total === void 0 || total > 0 ? total : 1;
}
function getSize3({ propSize, mobile }) {
  if (propSize) {
    return propSize;
  }
  return mobile ? "l" : "m";
}
function getResultPage({ page, total, pageSize }) {
  return page > 0 && (total === void 0 || page <= getNumberOfPages(pageSize, total)) ? page : 1;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageSizer/PaginationPageSizer.js
var PaginationPageSizer = ({ onUpdate, pageSize, size: size5, page, pageSizeOptions, total, className }) => {
  const options = pageSizeOptions.map((pageSizeOption) => ({
    value: String(pageSizeOption),
    content: pageSizeOption,
    qa: getPaginationPageSizeOptionQa(pageSizeOption)
  }));
  const handleUpdate = ([newPageSizeOnUpdate]) => {
    const newPageSize = Number(newPageSizeOnUpdate);
    const numberOfPages = getNumberOfPages(newPageSize, total);
    const hasUpperLimit = numberOfPages > 0;
    if (!hasUpperLimit) {
      onUpdate(1, newPageSize);
      return;
    }
    const newPage = page > numberOfPages ? numberOfPages : page;
    onUpdate(newPage, newPageSize);
  };
  return (0, import_jsx_runtime134.jsx)(Select, { qa: PaginationQa.PaginationPageSizer, className, size: size5, onUpdate: handleUpdate, options, value: [String(pageSize)], title: i18n_default13("label_select_size") });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/hooks/usePagination.js
function usePagination({ page, pageSize, total, mobile }) {
  const numberOfPages = getNumberOfPages(pageSize, total);
  const hasTotal = numberOfPages !== 0;
  const isNextDisabled = hasTotal && page === numberOfPages || total === 0;
  let items;
  if (hasTotal) {
    const numerationList = getNumerationList({ page, numberOfPages, mobile });
    items = numerationList.map((item, index3) => {
      if (item === "ellipsis") {
        return { type: "ellipsis" };
      }
      if (item === "pageOf") {
        return { type: "pageOf" };
      }
      const current = item === page;
      return {
        type: "page",
        current,
        page: item,
        simple: mobile ? current : false,
        key: mobile ? item + index3 : item
      };
    });
  } else {
    items = [{ type: "page", current: true, page, simple: true, key: page }];
  }
  items.unshift({
    type: "button",
    action: "previous",
    disabled: page <= 1
  });
  items.unshift({
    type: "button",
    action: "first",
    disabled: page <= 1
  });
  items.push({
    type: "button",
    action: "next",
    disabled: isNextDisabled
  });
  return { items, numberOfPages };
}

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/Pagination.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/Pagination.css";
var b83 = block("pagination");
var Pagination = ({ page, pageSize, total, size: propSize, onUpdate, compact: propCompact = true, pageSizeOptions, showPages = true, showInput = false, className, qa }) => {
  const mobile = useMobile();
  const size5 = getSize3({ propSize, mobile });
  const compact = mobile ? true : propCompact;
  const resultTotal = getResultTotal(total);
  const resultPage = getResultPage({
    page,
    total: resultTotal,
    pageSize
  });
  const { items, numberOfPages } = usePagination({
    page: resultPage,
    pageSize,
    total: resultTotal,
    mobile
  });
  const pagination = items.map((item) => {
    switch (item.type) {
      case "page":
        return showPages && (0, import_jsx_runtime135.jsx)(PaginationPage, { size: size5, pageSize, item, onUpdate, className: b83("pagination-item") }, item.key);
      case "ellipsis":
        return showPages && (0, import_jsx_runtime135.jsx)(PaginationEllipsis, { size: size5, className: b83("pagination-item") }, item.type);
      case "pageOf":
        return showPages && (0, import_jsx_runtime135.jsx)(PaginationPageOf, { className: b83("pagination-item"), size: size5 }, item.type);
      case "button":
        return (0, import_jsx_runtime135.jsx)(PaginationButton, { size: size5, item, page: resultPage, pageSize, onUpdate, compact, className: b83("pagination-item") }, item.action);
      default:
        return null;
    }
  }).filter(Boolean);
  return (0, import_jsx_runtime135.jsxs)("div", { className: b83(null, className), "data-qa": qa, children: [pagination, showInput && (0, import_jsx_runtime135.jsx)(PaginationInput, { numberOfPages, pageSize, size: size5, onUpdate, className: b83("input") }), pageSizeOptions && (0, import_jsx_runtime135.jsx)(PaginationPageSizer, { onUpdate, page: resultPage, pageSize, pageSizeOptions, size: size5, total: resultTotal, className: b83("page-sizer") })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Palette/Palette.js
var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
var React882 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Palette/hooks.js
function usePaletteGrid(props) {
  const direction = useDirection();
  const { focusWithinProps } = useFocusWithin({
    onFocusWithin: (event) => {
      var _a;
      return (_a = props.onFocus) == null ? void 0 : _a.call(props, event);
    },
    onBlurWithin: (event) => {
      var _a;
      return (_a = props.onBlur) == null ? void 0 : _a.call(props, event);
    }
  });
  const whenFocused = props.whenFocused;
  const base = {
    role: "grid",
    "aria-disabled": props.disabled,
    "aria-readonly": props.disabled,
    tabIndex: whenFocused ? -1 : 0,
    ...focusWithinProps
  };
  if (!whenFocused) {
    return base;
  }
  return {
    ...base,
    onKeyDown: (event) => {
      if (event.code === "ArrowRight") {
        event.preventDefault();
        if (direction === "ltr") {
          whenFocused.nextItem();
        } else {
          whenFocused.previousItem();
        }
      } else if (event.code === "ArrowLeft") {
        event.preventDefault();
        if (direction === "ltr") {
          whenFocused.previousItem();
        } else {
          whenFocused.nextItem();
        }
      } else if (event.code === "ArrowDown") {
        event.preventDefault();
        whenFocused.nextRow();
      } else if (event.code === "ArrowUp") {
        event.preventDefault();
        whenFocused.previousRow();
      } else if (event.code === "Space" || event.code === "Enter") {
        event.preventDefault();
        whenFocused.selectItem();
      }
    }
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/Palette/utils.js
function getPaletteRows(options, columns) {
  if (columns <= 0) {
    throw new Error("Palette.getPaletteRows: number of columns must greater than 0");
  }
  const rows = [];
  let row = [];
  let column = 0;
  for (const option of options) {
    row.push(option);
    column += 1;
    if (column >= columns) {
      rows.push(row);
      row = [];
      column = 0;
    }
  }
  if (row.length > 0) {
    rows.push(row);
  }
  return rows;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Palette/Palette.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Palette/Palette.css";
var b84 = block("palette");
var Palette = React882.forwardRef(function Palette2(props, ref2) {
  const { size: size5 = "m", multiple = true, options = [], columns = 6, disabled, style: style3, className, rowClassName, optionClassName, qa, onFocus, onBlur } = props;
  const [focusedOptionIndex, setFocusedOptionIndex] = React882.useState(void 0);
  const focusedOption = focusedOptionIndex === void 0 ? void 0 : options[focusedOptionIndex];
  const innerRef = React882.useRef(null);
  const handleRef = useForkRef(ref2, innerRef);
  const { value, handleSelection } = useSelect({
    value: props.value,
    defaultValue: props.defaultValue,
    multiple,
    onUpdate: props.onUpdate
  });
  const rows = React882.useMemo(() => getPaletteRows(options, columns), [columns, options]);
  const focusOnOptionWithIndex = React882.useCallback((index3) => {
    if (!innerRef.current)
      return;
    const $options = Array.from(innerRef.current.querySelectorAll(`.${b84("option")}`));
    if (!$options[index3])
      return;
    $options[index3].focus();
    setFocusedOptionIndex(index3);
  }, []);
  const tryToFocus = (newIndex) => {
    if (newIndex === focusedOptionIndex || newIndex < 0 || newIndex >= options.length) {
      return;
    }
    focusOnOptionWithIndex(newIndex);
  };
  const gridProps = usePaletteGrid({
    disabled,
    onFocus: (event) => {
      focusOnOptionWithIndex(0);
      onFocus == null ? void 0 : onFocus(event);
    },
    onBlur: (event) => {
      setFocusedOptionIndex(void 0);
      onBlur == null ? void 0 : onBlur(event);
    },
    whenFocused: focusedOptionIndex !== void 0 && focusedOption ? {
      selectItem: () => handleSelection(focusedOption),
      nextItem: () => tryToFocus(focusedOptionIndex + 1),
      previousItem: () => tryToFocus(focusedOptionIndex - 1),
      nextRow: () => tryToFocus(focusedOptionIndex + columns),
      previousRow: () => tryToFocus(focusedOptionIndex - columns)
    } : void 0
  });
  return (0, import_jsx_runtime136.jsx)("div", { ...filterDOMProps(props, { labelable: true }), ...gridProps, ref: handleRef, className: b84({ size: size5 }, className), style: style3, "data-qa": qa, children: rows.map((row, rowNumber) => (0, import_jsx_runtime136.jsx)("div", { className: b84("row", rowClassName), role: "row", children: row.map((option) => {
    const isSelected = Boolean(value.includes(option.value));
    const focused = option === focusedOption;
    return (0, import_jsx_runtime136.jsx)("div", { role: "gridcell", "aria-selected": focused ? "true" : void 0, "aria-readonly": option.disabled, children: (0, import_jsx_runtime136.jsx)(Button2, { className: b84("option", optionClassName), tabIndex: -1, style: style3, disabled: disabled || option.disabled, title: option.title, view: isSelected ? "normal" : "flat", selected: isSelected, value: option.value, size: size5, onClick: () => handleSelection(option), children: (0, import_jsx_runtime136.jsx)(Button2.Icon, { children: option.content ?? option.value }) }) }, option.value);
  }) }, `row-${rowNumber}`)) });
});
Palette.displayName = "Palette";

// node_modules/@gravity-ui/uikit/build/esm/components/PinInput/PinInput.js
var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
var React883 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/PinInput/i18n/en.json
var en_default17 = {
  "label_one-of": "{{number}} of {{count}}, "
};

// node_modules/@gravity-ui/uikit/build/esm/components/PinInput/i18n/ru.json
var ru_default17 = {
  "label_one-of": "{{number}} из {{count}}, "
};

// node_modules/@gravity-ui/uikit/build/esm/components/PinInput/i18n/index.js
var COMPONENT14 = "PinInput";
var i18n_default15 = addComponentKeysets({ en: en_default17, ru: ru_default17 }, COMPONENT14);

// node_modules/@gravity-ui/uikit/build/esm/components/PinInput/PinInput.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/PinInput/PinInput.css";
var b85 = block("pin-input");
var NUMERIC_REGEXP = /[0-9]+/;
var ALPHANUMERIC_REGEXP = /[0-9a-z]+/i;
var validate = (type, newValue) => {
  if (type === "numeric") {
    return NUMERIC_REGEXP.test(newValue);
  } else {
    return ALPHANUMERIC_REGEXP.test(newValue);
  }
};
var PinInput = React883.forwardRef((props, ref2) => {
  const { value, defaultValue, onUpdate, onUpdateComplete, onFocus, onBlur, length = 4, size: size5 = "m", type = "numeric", id: idProp, name, form, placeholder: placeholder2, disabled, autoFocus, otp, mask, responsive, note: note2, validationState, errorMessage, apiRef, className, style: style3, qa, ...restProps } = props;
  const refs = React883.useRef({});
  const [activeIndex, setActiveIndex] = React883.useState(0);
  const [focusedIndex, setFocusedIndex] = React883.useState(-1);
  const updateCallback = React883.useCallback((newValue) => {
    if (onUpdate) {
      onUpdate(newValue);
    }
    if (onUpdateComplete && newValue.every((v) => Boolean(v))) {
      onUpdateComplete(newValue);
    }
  }, [onUpdate, onUpdateComplete]);
  const [values3, setValues] = useControlledState(value, defaultValue ?? Array.from({ length }, () => ""), updateCallback);
  const direction = useDirection();
  const errorMessageId = useUniqId();
  const noteId = useUniqId();
  const isErrorMsgVisible = validationState === "invalid" && errorMessage;
  const ariaDescribedBy = [
    props == null ? void 0 : props["aria-describedby"],
    note2 ? noteId : void 0,
    isErrorMsgVisible ? errorMessageId : void 0
  ].filter(Boolean).join(" ");
  const handleRef = (index3, inputRef) => {
    refs.current[index3] = inputRef;
  };
  const focus2 = (index3) => {
    var _a;
    setActiveIndex(index3);
    (_a = refs.current[index3]) == null ? void 0 : _a.focus();
  };
  const focusPrev = (index3) => {
    if (index3 > 0) {
      focus2(index3 - 1);
    }
  };
  const focusNext = (index3) => {
    if (index3 < length - 1) {
      focus2(index3 + 1);
    }
  };
  const setValuesAtIndex = (index3, nextValue) => {
    const newValues = Array.from({ length }, (__, i) => values3[i] ?? "");
    if (nextValue.length > 0) {
      for (let k = 0; k < nextValue.length && index3 + k < newValues.length; k++) {
        newValues[index3 + k] = nextValue[k];
      }
    } else {
      newValues[index3] = "";
    }
    if (newValues.every((__, i) => newValues[i] === values3[i])) {
      return;
    }
    setValues(newValues);
  };
  const handleInputChange = (i, event) => {
    let nextValue = event.currentTarget.value;
    const currentValue = values3[i];
    if (currentValue) {
      if (currentValue === nextValue[0]) {
        nextValue = nextValue.slice(1);
      } else if (currentValue === nextValue[nextValue.length - 1]) {
        nextValue = nextValue.slice(0, -1);
      }
    }
    if (!validate(type, nextValue)) {
      return;
    }
    if (nextValue.length > 1) {
      setValuesAtIndex(0, nextValue);
      focusNext(nextValue.length - 1);
    } else {
      setValuesAtIndex(i, nextValue);
      focusNext(i);
    }
  };
  const handleInputKeyDown = (i, event) => {
    switch (event.code) {
      case KeyCode.BACKSPACE:
        event.preventDefault();
        if (event.currentTarget.value) {
          setValuesAtIndex(i, "");
        } else if (i > 0) {
          setValuesAtIndex(i - 1, "");
          focusPrev(i);
        }
        break;
      case KeyCode.ARROW_LEFT:
      case KeyCode.ARROW_UP:
        event.preventDefault();
        if (direction === "rtl" && event.code === KeyCode.ARROW_LEFT) {
          focusNext(i);
        } else {
          focusPrev(i);
        }
        break;
      case KeyCode.ARROW_RIGHT:
      case KeyCode.ARROW_DOWN:
        event.preventDefault();
        if (direction === "rtl" && event.code === KeyCode.ARROW_RIGHT) {
          focusPrev(i);
        } else {
          focusNext(i);
        }
        break;
    }
  };
  const handleFocus = (index3) => {
    setFocusedIndex(index3);
    setActiveIndex(index3);
  };
  const handleBlur = () => {
    setFocusedIndex(-1);
  };
  React883.useEffect(() => {
    if (autoFocus) {
      focus2(0);
    }
  }, []);
  React883.useImperativeHandle(apiRef, () => ({
    focus: () => {
      var _a;
      (_a = refs.current[activeIndex]) == null ? void 0 : _a.focus();
    }
  }), [activeIndex]);
  const formInputRef = useFormResetHandler({ initialValue: values3, onReset: setValues });
  const { focusWithinProps } = useFocusWithin({
    onFocusWithin: onFocus,
    onBlurWithin: onBlur
  });
  let id = useUniqId();
  if (idProp) {
    id = idProp;
  }
  return (0, import_jsx_runtime137.jsxs)("div", { ref: ref2, ...filterDOMProps(restProps, { labelable: true }), ...focusWithinProps, className: b85({ size: size5, responsive }, className), style: style3, "data-qa": qa, role: "group", id, "aria-describedby": ariaDescribedBy, children: [(0, import_jsx_runtime137.jsxs)("div", { className: b85("items"), children: [Array.from({ length }).map((__, i) => {
    var _a;
    const inputId = `${id}-${i}`;
    const ariaLabelledBy = props["aria-labelledby"] || props["aria-label"] ? [inputId, props["aria-labelledby"] || id].join(" ") : void 0;
    return (0, import_jsx_runtime137.jsx)("div", { className: b85("item"), children: (0, import_jsx_runtime137.jsx)(
      TextInput,
      {
        // Only pick first symbol while keeping input always controlled
        value: ((_a = values3[i]) == null ? void 0 : _a[0]) ?? "",
        tabIndex: activeIndex === i ? 0 : -1,
        type: mask ? "password" : "text",
        size: size5,
        id: inputId,
        disabled,
        placeholder: focusedIndex === i ? void 0 : placeholder2,
        autoComplete: otp ? "one-time-code" : "off",
        validationState,
        controlProps: {
          inputMode: type === "numeric" ? "numeric" : "text",
          pattern: type === "numeric" ? "[0-9]*" : "[0-9a-zA-Z]*",
          className: b85("control"),
          autoCapitalize: "none",
          "aria-label": i18n_default15("label_one-of", {
            number: i + 1,
            count: length
          }),
          "aria-labelledby": ariaLabelledBy,
          "aria-describedby": ariaDescribedBy,
          "aria-details": props["aria-details"],
          "aria-invalid": validationState === "invalid" ? true : void 0
        },
        controlRef: handleRef.bind(null, i),
        onChange: handleInputChange.bind(null, i),
        onKeyDown: handleInputKeyDown.bind(null, i),
        onFocus: handleFocus.bind(null, i),
        onBlur: handleBlur
      }
    ) }, i);
  }), name ? (0, import_jsx_runtime137.jsx)("input", { ref: formInputRef, type: "hidden", name, form, value: values3.join(""), disabled }) : null] }), (0, import_jsx_runtime137.jsx)(OuterAdditionalContent, { note: note2, errorMessage: isErrorMsgVisible ? errorMessage : null, noteId, errorMessageId })] });
});
PinInput.displayName = "PinInput";

// node_modules/@gravity-ui/uikit/build/esm/components/PlaceholderContainer/PlaceholderContainer.js
var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
var React884 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/PlaceholderContainer/constants.js
var componentClassName = "placeholder-container";

// node_modules/@gravity-ui/uikit/build/esm/components/PlaceholderContainer/PlaceholderContainer.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/PlaceholderContainer/PlaceholderContainer.css";
var b86 = block(componentClassName);
var PlaceholderContainerAction = ({ text: text2, ...buttonProps }) => {
  return (0, import_jsx_runtime138.jsx)("div", { className: b86("action"), children: (0, import_jsx_runtime138.jsx)(Button2, { ...buttonProps, className: b86("action-btn"), children: text2 }) });
};
var PlaceholderContainer = ({ direction = "row", align = "center", size: size5 = "l", className, title, description, image, content, actions, qa }) => {
  const renderTitle = () => {
    if (!title) {
      return null;
    }
    return (0, import_jsx_runtime138.jsx)("div", { className: b86("title"), children: title });
  };
  const renderDescription = () => {
    if (!description) {
      return null;
    }
    return (0, import_jsx_runtime138.jsx)("div", { className: b86("description"), children: description });
  };
  const renderImage = () => {
    if (typeof image === "object" && "src" in image) {
      return (0, import_jsx_runtime138.jsx)("img", { src: image.src, alt: image.alt || "" });
    }
    return image;
  };
  const renderAction = () => {
    if (!actions || !(React884.isValidElement(actions) || Array.isArray(actions))) {
      return null;
    }
    if (React884.isValidElement(actions)) {
      return (0, import_jsx_runtime138.jsx)(React884.Fragment, { children: actions });
    }
    return (0, import_jsx_runtime138.jsx)("div", { className: b86("actions"), children: actions.map((actionItem) => (0, import_jsx_runtime138.jsx)(PlaceholderContainerAction, { ...actionItem }, actionItem.text)) });
  };
  const renderContent = () => {
    const contentNode = content || (0, import_jsx_runtime138.jsxs)(React884.Fragment, { children: [renderTitle(), renderDescription()] });
    return (0, import_jsx_runtime138.jsxs)("div", { className: b86("content", { size: size5 }), children: [contentNode, renderAction()] });
  };
  return (0, import_jsx_runtime138.jsx)("div", { className: b86({ direction, align, size: size5 }, className || ""), "data-qa": qa, children: (0, import_jsx_runtime138.jsxs)("div", { className: b86("body"), children: [(0, import_jsx_runtime138.jsx)("div", { className: b86("image", { size: size5 }), children: renderImage() }), renderContent()] }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/Progress.js
var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
var React885 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/ProgressWithStack.js
var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/ProgressInnerText.js
var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/constants.js
var progressBlock = block("progress");

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/ProgressInnerText.js
function ProgressInnerText(props) {
  const { text: text2, offset: offset6 = 0 } = props;
  if (!text2) {
    return null;
  }
  return (0, import_jsx_runtime139.jsx)("div", { className: progressBlock("text-inner"), style: { transform: `translateX(calc(var(--g-flow-direction) * ${-offset6}%))` }, children: text2 });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/ProgressStackItem.js
var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
function ProgressStackItem({ item }) {
  const { value, color, className, theme, title, content, loading } = item;
  const modifiers = {
    loading
  };
  if (typeof color === "undefined") {
    modifiers.theme = theme || "default";
  }
  if (Number.isFinite(value)) {
    return (0, import_jsx_runtime140.jsx)("div", { className: progressBlock("item", modifiers, className), style: { width: `${value}%`, backgroundColor: color }, title, children: content });
  }
  return null;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/utils.js
function getOffset(value) {
  return value < 100 ? value - 100 : 0;
}
function getValueFromStack(stack) {
  return stack.reduce((sum, { value }) => sum + value, 0);
}
function getTheme(props) {
  const { theme, colorStops, colorStopsValue, value } = props;
  if (colorStops) {
    const matchingColorStopItem = colorStops.find((item, index3) => {
      const currentValue = typeof colorStopsValue === "number" ? colorStopsValue : value;
      const minValue = index3 > 1 ? colorStops[index3 - 1].stop : 0;
      const maxValue = index3 < colorStops.length - 1 ? item.stop : 100;
      return currentValue >= minValue && currentValue <= maxValue;
    });
    return matchingColorStopItem ? matchingColorStopItem.theme : theme;
  }
  return theme;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/ProgressWithStack.js
function ProgressWithStack(props) {
  const { stack, stackClassName, value, text: text2 } = props;
  const offset6 = getOffset(value || getValueFromStack(stack));
  return (0, import_jsx_runtime141.jsxs)("div", { className: progressBlock("stack", stackClassName), style: { transform: `translateX(calc(var(--g-flow-direction) * ${offset6}%))` }, children: [(0, import_jsx_runtime141.jsx)("div", { className: progressBlock("item"), style: { width: `${-offset6}%` } }), stack.map((item, index3) => (0, import_jsx_runtime141.jsx)(ProgressStackItem, { item }, index3)), (0, import_jsx_runtime141.jsx)(ProgressInnerText, { offset: offset6, text: text2 })] });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/ProgressWithValue.js
var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
function ProgressWithValue(props) {
  const { value, loading, text: text2 } = props;
  const offset6 = getOffset(value);
  if (!Number.isFinite(value)) {
    return null;
  }
  return (0, import_jsx_runtime142.jsx)("div", { className: progressBlock("item", { theme: getTheme(props), loading }), style: { transform: `translateX(calc(var(--g-flow-direction) * ${offset6}%))` }, children: (0, import_jsx_runtime142.jsx)(ProgressInnerText, { offset: offset6, text: text2 }) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/types.js
function isProgressWithStack(props) {
  return props.stack !== void 0;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/Progress.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Progress/Progress.css";
var Progress = React885.forwardRef(function Progress2(props, ref2) {
  const { text: text2 = "", theme = "default", size: size5 = "m", loading = false, className, qa } = props;
  const resolvedProps = { ...props, text: text2, theme, size: size5, loading };
  return (0, import_jsx_runtime143.jsxs)("div", { ref: ref2, className: progressBlock({ size: size5 }, className), "data-qa": qa, children: [(0, import_jsx_runtime143.jsx)("div", { className: progressBlock("text"), children: text2 }), isProgressWithStack(resolvedProps) ? (0, import_jsx_runtime143.jsx)(ProgressWithStack, { ...resolvedProps }) : (0, import_jsx_runtime143.jsx)(ProgressWithValue, { ...resolvedProps })] });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Radio/Radio.js
var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
var React886 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Radio/Radio.css";
var b87 = block("radio");
var Radio = React886.forwardRef(function Radio2(props, ref2) {
  const { size: size5 = "m", disabled = false, content, children: children2, title, style: style3, className, qa } = props;
  const { checked, inputProps } = useRadio(props);
  const text2 = content || children2;
  const control = (0, import_jsx_runtime144.jsxs)("span", { className: b87("indicator"), children: [(0, import_jsx_runtime144.jsx)("span", { className: b87("disc") }), (0, import_jsx_runtime144.jsx)("input", { ...inputProps, className: b87("control") }), (0, import_jsx_runtime144.jsx)("span", { className: b87("outline") })] });
  return (0, import_jsx_runtime144.jsx)(ControlLabel, { ref: ref2, title, style: style3, size: size5, disabled, className: b87({
    size: size5,
    disabled,
    checked
  }, className), qa, control, children: text2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/RadioGroup/RadioGroup.js
var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);
var import_react33 = __toESM(require_react(), 1);
var React887 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/RadioGroup/RadioGroup.css";
var b88 = block("radio-group");
var RadioGroup = React887.forwardRef(function RadioGroup2(props, ref2) {
  const { size: size5 = "m", direction = "horizontal", style: style3, className, optionClassName, qa, children: children2 } = props;
  let options = props.options;
  if (!options) {
    options = React887.Children.toArray(children2).map(({ props: props2 }) => ({
      value: props2.value,
      content: props2.content || props2.children,
      disabled: props2.disabled,
      qa: props2.qa
    }));
  }
  const { containerProps, optionsProps } = useRadioGroup({ ...props, options });
  return (0, import_jsx_runtime145.jsx)("div", { ...containerProps, ref: ref2, style: style3, className: b88({ size: size5, direction }, className), "data-qa": qa, children: optionsProps.map((optionProps) => (0, import_react33.createElement)(Radio, { ...optionProps, key: optionProps.value, className: b88("option", optionClassName), size: size5 })) });
});
RadioGroup.Option = Radio;

// node_modules/@gravity-ui/uikit/build/esm/components/SegmentedRadioGroup/SegmentedRadioGroup.js
var import_jsx_runtime147 = __toESM(require_jsx_runtime(), 1);
var import_react34 = __toESM(require_react(), 1);
var React889 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/SegmentedRadioGroup/SegmentedRadioGroupOption.js
var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
var React888 = __toESM(require_react(), 1);
var b89 = block("segmented-radio-group");
var SegmentedRadioGroupOption = React888.forwardRef(function SegmentedRadioGroupOption2(props, ref2) {
  const { disabled = false, content, children: children2, title } = props;
  const { checked, inputProps } = useRadio(props);
  const inner = content || children2;
  const icon = isIcon(inner) || isSvg(inner);
  return (0, import_jsx_runtime146.jsxs)("label", { className: b89("option", {
    disabled,
    checked
  }), ref: ref2, title, children: [(0, import_jsx_runtime146.jsx)("input", { ...inputProps, className: b89("option-control") }), inner && (0, import_jsx_runtime146.jsx)("span", { className: b89("option-text", { icon }), children: inner })] });
});

// node_modules/@gravity-ui/uikit/build/esm/components/SegmentedRadioGroup/SegmentedRadioGroup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/SegmentedRadioGroup/SegmentedRadioGroup.css";
var b90 = block("segmented-radio-group");
var SegmentedRadioGroup = React889.forwardRef(function SegmentedRadioGroup2(props, ref2) {
  const { size: size5 = "m", width, style: style3, className, qa, children: children2 } = props;
  let options = props.options;
  if (!options) {
    options = React889.Children.toArray(children2).map(({ props: optionProps }) => ({
      value: optionProps.value,
      content: optionProps.content || optionProps.children,
      disabled: optionProps.disabled,
      title: optionProps.title
    }));
  }
  const { containerProps, optionsProps } = useRadioGroup({ ...props, options });
  return (0, import_jsx_runtime147.jsx)("div", { ...containerProps, ref: ref2, style: style3, className: b90({ size: size5, width }, className), "data-qa": qa, children: optionsProps.map((optionProps) => (0, import_react34.createElement)(SegmentedRadioGroupOption, { ...optionProps, key: optionProps.value })) });
});
SegmentedRadioGroup.Option = SegmentedRadioGroupOption;

// node_modules/@gravity-ui/uikit/build/esm/components/Skeleton/Skeleton.js
var import_jsx_runtime148 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Skeleton/Skeleton.css";
var b91 = block("skeleton");
function Skeleton({ className, style: style3, qa, animation = "gradient" }) {
  return (0, import_jsx_runtime148.jsx)("div", { className: b91({
    animation
  }, className), style: style3, "data-qa": qa });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/Slider.js
var import_jsx_runtime153 = __toESM(require_jsx_runtime(), 1);
var React907 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/BaseSlider/BaseSlider.js
var import_jsx_runtime149 = __toESM(require_jsx_runtime(), 1);
var React905 = __toESM(require_react(), 1);

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}

// node_modules/rc-slider/es/Slider.js
var import_classnames6 = __toESM(require_classnames());

// node_modules/rc-util/es/hooks/useEvent.js
var React890 = __toESM(require_react());
function useEvent(callback) {
  var fnRef = React890.useRef();
  fnRef.current = callback;
  var memoFn = React890.useCallback(function() {
    var _fnRef$current;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_fnRef$current = fnRef.current) === null || _fnRef$current === void 0 ? void 0 : _fnRef$current.call.apply(_fnRef$current, [fnRef].concat(args));
  }, []);
  return memoFn;
}

// node_modules/rc-util/es/hooks/useLayoutEffect.js
var React891 = __toESM(require_react());

// node_modules/rc-util/es/Dom/canUseDom.js
function canUseDom() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}

// node_modules/rc-util/es/hooks/useLayoutEffect.js
var useInternalLayoutEffect = canUseDom() ? React891.useLayoutEffect : React891.useEffect;
var useLayoutEffect12 = function useLayoutEffect13(callback, deps) {
  var firstMountRef = React891.useRef(true);
  useInternalLayoutEffect(function() {
    return callback(firstMountRef.current);
  }, deps);
  useInternalLayoutEffect(function() {
    firstMountRef.current = false;
    return function() {
      firstMountRef.current = true;
    };
  }, []);
};
var useLayoutUpdateEffect = function useLayoutUpdateEffect2(callback, deps) {
  useLayoutEffect12(function(firstMount) {
    if (!firstMount) {
      return callback();
    }
  }, deps);
};
var useLayoutEffect_default = useLayoutEffect12;

// node_modules/rc-util/es/hooks/useState.js
var React892 = __toESM(require_react());
function useSafeState(defaultValue) {
  var destroyRef = React892.useRef(false);
  var _React$useState = React892.useState(defaultValue), _React$useState2 = _slicedToArray(_React$useState, 2), value = _React$useState2[0], setValue = _React$useState2[1];
  React892.useEffect(function() {
    destroyRef.current = false;
    return function() {
      destroyRef.current = true;
    };
  }, []);
  function safeSetState(updater, ignoreDestroy) {
    if (ignoreDestroy && destroyRef.current) {
      return;
    }
    setValue(updater);
  }
  return [value, safeSetState];
}

// node_modules/rc-util/es/hooks/useMergedState.js
function hasValue(value) {
  return value !== void 0;
}
function useMergedState(defaultStateValue, option) {
  var _ref = option || {}, defaultValue = _ref.defaultValue, value = _ref.value, onChange = _ref.onChange, postState = _ref.postState;
  var _useState = useSafeState(function() {
    if (hasValue(value)) {
      return value;
    } else if (hasValue(defaultValue)) {
      return typeof defaultValue === "function" ? defaultValue() : defaultValue;
    } else {
      return typeof defaultStateValue === "function" ? defaultStateValue() : defaultStateValue;
    }
  }), _useState2 = _slicedToArray(_useState, 2), innerValue = _useState2[0], setInnerValue = _useState2[1];
  var mergedValue = value !== void 0 ? value : innerValue;
  var postMergedValue = postState ? postState(mergedValue) : mergedValue;
  var onChangeFn = useEvent(onChange);
  var _useState3 = useSafeState([mergedValue]), _useState4 = _slicedToArray(_useState3, 2), prevValue = _useState4[0], setPrevValue = _useState4[1];
  useLayoutUpdateEffect(function() {
    var prev = prevValue[0];
    if (innerValue !== prev) {
      onChangeFn(innerValue, prev);
    }
  }, [prevValue]);
  useLayoutUpdateEffect(function() {
    if (!hasValue(value)) {
      setInnerValue(value);
    }
  }, [value]);
  var triggerChange = useEvent(function(updater, ignoreDestroy) {
    setInnerValue(updater, ignoreDestroy);
    setPrevValue([mergedValue], ignoreDestroy);
  });
  return [postMergedValue, triggerChange];
}

// node_modules/rc-util/es/warning.js
var warned = {};
var preWarningFns = [];
var preMessage = function preMessage2(fn) {
  preWarningFns.push(fn);
};
function warning3(valid, message) {
  if (!valid && console !== void 0) {
    var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
      return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "warning");
    }, message);
    if (finalMessage) {
      console.error("Warning: ".concat(finalMessage));
    }
  }
}
function note(valid, message) {
  if (!valid && console !== void 0) {
    var finalMessage = preWarningFns.reduce(function(msg, preMessageFn) {
      return preMessageFn(msg !== null && msg !== void 0 ? msg : "", "note");
    }, message);
    if (finalMessage) {
      console.warn("Note: ".concat(finalMessage));
    }
  }
}
function resetWarned() {
  warned = {};
}
function call(method, valid, message) {
  if (!valid && !warned[message]) {
    method(false, message);
    warned[message] = true;
  }
}
function warningOnce(valid, message) {
  call(warning3, valid, message);
}
function noteOnce(valid, message) {
  call(note, valid, message);
}
warningOnce.preMessage = preMessage;
warningOnce.resetWarned = resetWarned;
warningOnce.noteOnce = noteOnce;
var warning_default = warningOnce;

// node_modules/rc-util/es/isEqual.js
function isEqual6(obj1, obj2) {
  var shallow = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var refSet = /* @__PURE__ */ new Set();
  function deepEqual2(a, b119) {
    var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    var circular = refSet.has(a);
    warning_default(!circular, "Warning: There may be circular references");
    if (circular) {
      return false;
    }
    if (a === b119) {
      return true;
    }
    if (shallow && level > 1) {
      return false;
    }
    refSet.add(a);
    var newLevel = level + 1;
    if (Array.isArray(a)) {
      if (!Array.isArray(b119) || a.length !== b119.length) {
        return false;
      }
      for (var i = 0; i < a.length; i++) {
        if (!deepEqual2(a[i], b119[i], newLevel)) {
          return false;
        }
      }
      return true;
    }
    if (a && b119 && _typeof(a) === "object" && _typeof(b119) === "object") {
      var keys = Object.keys(a);
      if (keys.length !== Object.keys(b119).length) {
        return false;
      }
      return keys.every(function(key) {
        return deepEqual2(a[key], b119[key], newLevel);
      });
    }
    return false;
  }
  return deepEqual2(obj1, obj2);
}
var isEqual_default = isEqual6;

// node_modules/rc-slider/es/Slider.js
var React904 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o, r, i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}

// node_modules/rc-slider/es/Handles/index.js
var React895 = __toESM(require_react());
var import_react_dom7 = __toESM(require_react_dom());

// node_modules/rc-slider/es/util.js
function getOffset2(value, min2, max2) {
  return (value - min2) / (max2 - min2);
}
function getDirectionStyle(direction, value, min2, max2) {
  var offset6 = getOffset2(value, min2, max2);
  var positionStyle = {};
  switch (direction) {
    case "rtl":
      positionStyle.right = "".concat(offset6 * 100, "%");
      positionStyle.transform = "translateX(50%)";
      break;
    case "btt":
      positionStyle.bottom = "".concat(offset6 * 100, "%");
      positionStyle.transform = "translateY(50%)";
      break;
    case "ttb":
      positionStyle.top = "".concat(offset6 * 100, "%");
      positionStyle.transform = "translateY(-50%)";
      break;
    default:
      positionStyle.left = "".concat(offset6 * 100, "%");
      positionStyle.transform = "translateX(-50%)";
      break;
  }
  return positionStyle;
}
function getIndex(value, index3) {
  return Array.isArray(value) ? value[index3] : value;
}

// node_modules/rc-slider/es/Handles/Handle.js
var import_classnames = __toESM(require_classnames());

// node_modules/rc-util/es/KeyCode.js
var KeyCode2 = {
  /**
   * MAC_ENTER
   */
  MAC_ENTER: 3,
  /**
   * BACKSPACE
   */
  BACKSPACE: 8,
  /**
   * TAB
   */
  TAB: 9,
  /**
   * NUMLOCK on FF/Safari Mac
   */
  NUM_CENTER: 12,
  // NUMLOCK on FF/Safari Mac
  /**
   * ENTER
   */
  ENTER: 13,
  /**
   * SHIFT
   */
  SHIFT: 16,
  /**
   * CTRL
   */
  CTRL: 17,
  /**
   * ALT
   */
  ALT: 18,
  /**
   * PAUSE
   */
  PAUSE: 19,
  /**
   * CAPS_LOCK
   */
  CAPS_LOCK: 20,
  /**
   * ESC
   */
  ESC: 27,
  /**
   * SPACE
   */
  SPACE: 32,
  /**
   * PAGE_UP
   */
  PAGE_UP: 33,
  // also NUM_NORTH_EAST
  /**
   * PAGE_DOWN
   */
  PAGE_DOWN: 34,
  // also NUM_SOUTH_EAST
  /**
   * END
   */
  END: 35,
  // also NUM_SOUTH_WEST
  /**
   * HOME
   */
  HOME: 36,
  // also NUM_NORTH_WEST
  /**
   * LEFT
   */
  LEFT: 37,
  // also NUM_WEST
  /**
   * UP
   */
  UP: 38,
  // also NUM_NORTH
  /**
   * RIGHT
   */
  RIGHT: 39,
  // also NUM_EAST
  /**
   * DOWN
   */
  DOWN: 40,
  // also NUM_SOUTH
  /**
   * PRINT_SCREEN
   */
  PRINT_SCREEN: 44,
  /**
   * INSERT
   */
  INSERT: 45,
  // also NUM_INSERT
  /**
   * DELETE
   */
  DELETE: 46,
  // also NUM_DELETE
  /**
   * ZERO
   */
  ZERO: 48,
  /**
   * ONE
   */
  ONE: 49,
  /**
   * TWO
   */
  TWO: 50,
  /**
   * THREE
   */
  THREE: 51,
  /**
   * FOUR
   */
  FOUR: 52,
  /**
   * FIVE
   */
  FIVE: 53,
  /**
   * SIX
   */
  SIX: 54,
  /**
   * SEVEN
   */
  SEVEN: 55,
  /**
   * EIGHT
   */
  EIGHT: 56,
  /**
   * NINE
   */
  NINE: 57,
  /**
   * QUESTION_MARK
   */
  QUESTION_MARK: 63,
  // needs localization
  /**
   * A
   */
  A: 65,
  /**
   * B
   */
  B: 66,
  /**
   * C
   */
  C: 67,
  /**
   * D
   */
  D: 68,
  /**
   * E
   */
  E: 69,
  /**
   * F
   */
  F: 70,
  /**
   * G
   */
  G: 71,
  /**
   * H
   */
  H: 72,
  /**
   * I
   */
  I: 73,
  /**
   * J
   */
  J: 74,
  /**
   * K
   */
  K: 75,
  /**
   * L
   */
  L: 76,
  /**
   * M
   */
  M: 77,
  /**
   * N
   */
  N: 78,
  /**
   * O
   */
  O: 79,
  /**
   * P
   */
  P: 80,
  /**
   * Q
   */
  Q: 81,
  /**
   * R
   */
  R: 82,
  /**
   * S
   */
  S: 83,
  /**
   * T
   */
  T: 84,
  /**
   * U
   */
  U: 85,
  /**
   * V
   */
  V: 86,
  /**
   * W
   */
  W: 87,
  /**
   * X
   */
  X: 88,
  /**
   * Y
   */
  Y: 89,
  /**
   * Z
   */
  Z: 90,
  /**
   * META
   */
  META: 91,
  // WIN_KEY_LEFT
  /**
   * WIN_KEY_RIGHT
   */
  WIN_KEY_RIGHT: 92,
  /**
   * CONTEXT_MENU
   */
  CONTEXT_MENU: 93,
  /**
   * NUM_ZERO
   */
  NUM_ZERO: 96,
  /**
   * NUM_ONE
   */
  NUM_ONE: 97,
  /**
   * NUM_TWO
   */
  NUM_TWO: 98,
  /**
   * NUM_THREE
   */
  NUM_THREE: 99,
  /**
   * NUM_FOUR
   */
  NUM_FOUR: 100,
  /**
   * NUM_FIVE
   */
  NUM_FIVE: 101,
  /**
   * NUM_SIX
   */
  NUM_SIX: 102,
  /**
   * NUM_SEVEN
   */
  NUM_SEVEN: 103,
  /**
   * NUM_EIGHT
   */
  NUM_EIGHT: 104,
  /**
   * NUM_NINE
   */
  NUM_NINE: 105,
  /**
   * NUM_MULTIPLY
   */
  NUM_MULTIPLY: 106,
  /**
   * NUM_PLUS
   */
  NUM_PLUS: 107,
  /**
   * NUM_MINUS
   */
  NUM_MINUS: 109,
  /**
   * NUM_PERIOD
   */
  NUM_PERIOD: 110,
  /**
   * NUM_DIVISION
   */
  NUM_DIVISION: 111,
  /**
   * F1
   */
  F1: 112,
  /**
   * F2
   */
  F2: 113,
  /**
   * F3
   */
  F3: 114,
  /**
   * F4
   */
  F4: 115,
  /**
   * F5
   */
  F5: 116,
  /**
   * F6
   */
  F6: 117,
  /**
   * F7
   */
  F7: 118,
  /**
   * F8
   */
  F8: 119,
  /**
   * F9
   */
  F9: 120,
  /**
   * F10
   */
  F10: 121,
  /**
   * F11
   */
  F11: 122,
  /**
   * F12
   */
  F12: 123,
  /**
   * NUMLOCK
   */
  NUMLOCK: 144,
  /**
   * SEMICOLON
   */
  SEMICOLON: 186,
  // needs localization
  /**
   * DASH
   */
  DASH: 189,
  // needs localization
  /**
   * EQUALS
   */
  EQUALS: 187,
  // needs localization
  /**
   * COMMA
   */
  COMMA: 188,
  // needs localization
  /**
   * PERIOD
   */
  PERIOD: 190,
  // needs localization
  /**
   * SLASH
   */
  SLASH: 191,
  // needs localization
  /**
   * APOSTROPHE
   */
  APOSTROPHE: 192,
  // needs localization
  /**
   * SINGLE_QUOTE
   */
  SINGLE_QUOTE: 222,
  // needs localization
  /**
   * OPEN_SQUARE_BRACKET
   */
  OPEN_SQUARE_BRACKET: 219,
  // needs localization
  /**
   * BACKSLASH
   */
  BACKSLASH: 220,
  // needs localization
  /**
   * CLOSE_SQUARE_BRACKET
   */
  CLOSE_SQUARE_BRACKET: 221,
  // needs localization
  /**
   * WIN_KEY
   */
  WIN_KEY: 224,
  /**
   * MAC_FF_META
   */
  MAC_FF_META: 224,
  // Firefox (Gecko) fires this for the meta key instead of 91
  /**
   * WIN_IME
   */
  WIN_IME: 229,
  // ======================== Function ========================
  /**
   * whether text and modified key is entered at the same time.
   */
  isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e) {
    var keyCode = e.keyCode;
    if (e.altKey && !e.ctrlKey || e.metaKey || // Function keys don't generate text
    keyCode >= KeyCode2.F1 && keyCode <= KeyCode2.F12) {
      return false;
    }
    switch (keyCode) {
      case KeyCode2.ALT:
      case KeyCode2.CAPS_LOCK:
      case KeyCode2.CONTEXT_MENU:
      case KeyCode2.CTRL:
      case KeyCode2.DOWN:
      case KeyCode2.END:
      case KeyCode2.ESC:
      case KeyCode2.HOME:
      case KeyCode2.INSERT:
      case KeyCode2.LEFT:
      case KeyCode2.MAC_FF_META:
      case KeyCode2.META:
      case KeyCode2.NUMLOCK:
      case KeyCode2.NUM_CENTER:
      case KeyCode2.PAGE_DOWN:
      case KeyCode2.PAGE_UP:
      case KeyCode2.PAUSE:
      case KeyCode2.PRINT_SCREEN:
      case KeyCode2.RIGHT:
      case KeyCode2.SHIFT:
      case KeyCode2.UP:
      case KeyCode2.WIN_KEY:
      case KeyCode2.WIN_KEY_RIGHT:
        return false;
      default:
        return true;
    }
  },
  /**
   * whether character is entered.
   */
  isCharacterKey: function isCharacterKey(keyCode) {
    if (keyCode >= KeyCode2.ZERO && keyCode <= KeyCode2.NINE) {
      return true;
    }
    if (keyCode >= KeyCode2.NUM_ZERO && keyCode <= KeyCode2.NUM_MULTIPLY) {
      return true;
    }
    if (keyCode >= KeyCode2.A && keyCode <= KeyCode2.Z) {
      return true;
    }
    if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
      return true;
    }
    switch (keyCode) {
      case KeyCode2.SPACE:
      case KeyCode2.QUESTION_MARK:
      case KeyCode2.NUM_PLUS:
      case KeyCode2.NUM_MINUS:
      case KeyCode2.NUM_PERIOD:
      case KeyCode2.NUM_DIVISION:
      case KeyCode2.SEMICOLON:
      case KeyCode2.DASH:
      case KeyCode2.EQUALS:
      case KeyCode2.COMMA:
      case KeyCode2.PERIOD:
      case KeyCode2.SLASH:
      case KeyCode2.APOSTROPHE:
      case KeyCode2.SINGLE_QUOTE:
      case KeyCode2.OPEN_SQUARE_BRACKET:
      case KeyCode2.BACKSLASH:
      case KeyCode2.CLOSE_SQUARE_BRACKET:
        return true;
      default:
        return false;
    }
  }
};
var KeyCode_default = KeyCode2;

// node_modules/rc-slider/es/Handles/Handle.js
var React894 = __toESM(require_react());

// node_modules/rc-slider/es/context.js
var React893 = __toESM(require_react());
var SliderContext = React893.createContext({
  min: 0,
  max: 0,
  direction: "ltr",
  step: 1,
  includedStart: 0,
  includedEnd: 0,
  tabIndex: 0,
  keyboard: true,
  styles: {},
  classNames: {}
});
var context_default = SliderContext;
var UnstableContext = React893.createContext({});

// node_modules/rc-slider/es/Handles/Handle.js
var _excluded5 = ["prefixCls", "value", "valueIndex", "onStartMove", "onDelete", "style", "render", "dragging", "draggingDelete", "onOffsetChange", "onChangeComplete", "onFocus", "onMouseEnter"];
var Handle = React894.forwardRef(function(props, ref2) {
  var prefixCls = props.prefixCls, value = props.value, valueIndex = props.valueIndex, onStartMove = props.onStartMove, onDelete = props.onDelete, style3 = props.style, render = props.render, dragging = props.dragging, draggingDelete = props.draggingDelete, onOffsetChange = props.onOffsetChange, onChangeComplete = props.onChangeComplete, onFocus = props.onFocus, onMouseEnter = props.onMouseEnter, restProps = _objectWithoutProperties(props, _excluded5);
  var _React$useContext = React894.useContext(context_default), min2 = _React$useContext.min, max2 = _React$useContext.max, direction = _React$useContext.direction, disabled = _React$useContext.disabled, keyboard = _React$useContext.keyboard, range = _React$useContext.range, tabIndex = _React$useContext.tabIndex, ariaLabelForHandle = _React$useContext.ariaLabelForHandle, ariaLabelledByForHandle = _React$useContext.ariaLabelledByForHandle, ariaRequired = _React$useContext.ariaRequired, ariaValueTextFormatterForHandle = _React$useContext.ariaValueTextFormatterForHandle, styles = _React$useContext.styles, classNames3 = _React$useContext.classNames;
  var handlePrefixCls = "".concat(prefixCls, "-handle");
  var onInternalStartMove = function onInternalStartMove2(e) {
    if (!disabled) {
      onStartMove(e, valueIndex);
    }
  };
  var onInternalFocus = function onInternalFocus2(e) {
    onFocus === null || onFocus === void 0 || onFocus(e, valueIndex);
  };
  var onInternalMouseEnter = function onInternalMouseEnter2(e) {
    onMouseEnter(e, valueIndex);
  };
  var onKeyDown = function onKeyDown2(e) {
    if (!disabled && keyboard) {
      var offset6 = null;
      switch (e.which || e.keyCode) {
        case KeyCode_default.LEFT:
          offset6 = direction === "ltr" || direction === "btt" ? -1 : 1;
          break;
        case KeyCode_default.RIGHT:
          offset6 = direction === "ltr" || direction === "btt" ? 1 : -1;
          break;
        // Up is plus
        case KeyCode_default.UP:
          offset6 = direction !== "ttb" ? 1 : -1;
          break;
        // Down is minus
        case KeyCode_default.DOWN:
          offset6 = direction !== "ttb" ? -1 : 1;
          break;
        case KeyCode_default.HOME:
          offset6 = "min";
          break;
        case KeyCode_default.END:
          offset6 = "max";
          break;
        case KeyCode_default.PAGE_UP:
          offset6 = 2;
          break;
        case KeyCode_default.PAGE_DOWN:
          offset6 = -2;
          break;
        case KeyCode_default.BACKSPACE:
        case KeyCode_default.DELETE:
          onDelete(valueIndex);
          break;
      }
      if (offset6 !== null) {
        e.preventDefault();
        onOffsetChange(offset6, valueIndex);
      }
    }
  };
  var handleKeyUp = function handleKeyUp2(e) {
    switch (e.which || e.keyCode) {
      case KeyCode_default.LEFT:
      case KeyCode_default.RIGHT:
      case KeyCode_default.UP:
      case KeyCode_default.DOWN:
      case KeyCode_default.HOME:
      case KeyCode_default.END:
      case KeyCode_default.PAGE_UP:
      case KeyCode_default.PAGE_DOWN:
        onChangeComplete === null || onChangeComplete === void 0 || onChangeComplete();
        break;
    }
  };
  var positionStyle = getDirectionStyle(direction, value, min2, max2);
  var divProps = {};
  if (valueIndex !== null) {
    var _getIndex;
    divProps = {
      tabIndex: disabled ? null : getIndex(tabIndex, valueIndex),
      role: "slider",
      "aria-valuemin": min2,
      "aria-valuemax": max2,
      "aria-valuenow": value,
      "aria-disabled": disabled,
      "aria-label": getIndex(ariaLabelForHandle, valueIndex),
      "aria-labelledby": getIndex(ariaLabelledByForHandle, valueIndex),
      "aria-required": getIndex(ariaRequired, valueIndex),
      "aria-valuetext": (_getIndex = getIndex(ariaValueTextFormatterForHandle, valueIndex)) === null || _getIndex === void 0 ? void 0 : _getIndex(value),
      "aria-orientation": direction === "ltr" || direction === "rtl" ? "horizontal" : "vertical",
      onMouseDown: onInternalStartMove,
      onTouchStart: onInternalStartMove,
      onFocus: onInternalFocus,
      onMouseEnter: onInternalMouseEnter,
      onKeyDown,
      onKeyUp: handleKeyUp
    };
  }
  var handleNode = React894.createElement("div", _extends({
    ref: ref2,
    className: (0, import_classnames.default)(handlePrefixCls, _defineProperty(_defineProperty(_defineProperty({}, "".concat(handlePrefixCls, "-").concat(valueIndex + 1), valueIndex !== null && range), "".concat(handlePrefixCls, "-dragging"), dragging), "".concat(handlePrefixCls, "-dragging-delete"), draggingDelete), classNames3.handle),
    style: _objectSpread2(_objectSpread2(_objectSpread2({}, positionStyle), style3), styles.handle)
  }, divProps, restProps));
  if (render) {
    handleNode = render(handleNode, {
      index: valueIndex,
      prefixCls,
      value,
      dragging,
      draggingDelete
    });
  }
  return handleNode;
});
if (true) {
  Handle.displayName = "Handle";
}
var Handle_default = Handle;

// node_modules/rc-slider/es/Handles/index.js
var _excluded6 = ["prefixCls", "style", "onStartMove", "onOffsetChange", "values", "handleRender", "activeHandleRender", "draggingIndex", "draggingDelete", "onFocus"];
var Handles = React895.forwardRef(function(props, ref2) {
  var prefixCls = props.prefixCls, style3 = props.style, onStartMove = props.onStartMove, onOffsetChange = props.onOffsetChange, values3 = props.values, handleRender = props.handleRender, activeHandleRender = props.activeHandleRender, draggingIndex = props.draggingIndex, draggingDelete = props.draggingDelete, onFocus = props.onFocus, restProps = _objectWithoutProperties(props, _excluded6);
  var handlesRef = React895.useRef({});
  var _React$useState = React895.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), activeVisible = _React$useState2[0], setActiveVisible = _React$useState2[1];
  var _React$useState3 = React895.useState(-1), _React$useState4 = _slicedToArray(_React$useState3, 2), activeIndex = _React$useState4[0], setActiveIndex = _React$useState4[1];
  var onActive = function onActive2(index3) {
    setActiveIndex(index3);
    setActiveVisible(true);
  };
  var onHandleFocus = function onHandleFocus2(e, index3) {
    onActive(index3);
    onFocus === null || onFocus === void 0 || onFocus(e);
  };
  var onHandleMouseEnter = function onHandleMouseEnter2(e, index3) {
    onActive(index3);
  };
  React895.useImperativeHandle(ref2, function() {
    return {
      focus: function focus2(index3) {
        var _handlesRef$current$i;
        (_handlesRef$current$i = handlesRef.current[index3]) === null || _handlesRef$current$i === void 0 || _handlesRef$current$i.focus();
      },
      hideHelp: function hideHelp() {
        (0, import_react_dom7.flushSync)(function() {
          setActiveVisible(false);
        });
      }
    };
  });
  var handleProps = _objectSpread2({
    prefixCls,
    onStartMove,
    onOffsetChange,
    render: handleRender,
    onFocus: onHandleFocus,
    onMouseEnter: onHandleMouseEnter
  }, restProps);
  return React895.createElement(React895.Fragment, null, values3.map(function(value, index3) {
    var dragging = draggingIndex === index3;
    return React895.createElement(Handle_default, _extends({
      ref: function ref3(node) {
        if (!node) {
          delete handlesRef.current[index3];
        } else {
          handlesRef.current[index3] = node;
        }
      },
      dragging,
      draggingDelete: dragging && draggingDelete,
      style: getIndex(style3, index3),
      key: index3,
      value,
      valueIndex: index3
    }, handleProps));
  }), activeHandleRender && activeVisible && React895.createElement(Handle_default, _extends({
    key: "a11y"
  }, handleProps, {
    value: values3[activeIndex],
    valueIndex: null,
    dragging: draggingIndex !== -1,
    draggingDelete,
    render: activeHandleRender,
    style: {
      pointerEvents: "none"
    },
    tabIndex: null,
    "aria-hidden": true
  })));
});
if (true) {
  Handles.displayName = "Handles";
}
var Handles_default = Handles;

// node_modules/rc-slider/es/Marks/index.js
var React897 = __toESM(require_react());

// node_modules/rc-slider/es/Marks/Mark.js
var import_classnames2 = __toESM(require_classnames());
var React896 = __toESM(require_react());
var Mark = function Mark2(props) {
  var prefixCls = props.prefixCls, style3 = props.style, children2 = props.children, value = props.value, _onClick = props.onClick;
  var _React$useContext = React896.useContext(context_default), min2 = _React$useContext.min, max2 = _React$useContext.max, direction = _React$useContext.direction, includedStart = _React$useContext.includedStart, includedEnd = _React$useContext.includedEnd, included = _React$useContext.included;
  var textCls = "".concat(prefixCls, "-text");
  var positionStyle = getDirectionStyle(direction, value, min2, max2);
  return React896.createElement("span", {
    className: (0, import_classnames2.default)(textCls, _defineProperty({}, "".concat(textCls, "-active"), included && includedStart <= value && value <= includedEnd)),
    style: _objectSpread2(_objectSpread2({}, positionStyle), style3),
    onMouseDown: function onMouseDown(e) {
      e.stopPropagation();
    },
    onClick: function onClick() {
      _onClick(value);
    }
  }, children2);
};
var Mark_default = Mark;

// node_modules/rc-slider/es/Marks/index.js
var Marks = function Marks2(props) {
  var prefixCls = props.prefixCls, marks = props.marks, onClick = props.onClick;
  var markPrefixCls = "".concat(prefixCls, "-mark");
  if (!marks.length) {
    return null;
  }
  return React897.createElement("div", {
    className: markPrefixCls
  }, marks.map(function(_ref) {
    var value = _ref.value, style3 = _ref.style, label = _ref.label;
    return React897.createElement(Mark_default, {
      key: value,
      prefixCls: markPrefixCls,
      style: style3,
      value,
      onClick
    }, label);
  }));
};
var Marks_default = Marks;

// node_modules/rc-slider/es/Steps/index.js
var React899 = __toESM(require_react());

// node_modules/rc-slider/es/Steps/Dot.js
var import_classnames3 = __toESM(require_classnames());
var React898 = __toESM(require_react());
var Dot = function Dot2(props) {
  var prefixCls = props.prefixCls, value = props.value, style3 = props.style, activeStyle = props.activeStyle;
  var _React$useContext = React898.useContext(context_default), min2 = _React$useContext.min, max2 = _React$useContext.max, direction = _React$useContext.direction, included = _React$useContext.included, includedStart = _React$useContext.includedStart, includedEnd = _React$useContext.includedEnd;
  var dotClassName = "".concat(prefixCls, "-dot");
  var active = included && includedStart <= value && value <= includedEnd;
  var mergedStyle = _objectSpread2(_objectSpread2({}, getDirectionStyle(direction, value, min2, max2)), typeof style3 === "function" ? style3(value) : style3);
  if (active) {
    mergedStyle = _objectSpread2(_objectSpread2({}, mergedStyle), typeof activeStyle === "function" ? activeStyle(value) : activeStyle);
  }
  return React898.createElement("span", {
    className: (0, import_classnames3.default)(dotClassName, _defineProperty({}, "".concat(dotClassName, "-active"), active)),
    style: mergedStyle
  });
};
var Dot_default = Dot;

// node_modules/rc-slider/es/Steps/index.js
var Steps = function Steps2(props) {
  var prefixCls = props.prefixCls, marks = props.marks, dots = props.dots, style3 = props.style, activeStyle = props.activeStyle;
  var _React$useContext = React899.useContext(context_default), min2 = _React$useContext.min, max2 = _React$useContext.max, step = _React$useContext.step;
  var stepDots = React899.useMemo(function() {
    var dotSet = /* @__PURE__ */ new Set();
    marks.forEach(function(mark) {
      dotSet.add(mark.value);
    });
    if (dots && step !== null) {
      var current = min2;
      while (current <= max2) {
        dotSet.add(current);
        current += step;
      }
    }
    return Array.from(dotSet);
  }, [min2, max2, step, dots, marks]);
  return React899.createElement("div", {
    className: "".concat(prefixCls, "-step")
  }, stepDots.map(function(dotValue) {
    return React899.createElement(Dot_default, {
      prefixCls,
      key: dotValue,
      value: dotValue,
      style: style3,
      activeStyle
    });
  }));
};
var Steps_default = Steps;

// node_modules/rc-slider/es/Tracks/index.js
var import_classnames5 = __toESM(require_classnames());
var React901 = __toESM(require_react());

// node_modules/rc-slider/es/Tracks/Track.js
var import_classnames4 = __toESM(require_classnames());
var React900 = __toESM(require_react());
var Track = function Track2(props) {
  var prefixCls = props.prefixCls, style3 = props.style, start3 = props.start, end2 = props.end, index3 = props.index, onStartMove = props.onStartMove, replaceCls = props.replaceCls;
  var _React$useContext = React900.useContext(context_default), direction = _React$useContext.direction, min2 = _React$useContext.min, max2 = _React$useContext.max, disabled = _React$useContext.disabled, range = _React$useContext.range, classNames3 = _React$useContext.classNames;
  var trackPrefixCls = "".concat(prefixCls, "-track");
  var offsetStart = getOffset2(start3, min2, max2);
  var offsetEnd = getOffset2(end2, min2, max2);
  var onInternalStartMove = function onInternalStartMove2(e) {
    if (!disabled && onStartMove) {
      onStartMove(e, -1);
    }
  };
  var positionStyle = {};
  switch (direction) {
    case "rtl":
      positionStyle.right = "".concat(offsetStart * 100, "%");
      positionStyle.width = "".concat(offsetEnd * 100 - offsetStart * 100, "%");
      break;
    case "btt":
      positionStyle.bottom = "".concat(offsetStart * 100, "%");
      positionStyle.height = "".concat(offsetEnd * 100 - offsetStart * 100, "%");
      break;
    case "ttb":
      positionStyle.top = "".concat(offsetStart * 100, "%");
      positionStyle.height = "".concat(offsetEnd * 100 - offsetStart * 100, "%");
      break;
    default:
      positionStyle.left = "".concat(offsetStart * 100, "%");
      positionStyle.width = "".concat(offsetEnd * 100 - offsetStart * 100, "%");
  }
  var className = replaceCls || (0, import_classnames4.default)(trackPrefixCls, _defineProperty(_defineProperty({}, "".concat(trackPrefixCls, "-").concat(index3 + 1), index3 !== null && range), "".concat(prefixCls, "-track-draggable"), onStartMove), classNames3.track);
  return React900.createElement("div", {
    className,
    style: _objectSpread2(_objectSpread2({}, positionStyle), style3),
    onMouseDown: onInternalStartMove,
    onTouchStart: onInternalStartMove
  });
};
var Track_default = Track;

// node_modules/rc-slider/es/Tracks/index.js
var Tracks = function Tracks2(props) {
  var prefixCls = props.prefixCls, style3 = props.style, values3 = props.values, startPoint = props.startPoint, onStartMove = props.onStartMove;
  var _React$useContext = React901.useContext(context_default), included = _React$useContext.included, range = _React$useContext.range, min2 = _React$useContext.min, styles = _React$useContext.styles, classNames3 = _React$useContext.classNames;
  var trackList = React901.useMemo(function() {
    if (!range) {
      if (values3.length === 0) {
        return [];
      }
      var startValue = startPoint !== null && startPoint !== void 0 ? startPoint : min2;
      var endValue = values3[0];
      return [{
        start: Math.min(startValue, endValue),
        end: Math.max(startValue, endValue)
      }];
    }
    var list = [];
    for (var i = 0; i < values3.length - 1; i += 1) {
      list.push({
        start: values3[i],
        end: values3[i + 1]
      });
    }
    return list;
  }, [values3, range, startPoint, min2]);
  if (!included) {
    return null;
  }
  var tracksNode = trackList !== null && trackList !== void 0 && trackList.length && (classNames3.tracks || styles.tracks) ? React901.createElement(Track_default, {
    index: null,
    prefixCls,
    start: trackList[0].start,
    end: trackList[trackList.length - 1].end,
    replaceCls: (0, import_classnames5.default)(classNames3.tracks, "".concat(prefixCls, "-tracks")),
    style: styles.tracks
  }) : null;
  return React901.createElement(React901.Fragment, null, tracksNode, trackList.map(function(_ref, index3) {
    var start3 = _ref.start, end2 = _ref.end;
    return React901.createElement(Track_default, {
      index: index3,
      prefixCls,
      style: _objectSpread2(_objectSpread2({}, getIndex(style3, index3)), styles.track),
      start: start3,
      end: end2,
      key: index3,
      onStartMove
    });
  }));
};
var Tracks_default = Tracks;

// node_modules/rc-slider/es/hooks/useDrag.js
var React902 = __toESM(require_react());
var REMOVE_DIST = 130;
function getPosition(e) {
  var obj = "targetTouches" in e ? e.targetTouches[0] : e;
  return {
    pageX: obj.pageX,
    pageY: obj.pageY
  };
}
function useDrag(containerRef, direction, rawValues, min2, max2, formatValue, triggerChange, finishChange, offsetValues, editable, minCount) {
  var _React$useState = React902.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), draggingValue = _React$useState2[0], setDraggingValue = _React$useState2[1];
  var _React$useState3 = React902.useState(-1), _React$useState4 = _slicedToArray(_React$useState3, 2), draggingIndex = _React$useState4[0], setDraggingIndex = _React$useState4[1];
  var _React$useState5 = React902.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), draggingDelete = _React$useState6[0], setDraggingDelete = _React$useState6[1];
  var _React$useState7 = React902.useState(rawValues), _React$useState8 = _slicedToArray(_React$useState7, 2), cacheValues = _React$useState8[0], setCacheValues = _React$useState8[1];
  var _React$useState9 = React902.useState(rawValues), _React$useState10 = _slicedToArray(_React$useState9, 2), originValues = _React$useState10[0], setOriginValues = _React$useState10[1];
  var mouseMoveEventRef = React902.useRef(null);
  var mouseUpEventRef = React902.useRef(null);
  var touchEventTargetRef = React902.useRef(null);
  var _React$useContext = React902.useContext(UnstableContext), onDragStart3 = _React$useContext.onDragStart, onDragChange = _React$useContext.onDragChange;
  useLayoutEffect_default(function() {
    if (draggingIndex === -1) {
      setCacheValues(rawValues);
    }
  }, [rawValues, draggingIndex]);
  React902.useEffect(function() {
    return function() {
      document.removeEventListener("mousemove", mouseMoveEventRef.current);
      document.removeEventListener("mouseup", mouseUpEventRef.current);
      if (touchEventTargetRef.current) {
        touchEventTargetRef.current.removeEventListener("touchmove", mouseMoveEventRef.current);
        touchEventTargetRef.current.removeEventListener("touchend", mouseUpEventRef.current);
      }
    };
  }, []);
  var flushValues = function flushValues2(nextValues, nextValue, deleteMark) {
    if (nextValue !== void 0) {
      setDraggingValue(nextValue);
    }
    setCacheValues(nextValues);
    var changeValues = nextValues;
    if (deleteMark) {
      changeValues = nextValues.filter(function(_, i) {
        return i !== draggingIndex;
      });
    }
    triggerChange(changeValues);
    if (onDragChange) {
      onDragChange({
        rawValues: nextValues,
        deleteIndex: deleteMark ? draggingIndex : -1,
        draggingIndex,
        draggingValue: nextValue
      });
    }
  };
  var updateCacheValue = useEvent(function(valueIndex, offsetPercent, deleteMark) {
    if (valueIndex === -1) {
      var startValue = originValues[0];
      var endValue = originValues[originValues.length - 1];
      var maxStartOffset = min2 - startValue;
      var maxEndOffset = max2 - endValue;
      var offset6 = offsetPercent * (max2 - min2);
      offset6 = Math.max(offset6, maxStartOffset);
      offset6 = Math.min(offset6, maxEndOffset);
      var formatStartValue = formatValue(startValue + offset6);
      offset6 = formatStartValue - startValue;
      var cloneCacheValues = originValues.map(function(val) {
        return val + offset6;
      });
      flushValues(cloneCacheValues);
    } else {
      var offsetDist = (max2 - min2) * offsetPercent;
      var cloneValues = _toConsumableArray(cacheValues);
      cloneValues[valueIndex] = originValues[valueIndex];
      var next = offsetValues(cloneValues, offsetDist, valueIndex, "dist");
      flushValues(next.values, next.value, deleteMark);
    }
  });
  var onStartMove = function onStartMove2(e, valueIndex, startValues) {
    e.stopPropagation();
    var initialValues = startValues || rawValues;
    var originValue = initialValues[valueIndex];
    setDraggingIndex(valueIndex);
    setDraggingValue(originValue);
    setOriginValues(initialValues);
    setCacheValues(initialValues);
    setDraggingDelete(false);
    var _getPosition = getPosition(e), startX = _getPosition.pageX, startY = _getPosition.pageY;
    var deleteMark = false;
    if (onDragStart3) {
      onDragStart3({
        rawValues: initialValues,
        draggingIndex: valueIndex,
        draggingValue: originValue
      });
    }
    var onMouseMove = function onMouseMove2(event) {
      event.preventDefault();
      var _getPosition2 = getPosition(event), moveX = _getPosition2.pageX, moveY = _getPosition2.pageY;
      var offsetX = moveX - startX;
      var offsetY = moveY - startY;
      var _containerRef$current = containerRef.current.getBoundingClientRect(), width = _containerRef$current.width, height = _containerRef$current.height;
      var offSetPercent;
      var removeDist;
      switch (direction) {
        case "btt":
          offSetPercent = -offsetY / height;
          removeDist = offsetX;
          break;
        case "ttb":
          offSetPercent = offsetY / height;
          removeDist = offsetX;
          break;
        case "rtl":
          offSetPercent = -offsetX / width;
          removeDist = offsetY;
          break;
        default:
          offSetPercent = offsetX / width;
          removeDist = offsetY;
      }
      deleteMark = editable ? Math.abs(removeDist) > REMOVE_DIST && minCount < cacheValues.length : false;
      setDraggingDelete(deleteMark);
      updateCacheValue(valueIndex, offSetPercent, deleteMark);
    };
    var onMouseUp = function onMouseUp2(event) {
      event.preventDefault();
      document.removeEventListener("mouseup", onMouseUp2);
      document.removeEventListener("mousemove", onMouseMove);
      if (touchEventTargetRef.current) {
        touchEventTargetRef.current.removeEventListener("touchmove", mouseMoveEventRef.current);
        touchEventTargetRef.current.removeEventListener("touchend", mouseUpEventRef.current);
      }
      mouseMoveEventRef.current = null;
      mouseUpEventRef.current = null;
      touchEventTargetRef.current = null;
      finishChange(deleteMark);
      setDraggingIndex(-1);
      setDraggingDelete(false);
    };
    document.addEventListener("mouseup", onMouseUp);
    document.addEventListener("mousemove", onMouseMove);
    e.currentTarget.addEventListener("touchend", onMouseUp);
    e.currentTarget.addEventListener("touchmove", onMouseMove);
    mouseMoveEventRef.current = onMouseMove;
    mouseUpEventRef.current = onMouseUp;
    touchEventTargetRef.current = e.currentTarget;
  };
  var returnValues = React902.useMemo(function() {
    var sourceValues = _toConsumableArray(rawValues).sort(function(a, b119) {
      return a - b119;
    });
    var targetValues = _toConsumableArray(cacheValues).sort(function(a, b119) {
      return a - b119;
    });
    var counts = {};
    targetValues.forEach(function(val) {
      counts[val] = (counts[val] || 0) + 1;
    });
    sourceValues.forEach(function(val) {
      counts[val] = (counts[val] || 0) - 1;
    });
    var maxDiffCount = editable ? 1 : 0;
    var diffCount = Object.values(counts).reduce(function(prev, next) {
      return prev + Math.abs(next);
    }, 0);
    return diffCount <= maxDiffCount ? cacheValues : rawValues;
  }, [rawValues, cacheValues, editable]);
  return [draggingIndex, draggingValue, draggingDelete, returnValues, onStartMove];
}
var useDrag_default = useDrag;

// node_modules/rc-slider/es/hooks/useOffset.js
var React903 = __toESM(require_react());
function useOffset(min2, max2, step, markList, allowCross, pushable) {
  var formatRangeValue = React903.useCallback(function(val) {
    return Math.max(min2, Math.min(max2, val));
  }, [min2, max2]);
  var formatStepValue = React903.useCallback(function(val) {
    if (step !== null) {
      var stepValue = min2 + Math.round((formatRangeValue(val) - min2) / step) * step;
      var getDecimal = function getDecimal2(num) {
        return (String(num).split(".")[1] || "").length;
      };
      var maxDecimal = Math.max(getDecimal(step), getDecimal(max2), getDecimal(min2));
      var fixedValue = Number(stepValue.toFixed(maxDecimal));
      return min2 <= fixedValue && fixedValue <= max2 ? fixedValue : null;
    }
    return null;
  }, [step, min2, max2, formatRangeValue]);
  var formatValue = React903.useCallback(function(val) {
    var formatNextValue = formatRangeValue(val);
    var alignValues = markList.map(function(mark) {
      return mark.value;
    });
    if (step !== null) {
      alignValues.push(formatStepValue(val));
    }
    alignValues.push(min2, max2);
    var closeValue = alignValues[0];
    var closeDist = max2 - min2;
    alignValues.forEach(function(alignValue) {
      var dist = Math.abs(formatNextValue - alignValue);
      if (dist <= closeDist) {
        closeValue = alignValue;
        closeDist = dist;
      }
    });
    return closeValue;
  }, [min2, max2, markList, step, formatRangeValue, formatStepValue]);
  var offsetValue = function offsetValue2(values3, offset6, valueIndex) {
    var mode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "unit";
    if (typeof offset6 === "number") {
      var nextValue;
      var originValue = values3[valueIndex];
      var targetDistValue = originValue + offset6;
      var potentialValues = [];
      markList.forEach(function(mark) {
        potentialValues.push(mark.value);
      });
      potentialValues.push(min2, max2);
      potentialValues.push(formatStepValue(originValue));
      var sign = offset6 > 0 ? 1 : -1;
      if (mode === "unit") {
        potentialValues.push(formatStepValue(originValue + sign * step));
      } else {
        potentialValues.push(formatStepValue(targetDistValue));
      }
      potentialValues = potentialValues.filter(function(val) {
        return val !== null;
      }).filter(function(val) {
        return offset6 < 0 ? val <= originValue : val >= originValue;
      });
      if (mode === "unit") {
        potentialValues = potentialValues.filter(function(val) {
          return val !== originValue;
        });
      }
      var compareValue = mode === "unit" ? originValue : targetDistValue;
      nextValue = potentialValues[0];
      var valueDist = Math.abs(nextValue - compareValue);
      potentialValues.forEach(function(potentialValue) {
        var dist = Math.abs(potentialValue - compareValue);
        if (dist < valueDist) {
          nextValue = potentialValue;
          valueDist = dist;
        }
      });
      if (nextValue === void 0) {
        return offset6 < 0 ? min2 : max2;
      }
      if (mode === "dist") {
        return nextValue;
      }
      if (Math.abs(offset6) > 1) {
        var cloneValues = _toConsumableArray(values3);
        cloneValues[valueIndex] = nextValue;
        return offsetValue2(cloneValues, offset6 - sign, valueIndex, mode);
      }
      return nextValue;
    } else if (offset6 === "min") {
      return min2;
    } else if (offset6 === "max") {
      return max2;
    }
  };
  var offsetChangedValue = function offsetChangedValue2(values3, offset6, valueIndex) {
    var mode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "unit";
    var originValue = values3[valueIndex];
    var nextValue = offsetValue(values3, offset6, valueIndex, mode);
    return {
      value: nextValue,
      changed: nextValue !== originValue
    };
  };
  var needPush = function needPush2(dist) {
    return pushable === null && dist === 0 || typeof pushable === "number" && dist < pushable;
  };
  var offsetValues = function offsetValues2(values3, offset6, valueIndex) {
    var mode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "unit";
    var nextValues = values3.map(formatValue);
    var originValue = nextValues[valueIndex];
    var nextValue = offsetValue(nextValues, offset6, valueIndex, mode);
    nextValues[valueIndex] = nextValue;
    if (allowCross === false) {
      var pushNum = pushable || 0;
      if (valueIndex > 0 && nextValues[valueIndex - 1] !== originValue) {
        nextValues[valueIndex] = Math.max(nextValues[valueIndex], nextValues[valueIndex - 1] + pushNum);
      }
      if (valueIndex < nextValues.length - 1 && nextValues[valueIndex + 1] !== originValue) {
        nextValues[valueIndex] = Math.min(nextValues[valueIndex], nextValues[valueIndex + 1] - pushNum);
      }
    } else if (typeof pushable === "number" || pushable === null) {
      for (var i = valueIndex + 1; i < nextValues.length; i += 1) {
        var changed = true;
        while (needPush(nextValues[i] - nextValues[i - 1]) && changed) {
          var _offsetChangedValue = offsetChangedValue(nextValues, 1, i);
          nextValues[i] = _offsetChangedValue.value;
          changed = _offsetChangedValue.changed;
        }
      }
      for (var _i = valueIndex; _i > 0; _i -= 1) {
        var _changed = true;
        while (needPush(nextValues[_i] - nextValues[_i - 1]) && _changed) {
          var _offsetChangedValue2 = offsetChangedValue(nextValues, -1, _i - 1);
          nextValues[_i - 1] = _offsetChangedValue2.value;
          _changed = _offsetChangedValue2.changed;
        }
      }
      for (var _i2 = nextValues.length - 1; _i2 > 0; _i2 -= 1) {
        var _changed2 = true;
        while (needPush(nextValues[_i2] - nextValues[_i2 - 1]) && _changed2) {
          var _offsetChangedValue3 = offsetChangedValue(nextValues, -1, _i2 - 1);
          nextValues[_i2 - 1] = _offsetChangedValue3.value;
          _changed2 = _offsetChangedValue3.changed;
        }
      }
      for (var _i3 = 0; _i3 < nextValues.length - 1; _i3 += 1) {
        var _changed3 = true;
        while (needPush(nextValues[_i3 + 1] - nextValues[_i3]) && _changed3) {
          var _offsetChangedValue4 = offsetChangedValue(nextValues, 1, _i3 + 1);
          nextValues[_i3 + 1] = _offsetChangedValue4.value;
          _changed3 = _offsetChangedValue4.changed;
        }
      }
    }
    return {
      value: nextValues[valueIndex],
      values: nextValues
    };
  };
  return [formatValue, offsetValues];
}

// node_modules/rc-slider/es/hooks/useRange.js
var import_react35 = __toESM(require_react());
function useRange(range) {
  return (0, import_react35.useMemo)(function() {
    if (range === true || !range) {
      return [!!range, false, false, 0];
    }
    var editable = range.editable, draggableTrack = range.draggableTrack, minCount = range.minCount, maxCount = range.maxCount;
    if (true) {
      warning3(!editable || !draggableTrack, "`editable` can not work with `draggableTrack`.");
    }
    return [true, editable, !editable && draggableTrack, minCount || 0, maxCount];
  }, [range]);
}

// node_modules/rc-slider/es/Slider.js
var Slider = React904.forwardRef(function(props, ref2) {
  var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? "rc-slider" : _props$prefixCls, className = props.className, style3 = props.style, classNames3 = props.classNames, styles = props.styles, id = props.id, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$keyboard = props.keyboard, keyboard = _props$keyboard === void 0 ? true : _props$keyboard, autoFocus = props.autoFocus, onFocus = props.onFocus, onBlur = props.onBlur, _props$min = props.min, min2 = _props$min === void 0 ? 0 : _props$min, _props$max = props.max, max2 = _props$max === void 0 ? 100 : _props$max, _props$step = props.step, step = _props$step === void 0 ? 1 : _props$step, value = props.value, defaultValue = props.defaultValue, range = props.range, count3 = props.count, onChange = props.onChange, onBeforeChange = props.onBeforeChange, onAfterChange = props.onAfterChange, onChangeComplete = props.onChangeComplete, _props$allowCross = props.allowCross, allowCross = _props$allowCross === void 0 ? true : _props$allowCross, _props$pushable = props.pushable, pushable = _props$pushable === void 0 ? false : _props$pushable, reverse = props.reverse, vertical2 = props.vertical, _props$included = props.included, included = _props$included === void 0 ? true : _props$included, startPoint = props.startPoint, trackStyle = props.trackStyle, handleStyle = props.handleStyle, railStyle = props.railStyle, dotStyle = props.dotStyle, activeDotStyle = props.activeDotStyle, marks = props.marks, dots = props.dots, handleRender = props.handleRender, activeHandleRender = props.activeHandleRender, track = props.track, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, ariaLabelForHandle = props.ariaLabelForHandle, ariaLabelledByForHandle = props.ariaLabelledByForHandle, ariaRequired = props.ariaRequired, ariaValueTextFormatterForHandle = props.ariaValueTextFormatterForHandle;
  var handlesRef = React904.useRef(null);
  var containerRef = React904.useRef(null);
  var direction = React904.useMemo(function() {
    if (vertical2) {
      return reverse ? "ttb" : "btt";
    }
    return reverse ? "rtl" : "ltr";
  }, [reverse, vertical2]);
  var _useRange = useRange(range), _useRange2 = _slicedToArray(_useRange, 5), rangeEnabled = _useRange2[0], rangeEditable = _useRange2[1], rangeDraggableTrack = _useRange2[2], minCount = _useRange2[3], maxCount = _useRange2[4];
  var mergedMin = React904.useMemo(function() {
    return isFinite(min2) ? min2 : 0;
  }, [min2]);
  var mergedMax = React904.useMemo(function() {
    return isFinite(max2) ? max2 : 100;
  }, [max2]);
  var mergedStep = React904.useMemo(function() {
    return step !== null && step <= 0 ? 1 : step;
  }, [step]);
  var mergedPush = React904.useMemo(function() {
    if (typeof pushable === "boolean") {
      return pushable ? mergedStep : false;
    }
    return pushable >= 0 ? pushable : false;
  }, [pushable, mergedStep]);
  var markList = React904.useMemo(function() {
    return Object.keys(marks || {}).map(function(key) {
      var mark = marks[key];
      var markObj = {
        value: Number(key)
      };
      if (mark && _typeof(mark) === "object" && !React904.isValidElement(mark) && ("label" in mark || "style" in mark)) {
        markObj.style = mark.style;
        markObj.label = mark.label;
      } else {
        markObj.label = mark;
      }
      return markObj;
    }).filter(function(_ref) {
      var label = _ref.label;
      return label || typeof label === "number";
    }).sort(function(a, b119) {
      return a.value - b119.value;
    });
  }, [marks]);
  var _useOffset = useOffset(mergedMin, mergedMax, mergedStep, markList, allowCross, mergedPush), _useOffset2 = _slicedToArray(_useOffset, 2), formatValue = _useOffset2[0], offsetValues = _useOffset2[1];
  var _useMergedState = useMergedState(defaultValue, {
    value
  }), _useMergedState2 = _slicedToArray(_useMergedState, 2), mergedValue = _useMergedState2[0], setValue = _useMergedState2[1];
  var rawValues = React904.useMemo(function() {
    var valueList = mergedValue === null || mergedValue === void 0 ? [] : Array.isArray(mergedValue) ? mergedValue : [mergedValue];
    var _valueList = _slicedToArray(valueList, 1), _valueList$ = _valueList[0], val0 = _valueList$ === void 0 ? mergedMin : _valueList$;
    var returnValues = mergedValue === null ? [] : [val0];
    if (rangeEnabled) {
      returnValues = _toConsumableArray(valueList);
      if (count3 || mergedValue === void 0) {
        var pointCount = count3 >= 0 ? count3 + 1 : 2;
        returnValues = returnValues.slice(0, pointCount);
        while (returnValues.length < pointCount) {
          var _returnValues;
          returnValues.push((_returnValues = returnValues[returnValues.length - 1]) !== null && _returnValues !== void 0 ? _returnValues : mergedMin);
        }
      }
      returnValues.sort(function(a, b119) {
        return a - b119;
      });
    }
    returnValues.forEach(function(val, index3) {
      returnValues[index3] = formatValue(val);
    });
    return returnValues;
  }, [mergedValue, rangeEnabled, mergedMin, count3, formatValue]);
  var getTriggerValue = function getTriggerValue2(triggerValues) {
    return rangeEnabled ? triggerValues : triggerValues[0];
  };
  var triggerChange = useEvent(function(nextValues) {
    var cloneNextValues = _toConsumableArray(nextValues).sort(function(a, b119) {
      return a - b119;
    });
    if (onChange && !isEqual_default(cloneNextValues, rawValues, true)) {
      onChange(getTriggerValue(cloneNextValues));
    }
    setValue(cloneNextValues);
  });
  var finishChange = useEvent(function(draggingDelete2) {
    if (draggingDelete2) {
      handlesRef.current.hideHelp();
    }
    var finishValue = getTriggerValue(rawValues);
    onAfterChange === null || onAfterChange === void 0 || onAfterChange(finishValue);
    warning_default(!onAfterChange, "[rc-slider] `onAfterChange` is deprecated. Please use `onChangeComplete` instead.");
    onChangeComplete === null || onChangeComplete === void 0 || onChangeComplete(finishValue);
  });
  var onDelete = function onDelete2(index3) {
    if (disabled || !rangeEditable || rawValues.length <= minCount) {
      return;
    }
    var cloneNextValues = _toConsumableArray(rawValues);
    cloneNextValues.splice(index3, 1);
    onBeforeChange === null || onBeforeChange === void 0 || onBeforeChange(getTriggerValue(cloneNextValues));
    triggerChange(cloneNextValues);
    var nextFocusIndex = Math.max(0, index3 - 1);
    handlesRef.current.hideHelp();
    handlesRef.current.focus(nextFocusIndex);
  };
  var _useDrag = useDrag_default(containerRef, direction, rawValues, mergedMin, mergedMax, formatValue, triggerChange, finishChange, offsetValues, rangeEditable, minCount), _useDrag2 = _slicedToArray(_useDrag, 5), draggingIndex = _useDrag2[0], draggingValue = _useDrag2[1], draggingDelete = _useDrag2[2], cacheValues = _useDrag2[3], onStartDrag = _useDrag2[4];
  var changeToCloseValue = function changeToCloseValue2(newValue, e) {
    if (!disabled) {
      var cloneNextValues = _toConsumableArray(rawValues);
      var valueIndex = 0;
      var valueBeforeIndex = 0;
      var valueDist = mergedMax - mergedMin;
      rawValues.forEach(function(val, index3) {
        var dist = Math.abs(newValue - val);
        if (dist <= valueDist) {
          valueDist = dist;
          valueIndex = index3;
        }
        if (val < newValue) {
          valueBeforeIndex = index3;
        }
      });
      var focusIndex = valueIndex;
      if (rangeEditable && valueDist !== 0 && (!maxCount || rawValues.length < maxCount)) {
        cloneNextValues.splice(valueBeforeIndex + 1, 0, newValue);
        focusIndex = valueBeforeIndex + 1;
      } else {
        cloneNextValues[valueIndex] = newValue;
      }
      if (rangeEnabled && !rawValues.length && count3 === void 0) {
        cloneNextValues.push(newValue);
      }
      var nextValue = getTriggerValue(cloneNextValues);
      onBeforeChange === null || onBeforeChange === void 0 || onBeforeChange(nextValue);
      triggerChange(cloneNextValues);
      if (e) {
        var _document$activeEleme, _document$activeEleme2;
        (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 || (_document$activeEleme2 = _document$activeEleme.blur) === null || _document$activeEleme2 === void 0 || _document$activeEleme2.call(_document$activeEleme);
        handlesRef.current.focus(focusIndex);
        onStartDrag(e, focusIndex, cloneNextValues);
      } else {
        onAfterChange === null || onAfterChange === void 0 || onAfterChange(nextValue);
        warning_default(!onAfterChange, "[rc-slider] `onAfterChange` is deprecated. Please use `onChangeComplete` instead.");
        onChangeComplete === null || onChangeComplete === void 0 || onChangeComplete(nextValue);
      }
    }
  };
  var onSliderMouseDown = function onSliderMouseDown2(e) {
    e.preventDefault();
    var _containerRef$current = containerRef.current.getBoundingClientRect(), width = _containerRef$current.width, height = _containerRef$current.height, left = _containerRef$current.left, top = _containerRef$current.top, bottom = _containerRef$current.bottom, right = _containerRef$current.right;
    var clientX = e.clientX, clientY = e.clientY;
    var percent;
    switch (direction) {
      case "btt":
        percent = (bottom - clientY) / height;
        break;
      case "ttb":
        percent = (clientY - top) / height;
        break;
      case "rtl":
        percent = (right - clientX) / width;
        break;
      default:
        percent = (clientX - left) / width;
    }
    var nextValue = mergedMin + percent * (mergedMax - mergedMin);
    changeToCloseValue(formatValue(nextValue), e);
  };
  var _React$useState = React904.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), keyboardValue = _React$useState2[0], setKeyboardValue = _React$useState2[1];
  var onHandleOffsetChange = function onHandleOffsetChange2(offset6, valueIndex) {
    if (!disabled) {
      var next = offsetValues(rawValues, offset6, valueIndex);
      onBeforeChange === null || onBeforeChange === void 0 || onBeforeChange(getTriggerValue(rawValues));
      triggerChange(next.values);
      setKeyboardValue(next.value);
    }
  };
  React904.useEffect(function() {
    if (keyboardValue !== null) {
      var valueIndex = rawValues.indexOf(keyboardValue);
      if (valueIndex >= 0) {
        handlesRef.current.focus(valueIndex);
      }
    }
    setKeyboardValue(null);
  }, [keyboardValue]);
  var mergedDraggableTrack = React904.useMemo(function() {
    if (rangeDraggableTrack && mergedStep === null) {
      if (true) {
        warning_default(false, "`draggableTrack` is not supported when `step` is `null`.");
      }
      return false;
    }
    return rangeDraggableTrack;
  }, [rangeDraggableTrack, mergedStep]);
  var onStartMove = useEvent(function(e, valueIndex) {
    onStartDrag(e, valueIndex);
    onBeforeChange === null || onBeforeChange === void 0 || onBeforeChange(getTriggerValue(rawValues));
  });
  var dragging = draggingIndex !== -1;
  React904.useEffect(function() {
    if (!dragging) {
      var valueIndex = rawValues.lastIndexOf(draggingValue);
      handlesRef.current.focus(valueIndex);
    }
  }, [dragging]);
  var sortedCacheValues = React904.useMemo(function() {
    return _toConsumableArray(cacheValues).sort(function(a, b119) {
      return a - b119;
    });
  }, [cacheValues]);
  var _React$useMemo = React904.useMemo(function() {
    if (!rangeEnabled) {
      return [mergedMin, sortedCacheValues[0]];
    }
    return [sortedCacheValues[0], sortedCacheValues[sortedCacheValues.length - 1]];
  }, [sortedCacheValues, rangeEnabled, mergedMin]), _React$useMemo2 = _slicedToArray(_React$useMemo, 2), includedStart = _React$useMemo2[0], includedEnd = _React$useMemo2[1];
  React904.useImperativeHandle(ref2, function() {
    return {
      focus: function focus2() {
        handlesRef.current.focus(0);
      },
      blur: function blur() {
        var _containerRef$current2;
        var _document = document, activeElement2 = _document.activeElement;
        if ((_containerRef$current2 = containerRef.current) !== null && _containerRef$current2 !== void 0 && _containerRef$current2.contains(activeElement2)) {
          activeElement2 === null || activeElement2 === void 0 || activeElement2.blur();
        }
      }
    };
  });
  React904.useEffect(function() {
    if (autoFocus) {
      handlesRef.current.focus(0);
    }
  }, []);
  var context = React904.useMemo(function() {
    return {
      min: mergedMin,
      max: mergedMax,
      direction,
      disabled,
      keyboard,
      step: mergedStep,
      included,
      includedStart,
      includedEnd,
      range: rangeEnabled,
      tabIndex,
      ariaLabelForHandle,
      ariaLabelledByForHandle,
      ariaRequired,
      ariaValueTextFormatterForHandle,
      styles: styles || {},
      classNames: classNames3 || {}
    };
  }, [mergedMin, mergedMax, direction, disabled, keyboard, mergedStep, included, includedStart, includedEnd, rangeEnabled, tabIndex, ariaLabelForHandle, ariaLabelledByForHandle, ariaRequired, ariaValueTextFormatterForHandle, styles, classNames3]);
  return React904.createElement(context_default.Provider, {
    value: context
  }, React904.createElement("div", {
    ref: containerRef,
    className: (0, import_classnames6.default)(prefixCls, className, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), "".concat(prefixCls, "-vertical"), vertical2), "".concat(prefixCls, "-horizontal"), !vertical2), "".concat(prefixCls, "-with-marks"), markList.length)),
    style: style3,
    onMouseDown: onSliderMouseDown,
    id
  }, React904.createElement("div", {
    className: (0, import_classnames6.default)("".concat(prefixCls, "-rail"), classNames3 === null || classNames3 === void 0 ? void 0 : classNames3.rail),
    style: _objectSpread2(_objectSpread2({}, railStyle), styles === null || styles === void 0 ? void 0 : styles.rail)
  }), track !== false && React904.createElement(Tracks_default, {
    prefixCls,
    style: trackStyle,
    values: rawValues,
    startPoint,
    onStartMove: mergedDraggableTrack ? onStartMove : void 0
  }), React904.createElement(Steps_default, {
    prefixCls,
    marks: markList,
    dots,
    style: dotStyle,
    activeStyle: activeDotStyle
  }), React904.createElement(Handles_default, {
    ref: handlesRef,
    prefixCls,
    style: handleStyle,
    values: cacheValues,
    draggingIndex,
    draggingDelete,
    onStartMove,
    onOffsetChange: onHandleOffsetChange,
    onFocus,
    onBlur,
    handleRender,
    activeHandleRender,
    onChangeComplete: finishChange,
    onDelete: rangeEditable ? onDelete : void 0
  }), React904.createElement(Marks_default, {
    prefixCls,
    marks: markList,
    onClick: changeToCloseValue
  })));
});
if (true) {
  Slider.displayName = "Slider";
}
var Slider_default = Slider;

// node_modules/rc-slider/es/index.js
var es_default = Slider_default;

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/BaseSlider/BaseSlider.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Slider/BaseSlider/BaseSlider.css";
var b92 = block("base-slider");
var BaseSlider = React905.forwardRef(function BaseSlider2({ stateModifiers, ...restProps }, ref2) {
  return (0, import_jsx_runtime149.jsx)(es_default, { ...restProps, ref: ref2, className: b92(stateModifiers), classNames: {
    handle: b92("handle", stateModifiers),
    rail: b92("rail", stateModifiers),
    track: b92("track", stateModifiers)
  }, pushable: false, dots: false, keyboard: true });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/HandleWithTooltip/HandleWithTooltip.js
var import_jsx_runtime152 = __toESM(require_jsx_runtime(), 1);
var React906 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/SliderTooltip/SliderTooltip.js
var import_jsx_runtime151 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/SliderTooltip/SliderTooltipPin.js
var import_jsx_runtime150 = __toESM(require_jsx_runtime(), 1);
var SliderTooltipPin = ({ className }) => (0, import_jsx_runtime150.jsx)("span", { className, children: (0, import_jsx_runtime150.jsx)("svg", { width: "12", height: "6", viewBox: "0 0 12 6", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: (0, import_jsx_runtime150.jsx)("path", { d: "M5.99996 5.02325C5.99996 5.02325 7.7674 -1.90735e-06 11.3023 -1.90735e-06H0.697632C4.23252 -1.90735e-06 5.99996 5.02325 5.99996 5.02325Z", fill: "currentColor" }) }) });

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/SliderTooltip/SliderTooltip.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Slider/SliderTooltip/SliderTooltip.css";
var b93 = block("slider-tooltip");
var SliderTooltip = ({ className, style: style3, stateModifiers, children: children2 }) => (0, import_jsx_runtime151.jsx)("div", { className: b93(stateModifiers, className), style: style3, children: (0, import_jsx_runtime151.jsxs)("div", { className: b93("card", stateModifiers), children: [children2, stateModifiers.disabled && //use this element to prevent crossing effect
(0, import_jsx_runtime151.jsx)(SliderTooltipPin, { className: b93("pin", { background: true }) }), (0, import_jsx_runtime151.jsx)(SliderTooltipPin, { className: b93("pin") })] }) });

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/HandleWithTooltip/HandleWithTooltip.js
var HandleWithTooltip = ({ originHandle, originHandleProps, stateModifiers, tooltipFormat, className }) => {
  var _a;
  const autoVisible = stateModifiers["tooltip-display"] === "auto";
  const alwaysVisible = stateModifiers["tooltip-display"] === "on";
  const [tooltipVisible, setTooltipVisible] = React906.useState(false);
  const [focused, setFocused] = React906.useState(false);
  const [hovered, setHovered] = React906.useState(false);
  if (alwaysVisible && !tooltipVisible) {
    setTooltipVisible(true);
  }
  if (autoVisible && !tooltipVisible && originHandleProps.dragging) {
    setTooltipVisible(true);
  }
  const styleProp = stateModifiers.rtl ? "right" : "left";
  const tooltipContent = tooltipFormat ? tooltipFormat(originHandleProps.value) : originHandleProps.value;
  const handleTooltipVisibility = ({ currentHovered, currentFocused }) => {
    if (autoVisible) {
      const handleHovered = currentHovered === void 0 ? hovered : currentHovered;
      const handleFocused = currentFocused === void 0 ? focused : currentFocused;
      setTooltipVisible(handleHovered || handleFocused);
    }
  };
  const handle = alwaysVisible ? originHandle : React906.cloneElement(originHandle, {
    onMouseEnter: (event) => {
      var _a2, _b;
      (_b = (_a2 = originHandle.props).onMouseEnter) == null ? void 0 : _b.call(_a2, event);
      setHovered(true);
      handleTooltipVisibility({ currentHovered: true });
    },
    onMouseLeave: (event) => {
      var _a2, _b;
      (_b = (_a2 = originHandle.props).onMouseLeave) == null ? void 0 : _b.call(_a2, event);
      setHovered(false);
      handleTooltipVisibility({ currentHovered: false });
    },
    onFocus: (event) => {
      var _a2, _b;
      (_b = (_a2 = originHandle.props).onFocus) == null ? void 0 : _b.call(_a2, event);
      setFocused(true);
      handleTooltipVisibility({ currentFocused: true });
    },
    onBlur: (event) => {
      var _a2, _b;
      (_b = (_a2 = originHandle.props).onBlur) == null ? void 0 : _b.call(_a2, event);
      setFocused(false);
      handleTooltipVisibility({ currentFocused: false });
    }
  });
  return (0, import_jsx_runtime152.jsxs)(React906.Fragment, { children: [handle, tooltipVisible && (0, import_jsx_runtime152.jsx)(SliderTooltip, { className, style: {
    insetInlineStart: (_a = originHandle.props.style) == null ? void 0 : _a[styleProp]
  }, stateModifiers, children: tooltipContent })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/constants.js
var CLEAR_MARK_STYLE = { left: "", right: "", transform: "" };

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/utils.js
function prepareSingleValue({ value, min: min2, max: max2 }) {
  if (typeof value === "undefined" || value < min2) {
    return min2;
  } else if (value > max2) {
    return max2;
  }
  return value;
}
function prepareStartPoint({ min: min2, max: max2, startPoint }) {
  if (startPoint === void 0) {
    return void 0;
  }
  return prepareSingleValue({ min: min2, max: max2, value: startPoint });
}
function prepareArrayValue({ value = [], min: min2 = 0, max: max2 = 100 }) {
  return [
    prepareSingleValue({ max: max2, min: min2, value: value[0] }),
    prepareSingleValue({ max: max2, min: min2, value: value[1] })
  ].sort((v1, v2) => v1 - v2);
}
function calculateMarksArray({ count: count3 = 0, max: max2, min: min2 }) {
  if (!count3) {
    return [];
  }
  if (max2 === min2) {
    return [min2];
  }
  if (count3 === 1) {
    const step = Math.abs(max2 - min2) / 2;
    return [Math.round((min2 + step) * 100) / 100];
  }
  if (count3 > 2) {
    const points = [];
    const step = Math.abs(max2 - min2) / (count3 - 1);
    for (let i = 0; i < count3; i++) {
      points.push(Math.round((min2 + step * i) * 100) / 100);
    }
    return points;
  }
  return [min2, max2];
}
function createMarks({ points, markFormat, min: min2, max: max2 }) {
  const marks = {};
  points.forEach((point) => {
    const pointContent = markFormat ? markFormat(point) : point;
    if (point === min2 || point === max2) {
      marks[point] = { label: pointContent, style: CLEAR_MARK_STYLE };
    } else {
      marks[point] = pointContent;
    }
  });
  return marks;
}
function prepareSliderInnerState({ max: max2 = 100, min: min2 = 0, defaultValue, step, value, markFormat, marks, tooltipDisplay, tooltipFormat, startPoint }) {
  const state = {
    value,
    defaultValue: defaultValue ?? min2,
    range: false,
    max: max2,
    min: min2,
    step,
    tooltipDisplay
  };
  state.tooltipFormat = tooltipFormat ? tooltipFormat : markFormat;
  if (max2 < min2) {
    state.max = min2;
    state.min = max2;
  }
  if (Array.isArray(marks)) {
    state.marks = createMarks({ points: marks, markFormat, min: state.min, max: state.max });
  } else {
    state.marks = marks === 0 ? {} : createMarks({
      points: calculateMarksArray({ count: marks, max: max2, min: min2 }),
      markFormat,
      min: min2,
      max: max2
    });
  }
  state.startPoint = prepareStartPoint({ min: state.min, max: state.max, startPoint });
  if (defaultValue === void 0) {
    state.defaultValue = state.startPoint === void 0 ? state.min : state.startPoint;
  }
  if (value === void 0) {
    const isArray = Array.isArray(state.defaultValue);
    state.range = isArray;
    state.defaultValue = isArray ? prepareArrayValue({
      min: state.min,
      max: state.max,
      value: state.defaultValue
    }) : prepareSingleValue({
      min: state.min,
      max: state.max,
      value: state.defaultValue
    });
  } else {
    const isArray = Array.isArray(value);
    state.range = isArray;
    state.value = isArray ? prepareArrayValue({ min: state.min, max: state.max, value }) : prepareSingleValue({ min: state.min, max: state.max, value });
  }
  return state;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Slider/Slider.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Slider/Slider.css";
var b94 = block("slider");
var Slider2 = React907.forwardRef(function Slider3({ value, defaultValue, size: size5 = "m", min: min2 = 0, max: max2 = 100, step = 1, markFormat, marks = 2, tooltipDisplay, tooltipFormat = markFormat, errorMessage, validationState, disabled = false, startPoint, inverted, onBlur, onUpdate, onUpdateComplete, onFocus, autoFocus = false, tabIndex, className, style: style3, qa, apiRef, "aria-label": ariaLabelForHandle, "aria-labelledby": ariaLabelledByForHandle, name, form, ...restProps }, ref2) {
  const direction = useDirection();
  const innerState = prepareSliderInnerState({
    defaultValue,
    max: max2,
    min: min2,
    step,
    value,
    markFormat,
    marks,
    tooltipDisplay,
    tooltipFormat,
    startPoint: inverted ? Math.max(min2, max2) : startPoint
  });
  const [innerValue, setValue] = useControlledState(innerState.value, innerState.defaultValue, onUpdate);
  const handleReset = React907.useCallback((v) => {
    setValue(v);
    onUpdateComplete == null ? void 0 : onUpdateComplete(v);
  }, [onUpdateComplete, setValue]);
  const inputRef = useFormResetHandler({ initialValue: innerValue, onReset: handleReset });
  const stateModifiers = {
    size: size5,
    error: validationState === "invalid" && !disabled,
    disabled,
    "tooltip-display": innerState.tooltipDisplay,
    rtl: direction === "rtl",
    "no-marks": Array.isArray(marks) ? marks.length === 0 : marks === 0,
    inverted: innerState.startPoint === innerState.max && !innerState.range,
    "with-start-point": Boolean(innerState.startPoint && !innerState.range && innerState.startPoint !== innerState.max && innerState.startPoint !== innerState.min)
  };
  const handleRender = (originHandle, originHandleProps) => {
    const handle = innerState.tooltipDisplay === "off" ? originHandle : (0, import_jsx_runtime153.jsx)(HandleWithTooltip, { originHandle, originHandleProps, stateModifiers, className: b94("tooltip"), tooltipFormat: innerState.tooltipFormat });
    return (0, import_jsx_runtime153.jsxs)(React907.Fragment, { children: [handle, (0, import_jsx_runtime153.jsx)("input", { ref: inputRef, type: "hidden", name, form, value: originHandleProps.value, disabled })] });
  };
  return (0, import_jsx_runtime153.jsxs)("div", { ...filterDOMProps(restProps), className: b94(null, className), style: style3, ref: ref2, children: [(0, import_jsx_runtime153.jsx)("div", { className: b94("top", { size: size5, "tooltip-display": tooltipDisplay }) }), (0, import_jsx_runtime153.jsx)(BaseSlider, { ref: apiRef, value: innerValue, min: innerState.min, max: innerState.max, step: innerState.step, range: innerState.range, disabled, marks: innerState.marks, startPoint: innerState.startPoint, onBlur, onFocus, onChange: setValue, onChangeComplete: onUpdateComplete, stateModifiers, autoFocus, tabIndex, "data-qa": qa, handleRender, reverse: stateModifiers.rtl, ariaLabelForHandle, ariaLabelledByForHandle }), stateModifiers.error && errorMessage && (0, import_jsx_runtime153.jsx)("div", { className: b94("error", { size: size5 }), children: errorMessage })] });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Stepper/Stepper.js
var import_jsx_runtime156 = __toESM(require_jsx_runtime(), 1);
var React910 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Stepper/StepperItem.js
var import_jsx_runtime154 = __toESM(require_jsx_runtime(), 1);
var React909 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Stepper/context.js
var React908 = __toESM(require_react(), 1);
var StepperContext = React908.createContext({
  size: "m",
  onUpdate: void 0,
  value: void 0
});
var useStepperContext = () => {
  const data = React908.useContext(StepperContext);
  return data;
};

// node_modules/@gravity-ui/uikit/build/esm/components/Stepper/utils.js
var b95 = block("stepper");

// node_modules/@gravity-ui/uikit/build/esm/components/Stepper/StepperItem.js
var StepperItem = React909.forwardRef((props, ref2) => {
  const { id, children: children2, view = "idle", disabled = false, className, icon: customIcon, ...restButtonProps } = props;
  const { onUpdate, value, size: size5 } = useStepperContext();
  const onClick = (e) => {
    var _a;
    (_a = props.onClick) == null ? void 0 : _a.call(props, e);
    onUpdate == null ? void 0 : onUpdate(id);
  };
  const icon = React909.useMemo(() => {
    if (customIcon) {
      return customIcon;
    }
    switch (view) {
      case "idle": {
        return CircleDashed_default;
      }
      case "error": {
        return CircleExclamation_default;
      }
      case "success": {
        return CircleCheck_default;
      }
      default: {
        return CircleDashed_default;
      }
    }
  }, [view, customIcon]);
  const selectedItem = id === void 0 ? false : id === value;
  return (0, import_jsx_runtime154.jsxs)(Button2, { ref: ref2, title: typeof children2 === "string" ? children2 : void 0, ...restButtonProps, width: "auto", className: b95("item", { view, disabled, selected: selectedItem, size: size5 }, className), onClick, disabled, size: size5, view: "outlined", children: [(0, import_jsx_runtime154.jsx)(Icon, { data: icon, className: b95("item-icon", { view }) }), children2] });
});
StepperItem.displayName = "StepperItem";

// node_modules/@gravity-ui/uikit/build/esm/components/Stepper/StepperSeparator.js
var import_jsx_runtime155 = __toESM(require_jsx_runtime(), 1);
var StepperSeparator = ({ separator }) => {
  const direction = useDirection();
  return (0, import_jsx_runtime155.jsx)("div", { className: b95("separator"), "aria-hidden": true, children: separator ?? (0, import_jsx_runtime155.jsx)(Icon, { data: direction === "rtl" ? ChevronLeft_default : ChevronRight_default }) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Stepper/Stepper.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Stepper/Stepper.css";
var Stepper = (props) => {
  const { children: children2, value, size: size5 = "s", className, onUpdate, separator } = props;
  const stepItems = React910.useMemo(() => {
    return React910.Children.map(children2, (child, index3) => {
      var _a;
      const itemId = ((_a = child.props) == null ? void 0 : _a.id) || index3;
      const clonedChild = React910.cloneElement(child, { id: itemId });
      return (0, import_jsx_runtime156.jsxs)("li", { className: b95("list-item"), children: [clonedChild, Boolean(index3 !== React910.Children.count(children2) - 1) && (0, import_jsx_runtime156.jsx)(StepperSeparator, { separator })] }, itemId);
    });
  }, [children2, separator]);
  return (0, import_jsx_runtime156.jsx)(StepperContext.Provider, { value: { size: size5, onUpdate, value }, children: (0, import_jsx_runtime156.jsx)("ol", { ...filterDOMProps(props, { labelable: true }), className: b95(null, className), style: props.style, "data-qa": props.qa, children: stepItems }) });
};
Stepper.Item = StepperItem;
Stepper.displayName = "Stepper";

// node_modules/@gravity-ui/uikit/build/esm/components/Spin/Spin.js
var import_jsx_runtime157 = __toESM(require_jsx_runtime(), 1);
var React911 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Spin/Spin.css";
var b96 = block("spin");
var Spin = React911.forwardRef(function Spin2(props, ref2) {
  const { size: size5 = "m", style: style3, className, qa } = props;
  return (0, import_jsx_runtime157.jsx)("div", { ref: ref2, style: style3, className: b96({ size: size5 }, className), "data-qa": qa, children: (0, import_jsx_runtime157.jsx)("div", { className: b96("inner") }) });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Switch/Switch.js
var import_jsx_runtime158 = __toESM(require_jsx_runtime(), 1);
var React912 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Switch/Switch.css";
var b97 = block("switch");
var Switch = React912.forwardRef(function Switch2(props, ref2) {
  const { size: size5 = "m", disabled = false, content, children: children2, title, style: style3, className, qa } = props;
  const { checked, inputProps } = useCheckbox({
    ...props,
    controlProps: { ...props.controlProps, role: "switch" }
  });
  const text2 = content || children2;
  const control = (0, import_jsx_runtime158.jsxs)("span", { className: b97("indicator"), children: [(0, import_jsx_runtime158.jsx)("input", { ...inputProps, className: b97("control") }), (0, import_jsx_runtime158.jsx)("span", { className: b97("outline") }), (0, import_jsx_runtime158.jsx)("span", { className: b97("slider") })] });
  return (0, import_jsx_runtime158.jsx)(ControlLabel, { ref: ref2, title, style: style3, size: size5, disabled, className: b97({
    size: size5,
    disabled,
    checked
  }, className), labelClassName: b97("text"), qa, control, children: text2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Table/Table.js
var import_jsx_runtime159 = __toESM(require_jsx_runtime(), 1);
var React913 = __toESM(require_react(), 1);
var import_get2 = __toESM(require_get(), 1);
var import_has = __toESM(require_has2(), 1);
var import_isNumber = __toESM(require_isNumber(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/i18n/en.json
var en_default18 = {
  label_empty: "No data",
  "label-actions": "Actions",
  "label-row-select": "Select"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/i18n/ru.json
var ru_default18 = {
  label_empty: "Нет данных",
  "label-actions": "Действия",
  "label-row-select": "Выбрать"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/i18n/index.js
var COMPONENT15 = "Table";
var i18n_default16 = addComponentKeysets({ en: en_default18, ru: ru_default18 }, COMPONENT15);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/Table.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/Table.css";
var DASH = "—";
function warnAboutPhysicalValues3(propName) {
  warnOnce(`[Table] Physical values (left, right) of "${propName}" property are deprecated. Use logical values (start, end) instead.`);
}
function normalizeSides(side, propName) {
  if (side === "left") {
    warnAboutPhysicalValues3(propName);
    return "start";
  }
  if (side === "right") {
    warnAboutPhysicalValues3(propName);
    return "end";
  }
  return side;
}
var b98 = block("table");
var EMPTY_VALUES = [void 0, null, ""];
var _Table = class _Table extends React913.Component {
  constructor() {
    super(...arguments);
    __publicField(this, "state", {
      activeScrollElement: "scrollContainer",
      columnsStyles: Array.from(this.props.columns, () => ({})),
      columnHeaderRefs: Array.from(this.props.columns, () => React913.createRef())
    });
    __publicField(this, "tableRef", React913.createRef());
    __publicField(this, "scrollContainerRef", React913.createRef());
    __publicField(this, "horizontalScrollBarRef", React913.createRef());
    __publicField(this, "horizontalScrollBarInnerRef", React913.createRef());
    __publicField(this, "tableResizeObserver");
    __publicField(this, "columnsResizeObserver");
    __publicField(this, "renderRow", (item, rowIndex) => {
      const { columns, isRowDisabled, onRowClick, onRowMouseEnter, onRowMouseLeave, onRowMouseDown, getRowClassNames, verticalAlign, edgePadding, wordWrap, getRowDescriptor, qa } = this.props;
      const { columnsStyles } = this.state;
      const descriptor = getRowDescriptor == null ? void 0 : getRowDescriptor(item, rowIndex);
      const disabled = (descriptor == null ? void 0 : descriptor.disabled) || (isRowDisabled == null ? void 0 : isRowDisabled(item, rowIndex)) || false;
      const additionalClassNames = (descriptor == null ? void 0 : descriptor.classNames) || (getRowClassNames == null ? void 0 : getRowClassNames(item, rowIndex)) || [];
      const interactive = Boolean(!disabled && ((descriptor == null ? void 0 : descriptor.interactive) || onRowClick));
      return (0, import_jsx_runtime159.jsx)("tr", { onClick: !disabled && onRowClick ? onRowClick.bind(null, item, rowIndex) : void 0, onMouseEnter: !disabled && onRowMouseEnter ? onRowMouseEnter.bind(null, item, rowIndex) : void 0, onMouseLeave: !disabled && onRowMouseLeave ? onRowMouseLeave.bind(null, item, rowIndex) : void 0, onMouseDown: !disabled && onRowMouseDown ? onRowMouseDown.bind(null, item, rowIndex) : void 0, className: b98("row", { disabled, interactive, "vertical-align": verticalAlign }, additionalClassNames.join(" ")), "data-qa": qa && `${qa}-row-${rowIndex}`, children: columns.map((column, colIndex) => {
        const { id, align: rawAlign, primary, className, sticky: rawSticky } = column;
        const content = _Table.getBodyCellContent(column, item, rowIndex);
        const align = normalizeSides(rawAlign, "column.align");
        const sticky = normalizeSides(rawSticky, "column.sticky");
        return (0, import_jsx_runtime159.jsx)("td", { style: columnsStyles[colIndex], className: b98("cell", {
          align,
          primary,
          sticky,
          ["edge-padding"]: edgePadding,
          ["word-wrap"]: wordWrap
        }, className), children: content }, id);
      }) }, _Table.getRowId(this.props, item, rowIndex));
    });
    __publicField(this, "handleScrollContainerMouseenter", () => {
      this.setState({ activeScrollElement: "scrollContainer" });
    });
    __publicField(this, "handleScrollContainerScroll", () => {
      if (this.state.activeScrollElement === "scrollContainer" && this.horizontalScrollBarRef.current && this.scrollContainerRef.current) {
        this.horizontalScrollBarRef.current.scrollLeft = this.scrollContainerRef.current.scrollLeft;
      }
    });
    __publicField(this, "handleHorizontalScrollBarMouseenter", () => {
      this.setState({ activeScrollElement: "scrollBar" });
    });
    __publicField(this, "handleHorizontalScrollBarScroll", () => {
      if (this.state.activeScrollElement === "scrollBar" && this.horizontalScrollBarRef.current && this.scrollContainerRef.current) {
        this.scrollContainerRef.current.scrollLeft = this.horizontalScrollBarRef.current.scrollLeft;
      }
    });
  }
  // Static methods may be used by HOCs
  static getRowId(props, item, rowIndex) {
    const { data, getRowId, getRowDescriptor } = props;
    const index3 = rowIndex ?? data.indexOf(item);
    const descriptor = getRowDescriptor == null ? void 0 : getRowDescriptor(item, index3);
    if ((descriptor == null ? void 0 : descriptor.id) !== void 0) {
      return descriptor.id;
    }
    if (typeof getRowId === "function") {
      return getRowId(item, index3);
    }
    if (getRowId && getRowId in item) {
      return String(item[getRowId]);
    }
    return String(index3);
  }
  static getHeadCellContent(column) {
    const { id, name } = column;
    let content;
    if (typeof name === "function") {
      content = name();
    } else if (typeof name === "string") {
      content = name;
    } else {
      content = id;
    }
    return content;
  }
  static getBodyCellContent(column, item, rowIndex) {
    const { id, template, placeholder: placeholder2 } = column;
    let placeholderValue;
    if (typeof placeholder2 === "function") {
      placeholderValue = placeholder2(item, rowIndex);
    } else {
      placeholderValue = placeholder2 ?? DASH;
    }
    let value;
    if (typeof template === "function") {
      value = template(item, rowIndex);
    } else if (typeof template === "string") {
      value = (0, import_get2.default)(item, template);
    } else if ((0, import_has.default)(item, id)) {
      value = (0, import_get2.default)(item, id);
    }
    if (EMPTY_VALUES.includes(value) && placeholderValue) {
      return placeholderValue;
    }
    return value;
  }
  static getDerivedStateFromProps(props, state) {
    if (props.columns.length === state.columnHeaderRefs.length) {
      return null;
    }
    return {
      columnHeaderRefs: Array.from(props.columns, () => React913.createRef())
    };
  }
  componentDidMount() {
    if (this.props.stickyHorizontalScroll) {
      this.tableResizeObserver = new ResizeObserver((entries) => {
        var _a;
        const { contentRect } = entries[0];
        (_a = this.horizontalScrollBarInnerRef.current) == null ? void 0 : _a.style.setProperty("width", `${contentRect.width}px`);
      });
      if (this.tableRef.current) {
        this.tableResizeObserver.observe(this.tableRef.current);
      }
      if (this.scrollContainerRef.current) {
        this.scrollContainerRef.current.addEventListener("scroll", this.handleScrollContainerScroll);
        this.scrollContainerRef.current.addEventListener("mouseenter", this.handleScrollContainerMouseenter);
      }
      if (this.horizontalScrollBarRef.current) {
        this.horizontalScrollBarRef.current.addEventListener("scroll", this.handleHorizontalScrollBarScroll);
        this.horizontalScrollBarRef.current.addEventListener("mouseenter", this.handleHorizontalScrollBarMouseenter);
      }
    }
    this.columnsResizeObserver = new ResizeObserver((entries) => {
      window.requestAnimationFrame(() => {
        if (!Array.isArray(entries) || !entries.length) {
          return;
        }
        this.updateColumnStyles();
      });
    });
    if (this.tableRef.current) {
      this.columnsResizeObserver.observe(this.tableRef.current);
    }
    this.updateColumnStyles();
  }
  componentDidUpdate(prevProps) {
    if (this.props.columns !== prevProps.columns) {
      this.updateColumnStyles();
    }
  }
  componentWillUnmount() {
    if (this.props.stickyHorizontalScroll) {
      if (this.tableResizeObserver) {
        this.tableResizeObserver.disconnect();
      }
      if (this.scrollContainerRef.current) {
        this.scrollContainerRef.current.removeEventListener("scroll", this.handleScrollContainerScroll);
        this.scrollContainerRef.current.removeEventListener("mouseenter", this.handleScrollContainerMouseenter);
      }
      if (this.horizontalScrollBarRef.current) {
        this.horizontalScrollBarRef.current.removeEventListener("scroll", this.handleHorizontalScrollBarScroll);
        this.horizontalScrollBarRef.current.removeEventListener("mouseenter", this.handleHorizontalScrollBarMouseenter);
      }
    }
    if (this.columnsResizeObserver) {
      this.columnsResizeObserver.disconnect();
    }
  }
  render() {
    const { columns, stickyHorizontalScroll, className, qa } = this.props;
    const withPrimary = columns.some(({ primary }) => primary);
    return (0, import_jsx_runtime159.jsx)("div", { className: b98({
      "with-primary": withPrimary,
      "with-sticky-scroll": stickyHorizontalScroll
    }, className), "data-qa": qa, children: stickyHorizontalScroll ? (0, import_jsx_runtime159.jsxs)(React913.Fragment, { children: [(0, import_jsx_runtime159.jsx)("div", { ref: this.scrollContainerRef, className: b98("scroll-container"), children: this.renderTable() }), this.renderHorizontalScrollBar()] }) : this.renderTable() });
  }
  renderHead() {
    const { columns, edgePadding, wordWrap } = this.props;
    const { columnsStyles } = this.state;
    return (0, import_jsx_runtime159.jsx)("thead", { className: b98("head"), children: (0, import_jsx_runtime159.jsx)("tr", { className: b98("row"), children: columns.map((column, index3) => {
      const { id, align: rawAlign, primary, sticky: rawSticky, className } = column;
      const align = normalizeSides(rawAlign, "column.align");
      const sticky = normalizeSides(rawSticky, "column.sticky");
      const content = _Table.getHeadCellContent(column);
      return (0, import_jsx_runtime159.jsx)("th", { ref: this.state.columnHeaderRefs[index3], style: columnsStyles[index3], className: b98("cell", {
        align,
        primary,
        sticky,
        ["edge-padding"]: edgePadding,
        ["word-wrap"]: wordWrap
      }, className), children: content }, id);
    }) }) });
  }
  renderBody() {
    const { data } = this.props;
    return (0, import_jsx_runtime159.jsx)("tbody", { className: b98("body"), children: data.length > 0 ? data.map(this.renderRow) : this.renderEmptyRow() });
  }
  renderTable() {
    const { width = "auto" } = this.props;
    return (0, import_jsx_runtime159.jsxs)("table", { ...filterDOMProps(this.props, { labelable: true }), ref: this.tableRef, className: b98("table", { width }), children: [this.renderHead(), this.renderBody()] });
  }
  renderEmptyRow() {
    const { columns, emptyMessage } = this.props;
    return (0, import_jsx_runtime159.jsx)("tr", { className: b98("row", { empty: true }), children: (0, import_jsx_runtime159.jsx)("td", { className: b98("cell"), colSpan: columns.length, children: emptyMessage ? emptyMessage : i18n_default16("label_empty") }) });
  }
  renderHorizontalScrollBar() {
    const { stickyHorizontalScroll, stickyHorizontalScrollBreakpoint = 0 } = this.props;
    return (0, import_jsx_runtime159.jsx)("div", { ref: this.horizontalScrollBarRef, className: b98("horizontal-scroll-bar", {
      "sticky-horizontal-scroll": stickyHorizontalScroll
    }), style: { bottom: `${stickyHorizontalScrollBreakpoint}px` }, "data-qa": "sticky-horizontal-scroll-breakpoint-qa", children: (0, import_jsx_runtime159.jsx)("div", { ref: this.horizontalScrollBarInnerRef, className: b98("horizontal-scroll-bar-inner") }) });
  }
  updateColumnStyles() {
    this.setState((prevState) => {
      const columnsWidth = prevState.columnHeaderRefs.map((ref2) => ref2.current === null ? void 0 : ref2.current.getBoundingClientRect().width);
      const columnsStyles = this.props.columns.map((_, index3) => this.getColumnStyles(index3, columnsWidth));
      return { columnsStyles };
    });
  }
  getColumnStyles(index3, columnsWidth) {
    const { columns } = this.props;
    const column = columns[index3];
    const style3 = {};
    if (typeof column.width === "string") {
      return { maxWidth: 0, width: column.width };
    }
    if (typeof column.width !== "undefined") {
      style3.width = column.width;
    }
    if (!column.sticky) {
      return style3;
    }
    const filteredColumns = column.sticky === "left" || column.sticky === "start" ? columnsWidth.slice(0, index3) : columnsWidth.slice(index3 + 1);
    const styleName = column.sticky === "left" || column.sticky === "start" ? "insetInlineStart" : "insetInlineEnd";
    style3[styleName] = filteredColumns.reduce((start3, width) => {
      return (0, import_isNumber.default)(width) ? start3 + width : start3;
    }, 0);
    return style3;
  }
};
__publicField(_Table, "defaultProps", {
  edgePadding: true
});
var Table = _Table;

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSelection/withTableSelection.js
var import_jsx_runtime160 = __toESM(require_jsx_runtime(), 1);
var React914 = __toESM(require_react(), 1);
var import_difference = __toESM(require_difference(), 1);
var import_get3 = __toESM(require_get(), 1);
var import_memoize = __toESM(require_memoize(), 1);
var import_union = __toESM(require_union(), 1);
var import_without = __toESM(require_without(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSelection/withTableSelection.css";
var b99 = block("table");
var selectionColumnId = "_selection";
function withTableSelection(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableSelection(${componentName})`;
  return _a = class extends React914.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "lastCheckedIndex");
      __publicField(this, "renderHeadCell", () => {
        const { data, selectedIds } = this.props;
        let disabled = true;
        let indeterminate = false;
        let checked = true;
        data.forEach((item, index3) => {
          if (this.isDisabled(item, index3)) {
            return;
          } else {
            disabled = false;
          }
          const id = Table.getRowId(this.props, item, index3);
          const itemChecked = selectedIds.includes(id);
          if (itemChecked) {
            indeterminate = true;
          } else {
            checked = false;
          }
        });
        if (checked) {
          indeterminate = false;
        }
        if (disabled) {
          checked = false;
          indeterminate = false;
        }
        return this.renderCheckBox({
          disabled,
          checked,
          handler: this.handleAllCheckBoxUpdate,
          indeterminate
        });
      });
      __publicField(this, "renderBodyCell", (item, index3) => {
        const { selectedIds } = this.props;
        const id = Table.getRowId(this.props, item, index3);
        const checked = selectedIds.includes(id);
        return this.renderCheckBox({
          disabled: this.isDisabled(item, index3),
          checked,
          handler: this.handleCheckBoxUpdate.bind(this, id, index3)
        });
      });
      __publicField(this, "handleCheckBoxUpdate", (id, index3, event) => {
        const { checked } = event.target;
        const isShiftPressed = event.nativeEvent.shiftKey;
        const { data, selectedIds, onSelectionChange } = this.props;
        if (isShiftPressed && this.lastCheckedIndex !== void 0 && this.lastCheckedIndex >= 0) {
          const begin = Math.min(this.lastCheckedIndex, index3);
          const end2 = Math.max(this.lastCheckedIndex, index3);
          const dataIds = data.map((item, i) => Table.getRowId(this.props, item, i));
          const diffIds = dataIds.filter((_id, i) => begin <= i && i <= end2 && !this.isDisabled(data[i], i));
          onSelectionChange(checked ? (0, import_union.default)(selectedIds, diffIds) : (0, import_without.default)(selectedIds, ...diffIds));
        } else {
          onSelectionChange(checked ? [...selectedIds, id] : (0, import_without.default)(selectedIds, id));
        }
        this.lastCheckedIndex = index3;
      });
      __publicField(this, "handleAllCheckBoxUpdate", (event) => {
        const { checked } = event.target;
        const { data, selectedIds, onSelectionChange } = this.props;
        const dataIds = data.map((item, index3) => Table.getRowId(this.props, item, index3));
        const notDisabledItemIds = dataIds.filter((_id, index3) => !this.isDisabled(data[index3], index3));
        onSelectionChange(checked ? (0, import_union.default)(selectedIds, notDisabledItemIds) : (0, import_difference.default)(selectedIds, dataIds));
      });
      // eslint-disable-next-line @typescript-eslint/member-ordering, react/sort-comp
      __publicField(this, "enhanceColumns", (0, import_memoize.default)((columns) => {
        const selectionColumn = {
          id: selectionColumnId,
          name: this.renderHeadCell,
          template: this.renderBodyCell,
          className: b99("checkbox_cell"),
          sticky: (0, import_get3.default)(columns, [0, "sticky"]) === "start" ? "start" : void 0
        };
        return [selectionColumn, ...columns];
      }));
      // eslint-disable-next-line @typescript-eslint/member-ordering
      __publicField(this, "enhanceOnRowClick", (0, import_memoize.default)((onRowClick) => {
        if (!onRowClick) {
          return onRowClick;
        }
        return (item, index3, event) => {
          const checkboxClassName = b99("selection-checkbox");
          if (
            // @ts-expect-error
            event.nativeEvent.target.matches(`.${checkboxClassName}, .${checkboxClassName} *`)
          ) {
            return void 0;
          }
          return onRowClick(item, index3, event);
        };
      }));
      // eslint-disable-next-line @typescript-eslint/member-ordering
      __publicField(this, "enhanceGetRowDescriptor", (0, import_memoize.default)((getRowDescriptor) => {
        const currentGetRowDescriptor = (item, index3) => {
          const { selectedIds, getRowClassNames } = this.props;
          const descriptor = (getRowDescriptor == null ? void 0 : getRowDescriptor(item, index3)) || {};
          if (descriptor.classNames === void 0) {
            descriptor.classNames = (getRowClassNames == null ? void 0 : getRowClassNames(item, index3)) || [];
          }
          const id = Table.getRowId(this.props, item, index3);
          const selected = selectedIds.includes(id);
          descriptor.classNames.push(b99("row", { selected }));
          return descriptor;
        };
        return currentGetRowDescriptor;
      }));
      __publicField(this, "isDisabled", (item, index3) => {
        var _a2;
        const { isRowDisabled, isRowSelectionDisabled, getRowDescriptor } = this.props;
        if (isRowSelectionDisabled && isRowSelectionDisabled(item, index3)) {
          return true;
        }
        return ((_a2 = getRowDescriptor == null ? void 0 : getRowDescriptor(item, index3)) == null ? void 0 : _a2.disabled) || (isRowDisabled == null ? void 0 : isRowDisabled(item, index3)) || false;
      });
    }
    render() {
      const {
        selectedIds,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        onSelectionChange,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        columns,
        onRowClick,
        getRowDescriptor,
        ...restTableProps
      } = this.props;
      return (0, import_jsx_runtime160.jsx)(TableComponent, { ...restTableProps, columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick), getRowDescriptor: this.enhanceGetRowDescriptor(getRowDescriptor) });
    }
    renderCheckBox({ disabled, checked, handler, indeterminate }) {
      return (0, import_jsx_runtime160.jsx)(Checkbox, { size: "l", checked, indeterminate, disabled, onChange: handler, className: b99("selection-checkbox", {
        "vertical-align": this.props.verticalAlign
      }), controlProps: {
        "aria-label": i18n_default16("label-row-select")
      } });
    }
  }, __publicField(_a, "displayName", displayName), _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableActions/withTableActions.js
var import_jsx_runtime161 = __toESM(require_jsx_runtime(), 1);
var React915 = __toESM(require_react(), 1);
var import_memoize2 = __toESM(require_memoize(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableActions/withTableActions.css";
var actionsColumnId = "_actions";
function enhanceSystemColumn(columns, enhancer) {
  const existedColumn = columns.find(({ id }) => id === actionsColumnId);
  const systemColumn = existedColumn || {
    id: actionsColumnId,
    name: "",
    sticky: "end",
    width: 28,
    // button width
    placeholder: ""
  };
  enhancer(systemColumn);
  return existedColumn ? columns : [...columns, systemColumn];
}
var isActionGroup = (config3) => {
  return Array.isArray(config3.items);
};
var b100 = block("table");
var actionsCn = b100("actions");
var actionsButtonCn = b100("actions-button");
var bPopup = block("table-action-popup");
var menuCn = bPopup("menu");
var menuItemCn = bPopup("menu-item");
var DEFAULT_PLACEMENT3 = ["bottom-end", "top-end"];
var DefaultRowActions = ({ index: index3, item, getRowActions, getRowDescriptor, rowActionsSize, isRowDisabled, tableQa }) => {
  var _a;
  const [isPopupOpen, , closePopup, togglePopup] = useBoolean(false);
  const anchorRef = React915.useRef(null);
  const rowId = useUniqId();
  if (getRowActions === void 0) {
    return null;
  }
  const renderPopupMenuItem = (action, index4) => {
    if (isActionGroup(action)) {
      return (0, import_jsx_runtime161.jsx)(Menu.Group, { label: action.title, children: action.items.map(renderPopupMenuItem) }, index4);
    }
    const { text: text2, icon, handler, href, ...restProps } = action;
    return (0, import_jsx_runtime161.jsx)(Menu.Item, { onClick: (event) => {
      event.stopPropagation();
      handler(item, index4, event);
      closePopup();
    }, href: typeof href === "function" ? href(item, index4) : href, iconStart: icon, className: menuItemCn, ...restProps, children: text2 }, index4);
  };
  const disabled = ((_a = getRowDescriptor == null ? void 0 : getRowDescriptor(item, index3)) == null ? void 0 : _a.disabled) || (isRowDisabled == null ? void 0 : isRowDisabled(item, index3));
  const actions = getRowActions(item, index3);
  if (actions.length === 0) {
    return null;
  }
  return (0, import_jsx_runtime161.jsxs)("div", { className: actionsCn, children: [(0, import_jsx_runtime161.jsx)(Popup, { open: isPopupOpen, anchorRef, placement: DEFAULT_PLACEMENT3, onOutsideClick: closePopup, id: rowId, qa: tableQa && `${tableQa}-actions-popup`, children: (0, import_jsx_runtime161.jsx)(Menu, { className: menuCn, size: rowActionsSize, children: actions.map(renderPopupMenuItem) }) }), (0, import_jsx_runtime161.jsx)(Button2, { view: "flat-secondary", className: actionsButtonCn, onClick: togglePopup, size: rowActionsSize, ref: anchorRef, disabled, qa: tableQa && `${tableQa}-actions-trigger-${index3}`, "aria-label": i18n_default16("label-actions"), "aria-expanded": isPopupOpen, "aria-controls": rowId, children: (0, import_jsx_runtime161.jsx)(Icon, { data: Ellipsis_default }) })] });
};
function withTableActions(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableActions(${componentName})`;
  return _a = class extends React915.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "state", {
        popupOpen: false,
        popupData: null
      });
      __publicField(this, "renderBodyCell", (item, index3) => {
        const { getRowActions, rowActionsSize, renderRowActions, isRowDisabled, getRowDescriptor, qa } = this.props;
        if (renderRowActions) {
          return renderRowActions({ item, index: index3 });
        }
        return (0, import_jsx_runtime161.jsx)(DefaultRowActions, { index: index3, item, getRowActions, rowActionsSize, getRowDescriptor, isRowDisabled, tableQa: qa });
      });
      // eslint-disable-next-line @typescript-eslint/member-ordering
      __publicField(this, "enhanceColumns", (0, import_memoize2.default)((columns) => enhanceSystemColumn(columns, (systemColumn) => {
        systemColumn.template = this.renderBodyCell;
      })));
      // eslint-disable-next-line @typescript-eslint/member-ordering
      __publicField(this, "enhanceOnRowClick", (0, import_memoize2.default)((onRowClick) => {
        if (!onRowClick) {
          return onRowClick;
        }
        return (item, index3, event) => {
          if (
            // @ts-expect-error
            event.nativeEvent.target.closest(`.${menuCn}`)
          ) {
            return void 0;
          }
          if (
            // @ts-expect-error
            event.nativeEvent.target.matches(`.${actionsButtonCn}, .${actionsButtonCn} *`)
          ) {
            return void 0;
          }
          return onRowClick(item, index3, event);
        };
      }));
    }
    render() {
      const {
        renderRowActions,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        getRowActions,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        columns,
        onRowClick,
        ...restTableProps
      } = this.props;
      return (0, import_jsx_runtime161.jsx)(TableComponent, { ...restTableProps, columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick) });
    }
  }, __publicField(_a, "displayName", displayName), _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableCopy/withTableCopy.js
var import_jsx_runtime162 = __toESM(require_jsx_runtime(), 1);
var React916 = __toESM(require_react(), 1);
var import_memoize3 = __toESM(require_memoize(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableCopy/withTableCopy.css";
var b101 = block("table");
function withTableCopy(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableCopy(${componentName})`;
  return _a = class extends React916.Component {
    constructor() {
      super(...arguments);
      // eslint-disable-next-line @typescript-eslint/member-ordering
      __publicField(this, "enhanceColumns", (0, import_memoize3.default)((columns) => {
        return columns.map((column) => {
          const meta = column.meta;
          if (!meta || !meta.copy) {
            return column;
          }
          return {
            ...column,
            template: (item, index3) => {
              const originContent = Table.getBodyCellContent({
                ...column,
                placeholder: ""
              }, item, index3);
              if (!originContent) {
                return originContent;
              }
              let copyText2;
              if (typeof meta.copy === "function") {
                copyText2 = String(meta.copy(item, index3));
              } else if (typeof originContent === "string" || typeof originContent === "number") {
                copyText2 = String(originContent);
              }
              if (!copyText2) {
                return originContent;
              }
              return (0, import_jsx_runtime162.jsxs)("div", { className: b101("copy"), children: [(0, import_jsx_runtime162.jsx)("div", { className: b101("copy-content"), children: originContent }), (0, import_jsx_runtime162.jsx)("div", { className: b101("copy-button"), children: (0, import_jsx_runtime162.jsx)(ClipboardButton, { text: copyText2, size: "xs" }) })] });
            }
          };
        });
      }));
      // eslint-disable-next-line @typescript-eslint/member-ordering
      __publicField(this, "enhanceOnRowClick", (0, import_memoize3.default)((onRowClick) => {
        if (!onRowClick) {
          return onRowClick;
        }
        return (item, index3, event) => {
          const buttonClassName = b101("copy-button");
          if (
            // @ts-expect-error
            event.nativeEvent.target.matches(`.${buttonClassName}, .${buttonClassName} *`)
          ) {
            return void 0;
          }
          return onRowClick(item, index3, event);
        };
      }));
    }
    render() {
      const { columns, onRowClick, ...restTableProps } = this.props;
      return (0, import_jsx_runtime162.jsx)(TableComponent, { ...restTableProps, columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick) });
    }
  }, __publicField(_a, "displayName", displayName), _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/withTableSorting.js
var import_jsx_runtime164 = __toESM(require_jsx_runtime(), 1);
var React917 = __toESM(require_react(), 1);
var import_get4 = __toESM(require_get(), 1);
var import_memoize4 = __toESM(require_memoize(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/SortIndicator/SortIndicator.js
var import_jsx_runtime163 = __toESM(require_jsx_runtime(), 1);
function SortIndicator({ order }) {
  let icon;
  switch (order) {
    case "asc":
      icon = ArrowUp_default;
      break;
    case "desc":
      icon = ArrowDown_default;
      break;
    default:
      icon = ArrowUpArrowDown_default;
  }
  return (0, import_jsx_runtime163.jsx)(Icon, { data: icon, size: 14 });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/withTableSorting.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/withTableSorting.css";
var TableSortIndicator = SortIndicator;
var b102 = block("table");
function withTableSorting(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableSorting(${componentName})`;
  function defaultCompareFunction(itemA, itemB, columnId) {
    if ((0, import_get4.default)(itemA, columnId) === (0, import_get4.default)(itemB, columnId)) {
      return 0;
    } else {
      return (0, import_get4.default)(itemA, columnId) > (0, import_get4.default)(itemB, columnId) ? 1 : -1;
    }
  }
  return _a = class extends React917.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "state", {
        sort: this.props.defaultSortState ?? []
      });
      // eslint-disable-next-line @typescript-eslint/member-ordering
      __publicField(this, "enhanceColumns", (0, import_memoize4.default)((columns) => {
        return columns.map((column) => {
          const meta = column.meta;
          if (meta && meta.sort) {
            return {
              ...column,
              meta: {
                ...column.meta,
                _originalName: column.name
              },
              name: () => {
                const sortState = this.getSortState();
                let sortOrder;
                if (sortState.length > 0) {
                  const state = sortState.find((s) => s.column === column.id);
                  if (state) {
                    sortOrder = state.order;
                  }
                }
                const originContent = Table.getHeadCellContent(column);
                const content = [
                  (0, import_jsx_runtime164.jsx)("div", { className: b102("sort-content"), children: originContent }, "content"),
                  (0, import_jsx_runtime164.jsx)("div", { className: b102("sort-indicator"), children: (0, import_jsx_runtime164.jsx)(SortIndicator, { order: sortOrder }) }, "indicator")
                ];
                if (column.align === "right" || column.align === "end") {
                  content.reverse();
                }
                const onClick = this.handleColumnSortClick.bind(this, column);
                const onKeyDown = createOnKeyDownHandler(onClick);
                return (0, import_jsx_runtime164.jsx)("div", { role: "button", tabIndex: 0, className: b102("sort", { active: Boolean(sortOrder) }), onClick, onKeyDown, children: content });
              }
            };
          } else {
            return column;
          }
        });
      }));
      __publicField(this, "handleColumnSortClick", (column, event) => {
        const sortState = this.getSortState();
        const currentStateIndex = sortState.findIndex((state) => state.column === column.id);
        const currentState = sortState[currentStateIndex];
        const nextColumnSort = this.getNextSortForColumn(column, currentState);
        if (!event.shiftKey) {
          this.handleSortStateChange(nextColumnSort);
          return;
        }
        if (currentState) {
          this.handleSortStateChange([
            ...sortState.slice(0, currentStateIndex),
            ...sortState.slice(currentStateIndex + 1),
            ...nextColumnSort
          ]);
        } else {
          this.handleSortStateChange([...sortState, ...nextColumnSort]);
        }
      });
    }
    render() {
      const { columns, ...restTableProps } = this.props;
      return (0, import_jsx_runtime164.jsx)(TableComponent, { ...restTableProps, data: this.getSortedData(), columns: this.enhanceColumns(columns) });
    }
    getSortedData() {
      const { data, columns, disableDataSorting = this.isControlledState() } = this.props;
      const sortState = this.getSortState();
      if (disableDataSorting || sortState.length === 0) {
        return data;
      }
      return data.slice().sort((itemA, itemB) => {
        var _a2;
        let i = 0;
        while (i < sortState.length) {
          const state = sortState[i++];
          const column = columns.find((c) => c.id === state.column);
          const compareFunction = (_a2 = column == null ? void 0 : column.meta) == null ? void 0 : _a2.sort;
          if (!compareFunction) {
            continue;
          }
          const compareValue = typeof compareFunction === "function" ? compareFunction(itemA, itemB) : defaultCompareFunction(itemA, itemB, state.column);
          if (compareValue !== 0) {
            return state.order === "asc" ? compareValue : -compareValue;
          }
        }
        return 0;
      });
    }
    getSortState() {
      const { sortState } = this.props;
      const { sort } = this.state;
      return this.isControlledState() ? sortState : sort;
    }
    handleSortStateChange(newSortState) {
      const { onSortStateChange } = this.props;
      if (!this.isControlledState()) {
        this.setState({ sort: newSortState });
      }
      if (onSortStateChange) {
        onSortStateChange(newSortState);
      }
    }
    isControlledState() {
      const { sortState, onSortStateChange } = this.props;
      return Boolean(sortState && onSortStateChange);
    }
    getColumnDefaultSortOrder(column) {
      var _a2;
      return ((_a2 = column.meta) == null ? void 0 : _a2.defaultSortOrder) || "asc";
    }
    getNextSortForColumn(column, currentState) {
      const defaultOrder = this.getColumnDefaultSortOrder(column);
      const orderStack = defaultOrder === "desc" ? ["desc", "asc", void 0] : ["asc", "desc", void 0];
      const currentIndex = orderStack.indexOf(currentState == null ? void 0 : currentState.order);
      const nextIndex = (currentIndex + 1) % orderStack.length;
      const nextOrder = orderStack[nextIndex];
      if (!nextOrder) {
        return [];
      }
      return [{ column: column.id, order: nextOrder }];
    }
  }, __publicField(_a, "displayName", displayName), _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.js
var import_jsx_runtime174 = __toESM(require_jsx_runtime(), 1);
var React930 = __toESM(require_react(), 1);
var import_get5 = __toESM(require_get(), 1);
var import_isEqual3 = __toESM(require_isEqual(), 1);
var import_isString = __toESM(require_isString(), 1);
var import_last = __toESM(require_last(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup.js
var import_react36 = __toESM(require_react(), 1);
var import_jsx_runtime173 = __toESM(require_jsx_runtime(), 1);
var React929 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/TreeSelect/TreeSelect.js
var import_jsx_runtime172 = __toESM(require_jsx_runtime(), 1);
var React928 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/TreeList/TreeList.js
var import_jsx_runtime171 = __toESM(require_jsx_runtime(), 1);
var React926 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useListFilter.js
var React918 = __toESM(require_react(), 1);
var import_debounce = __toESM(require_debounce(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/isTreeItemGuard.js
var isTreeItemGuard = (item) => {
  return item !== null && typeof item === "object" && "data" in item;
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/defaultFilterItems.js
function defaultFilterItems(items, filterFn) {
  const getChildren = (result, item) => {
    if (isTreeItemGuard(item) && item.children) {
      const children2 = item.children.reduce(getChildren, []);
      if (children2.length) {
        result.push({ ...item, data: item.data, children: children2 });
      } else if (filterFn(item.data)) {
        result.push({ ...item, data: item.data, children: [] });
      }
    } else if (isTreeItemGuard(item) && filterFn(item.data)) {
      const { children: _children, ...newItem } = item;
      result.push(newItem);
    } else if (!isTreeItemGuard(item) && filterFn(item)) {
      result.push(item);
    }
    return result;
  };
  const res = items.reduce(getChildren, []);
  return res;
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useListFilter.js
function defaultFilterFn(value, item) {
  return item && typeof item === "object" && "title" in item && typeof item.title === "string" ? item.title.toLowerCase().includes((value || "").toLowerCase()) : true;
}
function useListFilter({ items: externalItems, initialFilterValue = "", filterItem, onFilterChange, filterItems, debounceTimeout = 300 }) {
  const filterRef = React918.useRef(null);
  const [filter, setFilter] = React918.useState(initialFilterValue);
  const [prevItems, setPrevItems] = React918.useState(externalItems);
  const [filteredItems, setFilteredItems] = React918.useState(externalItems);
  const filterItemsFn = React918.useCallback((nextFilterValue, items) => {
    if (filterItems) {
      return () => filterItems(nextFilterValue, items);
    }
    if (nextFilterValue) {
      const filterItemFn = filterItem || defaultFilterFn;
      return () => defaultFilterItems(items, (item) => filterItemFn(nextFilterValue, item));
    }
    return () => items;
  }, [filterItem, filterItems]);
  if (externalItems !== prevItems) {
    setFilteredItems(filterItemsFn(filter, externalItems));
    setPrevItems(externalItems);
  }
  const debouncedFn = React918.useCallback((0, import_debounce.default)((value) => setFilteredItems(filterItemsFn(value, externalItems)), debounceTimeout), [setFilteredItems, filterItemsFn, externalItems, debounceTimeout]);
  const { onFilterUpdate, reset } = React918.useMemo(() => {
    return {
      reset: () => {
        setFilter(initialFilterValue);
        onFilterChange == null ? void 0 : onFilterChange(initialFilterValue);
        debouncedFn(initialFilterValue);
      },
      onFilterUpdate: (nextFilterValue) => {
        setFilter(nextFilterValue);
        onFilterChange == null ? void 0 : onFilterChange(nextFilterValue);
        debouncedFn(nextFilterValue);
      }
    };
  }, [debouncedFn, initialFilterValue, onFilterChange]);
  return {
    filterRef,
    filter,
    reset,
    items: filteredItems,
    onFilterUpdate
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useList.js
var React922 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useFlattenListItems.js
var React919 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/getListItemId.js
var getListItemId = ({ item, groupedId, getItemId }) => {
  let id = groupedId;
  if (typeof getItemId === "function") {
    id = getItemId(isTreeItemGuard(item) ? item.data : item);
  } else if (item && typeof item === "object" && "id" in item && item.id) {
    id = item.id;
  }
  return id;
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/constants.js
var LIST_ITEM_DATA_ATR = "data-list-item";
var GROUPED_ID_SEPARATOR = "-";
var modToHeight = {
  s: [22, 44],
  m: [26, 44],
  l: [34, 52],
  xl: [44, 62]
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/groupItemId.js
var getGroupItemId = (index3, parentId) => parentId ? `${parentId}${GROUPED_ID_SEPARATOR}${index3}` : `${index3}`;
var parseGroupItemId = (id) => id.split(GROUPED_ID_SEPARATOR);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/flattenItems.js
function flattenItems({ items, getItemId, expandedById = {} }) {
  const rootIds = [];
  const getNestedIds = (order, item, index3, parentId) => {
    const groupedId = getGroupItemId(index3, parentId);
    const id = getListItemId({ groupedId, item, getItemId });
    if (!parentId) {
      rootIds.push(id);
    }
    order.push(id);
    if (isTreeItemGuard(item) && item.children) {
      if (!(id in expandedById && !expandedById[id])) {
        order.push(...item.children.reduce((acc, item2, idx) => getNestedIds(acc, item2, idx, id), []));
      }
    }
    return order;
  };
  const visibleFlattenIds = items.reduce((acc, item, index3) => getNestedIds(acc, item, index3), []);
  const idToFlattenIndex = {};
  for (const [item, index3] of visibleFlattenIds.entries()) {
    idToFlattenIndex[index3] = item;
  }
  return {
    rootIds,
    visibleFlattenIds,
    idToFlattenIndex
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useFlattenListItems.js
function useFlattenListItems({ items, expandedById, getItemId }) {
  const order = React919.useMemo(() => {
    return flattenItems({ items, expandedById, getItemId });
  }, [items, expandedById, getItemId]);
  return order;
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useListParsedState.js
var React920 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/getListParsedState.js
function getListParsedState({ items, defaultExpandedState = "expanded", getItemId }) {
  const result = {
    itemsById: {},
    groupsState: {},
    itemsState: {},
    initialState: {
      disabledById: {},
      selectedById: {},
      expandedById: {}
    }
  };
  const traverseItem = ({ item, index: index3 }) => {
    const id = getListItemId({ groupedId: String(index3), item, getItemId });
    result.itemsById[id] = item;
    if (!result.itemsState[id]) {
      result.itemsState[id] = {
        indentation: 0
      };
    }
    if (item && typeof item === "object") {
      if ("selected" in item && typeof item.selected === "boolean") {
        result.initialState.selectedById[id] = item.selected;
      }
      if ("disabled" in item && typeof item.disabled === "boolean") {
        result.initialState.disabledById[id] = item.disabled;
      }
    }
  };
  const traverseTreeItem = ({ item, index: index3, parentGroupedId, parentId }) => {
    const groupedId = getGroupItemId(index3, parentGroupedId);
    const id = getListItemId({ groupedId, item, getItemId });
    if (parentId) {
      result.groupsState[parentId].childrenIds.push(id);
    }
    result.itemsById[id] = item.data;
    if (!result.itemsState[id]) {
      result.itemsState[id] = {
        indentation: 0
      };
    }
    if (typeof parentId !== "undefined") {
      result.itemsState[id].parentId = parentId;
    }
    if (typeof item.selected !== "undefined") {
      result.initialState.selectedById[id] = item.selected;
    }
    if (typeof item.disabled !== "undefined") {
      result.initialState.disabledById[id] = item.disabled;
    }
    if (groupedId) {
      result.itemsState[id].indentation = parseGroupItemId(groupedId).length - 1;
    }
    if (item.children) {
      result.groupsState[id] = {
        childrenIds: []
      };
      if (result.initialState.expandedById) {
        if (typeof item.expanded === "undefined") {
          result.initialState.expandedById[id] = defaultExpandedState === "expanded";
        } else {
          result.initialState.expandedById[id] = item.expanded;
        }
      }
      item.children.forEach((treeItem, index4) => {
        traverseTreeItem({
          item: treeItem,
          index: index4,
          parentGroupedId: groupedId,
          parentId: id
        });
      });
    }
  };
  items.forEach((item, index3) => isTreeItemGuard(item) ? traverseTreeItem({ item, index: index3 }) : traverseItem({ item, index: index3 }));
  return result;
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useListParsedState.js
function useListParsedState({ items, getItemId: propsGetItemId, defaultExpandedState }) {
  const getItemId = React920.useRef(propsGetItemId).current;
  const result = React920.useMemo(() => {
    return getListParsedState({ items, getItemId, defaultExpandedState });
  }, [getItemId, defaultExpandedState, items]);
  return result;
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useListState.js
var React921 = __toESM(require_react(), 1);
var useListState = ({ initialState, withExpandedState }) => {
  const initialStateRef = React921.useRef(initialState);
  const needToUpdateInitValues = initialStateRef.current !== initialState;
  initialStateRef.current = initialState;
  const [disabledById, setDisabled] = React921.useState(() => (initialState == null ? void 0 : initialState.disabledById) ?? {});
  const [selectedById, setSelected] = React921.useState(() => (initialState == null ? void 0 : initialState.selectedById) ?? {});
  const [expandedById, setExpanded] = React921.useState(() => (initialState == null ? void 0 : initialState.expandedById) ?? {});
  const [activeItemId, setActiveItemId] = React921.useState(() => initialState == null ? void 0 : initialState.activeItemId);
  if (needToUpdateInitValues) {
    if (initialState == null ? void 0 : initialState.disabledById) {
      setDisabled((prevValues) => ({ ...initialState.disabledById, ...prevValues }));
    }
    if (initialState == null ? void 0 : initialState.selectedById) {
      setSelected((prevValues) => ({ ...initialState.selectedById, ...prevValues }));
    }
    if (initialState == null ? void 0 : initialState.expandedById) {
      setExpanded((prevValues) => ({ ...initialState.expandedById, ...prevValues }));
    }
    setActiveItemId((prevValue) => prevValue ?? (initialState == null ? void 0 : initialState.activeItemId));
  }
  const result = {
    disabledById,
    selectedById,
    activeItemId,
    setDisabled,
    setSelected,
    setActiveItemId
  };
  if (withExpandedState) {
    result.expandedById = expandedById;
    result.setExpanded = setExpanded;
  }
  return result;
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useList.js
var useList = ({ items, getItemId, defaultExpandedState = "expanded", withExpandedState = true, initialState: initialValues, controlledState }) => {
  const { itemsById, groupsState, itemsState, initialState } = useListParsedState({
    items,
    getItemId,
    defaultExpandedState
  });
  const initValues = React922.useMemo(() => {
    return {
      expandedById: { ...initialState.expandedById, ...initialValues == null ? void 0 : initialValues.expandedById },
      selectedById: { ...initialState.selectedById, ...initialValues == null ? void 0 : initialValues.selectedById },
      disabledById: { ...initialState.disabledById, ...initialValues == null ? void 0 : initialValues.disabledById },
      activeItemId: initialValues == null ? void 0 : initialValues.activeItemId
    };
  }, [
    initialState.disabledById,
    initialState.expandedById,
    initialState.selectedById,
    initialValues == null ? void 0 : initialValues.activeItemId,
    initialValues == null ? void 0 : initialValues.disabledById,
    initialValues == null ? void 0 : initialValues.expandedById,
    initialValues == null ? void 0 : initialValues.selectedById
  ]);
  const innerState = useListState({
    initialState: initValues,
    withExpandedState
  });
  const realState = React922.useMemo(() => {
    if (controlledState) {
      return {
        ...innerState,
        ...controlledState
      };
    }
    return innerState;
  }, [controlledState, innerState]);
  const { visibleFlattenIds, idToFlattenIndex, rootIds } = useFlattenListItems({
    items,
    /**
     * By default controlled from list items declaration state
     */
    expandedById: realState.expandedById,
    getItemId
  });
  return {
    state: realState,
    structure: {
      rootIds,
      items,
      visibleFlattenIds,
      idToFlattenIndex,
      itemsById,
      groupsState,
      itemsState
    }
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useListKeydown.js
var React923 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/findNextIndex.js
var findNextIndex = ({ list, index: index3, step, disabledItemsById = {} }) => {
  const dataLength = list.length;
  let currentIndex = (index3 + dataLength) % dataLength;
  for (let i = 0; i < dataLength; i += 1) {
    const id = list[currentIndex];
    if (id && !disabledItemsById[id]) {
      return currentIndex;
    }
    currentIndex = (currentIndex + dataLength + step) % dataLength;
  }
  return void 0;
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/scrollToListItem.js
var scrollToListItem = (itemId, containerElement) => {
  var _a;
  if (document) {
    const element = (containerElement || document).querySelector(`[${LIST_ITEM_DATA_ATR}="${itemId}"]`);
    if (element) {
      (_a = element.scrollIntoView) == null ? void 0 : _a.call(element, {
        block: "nearest"
      });
    }
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/hooks/useListKeydown.js
var useListKeydown = ({ containerRef, onItemClick, enabled, list }) => {
  const activateItem = React923.useCallback((index3, scrollTo = true) => {
    var _a, _b;
    if (typeof index3 === "number" && list.structure.visibleFlattenIds[index3]) {
      if (scrollTo) {
        scrollToListItem(list.structure.visibleFlattenIds[index3], containerRef == null ? void 0 : containerRef.current);
      }
      (_b = (_a = list.state).setActiveItemId) == null ? void 0 : _b.call(_a, list.structure.visibleFlattenIds[index3]);
    }
  }, [list.structure.visibleFlattenIds, list.state, containerRef]);
  const handleKeyMove = React923.useCallback((event, step, defaultItemIndex = 0) => {
    event.preventDefault();
    const maybeIndex = typeof list.state.activeItemId === "string" ? list.structure.visibleFlattenIds.findIndex((i) => i === list.state.activeItemId) : -1;
    const nextIndex = findNextIndex({
      list: list.structure.visibleFlattenIds,
      index: (maybeIndex > -1 ? maybeIndex : defaultItemIndex) + step,
      step: Math.sign(step),
      disabledItemsById: list.state.disabledById
    });
    activateItem(nextIndex);
  }, [
    activateItem,
    list.state.activeItemId,
    list.state.disabledById,
    list.structure.visibleFlattenIds
  ]);
  React923.useLayoutEffect(() => {
    const anchor = containerRef == null ? void 0 : containerRef.current;
    if (enabled || !anchor) {
      return void 0;
    }
    const handleKeyDown = (event) => {
      switch (event.key) {
        case KeyCode.ARROW_DOWN: {
          handleKeyMove(event, 1, -1);
          break;
        }
        case KeyCode.ARROW_UP: {
          handleKeyMove(event, -1);
          break;
        }
        case KeyCode.SPACEBAR:
        case KeyCode.ENTER: {
          if (list.state.activeItemId && !list.state.disabledById[list.state.activeItemId]) {
            event.preventDefault();
            onItemClick == null ? void 0 : onItemClick({ id: list.state.activeItemId });
          }
          break;
        }
        default: {
        }
      }
    };
    anchor.addEventListener("keydown", handleKeyDown);
    return () => {
      anchor.removeEventListener("keydown", handleKeyDown);
    };
  }, [
    containerRef,
    enabled,
    handleKeyMove,
    list.state.activeItemId,
    list.state.disabledById,
    onItemClick
  ]);
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemView/ListItemView.js
var import_jsx_runtime167 = __toESM(require_jsx_runtime(), 1);
var React924 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemView/ListItemViewContent.js
var import_jsx_runtime166 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemExpandIcon/ListItemExpandIcon.js
var import_jsx_runtime165 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemExpandIcon/ListItemExpandIcon.css";
var b103 = block("list-item-expand-icon");
var ListItemExpandIcon = ({ expanded, behavior = "action", disabled }) => {
  return (0, import_jsx_runtime165.jsx)(ArrowToggle, { direction: getIconDirection({ behavior, expanded }), className: b103(null, colorText({ color: disabled ? "hint" : void 0 })), size: 16 });
};
function getIconDirection({ behavior, expanded }) {
  if (expanded && behavior === "action") {
    return "top";
  } else if (expanded && behavior === "state") {
    return "bottom";
  } else if (expanded && behavior === "state-inverse") {
    return "bottom";
  } else if (behavior === "action") {
    return "bottom";
  } else if (behavior === "state") {
    return "right";
  } else if (behavior === "state-inverse") {
    return "left";
  }
  return "bottom";
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemView/styles.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemView/ListItemView.css";
var b104 = block("list-item-view");

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemView/ListItemViewContent.js
var isListItemContentPropsGuard = (props) => {
  return typeof props === "object" && props !== null && "title" in props;
};
var ListItemViewSlot = ({ children: children2, indentation = 1, className, ...props }) => {
  return (0, import_jsx_runtime166.jsx)(Flex, { width: indentation * 16, className: b104("slot", className), ...props, children: children2 });
};
var renderSafeIndentation = (indentation) => {
  if (indentation && indentation >= 1) {
    return (0, import_jsx_runtime166.jsx)(ListItemViewSlot, { indentation: Math.floor(indentation) });
  }
  return null;
};
var ListItemViewContent2 = ({ startSlot, subtitle, endSlot, disabled, hasSelectionIcon, isGroup, indentation, expanded, selected, title, expandIconPlacement = "start", renderExpandIcon: RenderExpandIcon = ListItemExpandIcon }) => {
  const expandIconNode = isGroup ? (0, import_jsx_runtime166.jsx)(RenderExpandIcon, { behavior: expandIconPlacement === "start" ? "state" : "action", expanded, disabled }) : null;
  return (0, import_jsx_runtime166.jsxs)(Flex, { alignItems: "center", justifyContent: "space-between", gap: "4", className: b104("content"), children: [(0, import_jsx_runtime166.jsxs)(Flex, { gap: "2", alignItems: "center", grow: true, children: [hasSelectionIcon && (0, import_jsx_runtime166.jsx)(
    ListItemViewSlot,
    { children: selected ? (0, import_jsx_runtime166.jsx)(Icon, { data: Check_default, size: 16, className: colorText({ color: "info" }) }) : null }
  ), renderSafeIndentation(indentation), expandIconPlacement === "start" && expandIconNode, startSlot, (0, import_jsx_runtime166.jsxs)("div", { className: b104("main-content"), children: [typeof title === "string" ? (0, import_jsx_runtime166.jsx)(Text, { ellipsis: true, color: disabled ? "hint" : void 0, variant: isGroup ? "subheader-1" : void 0, children: title }) : title, typeof subtitle === "string" ? (0, import_jsx_runtime166.jsx)(Text, { ellipsis: true, color: disabled ? "hint" : "secondary", children: subtitle }) : subtitle] })] }), (0, import_jsx_runtime166.jsxs)(Flex, { gap: "2", children: [expandIconPlacement === "end" && expandIconNode, endSlot] })] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListItemView/ListItemView.js
var ListItemView2 = React924.forwardRef(function ListItemView3({ id, as: asProps, size: size5 = "m", active, selected, disabled, selectionViewType = "multiple", activeOnHover: propsActiveOnHover, className, height, dragging, style: propsStyle, content, role = "option", onClick: _onClick, ...rest }, ref2) {
  const Tag = asProps || "li";
  const onClick = disabled ? void 0 : _onClick;
  const activeOnHover = typeof propsActiveOnHover === "boolean" ? propsActiveOnHover : Boolean(onClick);
  const style3 = {
    minHeight: `var(--g-list-item-height, ${height ?? modToHeight[size5][Number(Boolean(isListItemContentPropsGuard(content) ? content == null ? void 0 : content.subtitle : false))]}px)`,
    ...propsStyle
  };
  return (0, import_jsx_runtime167.jsx)(Tag, { [LIST_ITEM_DATA_ATR]: id, role, "aria-selected": selected, onClick, className: b104({
    active: dragging || active,
    selected: selected && selectionViewType === "single",
    activeOnHover,
    radius: size5,
    size: size5,
    dragging,
    clickable: Boolean(onClick)
  }, spacing({ px: 2 }, className)), style: style3, ref: ref2, ...rest, children: isListItemContentPropsGuard(content) ? (0, import_jsx_runtime167.jsx)(ListItemViewContent2, { ...content, hasSelectionIcon: selectionViewType === "multiple", selected, disabled }) : content });
});

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListRecursiveRenderer/ListRecursiveRenderer.js
var import_jsx_runtime168 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListRecursiveRenderer/ListRecursiveRenderer.css";
var b105 = block("list-recursive-renderer");
function ListItemRecursiveRenderer({ id, itemSchema, list, ...props }) {
  var _a;
  const node = props.children(id, list.structure.idToFlattenIndex[id]);
  if (isTreeItemGuard(itemSchema) && itemSchema.children) {
    const isExpanded = list.state.expandedById && id in list.state.expandedById ? list.state.expandedById[id] : true;
    return (0, import_jsx_runtime168.jsxs)("ul", { style: props.style, className: b105(null, props.className), role: "group", children: [node, isExpanded && Boolean((_a = list.structure.groupsState[id]) == null ? void 0 : _a.childrenIds) && itemSchema.children.map((item, index3) => (0, import_jsx_runtime168.jsx)(ListItemRecursiveRenderer, { list, id: list.structure.groupsState[id].childrenIds[index3], itemSchema: item, ...props }, index3))] });
  }
  return node;
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListContainerView/ListContainerView.js
var import_jsx_runtime169 = __toESM(require_jsx_runtime(), 1);
var React925 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListContainerView/ListContainerView.css";
var b106 = block("list-container-view");
var ListContainerView = React925.forwardRef(function ListContainerView2({ as = "div", role = "listbox", children: children2, id, className, fixedHeight, extraProps, qa, style: style3 }, ref2) {
  return (0, import_jsx_runtime169.jsx)(Flex, { qa, as, direction: "column", ref: ref2, grow: true, tabIndex: -1, id, role, style: style3, className: b106({ "fixed-height": fixedHeight }, className), ...extraProps, children: children2 });
});

// node_modules/@gravity-ui/uikit/build/esm/components/useList/components/ListContainer/ListContainer.js
var import_jsx_runtime170 = __toESM(require_jsx_runtime(), 1);
function ListContainer2({ containerRef, renderItem, list, ...props }) {
  return (0, import_jsx_runtime170.jsx)(ListContainerView, { ref: containerRef, ...props, children: list.structure.items.map((item, index3) => (0, import_jsx_runtime170.jsx)(ListItemRecursiveRenderer, { itemSchema: item, id: list.structure.rootIds[index3], list, children: renderItem }, index3)) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/getListItemClickHandler.js
var getListItemClickHandler = ({ list, multiple }) => {
  const onItemClick = ({ id }) => {
    if (list.state.disabledById[id])
      return;
    list.state.setActiveItemId(id);
    if (list.state.expandedById && id in list.state.expandedById && list.state.setExpanded) {
      list.state.setExpanded((prevState) => ({
        ...prevState,
        [id]: !prevState[id]
        // expanded by id
      }));
    } else {
      list.state.setSelected((prevState) => ({
        ...multiple ? prevState : {},
        [id]: multiple ? !prevState[id] : true
        // always select on click in single select variant
      }));
    }
  };
  return onItemClick;
};

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/getListItemQa.js
var getListItemQa = (qa, id) => `${qa}-${id}`;

// node_modules/@gravity-ui/uikit/build/esm/components/useList/utils/getItemRenderState.js
var getItemRenderState = ({ qa, list, onItemClick, mapItemDataToContentProps: mapItemDataToContentProps2, size: size5 = "m", multiple = false, id }) => {
  var _a, _b;
  const context = {
    ...list.structure.itemsState[id],
    ...list.structure.groupsState[id],
    isLastItem: id === list.structure.visibleFlattenIds[list.structure.visibleFlattenIds.length - 1]
  };
  const props = {
    id,
    size: size5,
    selected: Boolean(list.state.selectedById[id]),
    disabled: Boolean((_a = list.state.disabledById) == null ? void 0 : _a[id]),
    active: id === list.state.activeItemId,
    onClick: onItemClick ? (e) => onItemClick({ id }, e) : void 0,
    selectionViewType: Boolean(multiple) && !context.childrenIds ? "multiple" : "single",
    // no multiple selection at group nodes
    content: {
      expanded: (_b = list.state.expandedById) == null ? void 0 : _b[id],
      indentation: context.indentation,
      isGroup: list.state.expandedById && id in list.state.expandedById,
      ...mapItemDataToContentProps2(list.structure.itemsById[id])
    }
  };
  if (qa) {
    props.qa = getListItemQa(qa, id);
  }
  return { data: list.structure.itemsById[id], props, context };
};

// node_modules/@gravity-ui/uikit/build/esm/components/TreeList/TreeList.js
var b107 = block("tree-list");
var TreeList = ({ qa, id, size: size5 = "m", className, list, multiple, containerRef: propsContainerRef, renderItem: propsRenderItem, renderContainer = ListContainer2, onItemClick: propsOnItemClick, mapItemDataToContentProps: mapItemDataToContentProps2 }) => {
  const uniqId = useUniqId();
  const treeListId = id ?? uniqId;
  const containerRefLocal = React926.useRef(null);
  const containerRef = propsContainerRef ?? containerRefLocal;
  const onItemClick = React926.useMemo(() => {
    if (propsOnItemClick === null) {
      return void 0;
    }
    const handler = (arg, e) => {
      const payload = { id: arg.id, list };
      if (propsOnItemClick) {
        propsOnItemClick == null ? void 0 : propsOnItemClick(payload, e);
      } else {
        const baseOnClick = getListItemClickHandler({ list, multiple });
        baseOnClick(payload, e);
      }
    };
    return handler;
  }, [propsOnItemClick, list, multiple]);
  useListKeydown({
    containerRef,
    onItemClick,
    list
  });
  const renderItem = (itemId, index3, renderContainerProps) => {
    const renderState = getItemRenderState({
      qa,
      id: itemId,
      size: size5,
      multiple,
      mapItemDataToContentProps: mapItemDataToContentProps2,
      onItemClick,
      list
    });
    if (propsRenderItem) {
      return propsRenderItem({
        id: itemId,
        data: renderState.data,
        props: renderState.props,
        context: renderState.context,
        index: index3,
        renderContainerProps,
        list
      });
    }
    return (0, import_jsx_runtime171.jsx)(ListItemView2, { ...renderState.props, ...renderContainerProps });
  };
  return renderContainer({
    qa,
    id: `list-${treeListId}`,
    size: size5,
    containerRef,
    className: b107(null, className),
    list,
    renderItem
  });
};

// node_modules/@gravity-ui/uikit/build/esm/components/TreeSelect/hooks/useControlledValue.js
var React927 = __toESM(require_react(), 1);
var prepareParams = (selectedById) => Object.entries(selectedById).reduce((acc, [id, value]) => {
  if (value) {
    acc.push(id);
  }
  return acc;
}, []);
var useControlledValue = ({ defaultValue = [], value: valueProps, onUpdate }) => {
  const [innerValue, setInnerValue] = React927.useState(defaultValue);
  const value = valueProps ?? innerValue;
  const uncontrolled = !valueProps;
  const result = React927.useMemo(() => {
    const selectedById = value.reduce((acc, val) => {
      acc[val] = true;
      return acc;
    }, {});
    const setSelected = (payload) => {
      const nextValue = typeof payload === "function" ? payload(selectedById) : payload;
      const preparedValue = prepareParams(nextValue);
      if (uncontrolled) {
        setInnerValue(preparedValue);
      } else {
        onUpdate == null ? void 0 : onUpdate(preparedValue);
      }
    };
    return {
      value,
      selectedById,
      setSelected,
      /**
       * Available only if `uncontrolled` component valiant
       */
      setInnerValue: uncontrolled ? setInnerValue : void 0
    };
  }, [onUpdate, uncontrolled, value]);
  return result;
};

// node_modules/@gravity-ui/uikit/build/esm/components/TreeSelect/TreeSelect.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/TreeSelect/TreeSelect.css";
var b108 = block("tree-select");
var defaultItemRenderer = (renderState) => {
  return (0, import_jsx_runtime172.jsx)(ListItemView2, { ...renderState.props, ...renderState.renderContainerProps });
};
var TreeSelect = React928.forwardRef(function TreeSelect2({ id, qa, title, placement, slotBeforeListBody, slotAfterListBody, size: size5 = "m", defaultOpen, width, containerRef: propsContainerRef, className, containerClassName, popupClassName, open: propsOpen, multiple, popupWidth, popupDisablePortal, items, value: propsValue, defaultValue, placeholder: placeholder2, disabled = false, withExpandedState = true, defaultExpandedState = "expanded", hasClear, errorMessage: propsErrorMessage, errorPlacement: propsErrorPlacement, validationState: propsValidationState, onClose, onOpenChange, onUpdate, renderControl, renderItem = defaultItemRenderer, renderContainer, mapItemDataToContentProps: mapItemDataToContentProps2, onFocus, onBlur, getItemId, onItemClick }, ref2) {
  const mobile = useMobile();
  const uniqId = useUniqId();
  const treeSelectId = id ?? uniqId;
  const popupId = `tree-select-popup-${treeSelectId}`;
  const controlWrapRef = React928.useRef(null);
  const controlRef = React928.useRef(null);
  const containerRefLocal = React928.useRef(null);
  const containerRef = propsContainerRef ?? containerRefLocal;
  const { errorMessage, errorPlacement, validationState } = errorPropsMapper({
    errorMessage: propsErrorMessage,
    errorPlacement: propsErrorPlacement || "outside",
    validationState: propsValidationState
  });
  const errorMessageId = useUniqId();
  const isErrorStateVisible = validationState === "invalid";
  const isErrorMsgVisible = isErrorStateVisible && Boolean(errorMessage) && errorPlacement === "outside";
  const isErrorIconVisible = isErrorStateVisible && Boolean(errorMessage) && errorPlacement === "inside";
  const handleControlRef = useForkRef(ref2, controlRef);
  const { toggleOpen, open } = useOpenState({
    defaultOpen,
    onClose,
    onOpenChange,
    open: propsOpen
  });
  const { value, selectedById, setSelected } = useControlledValue({
    value: propsValue,
    defaultValue,
    onUpdate
  });
  const list = useList({
    controlledState: {
      selectedById,
      setSelected
    },
    items,
    getItemId,
    defaultExpandedState,
    withExpandedState
  });
  const handleItemClick = React928.useMemo(() => {
    if (onItemClick === null) {
      return void 0;
    }
    const handler = (arg, e) => {
      const payload = { id: arg.id, list };
      if (onItemClick) {
        onItemClick == null ? void 0 : onItemClick(payload, e);
      } else {
        const baseOnClick = getListItemClickHandler({ list, multiple });
        baseOnClick(payload, e);
        const isGroup = list.state.expandedById && arg.id in list.state.expandedById;
        if (!multiple && !isGroup) {
          toggleOpen(false);
        }
      }
    };
    return handler;
  }, [onItemClick, list, multiple, toggleOpen]);
  React928.useLayoutEffect(() => {
    var _a;
    if (open) {
      (_a = containerRef.current) == null ? void 0 : _a.focus({ preventScroll: true });
    }
    return () => list.state.setActiveItemId(void 0);
  }, [open]);
  const handleClose = React928.useCallback(() => toggleOpen(false), [toggleOpen]);
  const { focusWithinProps } = useFocusWithin({
    onFocusWithin: onFocus,
    onBlurWithin: React928.useCallback((e) => {
      onBlur == null ? void 0 : onBlur(e);
      handleClose();
    }, [handleClose, onBlur])
  });
  const controlProps = {
    list,
    open,
    placeholder: placeholder2,
    toggleOpen,
    clearValue: () => list.state.setSelected({}),
    ref: handleControlRef,
    size: size5,
    value,
    disabled,
    id: treeSelectId,
    activeItemId: list.state.activeItemId,
    title,
    errorMessage: isErrorIconVisible ? errorMessage : void 0,
    errorPlacement,
    validationState,
    hasClear,
    isErrorVisible: isErrorStateVisible
  };
  const togglerNode = renderControl ? renderControl(controlProps) : (0, import_jsx_runtime172.jsx)(SelectControl, { ...controlProps, selectedOptionsContent: React928.Children.toArray(value.map((itemId) => itemId in list.structure.itemsById ? mapItemDataToContentProps2(list.structure.itemsById[itemId]).title : "")).join(", "), view: "normal", pin: "round-round", popupId, selectId: treeSelectId });
  const mods = {
    ...width === "max" && { width }
  };
  const inlineStyles = {};
  if (typeof width === "number") {
    inlineStyles.width = width;
  }
  return (0, import_jsx_runtime172.jsxs)("div", { ref: controlWrapRef, ...focusWithinProps, className: b108(mods, className), style: inlineStyles, children: [togglerNode, (0, import_jsx_runtime172.jsxs)(SelectPopup, { ref: controlWrapRef, className: b108("popup", { size: size5 }, popupClassName), controlRef, width: popupWidth, placement, open, handleClose, disablePortal: popupDisablePortal, mobile, id: popupId, children: [slotBeforeListBody, (0, import_jsx_runtime172.jsx)(TreeList, { list, size: size5, className: b108("list", containerClassName), qa, multiple, id: `list-${treeSelectId}`, containerRef, onItemClick: handleItemClick, renderContainer, mapItemDataToContentProps: mapItemDataToContentProps2, renderItem: renderItem ?? defaultItemRenderer }), slotAfterListBody] }), (0, import_jsx_runtime172.jsx)(OuterAdditionalContent, { errorMessage: isErrorMsgVisible ? errorMessage : null, errorMessageId })] });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/i18n/en.json
var en_default19 = {
  button_apply: "Apply",
  button_reset: "Reset",
  button_switcher: "Columns"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/i18n/ru.json
var ru_default19 = {
  button_apply: "Применить",
  button_reset: "Сбросить",
  button_switcher: "Колонки"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/i18n/index.js
var COMPONENT16 = "TableColumnSetupInner";
var i18n_default17 = addComponentKeysets({ en: en_default19, ru: ru_default19 }, COMPONENT16);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup.css";
var b109 = block("inner-table-column-setup");
var controlsCn = b109("controls");
var filterInputCn = b109("filter-input");
var emptyPlaceholderCn = b109("empty-placeholder");
var reorderArray = (list, startIndex, endIndex) => {
  const result = [...list];
  const [removed] = result.splice(startIndex, 1);
  result.splice(endIndex, 0, removed);
  return result;
};
var prepareStickyState = (itemsById, visibleFlattenIds) => {
  let lastStickyStartIdx = 0;
  for (; lastStickyStartIdx !== visibleFlattenIds.length; lastStickyStartIdx++) {
    const visibleFlattenId = visibleFlattenIds[lastStickyStartIdx];
    const item = itemsById[visibleFlattenId];
    if ((item == null ? void 0 : item.sticky) !== "left" && (item == null ? void 0 : item.sticky) !== "start") {
      break;
    }
  }
  let firstStickyEndIdx = visibleFlattenIds.length;
  for (; firstStickyEndIdx !== 0; firstStickyEndIdx--) {
    const visibleFlattenId = visibleFlattenIds[firstStickyEndIdx - 1];
    const item = itemsById[visibleFlattenId];
    if ((item == null ? void 0 : item.sticky) !== "right" && (item == null ? void 0 : item.sticky) !== "end") {
      break;
    }
  }
  return {
    stickyStartItemIdList: visibleFlattenIds.slice(0, lastStickyStartIdx),
    sortableItemIdList: visibleFlattenIds.slice(lastStickyStartIdx, firstStickyEndIdx),
    stickyEndItemIdList: visibleFlattenIds.slice(firstStickyEndIdx)
  };
};
var prepareValue = (tableColumnItems) => {
  const selectedIds = [];
  tableColumnItems.forEach(({ id, isSelected }) => {
    if (isSelected) {
      selectedIds.push(id);
    }
  });
  return selectedIds;
};
var RENDER_DRAG_DISABLED_CONTAINER_PROPS = { isDragDisabled: true };
var useDndRenderContainer = ({ onDragEnd: onDragEnd3, renderControls }) => {
  const uniqId = useUniqId();
  const dndRenderContainer = ({ renderItem, list, containerRef, id, className }) => {
    const renderDndActiveItem = (provided, snapshot, rubric) => {
      const renderContainerProps = {
        provided,
        snapshot
      };
      return renderItem(list.structure.visibleFlattenIds[rubric.source.index], rubric.source.index, renderContainerProps);
    };
    const { stickyStartItemIdList, sortableItemIdList, stickyEndItemIdList } = prepareStickyState(list.structure.itemsById, list.structure.visibleFlattenIds);
    const stickyStartItemList = stickyStartItemIdList.map((visibleFlattenId, idx) => {
      return renderItem(visibleFlattenId, idx, RENDER_DRAG_DISABLED_CONTAINER_PROPS);
    });
    const sortableItemList = sortableItemIdList.map((visibleFlattenId, idx) => {
      return renderItem(visibleFlattenId, idx + stickyStartItemIdList.length);
    });
    const stickyEndItemList = stickyEndItemIdList.map((visibleFlattenId, idx) => {
      return renderItem(visibleFlattenId, stickyStartItemList.length + sortableItemList.length + idx, RENDER_DRAG_DISABLED_CONTAINER_PROPS);
    });
    return (0, import_jsx_runtime173.jsxs)(React929.Fragment, { children: [(0, import_jsx_runtime173.jsxs)(ListContainerView, { ref: containerRef, id, className, children: [stickyStartItemList, (0, import_jsx_runtime173.jsx)(DragDropContext, { onDragEnd: onDragEnd3, children: (0, import_jsx_runtime173.jsx)(ConnectedDroppable, { droppableId: uniqId, renderClone: renderDndActiveItem, children: (droppableProvided) => {
      return (0, import_jsx_runtime173.jsxs)("div", { ...droppableProvided.droppableProps, ref: droppableProvided.innerRef, children: [sortableItemList, droppableProvided.placeholder] });
    } }) }), stickyEndItemList] }), (0, import_jsx_runtime173.jsx)("div", { className: controlsCn, children: renderControls() })] });
  };
  return dndRenderContainer;
};
var useDndRenderItem = (sortable) => {
  const renderDndItem = ({ data: item, props, index: index3, renderContainerProps }) => {
    const isDragDisabled = sortable === false || (renderContainerProps == null ? void 0 : renderContainerProps.isDragDisabled) === true;
    const endSlot = isDragDisabled ? void 0 : (0, import_jsx_runtime173.jsx)(Icon, { data: Grip_default, size: 16 });
    const startSlot = item.isRequired ? (0, import_jsx_runtime173.jsx)(Icon, { data: Lock_default }) : void 0;
    const selected = item.isRequired ? false : props.selected;
    const commonProps = {
      ...props,
      selected,
      selectionViewType: item.isRequired ? "single" : "multiple",
      content: {
        ...props.content,
        startSlot,
        endSlot
      }
    };
    if (isDragDisabled) {
      return (0, import_react36.createElement)(ListItemView2, { ...commonProps, key: commonProps.id });
    }
    const renderItem = (provided, snapshot) => (0, import_jsx_runtime173.jsx)(ListItemView2, { ...commonProps, ...provided.draggableProps, ...provided.dragHandleProps, ref: provided.innerRef, dragging: snapshot.isDragging });
    if ((renderContainerProps == null ? void 0 : renderContainerProps.provided) && renderContainerProps.snapshot) {
      return renderItem(renderContainerProps.provided, renderContainerProps.snapshot);
    }
    return (0, import_jsx_runtime173.jsx)(PublicDraggable, { draggableId: props.id, index: index3, isDragDisabled, children: renderItem }, `item-key-${props.id}`);
  };
  return renderDndItem;
};
var mapItemDataToContentProps = (item) => {
  return {
    title: item.title
  };
};
var defaultFilterSettingsFn = (value, item) => {
  return typeof item.title === "string" ? item.title.toLowerCase().includes(value.trim().toLowerCase()) : true;
};
var useEmptyRenderContainer = (placeholder2) => {
  const emptyRenderContainer = () => (0, import_jsx_runtime173.jsx)(Text, { className: emptyPlaceholderCn, children: placeholder2 });
  return emptyRenderContainer;
};
var TableColumnSetup = (props) => {
  const { renderSwitcher, popupWidth, popupPlacement, items: propsItems, onUpdate: propsOnUpdate, sortable, renderControls, className, defaultItems = propsItems, showResetButton: propsShowResetButton, filterable, filterPlaceholder, filterEmptyMessage, filterSettings = defaultFilterSettingsFn } = props;
  const [open, setOpen] = React929.useState(false);
  const [sortingEnabled, setSortingEnabled] = React929.useState(sortable);
  const [prevSortingEnabled, setPrevSortingEnabled] = React929.useState(sortable);
  if (sortable !== prevSortingEnabled) {
    setPrevSortingEnabled(sortable);
    setSortingEnabled(sortable);
  }
  const [items, setItems] = React929.useState(propsItems);
  const [prevPropsItems, setPrevPropsItems] = React929.useState(propsItems);
  if (propsItems !== prevPropsItems) {
    setPrevPropsItems(propsItems);
    setItems(propsItems);
  }
  const filterState = useListFilter({ items, filterItem: filterSettings, debounceTimeout: 0 });
  const onApply = () => {
    const newSettings = items.map(({ id, isSelected }) => ({ id, isSelected }));
    propsOnUpdate(newSettings);
    onOpenChange(false);
  };
  const DefaultApplyButton = () => (0, import_jsx_runtime173.jsx)(Button2, { view: "action", width: "max", onClick: onApply, children: i18n_default17("button_apply") });
  const onDragEnd3 = ({ destination, source }) => {
    if ((destination == null ? void 0 : destination.index) !== void 0 && (destination == null ? void 0 : destination.index) !== source.index) {
      setItems((prevItems) => {
        return reorderArray(prevItems, source.index, destination.index);
      });
    }
  };
  const showResetButton = typeof propsShowResetButton === "function" ? propsShowResetButton(items) : propsShowResetButton;
  const dndRenderContainer = useDndRenderContainer({
    onDragEnd: onDragEnd3,
    renderControls: () => renderControls ? renderControls({ DefaultApplyButton, onApply }) : (0, import_jsx_runtime173.jsxs)(Flex, { gapRow: 1, direction: "column", className: controlsCn, children: [showResetButton && (0, import_jsx_runtime173.jsx)(Button2, { onClick: () => {
      setItems(defaultItems);
    }, width: "max", children: i18n_default17("button_reset") }), (0, import_jsx_runtime173.jsx)(DefaultApplyButton, {})] })
  });
  const dndRenderItem = useDndRenderItem(sortingEnabled);
  const renderControl = ({ toggleOpen }) => {
    const onKeyDown = createOnKeyDownHandler(toggleOpen);
    return (renderSwitcher == null ? void 0 : renderSwitcher({ onClick: toggleOpen, onKeyDown })) || (0, import_jsx_runtime173.jsxs)(Button2, { onClick: toggleOpen, onKeyDown, children: [(0, import_jsx_runtime173.jsx)(Icon, { data: Gear_default }), i18n_default17("button_switcher")] });
  };
  const onOpenChange = (open2) => {
    setOpen(open2);
    if (open2 === false) {
      setItems(propsItems);
      setSortingEnabled(sortable);
      filterState.reset();
    }
  };
  const onUpdate = (selectedItemsIds) => {
    setItems((prevItems) => {
      return prevItems.map((item) => ({
        ...item,
        isSelected: item.isRequired || selectedItemsIds.includes(item.id)
      }));
    });
  };
  const value = React929.useMemo(() => prepareValue(items), [items]);
  const emptyRenderContainer = useEmptyRenderContainer(filterEmptyMessage);
  const onFilterValueUpdate = (value2) => {
    filterState.onFilterUpdate(value2);
    setSortingEnabled(!value2.length);
  };
  const slotBeforeListBody = filterable ? (0, import_jsx_runtime173.jsx)(TextInput, { size: "m", view: "clear", placeholder: filterPlaceholder, value: filterState.filter, className: filterInputCn, onUpdate: onFilterValueUpdate, hasClear: true }) : null;
  const renderContainer = filterState.filter && !filterState.items.length ? emptyRenderContainer : dndRenderContainer;
  return (0, import_jsx_runtime173.jsx)(TreeSelect, { className: b109(null, className), mapItemDataToContentProps, multiple: true, size: "l", open, value, items: filterState.filter ? filterState.items : items, onUpdate, popupWidth, onOpenChange, placement: popupPlacement, slotBeforeListBody, renderContainer, renderControl, renderItem: dndRenderItem });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/i18n/en.json
var en_default20 = {
  label_settings: "Table settings"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/i18n/ru.json
var ru_default20 = {
  label_settings: "Настройки таблицы"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/i18n/index.js
var COMPONENT17 = "withTableSettings";
var i18n_default18 = addComponentKeysets({ en: en_default20, ru: ru_default20 }, COMPONENT17);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.css";
function filterColumns(columns, settings) {
  const filteredColumns = settings.map(({ id, isSelected }) => ({
    isSelected,
    columnSettings: columns.find((column) => id === column.id)
  })).filter(({ isSelected, columnSettings }) => isSelected && columnSettings).map(({ columnSettings }) => columnSettings);
  if (columns[0] && columns[0].id === selectionColumnId) {
    filteredColumns.unshift(columns[0]);
  }
  const lastColumn = (0, import_last.default)(columns);
  if (lastColumn && lastColumn.id === actionsColumnId) {
    filteredColumns.push(lastColumn);
  }
  return filteredColumns;
}
function getColumnStringTitle(column) {
  const displayName = (0, import_get5.default)(column, ["meta", "displayName"]);
  if ((0, import_isString.default)(displayName)) {
    return displayName;
  }
  if ((0, import_isString.default)(column.name)) {
    return column.name;
  }
  const originalName = (0, import_get5.default)(column, ["meta", "_originalName"]);
  if ((0, import_isString.default)(originalName)) {
    return originalName;
  }
  return column.id;
}
var getTableColumnSetupItem = (id, isSelected, column) => {
  var _a;
  const isProtected = Boolean((_a = column == null ? void 0 : column.meta) == null ? void 0 : _a.selectedAlways);
  return {
    id,
    isSelected: isProtected ? true : isSelected,
    isRequired: isProtected,
    title: column ? getColumnStringTitle(column) : id,
    sticky: column == null ? void 0 : column.sticky
  };
};
function getActualItems(columns, settings) {
  const sortableItems = [];
  settings.forEach(({ id, isSelected }) => {
    const column = columns.find((column2) => id === column2.id);
    if (column) {
      sortableItems.push(getTableColumnSetupItem(id, isSelected, column));
    }
  });
  columns.forEach((column) => {
    var _a;
    if (column.id !== actionsColumnId && column.id !== selectionColumnId && settings.every((setting) => setting.id !== column.id)) {
      const isSelected = ((_a = column.meta) == null ? void 0 : _a.selectedByDefault) !== false;
      sortableItems.push(getTableColumnSetupItem(column.id, isSelected, column));
    }
  });
  return sortableItems;
}
var b110 = block("table");
var POPUP_PLACEMENT = ["bottom-end", "bottom", "top-end", "top"];
function withTableSettings(ComponentOrOptions) {
  function tableWithSettingsFactory(TableComponent, { width, sortable, filterable } = {}) {
    const componentName = getComponentName(TableComponent);
    function TableWithSettings({ updateSettings, settings, columns, settingsPopupWidth, renderControls, defaultSettings, showResetButton, settingsFilterPlaceholder, settingsFilterEmptyMessage, filterSettings, ...restTableProps }) {
      const defaultActualItems = React930.useMemo(() => {
        if (!defaultSettings) {
          return void 0;
        }
        return getActualItems(columns, defaultSettings);
      }, [columns, defaultSettings]);
      const enhancedColumns = React930.useMemo(() => {
        const actualItems = getActualItems(columns, settings || []);
        return enhanceSystemColumn(filterColumns(columns, actualItems), (systemColumn) => {
          systemColumn.name = () => (0, import_jsx_runtime174.jsx)("div", { className: b110("settings"), children: (0, import_jsx_runtime174.jsx)(TableColumnSetup, { popupWidth: settingsPopupWidth || width, popupPlacement: POPUP_PLACEMENT, sortable, filterable, filterPlaceholder: settingsFilterPlaceholder, filterEmptyMessage: settingsFilterEmptyMessage, filterSettings, onUpdate: updateSettings, items: actualItems, renderSwitcher: ({ onClick }) => (0, import_jsx_runtime174.jsx)(Button2, { view: "flat", className: b110("settings-button"), "aria-label": i18n_default18("label_settings"), onClick, children: (0, import_jsx_runtime174.jsx)(Icon, { data: Gear_default }) }), renderControls, defaultItems: defaultActualItems, showResetButton }) });
        });
      }, [
        columns,
        settings,
        settingsPopupWidth,
        updateSettings,
        renderControls,
        defaultActualItems,
        showResetButton
      ]);
      return (0, import_jsx_runtime174.jsx)(React930.Fragment, { children: (0, import_jsx_runtime174.jsx)(TableComponent, { ...restTableProps, columns: enhancedColumns }) });
    }
    TableWithSettings.displayName = `withTableSettings(${componentName})`;
    return TableWithSettings;
  }
  if (typeof ComponentOrOptions === "function") {
    return tableWithSettingsFactory(ComponentOrOptions);
  } else {
    return (TableComponent) => tableWithSettingsFactory(TableComponent, ComponentOrOptions);
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/TableColumnSetup/TableColumnSetup.js
var import_jsx_runtime175 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/TableColumnSetup/i18n/en.json
var en_default21 = {
  button_switcher: "Columns"
};

// node_modules/@gravity-ui/uikit/build/esm/components/TableColumnSetup/i18n/ru.json
var ru_default21 = {
  button_switcher: "Колонки"
};

// node_modules/@gravity-ui/uikit/build/esm/components/TableColumnSetup/i18n/index.js
var COMPONENT18 = "TableColumnSetup";
var i18n_default19 = addComponentKeysets({ en: en_default21, ru: ru_default21 }, COMPONENT18);

// node_modules/@gravity-ui/uikit/build/esm/components/TableColumnSetup/TableColumnSetup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/TableColumnSetup/TableColumnSetup.css";
var b111 = block("table-column-setup");
var TableColumnSetup2 = (props) => {
  const { switcher, renderSwitcher: renderSwitcherProps, disabled, popupWidth, popupPlacement, className, items: propsItems, sortable = true, showStatus, onUpdate: propsOnUpdate } = props;
  const renderStatus = () => {
    if (!showStatus) {
      return null;
    }
    const selected = propsItems.reduce((acc, cur) => cur.selected ? acc + 1 : acc, 0);
    const all = propsItems.length;
    const status = `${selected}/${all}`;
    return (0, import_jsx_runtime175.jsx)("span", { className: b111("status"), children: status });
  };
  const renderSwitcher = (switcherProps) => {
    return (renderSwitcherProps == null ? void 0 : renderSwitcherProps(switcherProps)) || switcher || (0, import_jsx_runtime175.jsxs)(Button2, { disabled, onClick: switcherProps.onClick, children: [(0, import_jsx_runtime175.jsx)(Icon, { data: Gear_default }), i18n_default19("button_switcher"), renderStatus()] });
  };
  const items = propsItems.map(({ id, title, required: required2, selected, sticky }) => ({
    id,
    title,
    isRequired: required2,
    isSelected: selected,
    sticky
  }));
  const onUpdate = (newSettings) => {
    propsOnUpdate(newSettings.map(({ id, isSelected }) => {
      const prevItem = propsItems.find((item) => item.id === id);
      return {
        id,
        selected: isSelected,
        title: prevItem == null ? void 0 : prevItem.title,
        required: prevItem == null ? void 0 : prevItem.required
      };
    }));
  };
  return (0, import_jsx_runtime175.jsx)(TableColumnSetup, { items, onUpdate, popupPlacement, popupWidth, renderSwitcher, sortable, className: b111(null, className) });
};

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabProvider.js
var import_jsx_runtime176 = __toESM(require_jsx_runtime(), 1);
var React932 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/contexts/TabContext.js
var React931 = __toESM(require_react(), 1);
var TabContext = React931.createContext(void 0);
TabContext.displayName = "TabContext";

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabProvider.js
var TabProvider = ({ value, onUpdate, children: children2 }) => {
  const id = useUniqId();
  const contextValue = React932.useMemo(() => ({ value, onUpdate, id, isProvider: true }), [value, onUpdate, id]);
  return (0, import_jsx_runtime176.jsx)(TabContext.Provider, { value: contextValue, children: children2 });
};

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabList.js
var import_jsx_runtime177 = __toESM(require_jsx_runtime(), 1);
var React934 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/hooks/useTabList.js
var React933 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/constants.js
var bTabList = block("tab-list");
var bTab = block("tab");
var bTabPanel = block("tab-panel");
var TAB_DATA_ATTRIBUTE = "data-tab";

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/hooks/useTabList.js
var getAllTabElements = (tabElement) => {
  var _a;
  return [
    ...((_a = tabElement.closest('[role="tablist"]')) == null ? void 0 : _a.querySelectorAll(`[${TAB_DATA_ATTRIBUTE}]`)) ?? []
  ];
};
var isTabDisabled = (tabElement) => {
  return Boolean(tabElement.getAttribute("aria-disabled"));
};
var getTabValue = (tabElement) => {
  return tabElement.getAttribute(TAB_DATA_ATTRIBUTE);
};
var focusNearestTab = (event, isInverse, isRTL2) => {
  const tabElement = event.target;
  const allTabElements = getAllTabElements(tabElement);
  const index3 = allTabElements.indexOf(tabElement);
  let distance3 = 1;
  while (distance3 < allTabElements.length) {
    const nextIndex = index3 + distance3 * (isRTL2 ? -1 : 1) * (isInverse ? -1 : 1);
    const nextTabElement = allTabElements.at(nextIndex % allTabElements.length);
    if (nextTabElement && !isTabDisabled(nextTabElement)) {
      nextTabElement.focus();
      return nextTabElement;
    }
    distance3++;
  }
  return tabElement;
};
var focusFurthestTab = (event, isInverse) => {
  const tabElement = event.target;
  const allTabElements = getAllTabElements(tabElement);
  const stopIndex = isInverse ? 0 : allTabElements.length - 1;
  let index3 = allTabElements.indexOf(tabElement);
  let lastFocusableTabElement = tabElement;
  while (index3 !== stopIndex) {
    index3 += isInverse ? -1 : 1;
    const nextTabElement = allTabElements.at(index3);
    if (nextTabElement && !isTabDisabled(nextTabElement)) {
      lastFocusableTabElement = nextTabElement;
    }
  }
  lastFocusableTabElement.focus();
  return lastFocusableTabElement;
};
function useTabList(tabListProps) {
  const tabContext = React933.useContext(TabContext);
  const isRTL2 = useDirection() === "rtl";
  const activateOnFocus = (tabElement) => {
    var _a, _b;
    const value = getTabValue(tabElement);
    if (tabListProps.activateOnFocus && value) {
      (_a = tabListProps.onUpdate) == null ? void 0 : _a.call(tabListProps, value);
      (_b = tabContext == null ? void 0 : tabContext.onUpdate) == null ? void 0 : _b.call(tabContext, value);
    }
  };
  const onKeyDown = (event) => {
    var _a;
    switch (event.code) {
      case KeyCode.ARROW_LEFT: {
        event.preventDefault();
        activateOnFocus(focusNearestTab(event, true, isRTL2));
        break;
      }
      case KeyCode.ARROW_RIGHT: {
        event.preventDefault();
        activateOnFocus(focusNearestTab(event, false, isRTL2));
        break;
      }
      case KeyCode.HOME: {
        event.preventDefault();
        activateOnFocus(focusFurthestTab(event, true));
        break;
      }
      case KeyCode.END: {
        event.preventDefault();
        activateOnFocus(focusFurthestTab(event, false));
        break;
      }
    }
    (_a = tabListProps.onKeyDown) == null ? void 0 : _a.call(tabListProps, event);
  };
  const { value: _value, onUpdate: _onUpdate, size: _size, activateOnFocus: _activateOnFocus, qa: _qa, ...htmlProps } = tabListProps;
  return {
    ...htmlProps,
    role: "tablist",
    "aria-orientation": "horizontal",
    onKeyDown,
    className: bTabList({ size: tabListProps.size ?? "m" }, tabListProps.className),
    "data-qa": tabListProps.qa
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabList.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabList.css";
var TabList = React934.forwardRef((props, ref2) => {
  const tabContext = React934.useContext(TabContext);
  const id = useUniqId();
  const tabListProps = useTabList(props);
  const [isFocused, setIsFocused] = React934.useState(false);
  const { focusWithinProps } = useFocusWithin({
    onFocusWithinChange: setIsFocused
  });
  const innerContextValue = React934.useMemo(() => ({
    value: (tabContext == null ? void 0 : tabContext.value) ?? props.value,
    onUpdate: (tabContext == null ? void 0 : tabContext.onUpdate) ?? props.onUpdate,
    id: (tabContext == null ? void 0 : tabContext.id) ?? id,
    isProvider: (tabContext == null ? void 0 : tabContext.isProvider) ?? false,
    isFocused
  }), [tabContext, props.value, props.onUpdate, id, isFocused]);
  return (0, import_jsx_runtime177.jsx)(TabContext.Provider, { value: innerContextValue, children: (0, import_jsx_runtime177.jsx)("div", { ref: ref2, ...tabListProps, ...focusWithinProps, children: props.children }) });
});
TabList.displayName = "TabList";

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/Tab.js
var import_jsx_runtime178 = __toESM(require_jsx_runtime(), 1);
var React936 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/hooks/useTab.js
var React935 = __toESM(require_react(), 1);
function useTab(tabProps) {
  const tabContext = React935.useContext(TabContext);
  if (!tabContext) {
    throw new Error("<Tab> must be used within <TabList>");
  }
  const currentValue = tabContext.value;
  const tabId = `${tabContext.id}:t:${tabProps.value}`;
  const panelId = tabContext.isProvider ? `${tabContext.id}:p:${tabProps.value}` : void 0;
  const isSelected = currentValue === tabProps.value;
  const isDisabled = tabProps.disabled;
  const isFocused = tabContext.isFocused;
  const onClick = (event) => {
    var _a, _b;
    if (!tabProps.disabled) {
      (_a = tabContext.onUpdate) == null ? void 0 : _a.call(tabContext, tabProps.value);
      (_b = tabProps.onClick) == null ? void 0 : _b.call(tabProps, event);
    }
  };
  const onKeyDown = (event) => {
    var _a, _b;
    if ((event.key === KeyCode.SPACEBAR || event.key === KeyCode.ENTER) && !tabProps.disabled) {
      (_a = tabContext.onUpdate) == null ? void 0 : _a.call(tabContext, tabProps.value);
      (_b = tabProps.onKeyDown) == null ? void 0 : _b.call(tabProps, event);
    }
  };
  const { value: _value, icon: _icon, counter: _counter, label: _label, disabled: _disabled, href: _href, component: _component, qa: _qa, ...htmlProps } = tabProps;
  return {
    ...htmlProps,
    role: "tab",
    "aria-selected": isSelected,
    "aria-disabled": isDisabled,
    "aria-controls": panelId,
    id: tabId,
    tabIndex: isSelected && !isDisabled && !isFocused ? 0 : -1,
    onClick,
    onKeyDown,
    className: bTab({ active: isSelected, disabled: isDisabled }, tabProps.className),
    "data-qa": tabProps.qa,
    [TAB_DATA_ATTRIBUTE]: tabProps.value
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/Tab.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/tabs/Tab.css";
function isTabComponentProps(p) {
  return p.component !== void 0;
}
function isTabLinkProps(p) {
  return p.href !== void 0;
}
var Tab = React936.forwardRef(function Tab2(props, ref2) {
  const tabProps = useTab(props);
  const content = (0, import_jsx_runtime178.jsxs)("div", { className: bTab("content"), children: [props.icon && (0, import_jsx_runtime178.jsx)("div", { className: bTab("icon"), children: props.icon }), (0, import_jsx_runtime178.jsx)("div", { className: bTab("title"), children: props.children || props.value }), props.counter !== void 0 && (0, import_jsx_runtime178.jsx)("div", { className: bTab("counter"), children: props.counter }), props.label && (0, import_jsx_runtime178.jsx)(Label, { className: bTab("label"), theme: props.label.theme, children: props.label.content })] });
  if (isTabComponentProps(props)) {
    return React936.createElement(props.component, { ...tabProps, ref: ref2 });
  }
  if (isTabLinkProps(props)) {
    return (0, import_jsx_runtime178.jsx)("a", { ...tabProps, ref: ref2, href: props.href, rel: props.target === "_blank" && !props.rel ? "noopener noreferrer" : props.rel, children: content });
  }
  return (0, import_jsx_runtime178.jsx)("button", { ...tabProps, ref: ref2, type: props.type || "button", children: content });
});
Tab.displayName = "Tab";

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabPanel.js
var import_jsx_runtime179 = __toESM(require_jsx_runtime(), 1);
var React938 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/hooks/useTabPanel.js
var React937 = __toESM(require_react(), 1);
function useTabPanel(tabPanelProps) {
  const tabContext = React937.useContext(TabContext);
  if (!tabContext) {
    throw new Error("<TabPanel> must be used within <TabProvider>");
  }
  const currentValue = tabContext.value;
  const parentId = tabContext.id;
  const tabId = `${parentId}:t:${tabPanelProps.value}`;
  const panelId = `${parentId}:p:${tabPanelProps.value}`;
  const isSelected = currentValue === tabPanelProps.value;
  const { value: _value, qa: _qa, ...htmlProps } = tabPanelProps;
  return {
    ...htmlProps,
    role: "tabpanel",
    "aria-labelledby": tabId,
    id: panelId,
    className: bTabPanel({ hidden: !isSelected }, tabPanelProps.className),
    "data-qa": tabPanelProps.qa
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabPanel.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/tabs/TabPanel.css";
var TabPanel = React938.forwardRef((props, ref2) => {
  const panelProps = useTabPanel(props);
  return (0, import_jsx_runtime179.jsx)(TabContext.Provider, { value: void 0, children: (0, import_jsx_runtime179.jsx)("div", { ref: ref2, ...panelProps, children: props.children }) });
});
TabPanel.displayName = "TabPanel";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/utilities/EventEmitter.js
var EventEmitter = class {
  constructor() {
    __publicField(this, "listeners");
    this.listeners = [];
  }
  destroy() {
    this.listeners = [];
  }
  subscribe(listener) {
    if (typeof listener === "function") {
      this.listeners.push(listener);
    }
    return () => {
      this.listeners = this.listeners.filter((currentListener) => listener !== currentListener);
    };
  }
  notify(data) {
    if (this.listeners.length === 0) {
      return false;
    }
    for (const listener of this.listeners) {
      listener(data);
    }
    return true;
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/utilities/getToastIndex.js
function getToastIndex(toasts, name) {
  return toasts.findIndex((toast) => toast.name === name);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/utilities/hasToast.js
function hasToast(toasts, name) {
  return getToastIndex(toasts, name) !== -1;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/utilities/removeToast.js
function removeToast(toasts, name) {
  if (!hasToast(toasts, name)) {
    return toasts;
  }
  return toasts.filter((toast) => toast.name !== name);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Toaster.js
var Toaster = class {
  constructor() {
    /** We were tried to notify about toaster changes, but no one were listened */
    __publicField(this, "hasUndelivered", false);
    __publicField(this, "toasts", []);
    __publicField(this, "eventEmitter", new EventEmitter());
  }
  destroy() {
    this.removeAll();
    this.eventEmitter.destroy();
  }
  add(toast) {
    let nextToasts = this.toasts;
    if (hasToast(nextToasts, toast.name)) {
      nextToasts = removeToast(nextToasts, toast.name);
    }
    this.toasts = [
      ...nextToasts,
      {
        ...toast,
        addedAt: Date.now(),
        ref: { current: null }
      }
    ];
    this.notify();
  }
  remove(name) {
    this.toasts = removeToast(this.toasts, name);
    this.notify();
  }
  removeAll() {
    this.toasts = [];
    this.notify();
  }
  update(name, overrideOptions) {
    if (!hasToast(this.toasts, name)) {
      return;
    }
    const index3 = getToastIndex(this.toasts, name);
    this.toasts = [
      ...this.toasts.slice(0, index3),
      {
        ...this.toasts[index3],
        ...overrideOptions
      },
      ...this.toasts.slice(index3 + 1)
    ];
    this.notify();
  }
  has(name) {
    return hasToast(this.toasts, name);
  }
  subscribe(listener) {
    const unsubscribe = this.eventEmitter.subscribe(listener);
    if (this.hasUndelivered) {
      this.notify();
    }
    return unsubscribe;
  }
  notify() {
    const isDelivered = this.eventEmitter.notify(this.toasts);
    this.hasUndelivered = !isDelivered;
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Toast/Toast.js
var import_jsx_runtime180 = __toESM(require_jsx_runtime(), 1);
var React939 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/i18n/en.json
var en_default22 = {
  "label_close-button": "Close"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/i18n/ru.json
var ru_default22 = {
  "label_close-button": "Закрыть"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/i18n/index.js
var COMPONENT19 = "Toaster";
var i18n_default20 = addComponentKeysets({
  en: en_default22,
  ru: ru_default22
}, COMPONENT19);

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Toast/Toast.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Toast/Toast.css";
var b112 = block("toast");
var DEFAULT_TIMEOUT2 = 5e3;
var TITLE_ICONS = {
  normal: null,
  info: CircleInfo_default,
  success: CircleCheck_default,
  warning: TriangleExclamation_default,
  danger: TriangleExclamation_default,
  utility: Thunderbolt_default
};
function renderActions({ actions, onClose }) {
  if (!actions || !actions.length) {
    return null;
  }
  return (0, import_jsx_runtime180.jsx)("div", { className: b112("actions"), children: actions.map(({ label, onClick, view = "outlined", removeAfterClick = true }, index3) => {
    const onActionClick = () => {
      onClick();
      if (removeAfterClick) {
        onClose();
      }
    };
    return (0, import_jsx_runtime180.jsx)(Button2, { className: b112("action"), onClick: onActionClick, type: "button", size: "l", view, width: "auto", children: label }, `${label}__${index3}`);
  }) });
}
function renderIconByType({ theme }) {
  if (!theme || !TITLE_ICONS[theme]) {
    return null;
  }
  return (0, import_jsx_runtime180.jsx)(Icon, { data: TITLE_ICONS[theme], size: 20, className: b112("icon", { [theme]: true }) });
}
var Toast = React939.forwardRef(function Toast2(props, ref2) {
  const { name, content, actions, title, className, theme = "normal", renderIcon, autoHiding: timeoutProp = DEFAULT_TIMEOUT2, isClosable = true, mobile = false, onClose, removeCallback } = props;
  const handleClose = React939.useCallback(() => {
    removeCallback(name);
    if (onClose) {
      onClose();
    }
  }, [removeCallback, onClose, name]);
  const timeout2 = typeof timeoutProp === "number" ? timeoutProp : void 0;
  const closeOnTimeoutProps = useCloseOnTimeout({ onClose: handleClose, timeout: timeout2 });
  const mods = {
    mobile,
    theme
  };
  const hasTitle = Boolean(title);
  const hasContent = Boolean(content);
  const icon = renderIcon ? renderIcon(props) : renderIconByType({ theme });
  return (0, import_jsx_runtime180.jsxs)("div", { ref: ref2, className: b112(mods, className), ...closeOnTimeoutProps, "data-toast": true, children: [icon && (0, import_jsx_runtime180.jsx)("div", { className: b112("icon-container"), children: icon }), (0, import_jsx_runtime180.jsxs)("div", { className: b112("container"), children: [hasTitle && (0, import_jsx_runtime180.jsx)("h3", { className: b112("title"), children: title }), isClosable && (0, import_jsx_runtime180.jsx)(Button2, { size: "s", view: "flat", className: b112("btn-close"), onClick: handleClose, "aria-label": i18n_default20("label_close-button"), children: (0, import_jsx_runtime180.jsx)(Icon, { data: Xmark_default }) }), hasContent && (0, import_jsx_runtime180.jsx)("div", { className: b112("content", { "without-title": !hasTitle }), children: content }), renderActions({ actions, onClose: handleClose })] })] });
});

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/hooks/useToaster.js
var React941 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Provider/ToasterContext.js
var React940 = __toESM(require_react(), 1);
var ToasterContext = React940.createContext(null);
ToasterContext.displayName = "ToasterContext";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/hooks/useToaster.js
function useToaster() {
  const toaster = React941.useContext(ToasterContext);
  if (toaster === null) {
    throw new Error("Toaster: `useToaster` hook is used out of context");
  }
  return React941.useMemo(() => ({
    add: toaster.add.bind(toaster),
    remove: toaster.remove.bind(toaster),
    removeAll: toaster.removeAll.bind(toaster),
    update: toaster.update.bind(toaster),
    has: toaster.has.bind(toaster)
  }), [toaster]);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/withToaster.js
var import_jsx_runtime181 = __toESM(require_jsx_runtime(), 1);
function withToaster() {
  return function(WrappedComponent) {
    function WithToaster(props) {
      const toaster = useToaster();
      return (0, import_jsx_runtime181.jsx)(WrappedComponent, { ...props, toaster });
    }
    WithToaster.displayName = `WithToaster(${getComponentName(WrappedComponent)})`;
    return WithToaster;
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToasterComponent/ToasterComponent.js
var import_jsx_runtime183 = __toESM(require_jsx_runtime(), 1);
var React943 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Provider/ToastsContext.js
var React942 = __toESM(require_react(), 1);
var ToastsContext = React942.createContext([]);
ToastsContext.displayName = "ToastsContext";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToastList/ToastList.js
var import_jsx_runtime182 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToastList/ToastAnimation.css";
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToastList/ToastList.css";
var desktopTransitionClassNames = getCSSTransitionClassNames(block("toast-animation-desktop"));
var mobileTransitionClassNames = getCSSTransitionClassNames(block("toast-animation-mobile"));
function ToastList(props) {
  const { toasts, mobile, removeCallback } = props;
  return (0, import_jsx_runtime182.jsx)(TransitionGroup_default, { component: null, children: toasts.map((toast) => (0, import_jsx_runtime182.jsx)(CSSTransition_default, { nodeRef: toast.ref, classNames: mobile ? mobileTransitionClassNames : desktopTransitionClassNames, addEndListener: (done) => {
    var _a, _b;
    return (_b = (_a = toast.ref) == null ? void 0 : _a.current) == null ? void 0 : _b.addEventListener("animationend", done);
  }, onEnter: () => updateToastHeightCssProperty(toast), onExit: () => updateToastHeightCssProperty(toast), children: (0, import_jsx_runtime182.jsx)(Toast, { ...toast, mobile, removeCallback }) }, `${toast.name}_${toast.addedAt}`)) });
}
function updateToastHeightCssProperty(toast) {
  var _a;
  if ((_a = toast.ref) == null ? void 0 : _a.current) {
    toast.ref.current.style.setProperty("--_--item-height", `${toast.ref.current.offsetHeight}px`);
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToasterComponent/ToasterComponent.js
var b113 = block("toaster");
function ToasterComponent({ className, mobile, hasPortal = true }) {
  const defaultMobile = useMobile();
  const { remove } = useToaster();
  const list = React943.useContext(ToastsContext);
  const toaster = (0, import_jsx_runtime183.jsx)(ToastList, { toasts: list, removeCallback: remove, mobile: mobile ?? defaultMobile });
  if (!hasPortal) {
    return toaster;
  }
  return (0, import_jsx_runtime183.jsx)(Portal, { children: (0, import_jsx_runtime183.jsx)("div", { className: b113({ mobile: mobile ?? defaultMobile }, className), "aria-live": "assertive", children: toaster }) });
}
ToasterComponent.displayName = "ToasterComponent";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Provider/ToasterProvider.js
var import_jsx_runtime184 = __toESM(require_jsx_runtime(), 1);
var React944 = __toESM(require_react(), 1);
var ToasterProvider = ({ toaster, children: children2 }) => {
  const [toasts, setToasts] = React944.useState([]);
  React944.useEffect(() => {
    const unsubscribe = toaster.subscribe(setToasts);
    return () => {
      unsubscribe();
    };
  }, [toaster]);
  return (0, import_jsx_runtime184.jsx)(ToasterContext.Provider, { value: toaster, children: (0, import_jsx_runtime184.jsx)(ToastsContext.Provider, { value: toasts, children: children2 }) });
};
ToasterProvider.displayName = "ToasterProvider";

// node_modules/@gravity-ui/uikit/build/esm/components/Toc/Toc.js
var import_jsx_runtime187 = __toESM(require_jsx_runtime(), 1);
var React945 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Toc/TocSections/TocSections.js
var import_jsx_runtime186 = __toESM(require_jsx_runtime(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/Toc/TocItem/TocItem.js
var import_jsx_runtime185 = __toESM(require_jsx_runtime(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toc/TocItem/TocItem.css";
var b114 = block("toc-item");
var TocItem = (props) => {
  const { active = false, childItem = false, content, href, onClick, depth } = props;
  const { onKeyDown } = useActionHandlers(onClick);
  const item = href === void 0 ? (0, import_jsx_runtime185.jsx)("div", { role: "button", tabIndex: 0, className: b114("section-link"), onClick, onKeyDown, children: content }) : (0, import_jsx_runtime185.jsx)("a", { href, onClick, className: b114("section-link"), children: content });
  return (0, import_jsx_runtime185.jsx)("div", { className: b114("section", { child: childItem, depth, active }), children: item });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toc/TocSections/TocSections.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toc/TocSections/TocSections.css";
var b115 = block("toc");
function TocSections(props) {
  const { value: activeValue, items, onUpdate, childItem, depth = 1, onItemClick } = props;
  if (depth > 6) {
    return null;
  }
  return (0, import_jsx_runtime186.jsx)("ul", { className: b115("sections"), children: items.map(({ value, content, href, items: childrenItems }) => (0, import_jsx_runtime186.jsxs)("li", { "aria-current": activeValue === value, children: [(0, import_jsx_runtime186.jsx)(TocItem, { content, href, active: activeValue === value, onClick: (event) => {
    onItemClick == null ? void 0 : onItemClick(event);
    if (value === void 0 || !onUpdate) {
      return;
    }
    onUpdate == null ? void 0 : onUpdate(value);
  }, childItem, depth }), childrenItems && childrenItems.length > 0 && (0, import_jsx_runtime186.jsx)(TocSections, { items: childrenItems, onUpdate, childItem: true, depth: depth + 1, value: activeValue })] }, value ?? href)) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toc/Toc.js
var b116 = block("toc");
var Toc = React945.forwardRef(function Toc2(props, ref2) {
  const { value: activeValue, items, className, onUpdate, qa, onItemClick } = props;
  return (0, import_jsx_runtime187.jsx)("nav", { className: b116(null, className), ref: ref2, "data-qa": qa, children: (0, import_jsx_runtime187.jsx)(TocSections, { items, value: activeValue, onUpdate, depth: 1, onItemClick }) });
});

// node_modules/@gravity-ui/uikit/build/esm/components/User/constants.js
var DEFAULT_USER_SIZE = "m";
var COMPACT_SIZES = /* @__PURE__ */ new Set(["xs", "2xs", "3xs"]);
var UserQa = {
  NAME: "user-name",
  DESCRIPTION: "user-description"
};

// node_modules/@gravity-ui/uikit/build/esm/components/User/User.js
var import_jsx_runtime188 = __toESM(require_jsx_runtime(), 1);
var React946 = __toESM(require_react(), 1);
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/User/User.css";
var b117 = block("user");
var User = React946.forwardRef((props, ref2) => {
  const { avatar, name, description, size: size5 = DEFAULT_USER_SIZE, className, style: style3, qa } = props;
  const nameTitle = typeof name === "string" ? name : void 0;
  const descriptionTitle = typeof description === "string" ? description : void 0;
  let avatarView = null;
  if (typeof avatar === "string") {
    avatarView = (0, import_jsx_runtime188.jsx)(Avatar, { imgUrl: avatar, size: size5, title: nameTitle });
  } else if (React946.isValidElement(avatar)) {
    avatarView = avatar;
  } else if (avatar) {
    avatarView = (0, import_jsx_runtime188.jsx)(Avatar, { ...avatar, size: size5, title: avatar.title || nameTitle });
  }
  const showDescription = Boolean(description && !COMPACT_SIZES.has(size5));
  return (0, import_jsx_runtime188.jsxs)("div", { className: b117({ size: size5 }, className), style: style3, "data-qa": qa, ref: ref2, ...filterDOMProps(props, { labelable: true }), children: [avatarView ? (0, import_jsx_runtime188.jsx)("div", { className: b117("avatar"), children: avatarView }) : null, name || showDescription ? (0, import_jsx_runtime188.jsxs)("div", { className: b117("info"), children: [name ? (0, import_jsx_runtime188.jsx)("span", { className: b117("name"), title: nameTitle, "data-qa": UserQa.NAME, children: name }) : null, showDescription ? (0, import_jsx_runtime188.jsx)("span", { className: b117("description"), title: descriptionTitle, "data-qa": UserQa.DESCRIPTION, children: description }) : null] }) : null] });
});
User.displayName = "User";

// node_modules/@gravity-ui/uikit/build/esm/components/UserLabel/constants.js
var DEFAULT_USER_LABEL_SIZE = "s";
var COMPACT_SIZES2 = /* @__PURE__ */ new Set(["m", "s", "xs", "2xs", "3xs"]);
var BORDER_COLOR = "var(--g-color-line-generic-solid)";
var ICON_SIZES = {
  "3xs": 12,
  "2xs": 12,
  xs: 12,
  s: 16,
  m: 16,
  l: 16,
  xl: 16
};

// node_modules/@gravity-ui/uikit/build/esm/components/UserLabel/UserLabel.js
var import_jsx_runtime189 = __toESM(require_jsx_runtime(), 1);
var React947 = __toESM(require_react(), 1);

// node_modules/@gravity-ui/uikit/build/esm/components/UserLabel/i18n/en.json
var en_default23 = {
  "label_remove-button": "Remove"
};

// node_modules/@gravity-ui/uikit/build/esm/components/UserLabel/i18n/ru.json
var ru_default23 = {
  "label_remove-button": "Удалить"
};

// node_modules/@gravity-ui/uikit/build/esm/components/UserLabel/i18n/index.js
var i18n_default21 = addComponentKeysets({ en: en_default23, ru: ru_default23 }, `${NAMESPACE}user-label`);

// node_modules/@gravity-ui/uikit/build/esm/components/UserLabel/UserLabel.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/UserLabel/UserLabel.css";
var b118 = block("user-label");
var UserLabel = React947.forwardRef(
  // eslint-disable-next-line complexity
  ({ type = "person", view = "outlined", size: size5 = DEFAULT_USER_LABEL_SIZE, avatar, text: text2, description, onClick, onCloseClick, className, style: style3, qa }, ref2) => {
    const clickable = Boolean(onClick);
    const closeable = Boolean(onCloseClick);
    const MainComponent = clickable ? "button" : "div";
    let avatarView = null;
    let avatarProps;
    if (typeof avatar === "string") {
      avatarProps = { imgUrl: avatar };
    } else if (avatar && !React947.isValidElement(avatar)) {
      if ("imgUrl" in avatar && avatar.imgUrl || "icon" in avatar && avatar.icon || "text" in avatar && avatar.text) {
        avatarProps = avatar;
      } else if (typeof text2 === "string") {
        avatarProps = { text: text2, borderColor: BORDER_COLOR, ...avatar };
      }
    } else if (!avatar && typeof text2 === "string") {
      avatarProps = { text: text2, borderColor: BORDER_COLOR };
    }
    switch (type) {
      case "email":
        avatarView = (0, import_jsx_runtime189.jsx)(Avatar, { icon: Envelope_default, ...avatarProps, size: size5 });
        break;
      case "empty":
        avatarView = null;
        break;
      case "person":
      default:
        if (React947.isValidElement(avatar)) {
          avatarView = avatar;
        } else if (avatarProps) {
          avatarView = (0, import_jsx_runtime189.jsx)(Avatar, { ...avatarProps, size: size5 });
        }
        break;
    }
    const showDescription = Boolean(description && !COMPACT_SIZES2.has(size5));
    return (0, import_jsx_runtime189.jsxs)("div", { className: b118({
      view,
      size: size5,
      empty: !avatarView,
      clickable,
      closeable
    }, className), style: style3, "data-qa": qa, ref: ref2, children: [(0, import_jsx_runtime189.jsxs)(MainComponent, { className: b118("main"), type: clickable ? "button" : void 0, onClick, children: [avatarView ? (0, import_jsx_runtime189.jsx)("div", { className: b118("avatar"), children: avatarView }) : null, (0, import_jsx_runtime189.jsxs)("div", { className: b118("info"), children: [(0, import_jsx_runtime189.jsx)("span", { className: b118("text"), children: text2 }), showDescription ? (0, import_jsx_runtime189.jsx)("span", { className: b118("description"), children: description }) : null] })] }), onCloseClick ? (0, import_jsx_runtime189.jsx)("button", { className: b118("close"), type: "button", "aria-label": i18n_default21("label_remove-button"), onClick: onCloseClick, children: (0, import_jsx_runtime189.jsx)(Icon, { className: b118("close-icon"), data: Xmark_default, size: ICON_SIZES[size5] }) }) : null] });
  }
);
UserLabel.displayName = "UserLabel";

// node_modules/@gravity-ui/uikit/build/esm/components/utils/class-transform.js
function parseClass(strClass) {
  const split2 = strClass.split("_").filter((str) => str);
  if (strClass.includes("__")) {
    return {
      block: split2[0],
      element: split2[1],
      mod: split2[2] ? {
        key: split2[2],
        value: split2[3] ? split2[3] : true
      } : void 0
    };
  }
  return {
    block: split2[0],
    mod: split2[1] ? {
      key: split2[1],
      value: split2[2] ? split2[2] : true
    } : void 0
  };
}
function formatClass(objClass) {
  var _a;
  let result = objClass.block;
  if (objClass.element) {
    result = `${result}__${objClass.element}`;
  }
  if ((_a = objClass.mod) == null ? void 0 : _a.value) {
    result = `${result}_${objClass.mod.key}`;
    if (typeof objClass.mod.value === "string") {
      result = `${result}_${objClass.mod.value}`;
    }
  }
  return result;
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/withEventBrokerDomHandlers.js
var import_jsx_runtime190 = __toESM(require_jsx_runtime(), 1);
var React948 = __toESM(require_react(), 1);
function withEventBrokerDomHandlers(Component13, eventTypes, eventBrokerData) {
  const componentName = getComponentName(Component13);
  const displayName = `withEventBroker(${componentName})`;
  const LoggedComponent = React948.forwardRef((props, ref2) => {
    const decoratedHandlers = eventTypes.reduce((handlers, eventType) => {
      const originalHandler = props[eventType];
      return {
        ...handlers,
        [eventType]: (event) => {
          eventBroker.publish({
            eventId: eventType.replace(/^on/, "").toLowerCase(),
            domEvent: event,
            ...eventBrokerData
          });
          return originalHandler && originalHandler(event);
        }
      };
    }, {});
    return (0, import_jsx_runtime190.jsx)(Component13, { ...props, ...decoratedHandlers, ref: ref2 });
  });
  LoggedComponent.displayName = displayName;
  return LoggedComponent;
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/xpath.js
var import_blueimp_md5 = __toESM(require_md5(), 1);
function withoutClassMods(converter = (arg) => arg) {
  return (parsedClass, strClass) => parsedClass.mod ? void 0 : converter(parsedClass, strClass);
}
function isElement3(node) {
  return node.nodeType === Node.ELEMENT_NODE;
}
function getXpathByNode(node, options) {
  if (!node || !isElement3(node)) {
    return "";
  }
  const tag = node.tagName.toLowerCase();
  let token = `/${tag}`;
  const convertedId = node.id && !options.withoutId ? options.idConverter(node.id) : void 0;
  if (convertedId) {
    token += `[@id='${convertedId}']`;
  } else {
    const classes = [];
    node.classList.forEach((className) => {
      const currentClass = options.classConverter({ ...parseClass(className), tag }, className);
      if (currentClass) {
        classes.push(formatClass(currentClass));
      }
    });
    if (classes.length) {
      token += `[@class='${classes.join(" ")}']`;
    }
  }
  return getXpathByNode(node.parentElement, options) + token;
}
var defaultXpathOptions = {
  classConverter: (arg) => arg,
  idConverter: (arg) => arg,
  withoutId: false
};
function getXpath(event, options) {
  const internalOptions = {
    ...defaultXpathOptions,
    ...options || {}
  };
  const xpath = getXpathByNode(event.currentTarget || event.target, internalOptions);
  return {
    xpath,
    hash: (0, import_blueimp_md5.default)(xpath)
  };
}

// node_modules/@gravity-ui/uikit/build/esm/utils/dom.js
function isTouchDevice() {
  if (typeof window === "undefined") {
    return false;
  }
  if (typeof navigator !== "undefined" && navigator.maxTouchPoints > 0) {
    return true;
  }
  if (window.matchMedia && window.matchMedia("(any-pointer:coarse)").matches) {
    return true;
  }
  return "ontouchstart" in window;
}
export {
  AVATAR_SIZES,
  ActionTooltip,
  ActionsPanel,
  Alert,
  ArrowToggle,
  Avatar,
  AvatarStack,
  Box,
  Breadcrumbs,
  _BreadcrumbsItem as BreadcrumbsItem,
  Button2 as Button,
  ButtonIcon,
  Card,
  Checkbox,
  ClipboardButton,
  ClipboardIcon,
  Col,
  Container,
  CopyToClipboard,
  DEFAULT_AVATAR_SIZE,
  DEFAULT_RENDER_POPUP,
  DEFAULT_USER_LABEL_SIZE,
  DEFAULT_USER_SIZE,
  DefinitionList,
  DefinitionListItem,
  Dialog,
  DialogBody,
  DialogDivider,
  DialogFooter,
  DialogHeader,
  Disclosure,
  DisclosureQa,
  Divider,
  DropdownMenuExport as DropdownMenu,
  EventBroker,
  FilePreview,
  Flex,
  HelpMark,
  Hotkey,
  Icon,
  Label,
  Lang,
  Link,
  List,
  ListItem,
  ListQa,
  Loader,
  Menu,
  MenuGroup,
  MenuItem,
  MobileContext,
  MobileProvider,
  Modal,
  NumberInput,
  Overlay,
  Pagination,
  Palette,
  PasswordInput,
  PinInput,
  PlaceholderContainer,
  Platform,
  Popover,
  Popup,
  Portal,
  PortalProvider,
  Progress,
  Radio,
  RadioGroup,
  Row,
  SegmentedRadioGroup,
  SegmentedRadioGroupOption,
  Select,
  Option as SelectItem,
  OptionGroup as SelectItemGroup,
  SelectQa,
  Sheet,
  Skeleton,
  Slider2 as Slider,
  Spin,
  Stepper,
  Switch,
  TEXT_COLORS,
  TEXT_VARIANTS,
  Tab,
  TabList,
  TabPanel,
  TabProvider,
  Table,
  TableColumnSetup2 as TableColumnSetup,
  TableSortIndicator,
  Text,
  TextArea,
  TextInput,
  ThemeContext,
  ThemeProvider,
  ThemeSettingsContext,
  Toast,
  Toaster,
  ToasterComponent,
  ToasterProvider,
  Toc,
  Tooltip,
  User,
  UserLabel,
  UserQa,
  colorText,
  configure,
  defaultRenderItem,
  eventBroker,
  formatClass,
  getAvatarDisplayText,
  getComponentName,
  getConfig,
  getElementRef,
  getFileType,
  getLayersCount,
  getSelectFilteredOptions,
  getThemeType,
  getUniqId,
  getXpath,
  isSelectGroupTitle,
  isTouchDevice,
  layerManager,
  listDefaultProps,
  mergeRefs,
  parseClass,
  parseHotkeys,
  prepareSliderInnerState,
  rootMobileClassName,
  setRef,
  sp,
  spacing,
  text,
  useActionHandlers,
  useAsyncActionHandler,
  useControlledState,
  useDirection,
  useEventBroker,
  useFileInput,
  useFocusWithin,
  useForkRef,
  useIntersection,
  useLayer,
  useLayoutContext,
  useListNavigation2 as useListNavigation,
  useMobile,
  useOutsideClick,
  usePlatform,
  usePortalContainer,
  useResizeObserver,
  useSelect,
  useSelectOptions,
  useTheme,
  useThemeSettings,
  useThemeType,
  useThemeValue,
  useTimeout,
  useToaster,
  useUniqId,
  useViewportSize,
  useVirtualElement,
  useVirtualElementRef,
  withDirection,
  withEventBrokerDomHandlers,
  withMobile,
  withTableActions,
  withTableCopy,
  withTableSelection,
  withTableSettings,
  withTableSorting,
  withTheme,
  withThemeValue,
  withToaster,
  withoutClassMods
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@gravity-ui_uikit.js.map
