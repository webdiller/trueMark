import {
  Check_default,
  ChevronDown_default,
  ChevronLeft_default,
  ChevronRight_default,
  ChevronsLeft_default,
  CircleCheckFill_default,
  CircleCheck_default,
  CircleInfoFill_default,
  CircleInfo_default,
  CircleXmarkFill_default,
  CircleXmark_default,
  Ellipsis_default,
  Envelope_default,
  Gear_default,
  Grip_default,
  ThunderboltFill_default,
  Thunderbolt_default,
  TriangleExclamationFill_default,
  TriangleExclamation_default,
  Xmark_default
} from "./chunk-SZYGNVHQ.js";
import {
  invariant
} from "./chunk-KDZ7CXOI.js";
import {
  require_react_dom
} from "./chunk-T46KWSWP.js";
import {
  require_react
} from "./chunk-E55NSNTN.js";
import {
  __commonJS,
  __toESM
} from "./chunk-4MBMRILA.js";

// node_modules/@bem-react/classname/build/classname.development.js
var require_classname_development = __commonJS({
  "node_modules/@bem-react/classname/build/classname.development.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function withNaming2(preset2) {
      var nameSpace = preset2.n || "";
      var modValueDelimiter = preset2.v || preset2.m;
      function stringify(b84, e, m, mix) {
        var entityName = e ? nameSpace + b84 + preset2.e + e : nameSpace + b84;
        var className = entityName;
        if (m) {
          var modPrefix = " " + className + preset2.m;
          for (var k in m) {
            if (m.hasOwnProperty(k)) {
              var modVal = m[k];
              if (modVal === true) {
                className += modPrefix + k;
              } else if (modVal) {
                className += modPrefix + k + modValueDelimiter + modVal;
              }
            }
          }
        }
        if (mix !== void 0) {
          mix = Array.isArray(mix) ? mix : [mix];
          for (var i = 0, len = mix.length; i < len; i++) {
            var value = mix[i];
            if (!value || typeof value.valueOf() !== "string")
              continue;
            var mixes = value.valueOf().split(" ");
            for (var j = 0; j < mixes.length; j++) {
              var val = mixes[j];
              if (val !== entityName) {
                className += " " + val;
              }
            }
          }
        }
        return className;
      }
      return function cnGenerator(b84, e) {
        return function(elemOrMods, elemModsOrBlockMix, elemMix) {
          if (typeof elemOrMods === "string") {
            if (typeof elemModsOrBlockMix === "string" || Array.isArray(elemModsOrBlockMix)) {
              return stringify(b84, elemOrMods, void 0, elemModsOrBlockMix);
            }
            return stringify(b84, elemOrMods, elemModsOrBlockMix, elemMix);
          }
          return stringify(b84, e, elemOrMods, elemModsOrBlockMix);
        };
      };
    }
    var cn2 = withNaming2({
      e: "-",
      m: "_"
    });
    exports.cn = cn2;
    exports.withNaming = withNaming2;
  }
});

// node_modules/@bem-react/classname/index.js
var require_classname = __commonJS({
  "node_modules/@bem-react/classname/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_classname_development();
    }
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString2;
  }
});

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports, module) {
    function baseSlice(array, start4, end3) {
      var index = -1, length = array.length;
      if (start4 < 0) {
        start4 = -start4 > length ? 0 : length + start4;
      }
      end3 = end3 > length ? length : end3;
      if (end3 < 0) {
        end3 += length;
      }
      length = start4 > end3 ? 0 : end3 - start4 >>> 0;
      start4 >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start4];
      }
      return result;
    }
    module.exports = baseSlice;
  }
});

// node_modules/lodash/_castSlice.js
var require_castSlice = __commonJS({
  "node_modules/lodash/_castSlice.js"(exports, module) {
    var baseSlice = require_baseSlice();
    function castSlice(array, start4, end3) {
      var length = array.length;
      end3 = end3 === void 0 ? length : end3;
      return !start4 && end3 >= length ? array : baseSlice(array, start4, end3);
    }
    module.exports = castSlice;
  }
});

// node_modules/lodash/_hasUnicode.js
var require_hasUnicode = __commonJS({
  "node_modules/lodash/_hasUnicode.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    module.exports = hasUnicode;
  }
});

// node_modules/lodash/_asciiToArray.js
var require_asciiToArray = __commonJS({
  "node_modules/lodash/_asciiToArray.js"(exports, module) {
    function asciiToArray(string) {
      return string.split("");
    }
    module.exports = asciiToArray;
  }
});

// node_modules/lodash/_unicodeToArray.js
var require_unicodeToArray = __commonJS({
  "node_modules/lodash/_unicodeToArray.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    module.exports = unicodeToArray;
  }
});

// node_modules/lodash/_stringToArray.js
var require_stringToArray = __commonJS({
  "node_modules/lodash/_stringToArray.js"(exports, module) {
    var asciiToArray = require_asciiToArray();
    var hasUnicode = require_hasUnicode();
    var unicodeToArray = require_unicodeToArray();
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    module.exports = stringToArray;
  }
});

// node_modules/lodash/_createCaseFirst.js
var require_createCaseFirst = __commonJS({
  "node_modules/lodash/_createCaseFirst.js"(exports, module) {
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var stringToArray = require_stringToArray();
    var toString2 = require_toString();
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString2(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    module.exports = createCaseFirst;
  }
});

// node_modules/lodash/upperFirst.js
var require_upperFirst = __commonJS({
  "node_modules/lodash/upperFirst.js"(exports, module) {
    var createCaseFirst = require_createCaseFirst();
    var upperFirst = createCaseFirst("toUpperCase");
    module.exports = upperFirst;
  }
});

// node_modules/lodash/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/lodash/capitalize.js"(exports, module) {
    var toString2 = require_toString();
    var upperFirst = require_upperFirst();
    function capitalize2(string) {
      return upperFirst(toString2(string).toLowerCase());
    }
    module.exports = capitalize2;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject2;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject2 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction2(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction2;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject2 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue2;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue2 = require_getValue();
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size2 = data.size;
      data.set(key, value);
      this.size += data.size == size2 ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values3) {
      var index = -1, length = values3 == null ? 0 : values3.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values3[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values3) {
      var index = -1, length = values3.length, offset4 = array.length;
      while (++index < length) {
        array[offset4 + index] = values3[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject2 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject2(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match2, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString2 = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString2(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet = require_baseGet();
    function get4(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get4;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module) {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module) {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    module.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    module.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get4 = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get4(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop3() {
    }
    module.exports = noop3;
  }
});

// node_modules/lodash/_createSet.js
var require_createSet = __commonJS({
  "node_modules/lodash/_createSet.js"(exports, module) {
    var Set2 = require_Set();
    var noop3 = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop3 : function(values3) {
      return new Set2(values3);
    };
    module.exports = createSet;
  }
});

// node_modules/lodash/_baseUniq.js
var require_baseUniq = __commonJS({
  "node_modules/lodash/_baseUniq.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseUniq;
  }
});

// node_modules/lodash/uniqBy.js
var require_uniqBy = __commonJS({
  "node_modules/lodash/uniqBy.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var baseUniq = require_baseUniq();
    function uniqBy2(array, iteratee) {
      return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
    }
    module.exports = uniqBy2;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject2 = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject2(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject2(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/lodash/toFinite.js
var require_toFinite = __commonJS({
  "node_modules/lodash/toFinite.js"(exports, module) {
    var toNumber = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module.exports = toFinite;
  }
});

// node_modules/lodash/toInteger.js
var require_toInteger = __commonJS({
  "node_modules/lodash/toInteger.js"(exports, module) {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module.exports = toInteger;
  }
});

// node_modules/lodash/_createRound.js
var require_createRound = __commonJS({
  "node_modules/lodash/_createRound.js"(exports, module) {
    var root = require_root();
    var toInteger = require_toInteger();
    var toNumber = require_toNumber();
    var toString2 = require_toString();
    var nativeIsFinite = root.isFinite;
    var nativeMin = Math.min;
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          var pair = (toString2(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
          pair = (toString2(value) + "e").split("e");
          return +(pair[0] + "e" + (+pair[1] - precision));
        }
        return func(number);
      };
    }
    module.exports = createRound;
  }
});

// node_modules/lodash/round.js
var require_round = __commonJS({
  "node_modules/lodash/round.js"(exports, module) {
    var createRound = require_createRound();
    var round3 = createRound("round");
    module.exports = round3;
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now2 = function() {
      return root.Date.now();
    };
    module.exports = now2;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module) {
    var isObject2 = require_isObject();
    var now2 = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce2(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject2(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now2();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush3() {
        return timerId === void 0 ? result : trailingEdge(now2());
      }
      function debounced() {
        var time = now2(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush3;
      return debounced;
    }
    module.exports = debounce2;
  }
});

// node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "node_modules/lodash/throttle.js"(exports, module) {
    var debounce2 = require_debounce();
    var isObject2 = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle2(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject2(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce2(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module.exports = throttle2;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b84) {
      if (a === b84) return true;
      if (a && b84 && typeof a == "object" && typeof b84 == "object") {
        if (a.constructor !== b84.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b84.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b84[i])) return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b84 instanceof Map) {
          if (a.size !== b84.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b84.has(i.value[0])) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b84.get(i.value[0]))) return false;
          return true;
        }
        if (hasSet && a instanceof Set && b84 instanceof Set) {
          if (a.size !== b84.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b84.has(i.value[0])) return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b84)) {
          length = a.length;
          if (length != b84.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b84[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b84.source && a.flags === b84.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b84.valueOf === "function") return a.valueOf() === b84.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b84.toString === "function") return a.toString() === b84.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b84).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b84, keys[i])) return false;
        if (hasElementType && a instanceof Element) return false;
        for (i = length; i-- !== 0; ) {
          if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i]], b84[keys[i]])) return false;
        }
        return true;
      }
      return a !== a && b84 !== b84;
    }
    module.exports = function isEqual7(a, b84) {
      try {
        return equal(a, b84);
      } catch (error2) {
        if ((error2.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error2;
      }
    };
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning4 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning4 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning4;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer2(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement4(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement4;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error2;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error2 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error2 = ex;
            }
            if (error2 && !(error2 instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
              loggedTypeFailures[error2.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error2.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text2) {
        var message = "Warning: " + text2;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error2 = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error2 instanceof Error) {
              return error2;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is2(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error2 = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error2) {
              return error2;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error2) {
              return error2;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject2 = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject3(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject3;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject2 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction2 = require_isFunction();
    var isObject2 = require_isObject();
    var isPlainObject3 = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject3(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction2(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject2 = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply3(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply3;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply3 = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start4, transform) {
      start4 = nativeMax(start4 === void 0 ? func.length - 1 : start4, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start4, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start4 + index];
        }
        index = -1;
        var otherArgs = Array(start4 + 1);
        while (++index < start4) {
          otherArgs[index] = args[index];
        }
        otherArgs[start4] = transform(array);
        return apply3(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count2 = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count2 >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count2 = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start4) {
      return setToString(overRest(func, start4, identity), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject2 = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i = 0; i < selection.rangeCount; i++) {
        ranges.push(selection.getRangeAt(i));
      }
      switch (active.tagName.toUpperCase()) {
        // .toUpperCase handles XHTML
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range) {
            selection.addRange(range);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy(text2, options) {
      var debug, message, reselectPrevious, range, selection, mark, success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text2;
        mark.ariaHidden = "true";
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e) {
          e.stopPropagation();
          if (options.format) {
            e.preventDefault();
            if (typeof e.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format2, text2);
            } else {
              e.clipboardData.clearData();
              e.clipboardData.setData(options.format, text2);
            }
          }
          if (options.onCopy) {
            e.preventDefault();
            options.onCopy(e.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range.selectNodeContents(mark);
        selection.addRange(range);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text2);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format("message" in options ? options.message : defaultMessage);
          window.prompt(message, text2);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy;
  }
});

// node_modules/react-copy-to-clipboard/lib/Component.js
var require_Component = __commonJS({
  "node_modules/react-copy-to-clipboard/lib/Component.js"(exports) {
    "use strict";
    function _typeof2(obj) {
      "@babel/helpers - typeof";
      return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof2(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CopyToClipboard = void 0;
    var _react = _interopRequireDefault(require_react());
    var _copyToClipboard = _interopRequireDefault(require_copy_to_clipboard());
    var _excluded5 = ["text", "onCopy", "options", "children"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys3(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
          _defineProperty3(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose2(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose2(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf2(subClass, superClass);
    }
    function _setPrototypeOf2(o, p) {
      _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf2(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof2(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var CopyToClipboard2 = function(_React$PureComponent) {
      _inherits(CopyToClipboard3, _React$PureComponent);
      var _super = _createSuper(CopyToClipboard3);
      function CopyToClipboard3() {
        var _this;
        _classCallCheck(this, CopyToClipboard3);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty3(_assertThisInitialized2(_this), "onClick", function(event) {
          var _this$props = _this.props, text2 = _this$props.text, onCopy = _this$props.onCopy, children2 = _this$props.children, options = _this$props.options;
          var elem = _react["default"].Children.only(children2);
          var result = (0, _copyToClipboard["default"])(text2, options);
          if (onCopy) {
            onCopy(text2, result);
          }
          if (elem && elem.props && typeof elem.props.onClick === "function") {
            elem.props.onClick(event);
          }
        });
        return _this;
      }
      _createClass(CopyToClipboard3, [{
        key: "render",
        value: function render() {
          var _this$props2 = this.props, _text = _this$props2.text, _onCopy = _this$props2.onCopy, _options = _this$props2.options, children2 = _this$props2.children, props = _objectWithoutProperties(_this$props2, _excluded5);
          var elem = _react["default"].Children.only(children2);
          return _react["default"].cloneElement(elem, _objectSpread(_objectSpread({}, props), {}, {
            onClick: this.onClick
          }));
        }
      }]);
      return CopyToClipboard3;
    }(_react["default"].PureComponent);
    exports.CopyToClipboard = CopyToClipboard2;
    _defineProperty3(CopyToClipboard2, "defaultProps", {
      onCopy: void 0,
      options: void 0
    });
  }
});

// node_modules/react-copy-to-clipboard/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-copy-to-clipboard/lib/index.js"(exports, module) {
    "use strict";
    var _require = require_Component();
    var CopyToClipboard2 = _require.CopyToClipboard;
    CopyToClipboard2.CopyToClipboard = CopyToClipboard2;
    module.exports = CopyToClipboard2;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual7(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual7;
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  }
});

// node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "node_modules/react-redux/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType2(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer2(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement4(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement4;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-redux/node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "node_modules/react-redux/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  }
});

// node_modules/lodash/_baseRange.js
var require_baseRange = __commonJS({
  "node_modules/lodash/_baseRange.js"(exports, module) {
    var nativeCeil = Math.ceil;
    var nativeMax = Math.max;
    function baseRange(start4, end3, step, fromRight) {
      var index = -1, length = nativeMax(nativeCeil((end3 - start4) / (step || 1)), 0), result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index] = start4;
        start4 += step;
      }
      return result;
    }
    module.exports = baseRange;
  }
});

// node_modules/lodash/_createRange.js
var require_createRange = __commonJS({
  "node_modules/lodash/_createRange.js"(exports, module) {
    var baseRange = require_baseRange();
    var isIterateeCall = require_isIterateeCall();
    var toFinite = require_toFinite();
    function createRange(fromRight) {
      return function(start4, end3, step) {
        if (step && typeof step != "number" && isIterateeCall(start4, end3, step)) {
          end3 = step = void 0;
        }
        start4 = toFinite(start4);
        if (end3 === void 0) {
          end3 = start4;
          start4 = 0;
        } else {
          end3 = toFinite(end3);
        }
        step = step === void 0 ? start4 < end3 ? 1 : -1 : toFinite(step);
        return baseRange(start4, end3, step, fromRight);
      };
    }
    module.exports = createRange;
  }
});

// node_modules/lodash/range.js
var require_range = __commonJS({
  "node_modules/lodash/range.js"(exports, module) {
    var createRange = require_createRange();
    var range = createRange();
    module.exports = range;
  }
});

// node_modules/lodash/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/lodash/isEmpty.js"(exports, module) {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLike = require_isArrayLike();
    var isBuffer = require_isBuffer();
    var isPrototype = require_isPrototype();
    var isTypedArray = require_isTypedArray();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function isEmpty2(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }
    module.exports = isEmpty2;
  }
});

// node_modules/lodash/uniq.js
var require_uniq = __commonJS({
  "node_modules/lodash/uniq.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniq2(array) {
      return array && array.length ? baseUniq(array) : [];
    }
    module.exports = uniq2;
  }
});

// node_modules/lodash/_baseSum.js
var require_baseSum = __commonJS({
  "node_modules/lodash/_baseSum.js"(exports, module) {
    function baseSum(array, iteratee) {
      var result, index = -1, length = array.length;
      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== void 0) {
          result = result === void 0 ? current : result + current;
        }
      }
      return result;
    }
    module.exports = baseSum;
  }
});

// node_modules/lodash/sumBy.js
var require_sumBy = __commonJS({
  "node_modules/lodash/sumBy.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var baseSum = require_baseSum();
    function sumBy(array, iteratee) {
      return array && array.length ? baseSum(array, baseIteratee(iteratee, 2)) : 0;
    }
    module.exports = sumBy;
  }
});

// node_modules/lodash/_baseHas.js
var require_baseHas = __commonJS({
  "node_modules/lodash/_baseHas.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }
    module.exports = baseHas;
  }
});

// node_modules/lodash/has.js
var require_has2 = __commonJS({
  "node_modules/lodash/has.js"(exports, module) {
    var baseHas = require_baseHas();
    var hasPath = require_hasPath();
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }
    module.exports = has;
  }
});

// node_modules/lodash/isNumber.js
var require_isNumber = __commonJS({
  "node_modules/lodash/isNumber.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var numberTag = "[object Number]";
    function isNumber(value) {
      return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
    }
    module.exports = isNumber;
  }
});

// node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array, values3, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values3.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values3 = arrayMap(values3, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values3.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values3 = new SetCache(values3);
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values3[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values3, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/difference.js
var require_difference = __commonJS({
  "node_modules/lodash/difference.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var difference = baseRest(function(array, values3) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true)) : [];
    });
    module.exports = difference;
  }
});

// node_modules/lodash/union.js
var require_union = __commonJS({
  "node_modules/lodash/union.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    var baseRest = require_baseRest();
    var baseUniq = require_baseUniq();
    var isArrayLikeObject = require_isArrayLikeObject();
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    module.exports = union;
  }
});

// node_modules/lodash/without.js
var require_without = __commonJS({
  "node_modules/lodash/without.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var without = baseRest(function(array, values3) {
      return isArrayLikeObject(array) ? baseDifference(array, values3) : [];
    });
    module.exports = without;
  }
});

// node_modules/lodash/isString.js
var require_isString = __commonJS({
  "node_modules/lodash/isString.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module) {
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module.exports = last;
  }
});

// node_modules/blueimp-md5/js/md5.js
var require_md5 = __commonJS({
  "node_modules/blueimp-md5/js/md5.js"(exports, module) {
    (function($) {
      "use strict";
      function safeAdd(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      }
      function bitRotateLeft(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
      }
      function md5cmn(q, a, b84, x, s, t) {
        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b84);
      }
      function md5ff(a, b84, c, d, x, s, t) {
        return md5cmn(b84 & c | ~b84 & d, a, b84, x, s, t);
      }
      function md5gg(a, b84, c, d, x, s, t) {
        return md5cmn(b84 & d | c & ~d, a, b84, x, s, t);
      }
      function md5hh(a, b84, c, d, x, s, t) {
        return md5cmn(b84 ^ c ^ d, a, b84, x, s, t);
      }
      function md5ii(a, b84, c, d, x, s, t) {
        return md5cmn(c ^ (b84 | ~d), a, b84, x, s, t);
      }
      function binlMD5(x, len) {
        x[len >> 5] |= 128 << len % 32;
        x[(len + 64 >>> 9 << 4) + 14] = len;
        var i;
        var olda;
        var oldb;
        var oldc;
        var oldd;
        var a = 1732584193;
        var b84 = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (i = 0; i < x.length; i += 16) {
          olda = a;
          oldb = b84;
          oldc = c;
          oldd = d;
          a = md5ff(a, b84, c, d, x[i], 7, -680876936);
          d = md5ff(d, a, b84, c, x[i + 1], 12, -389564586);
          c = md5ff(c, d, a, b84, x[i + 2], 17, 606105819);
          b84 = md5ff(b84, c, d, a, x[i + 3], 22, -1044525330);
          a = md5ff(a, b84, c, d, x[i + 4], 7, -176418897);
          d = md5ff(d, a, b84, c, x[i + 5], 12, 1200080426);
          c = md5ff(c, d, a, b84, x[i + 6], 17, -1473231341);
          b84 = md5ff(b84, c, d, a, x[i + 7], 22, -45705983);
          a = md5ff(a, b84, c, d, x[i + 8], 7, 1770035416);
          d = md5ff(d, a, b84, c, x[i + 9], 12, -1958414417);
          c = md5ff(c, d, a, b84, x[i + 10], 17, -42063);
          b84 = md5ff(b84, c, d, a, x[i + 11], 22, -1990404162);
          a = md5ff(a, b84, c, d, x[i + 12], 7, 1804603682);
          d = md5ff(d, a, b84, c, x[i + 13], 12, -40341101);
          c = md5ff(c, d, a, b84, x[i + 14], 17, -1502002290);
          b84 = md5ff(b84, c, d, a, x[i + 15], 22, 1236535329);
          a = md5gg(a, b84, c, d, x[i + 1], 5, -165796510);
          d = md5gg(d, a, b84, c, x[i + 6], 9, -1069501632);
          c = md5gg(c, d, a, b84, x[i + 11], 14, 643717713);
          b84 = md5gg(b84, c, d, a, x[i], 20, -373897302);
          a = md5gg(a, b84, c, d, x[i + 5], 5, -701558691);
          d = md5gg(d, a, b84, c, x[i + 10], 9, 38016083);
          c = md5gg(c, d, a, b84, x[i + 15], 14, -660478335);
          b84 = md5gg(b84, c, d, a, x[i + 4], 20, -405537848);
          a = md5gg(a, b84, c, d, x[i + 9], 5, 568446438);
          d = md5gg(d, a, b84, c, x[i + 14], 9, -1019803690);
          c = md5gg(c, d, a, b84, x[i + 3], 14, -187363961);
          b84 = md5gg(b84, c, d, a, x[i + 8], 20, 1163531501);
          a = md5gg(a, b84, c, d, x[i + 13], 5, -1444681467);
          d = md5gg(d, a, b84, c, x[i + 2], 9, -51403784);
          c = md5gg(c, d, a, b84, x[i + 7], 14, 1735328473);
          b84 = md5gg(b84, c, d, a, x[i + 12], 20, -1926607734);
          a = md5hh(a, b84, c, d, x[i + 5], 4, -378558);
          d = md5hh(d, a, b84, c, x[i + 8], 11, -2022574463);
          c = md5hh(c, d, a, b84, x[i + 11], 16, 1839030562);
          b84 = md5hh(b84, c, d, a, x[i + 14], 23, -35309556);
          a = md5hh(a, b84, c, d, x[i + 1], 4, -1530992060);
          d = md5hh(d, a, b84, c, x[i + 4], 11, 1272893353);
          c = md5hh(c, d, a, b84, x[i + 7], 16, -155497632);
          b84 = md5hh(b84, c, d, a, x[i + 10], 23, -1094730640);
          a = md5hh(a, b84, c, d, x[i + 13], 4, 681279174);
          d = md5hh(d, a, b84, c, x[i], 11, -358537222);
          c = md5hh(c, d, a, b84, x[i + 3], 16, -722521979);
          b84 = md5hh(b84, c, d, a, x[i + 6], 23, 76029189);
          a = md5hh(a, b84, c, d, x[i + 9], 4, -640364487);
          d = md5hh(d, a, b84, c, x[i + 12], 11, -421815835);
          c = md5hh(c, d, a, b84, x[i + 15], 16, 530742520);
          b84 = md5hh(b84, c, d, a, x[i + 2], 23, -995338651);
          a = md5ii(a, b84, c, d, x[i], 6, -198630844);
          d = md5ii(d, a, b84, c, x[i + 7], 10, 1126891415);
          c = md5ii(c, d, a, b84, x[i + 14], 15, -1416354905);
          b84 = md5ii(b84, c, d, a, x[i + 5], 21, -57434055);
          a = md5ii(a, b84, c, d, x[i + 12], 6, 1700485571);
          d = md5ii(d, a, b84, c, x[i + 3], 10, -1894986606);
          c = md5ii(c, d, a, b84, x[i + 10], 15, -1051523);
          b84 = md5ii(b84, c, d, a, x[i + 1], 21, -2054922799);
          a = md5ii(a, b84, c, d, x[i + 8], 6, 1873313359);
          d = md5ii(d, a, b84, c, x[i + 15], 10, -30611744);
          c = md5ii(c, d, a, b84, x[i + 6], 15, -1560198380);
          b84 = md5ii(b84, c, d, a, x[i + 13], 21, 1309151649);
          a = md5ii(a, b84, c, d, x[i + 4], 6, -145523070);
          d = md5ii(d, a, b84, c, x[i + 11], 10, -1120210379);
          c = md5ii(c, d, a, b84, x[i + 2], 15, 718787259);
          b84 = md5ii(b84, c, d, a, x[i + 9], 21, -343485551);
          a = safeAdd(a, olda);
          b84 = safeAdd(b84, oldb);
          c = safeAdd(c, oldc);
          d = safeAdd(d, oldd);
        }
        return [a, b84, c, d];
      }
      function binl2rstr(input) {
        var i;
        var output = "";
        var length32 = input.length * 32;
        for (i = 0; i < length32; i += 8) {
          output += String.fromCharCode(input[i >> 5] >>> i % 32 & 255);
        }
        return output;
      }
      function rstr2binl(input) {
        var i;
        var output = [];
        output[(input.length >> 2) - 1] = void 0;
        for (i = 0; i < output.length; i += 1) {
          output[i] = 0;
        }
        var length8 = input.length * 8;
        for (i = 0; i < length8; i += 8) {
          output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << i % 32;
        }
        return output;
      }
      function rstrMD5(s) {
        return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
      }
      function rstrHMACMD5(key, data) {
        var i;
        var bkey = rstr2binl(key);
        var ipad = [];
        var opad = [];
        var hash3;
        ipad[15] = opad[15] = void 0;
        if (bkey.length > 16) {
          bkey = binlMD5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
          ipad[i] = bkey[i] ^ 909522486;
          opad[i] = bkey[i] ^ 1549556828;
        }
        hash3 = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binlMD5(opad.concat(hash3), 512 + 128));
      }
      function rstr2hex(input) {
        var hexTab = "0123456789abcdef";
        var output = "";
        var x;
        var i;
        for (i = 0; i < input.length; i += 1) {
          x = input.charCodeAt(i);
          output += hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15);
        }
        return output;
      }
      function str2rstrUTF8(input) {
        return unescape(encodeURIComponent(input));
      }
      function rawMD5(s) {
        return rstrMD5(str2rstrUTF8(s));
      }
      function hexMD5(s) {
        return rstr2hex(rawMD5(s));
      }
      function rawHMACMD5(k, d) {
        return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
      }
      function hexHMACMD5(k, d) {
        return rstr2hex(rawHMACMD5(k, d));
      }
      function md52(string, key, raw) {
        if (!key) {
          if (!raw) {
            return hexMD5(string);
          }
          return rawMD5(string);
        }
        if (!raw) {
          return hexHMACMD5(key, string);
        }
        return rawHMACMD5(key, string);
      }
      if (typeof define === "function" && define.amd) {
        define(function() {
          return md52;
        });
      } else if (typeof module === "object" && module.exports) {
        module.exports = md52;
      } else {
        $.md5 = md52;
      }
    })(exports);
  }
});

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/MobileContext.js
var import_react = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/utils/cn.js
var import_classname = __toESM(require_classname());
var NAMESPACE = "yc-";
var NAMESPACE_NEW = "g-";
var cn = (0, import_classname.withNaming)({ e: "__", m: "_" });
var block = (0, import_classname.withNaming)({ n: NAMESPACE, e: "__", m: "_" });
var blockNew = (0, import_classname.withNaming)({ n: NAMESPACE_NEW, e: "__", m: "_" });
function modsClassName(className) {
  return className.split(/\s(.*)/)[1];
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/constants.js
var Platform;
(function(Platform2) {
  Platform2["IOS"] = "ios";
  Platform2["ANDROID"] = "android";
  Platform2["BROWSER"] = "browser";
})(Platform || (Platform = {}));
var b = block("root");
var rootMobileClassName = b({ mobile: true }).split(/\s+/)[1];

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/MobileContext.js
var initialValue = {
  mobile: false,
  platform: Platform.BROWSER,
  useHistory: () => ({ action: "", replace() {
  }, push() {
  }, goBack() {
  } }),
  useLocation: () => ({ pathname: "", search: "", hash: "" }),
  setMobile: () => {
  },
  setPlatform: () => {
  }
};
var MobileContext = import_react.default.createContext(initialValue);

// node_modules/tslib/tslib.es6.mjs
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/MobileProvider.js
var import_react2 = __toESM(require_react());
function useHistoryMock() {
  return { action: "", replace() {
  }, push() {
  }, goBack() {
  } };
}
function useLocationMock() {
  return { pathname: "", search: "", hash: "" };
}
function MobileProvider({ mobile = false, platform = Platform.BROWSER, useHistory = useHistoryMock, useLocation = useLocationMock, children: children2 }) {
  const [mobileValue, setMobile] = import_react2.default.useState(mobile);
  const [platformValue, setPlatform] = import_react2.default.useState(platform);
  const useHistoryFunction = import_react2.default.useCallback(function useHistoryFunction2() {
    const _a = useHistory(), { goBack, back } = _a, props = __rest(_a, ["goBack", "back"]);
    let goBackFunction;
    if (typeof goBack === "function") {
      goBackFunction = goBack;
    } else if (typeof back === "function") {
      goBackFunction = back;
    } else {
      goBackFunction = () => {
      };
    }
    return Object.assign(Object.assign({}, props), { goBack: goBackFunction });
  }, [useHistory]);
  import_react2.default.useEffect(() => {
    document.body.classList.toggle(rootMobileClassName, mobileValue);
  }, [rootMobileClassName, mobileValue]);
  const state = import_react2.default.useMemo(() => {
    return {
      mobile: mobileValue,
      setMobile,
      platform: platformValue,
      setPlatform,
      useLocation,
      useHistory: useHistoryFunction
    };
  }, [mobileValue, platformValue, useLocation, useHistoryFunction]);
  return import_react2.default.createElement(MobileContext.Provider, { value: state }, children2);
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/useMobile.js
var import_react3 = __toESM(require_react());
function useMobile() {
  const { mobile, setMobile } = import_react3.default.useContext(MobileContext);
  return [mobile, setMobile];
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/usePlatform.js
var import_react4 = __toESM(require_react());
function usePlatform() {
  const { platform, setPlatform } = import_react4.default.useContext(MobileContext);
  return [platform, setPlatform];
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/withMobile.js
var import_react5 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/utils/getComponentName.js
function getComponentName(Component2) {
  return Component2.displayName || Component2.name || "Component";
}

// node_modules/@gravity-ui/uikit/build/esm/components/mobile/withMobile.js
function withMobile(WrappedComponent) {
  var _a;
  const componentName = getComponentName(WrappedComponent);
  return _a = class WithMobileComponent extends import_react5.default.Component {
    render() {
      return import_react5.default.createElement(WrappedComponent, Object.assign({}, this.props, { mobile: this.context.mobile, platform: this.context.platform, useHistory: this.context.useHistory, useLocation: this.context.useLocation, setMobile: this.context.setMobile, setPlatform: this.context.setPlatform }));
    }
  }, _a.displayName = `withMobile(${componentName})`, _a.contextType = MobileContext, _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeContext.js
var import_react6 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/theme/constants.js
var DEFAULT_THEME = "system";
var DEFAULT_LIGHT_THEME = "light";
var DEFAULT_DARK_THEME = "dark";
var LIGHT_THEMES = ["light", "light-hc"];
var DARK_THEMES = ["dark", "dark-hc"];
var THEMES = [...LIGHT_THEMES, ...DARK_THEMES];

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeContext.js
var initialValue2 = {
  theme: DEFAULT_THEME,
  themeValue: DEFAULT_LIGHT_THEME
};
var ThemeContext = import_react6.default.createContext(initialValue2);
ThemeContext.displayName = "ThemeContext";

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeProvider.js
var import_react9 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeSettingsContext.js
var import_react7 = __toESM(require_react());
var ThemeSettingsContext = import_react7.default.createContext(void 0);
ThemeSettingsContext.displayName = "ThemeSettingsContext";

// node_modules/@gravity-ui/uikit/build/esm/components/theme/getBodyClassName.js
var ROOT_CLASS_NAME = "root";
var bNew = blockNew(ROOT_CLASS_NAME);
var b2 = block(ROOT_CLASS_NAME);
function getDeprecatedRootClassName(modifier) {
  return b2(modifier);
}
function getRootClassName(modifier, addition) {
  return bNew(modifier, addition);
}
function getInitialRootClassName(props = {}) {
  const { theme } = props;
  return getRootClassName({ theme });
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/updateBodyClassName.js
var rootClassName = getDeprecatedRootClassName();
var rootNewClassName = getRootClassName();
var defaultModifiers = {
  "native-scrollbar": false
};
function updateBodyClassName(newTheme, modifiers, customRootClassName, prevCustomRootClassName) {
  const bodyEl = document.body;
  if (!bodyEl.classList.contains(rootClassName)) {
    bodyEl.classList.add(rootClassName);
  }
  if (!bodyEl.classList.contains(rootNewClassName)) {
    bodyEl.classList.add(rootNewClassName);
  }
  if (prevCustomRootClassName) {
    const parsedPrevCustomRootClassNames = prevCustomRootClassName.split(" ");
    parsedPrevCustomRootClassNames.forEach((cls) => {
      if (cls) {
        bodyEl.classList.remove(cls);
      }
    });
  }
  if (customRootClassName) {
    const parsedCustomRootClassNames = customRootClassName.split(" ");
    parsedCustomRootClassNames.forEach((cls) => {
      if (cls && !bodyEl.classList.contains(cls)) {
        bodyEl.classList.add(cls);
      }
    });
  }
  [...bodyEl.classList].forEach((cls) => {
    if (cls.startsWith(modsClassName(getDeprecatedRootClassName({ theme: true })))) {
      bodyEl.classList.remove(cls);
    }
    if (cls.startsWith(modsClassName(getRootClassName({ theme: true })))) {
      bodyEl.classList.remove(cls);
    }
  });
  bodyEl.classList.add(modsClassName(getDeprecatedRootClassName({ theme: newTheme })));
  bodyEl.classList.add(modsClassName(getRootClassName({ theme: newTheme })));
  for (const [key, value] of Object.entries(Object.assign(Object.assign({}, defaultModifiers), modifiers))) {
    bodyEl.classList.toggle(modsClassName(getDeprecatedRootClassName({ [key]: true })), value);
    bodyEl.classList.toggle(modsClassName(getRootClassName({ [key]: true })), value);
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useSystemTheme.js
var import_react8 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/theme/getDarkMediaMatch.js
var getDarkMediaMatch = () => window.matchMedia("(prefers-color-scheme: dark)");

// node_modules/@gravity-ui/uikit/build/esm/components/theme/getSystemTheme.js
function getSystemTheme() {
  if (typeof window === "object") {
    return getDarkMediaMatch().matches ? "dark" : "light";
  } else {
    return "light";
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useSystemTheme.js
function addListener(matcher, handler) {
  const isLegacyMethod = typeof matcher.addEventListener !== "function";
  if (isLegacyMethod) {
    matcher.addListener(handler);
  } else {
    matcher.addEventListener("change", handler);
  }
  return () => {
    if (isLegacyMethod) {
      matcher.removeListener(handler);
    } else {
      matcher.removeEventListener("change", handler);
    }
  };
}
function useSystemTheme() {
  const [theme, setTheme] = import_react8.default.useState(getSystemTheme());
  import_react8.default.useEffect(() => {
    function onChange(event) {
      setTheme(event.matches ? "dark" : "light");
    }
    const matcher = getDarkMediaMatch();
    const unsubscribe = addListener(matcher, onChange);
    return () => unsubscribe();
  }, []);
  return theme;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/ThemeProvider.js
function ThemeProvider({ theme = DEFAULT_THEME, systemLightTheme = DEFAULT_LIGHT_THEME, systemDarkTheme = DEFAULT_DARK_THEME, nativeScrollbar = false, scoped = false, rootClassName: rootClassName2 = "", children: children2 }) {
  const systemTheme = useSystemTheme() === "light" ? systemLightTheme : systemDarkTheme;
  const themeValue = theme === "system" ? systemTheme : theme;
  const prevRootClassName = import_react9.default.useRef("");
  import_react9.default.useEffect(() => {
    if (!scoped) {
      updateBodyClassName(themeValue, { "native-scrollbar": nativeScrollbar }, rootClassName2, prevRootClassName.current);
      prevRootClassName.current = rootClassName2;
    }
  }, [nativeScrollbar, themeValue, scoped, rootClassName2]);
  const contextValue = import_react9.default.useMemo(() => ({
    theme,
    themeValue
  }), [theme, themeValue]);
  const themeSettingsContext = import_react9.default.useMemo(() => ({ systemLightTheme, systemDarkTheme }), [systemLightTheme, systemDarkTheme]);
  return import_react9.default.createElement(
    ThemeContext.Provider,
    { value: contextValue },
    import_react9.default.createElement(ThemeSettingsContext.Provider, { value: themeSettingsContext }, scoped ? import_react9.default.createElement("div", { className: getRootClassName({ theme: themeValue, "native-scrollbar": nativeScrollbar }, [
      getDeprecatedRootClassName({
        theme: themeValue,
        "native-scrollbar": nativeScrollbar
      }),
      rootClassName2
    ]) }, children2) : children2)
  );
}
ThemeProvider.displayName = "ThemeProvider";

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useTheme.js
var import_react10 = __toESM(require_react());
function useTheme() {
  const { theme } = import_react10.default.useContext(ThemeContext);
  return theme;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useThemeValue.js
var import_react11 = __toESM(require_react());
function useThemeValue() {
  const { themeValue } = import_react11.default.useContext(ThemeContext);
  return themeValue;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useThemeSettings.js
var import_react12 = __toESM(require_react());
function useThemeSettings() {
  const settings = import_react12.default.useContext(ThemeSettingsContext);
  if (settings === void 0) {
    throw new Error("useThemeSettings must be used within ThemeProvider");
  }
  return settings;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/getThemeType.js
function getThemeType(theme) {
  return DARK_THEMES.includes(theme) ? "dark" : "light";
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/useThemeType.js
function useThemeType() {
  const themeValue = useThemeValue();
  return getThemeType(themeValue);
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/withTheme.js
var import_react13 = __toESM(require_react());
function withTheme(WrappedComponent) {
  var _a;
  const componentName = getComponentName(WrappedComponent);
  return _a = class WithThemeComponent extends import_react13.default.Component {
    render() {
      return import_react13.default.createElement(WrappedComponent, Object.assign({}, this.props, { theme: this.context.theme }));
    }
  }, _a.displayName = `withTheme(${componentName})`, _a.contextType = ThemeContext, _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/theme/withThemeValue.js
var import_react14 = __toESM(require_react());
function withThemeValue(WrappedComponent) {
  var _a;
  const componentName = getComponentName(WrappedComponent);
  return _a = class WithThemeValueComponent extends import_react14.default.Component {
    render() {
      return import_react14.default.createElement(WrappedComponent, Object.assign({}, this.props, { themeValue: this.context.themeValue }));
    }
  }, _a.displayName = `withThemeValue(${componentName})`, _a.contextType = ThemeContext, _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/ActionTooltip/ActionTooltip.js
var import_react60 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/Hotkey.js
var import_react15 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/definitions.js
var PcNormalizeMap = {
  arrowup: "up",
  arrowdown: "down",
  arrowleft: "left",
  arrowright: "right",
  esc: "escape",
  return: "enter",
  mod: "ctrl",
  control: "ctrl",
  opt: "alt",
  option: "alt",
  cmd: "ctrl",
  command: "ctrl"
};
var MacNormalizeMap = {
  arrowup: "up",
  arrowdown: "down",
  arrowleft: "left",
  arrowright: "right",
  esc: "escape",
  enter: "return",
  mod: "command",
  ctrl: "control",
  alt: "option",
  opt: "option",
  cmd: "command"
};
var PcDisplayName = {
  up: "↑",
  down: "↓",
  left: "←",
  right: "→",
  escape: "Esc",
  plus: "＋",
  enter: "Enter",
  ctrl: "Ctrl",
  alt: "Alt",
  shift: "Shift",
  tab: "Tab",
  backspace: "Backspace"
};
var MacDisplayName = {
  up: "▲",
  down: "▼",
  left: "◀",
  right: "▶",
  escape: "⎋",
  plus: "＋",
  return: "⏎",
  command: "⌘",
  option: "⌥",
  control: "⌃",
  shift: "⇧",
  backspace: "⌫",
  tab: "⇥"
};
var PcKeyPriority = {
  shift: 200,
  alt: 300,
  ctrl: 400
};
var MacKeyPriority = {
  command: 100,
  shift: 200,
  option: 300,
  control: 400
};
var defsByPlatform = {
  pc: {
    NormalizeMap: PcNormalizeMap,
    Priority: PcKeyPriority,
    DisplayName: PcDisplayName
  },
  mac: {
    NormalizeMap: MacNormalizeMap,
    Priority: MacKeyPriority,
    DisplayName: MacDisplayName
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/parse.js
var import_capitalize = __toESM(require_capitalize());
var import_uniqBy = __toESM(require_uniqBy());

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/utils.js
var isMac = () => typeof navigator !== "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
function split(val, separator) {
  return val.trim().split(separator).filter(Boolean);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/parse.js
var GROUPS_SEPARATOR = /\s/;
var KEYS_SEPARATOR = "+";
function parseKeyGroups(defs, value) {
  return split(value, GROUPS_SEPARATOR).map((keys) => (0, import_uniqBy.default)(
    split(keys, KEYS_SEPARATOR).map(keyParser(defs)).sort((a, b84) => b84.priority - a.priority),
    // high to low
    (key) => key.id
  ).map(renderKey));
}
function keyParser(defs) {
  return function(raw) {
    var _a;
    const keyId = getKeyId(defs, raw);
    return {
      raw,
      id: keyId,
      priority: (_a = defs.Priority[keyId]) !== null && _a !== void 0 ? _a : 0,
      displayName: defs.DisplayName[keyId]
    };
  };
}
function getKeyId(defs, val) {
  var _a;
  val = val.toLowerCase();
  return (_a = defs.NormalizeMap[val]) !== null && _a !== void 0 ? _a : val;
}
function renderKey(key) {
  var _a;
  return (_a = key.displayName) !== null && _a !== void 0 ? _a : (0, import_capitalize.default)(key.id);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/Hotkey.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Hotkey/Hotkey.css";
var b3 = block("hotkey");
var Spaces = {
  BetweenGroups: String.fromCharCode(160),
  BetweenKeys: String.fromCharCode(8239)
  // Narrow No-Break Space
};
var Hotkey = import_react15.default.forwardRef(function Hotkey2(props, ref2) {
  const { value, platform, view = "light", qa, style: style3, className } = props;
  const groups = parseHotkeys(value, { platform });
  const content = [];
  let hasGroups = false;
  groups.forEach((keys, groupIdx) => {
    if (keys.length === 0)
      return;
    if (hasGroups) {
      content.push(Spaces.BetweenGroups);
    } else {
      hasGroups = true;
    }
    keys.forEach((key, keyIdx) => {
      const isFirstKey = keyIdx === 0;
      if (!isFirstKey) {
        content.push(Spaces.BetweenKeys, import_react15.default.createElement("span", { key: `${key}_${groupIdx}_${keyIdx}_plus`, className: b3("plus") }, "+"), Spaces.BetweenKeys);
      }
      content.push(import_react15.default.createElement("kbd", { key: `${key}_${groupIdx}_${keyIdx}` }, key));
    });
  });
  if (content.length === 0)
    return null;
  return import_react15.default.createElement("kbd", { ref: ref2, style: style3, "data-qa": qa, className: b3({ view }, className) }, content);
});
function parseHotkeys(value, opts) {
  var _a;
  const platform = (_a = opts.platform) !== null && _a !== void 0 ? _a : isMac() ? "mac" : "pc";
  const defs = defsByPlatform[platform];
  return parseKeyGroups(defs, value);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Tooltip/Tooltip.js
var import_react59 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/constants.js
var KeyCode = {
  BACKSPACE: "Backspace",
  ENTER: "Enter",
  TAB: "Tab",
  // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values#whitespace_keys
  SPACEBAR: " ",
  SPACEBAR_OLD: "Spacebar",
  ESCAPE: "Escape",
  ARROW_UP: "ArrowUp",
  ARROW_DOWN: "ArrowDown"
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useActionHandlers/useActionHandlers.js
var import_react16 = __toESM(require_react());
function useActionHandlers(callback) {
  const onKeyDown = import_react16.default.useCallback((event) => {
    if (callback && [KeyCode.ENTER, KeyCode.SPACEBAR, KeyCode.SPACEBAR_OLD].includes(event.key)) {
      callback(event);
    }
  }, [callback]);
  return { onKeyDown };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useAsyncActionHandler/useAsyncActionHandler.js
var import_react17 = __toESM(require_react());
function useAsyncActionHandler({ handler }) {
  const [isLoading, setLoading] = import_react17.default.useState(false);
  const handleAction = import_react17.default.useCallback(async (...args) => {
    setLoading(true);
    try {
      return await handler(...args);
    } finally {
      setLoading(false);
    }
  }, [handler]);
  return {
    isLoading,
    handler: handleAction
  };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useBodyScrollLock/useBodyScrollLock.js
var import_react18 = __toESM(require_react());
var locks = 0;
var storedBodyStyle;
function useBodyScrollLock({ enabled }) {
  import_react18.default.useLayoutEffect(() => {
    if (enabled) {
      locks++;
      if (locks === 1) {
        setBodyStyles();
      }
      return () => {
        locks--;
        if (locks === 0) {
          restoreBodyStyles();
        }
      };
    }
    return void 0;
  }, [enabled]);
}
function setBodyStyles() {
  const yScrollbarWidth = getYScrollbarWidth();
  const xScrollbarWidth = getXScrollbarWidth();
  const bodyPadding = getBodyComputedPadding();
  storedBodyStyle = document.body.style.cssText;
  document.body.style.overflow = "hidden";
  if (yScrollbarWidth) {
    document.body.style.paddingRight = `${bodyPadding.right + yScrollbarWidth}px`;
  }
  if (xScrollbarWidth) {
    document.body.style.paddingBottom = `${bodyPadding.bottom + xScrollbarWidth}px`;
  }
}
function restoreBodyStyles() {
  if (storedBodyStyle) {
    document.body.style.cssText = storedBodyStyle;
  } else {
    document.body.removeAttribute("style");
  }
}
function getYScrollbarWidth() {
  return window.innerWidth - document.documentElement.clientWidth;
}
function getXScrollbarWidth() {
  return window.innerHeight - document.documentElement.clientHeight;
}
function getBodyComputedPadding() {
  const computedStyle = window.getComputedStyle(document.body);
  return {
    top: Number.parseFloat(computedStyle.paddingTop),
    right: Number.parseFloat(computedStyle.paddingRight),
    bottom: Number.parseFloat(computedStyle.paddingBottom),
    left: Number.parseFloat(computedStyle.paddingLeft)
  };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFileInput/useFileInput.js
var import_react19 = __toESM(require_react());
function useFileInput({ onUpdate, onChange }) {
  const ref2 = import_react19.default.useRef(null);
  const handleChange = import_react19.default.useCallback((event) => {
    onChange === null || onChange === void 0 ? void 0 : onChange(event);
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(Array.from(event.target.files || []));
    event.target.value = "";
  }, [onChange, onUpdate]);
  const openDeviceStorage = import_react19.default.useCallback(() => {
    var _a;
    (_a = ref2.current) === null || _a === void 0 ? void 0 : _a.click();
  }, []);
  const result = import_react19.default.useMemo(() => ({
    controlProps: {
      ref: ref2,
      type: "file",
      tabIndex: -1,
      style: { opacity: 0, position: "absolute", width: 1, height: 1 },
      onChange: handleChange
    },
    triggerProps: {
      onClick: openDeviceStorage
    }
  }), [handleChange, openDeviceStorage]);
  return result;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/useFocusWithin.js
var import_react21 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/SyntheticFocusEvent.js
var SyntheticFocusEvent = class {
  constructor(type, nativeEvent, override = {}) {
    var _a, _b;
    this.nativeEvent = nativeEvent;
    this.target = (_a = override.target) !== null && _a !== void 0 ? _a : nativeEvent.target;
    this.currentTarget = (_b = override.currentTarget) !== null && _b !== void 0 ? _b : nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {
  }
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/useSyntheticBlurEvent.js
var import_react20 = __toESM(require_react());
function useSyntheticBlurEvent(onBlur) {
  const stateRef = import_react20.default.useRef({
    isFocused: false,
    observer: null
  });
  import_react20.default.useEffect(() => {
    const state = stateRef.current;
    return () => {
      if (state.observer) {
        state.observer.disconnect();
        state.observer = null;
      }
    };
  }, []);
  const handleFocus = import_react20.default.useCallback((event) => {
    const target = event.target;
    if (target instanceof HTMLButtonElement || target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = true;
      const handleBlur = (e) => {
        stateRef.current.isFocused = false;
        if (target.disabled) {
          onBlur === null || onBlur === void 0 ? void 0 : onBlur(new SyntheticFocusEvent("blur", e));
        }
        if (stateRef.current.observer) {
          stateRef.current.observer.disconnect();
          stateRef.current.observer = null;
        }
      };
      target.addEventListener("focusout", handleBlur, { once: true });
      const observer = new MutationObserver(() => {
        if (stateRef.current.isFocused && target.disabled) {
          observer.disconnect();
          stateRef.current.observer = null;
          const relatedTarget = target === document.activeElement ? null : document.activeElement;
          target.dispatchEvent(new FocusEvent("blur", { relatedTarget }));
          target.dispatchEvent(new FocusEvent("focusout", { relatedTarget, bubbles: true }));
        }
      });
      observer.observe(target, { attributes: true, attributeFilter: ["disabled"] });
      stateRef.current.observer = observer;
    }
  }, [onBlur]);
  return handleFocus;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useFocusWithin/useFocusWithin.js
function useFocusWithin(props) {
  const { onFocusWithin, onBlurWithin, onFocusWithinChange, isDisabled } = props;
  const isFocusWithinRef = import_react21.default.useRef(false);
  const onFocus = import_react21.default.useCallback((event) => {
    if (!isFocusWithinRef.current && document.activeElement === event.target) {
      isFocusWithinRef.current = true;
      if (onFocusWithin) {
        onFocusWithin(event);
      }
      if (onFocusWithinChange) {
        onFocusWithinChange(true);
      }
    }
  }, [onFocusWithin, onFocusWithinChange]);
  const onBlur = import_react21.default.useCallback((event) => {
    if (!isFocusWithinRef.current) {
      return;
    }
    isFocusWithinRef.current = false;
    if (onBlurWithin) {
      onBlurWithin(event);
    }
    if (onFocusWithinChange) {
      onFocusWithinChange(false);
    }
  }, [onBlurWithin, onFocusWithinChange]);
  const { onBlur: onBlurHandler, onFocus: onFocusHandler } = useFocusEvents({
    onFocus,
    onBlur,
    isDisabled
  });
  if (isDisabled) {
    return {
      focusWithinProps: {
        onFocus: void 0,
        onBlur: void 0
      }
    };
  }
  return {
    focusWithinProps: {
      onFocus: onFocusHandler,
      onBlur: onBlurHandler
    }
  };
}
function useFocusEvents({ onFocus, onBlur, isDisabled }) {
  const capturedRef = import_react21.default.useRef(false);
  const targetRef = import_react21.default.useRef(null);
  import_react21.default.useEffect(() => {
    if (isDisabled) {
      return void 0;
    }
    const handleFocus = function() {
      capturedRef.current = false;
    };
    const handleFocusIn = function(event) {
      if (!capturedRef.current && targetRef.current) {
        const blurEvent = new FocusEvent("blur", Object.assign(Object.assign({}, event), { relatedTarget: event.target, bubbles: false, cancelable: false }));
        onBlur(new SyntheticFocusEvent("blur", blurEvent, {
          target: targetRef.current,
          currentTarget: targetRef.current
        }));
        targetRef.current = null;
      }
    };
    window.addEventListener("focus", handleFocus, { capture: true });
    window.addEventListener("focusin", handleFocusIn);
    return () => {
      window.removeEventListener("focus", handleFocus, { capture: true });
      window.removeEventListener("focusin", handleFocusIn);
    };
  }, [isDisabled, onBlur]);
  const onBlurHandler = import_react21.default.useCallback((event) => {
    if (event.relatedTarget === null || event.relatedTarget === document.body || event.relatedTarget === document) {
      onBlur(event);
      targetRef.current = null;
    }
  }, [onBlur]);
  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);
  const onFocusHandler = import_react21.default.useCallback((event) => {
    capturedRef.current = true;
    targetRef.current = event.target;
    onSyntheticFocus(event);
    onFocus(event);
  }, [onSyntheticFocus, onFocus]);
  return { onBlur: onBlurHandler, onFocus: onFocusHandler };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useForkRef/useForkRef.js
var import_react22 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/hooks/useForkRef/setRef.js
function setRef(ref2, value) {
  if (typeof ref2 === "function") {
    ref2(value);
  } else if (ref2) {
    ref2.current = value;
  }
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useForkRef/useForkRef.js
function useForkRef(...refs) {
  return import_react22.default.useMemo(() => {
    if (refs.every((ref2) => ref2 === null || ref2 === void 0)) {
      return null;
    }
    return (value) => {
      for (const ref2 of refs) {
        setRef(ref2, value);
      }
    };
  }, refs);
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useIntersection/useIntersection.js
var import_react23 = __toESM(require_react());
var useIntersection = ({ element, options, onIntersect }) => {
  import_react23.default.useEffect(() => {
    const observer = new IntersectionObserver(([entry]) => {
      if (entry.isIntersecting) {
        onIntersect === null || onIntersect === void 0 ? void 0 : onIntersect();
      }
    }, options);
    if (element) {
      observer.observe(element);
    }
    return () => element === null ? void 0 : observer.unobserve(element);
  }, [element, options, onIntersect]);
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/useListNavigation.js
var import_react24 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/moveBack.js
function moveBack(items, activeItemIndex, steps = 1, skip) {
  const newActiveItemIndex = (items.length + activeItemIndex - steps % items.length) % items.length;
  if (skip && skip(items[newActiveItemIndex])) {
    return moveBack(items, newActiveItemIndex, 1, skip);
  }
  return newActiveItemIndex;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/moveForward.js
function moveForward(items, activeItemIndex, steps = 1, skip) {
  const newActiveItemIndex = (activeItemIndex + steps) % items.length;
  if (skip && skip(items[newActiveItemIndex])) {
    return moveForward(items, newActiveItemIndex, 1, skip);
  }
  return newActiveItemIndex;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useListNavigation/useListNavigation.js
function useListNavigation({ items, skip, pageSize, processHomeKey = true, processEndKey = true, anchorRef, disabled = false, initialValue: initialValue3 = -1, onAnchorKeyDown }) {
  const [activeItemIndex, setActiveItemIndex] = import_react24.default.useState(initialValue3);
  const reset = import_react24.default.useCallback(() => {
    setActiveItemIndex(initialValue3);
  }, [initialValue3]);
  import_react24.default.useEffect(() => {
    if (items) {
      reset();
    }
  }, [items, reset]);
  import_react24.default.useLayoutEffect(() => {
    if (disabled) {
      return void 0;
    }
    const canNavigate = items.some((item) => !(skip === null || skip === void 0 ? void 0 : skip(item)));
    if (!canNavigate) {
      return void 0;
    }
    const anchor = anchorRef === null || anchorRef === void 0 ? void 0 : anchorRef.current;
    if (!anchor) {
      return void 0;
    }
    const handleKeyDown = (event) => {
      const shouldProcessKeydown = onAnchorKeyDown === null || onAnchorKeyDown === void 0 ? void 0 : onAnchorKeyDown(activeItemIndex, event);
      if (shouldProcessKeydown === false) {
        return;
      }
      switch (event.key) {
        case "ArrowDown": {
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveForward(items, previousActiveItemIndex, 1, skip));
          break;
        }
        case "ArrowUp": {
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, 1, skip));
          break;
        }
        case "PageDown": {
          if (!pageSize) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveForward(items, previousActiveItemIndex, pageSize, skip));
          break;
        }
        case "PageUp": {
          if (!pageSize) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, pageSize, skip));
          break;
        }
        case "Home": {
          if (!processHomeKey) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, previousActiveItemIndex, skip));
          break;
        }
        case "End": {
          if (!processEndKey) {
            return;
          }
          event.preventDefault();
          setActiveItemIndex((previousActiveItemIndex) => moveBack(items, previousActiveItemIndex, previousActiveItemIndex + 1, skip));
          break;
        }
      }
    };
    anchor.addEventListener("keydown", handleKeyDown);
    return () => {
      anchor.removeEventListener("keydown", handleKeyDown);
    };
  }, [
    activeItemIndex,
    anchorRef,
    disabled,
    items,
    onAnchorKeyDown,
    pageSize,
    processEndKey,
    processHomeKey,
    skip
  ]);
  return {
    activeItemIndex,
    setActiveItemIndex,
    reset
  };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useOutsideClick/useOutsideClick.js
var import_react25 = __toESM(require_react());
var useOutsideClick = ({ ref: ref2, handler }) => {
  import_react25.default.useEffect(() => {
    const callback = (e) => {
      const elem = ref2 === null || ref2 === void 0 ? void 0 : ref2.current;
      if (elem && !elem.contains(e.target) && handler) {
        handler();
      }
    };
    window.addEventListener("mouseup", callback, { capture: true });
    window.addEventListener("touchend", callback, { capture: true });
    return () => {
      window.removeEventListener("mouseup", callback, { capture: true });
      window.removeEventListener("touchend", callback, { capture: true });
    };
  }, [handler, ref2]);
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/usePortalContainer/usePortalContainer.js
var import_react27 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/hooks/usePortalContainer/PortalProvider.js
var import_react26 = __toESM(require_react());
var PortalContext = import_react26.default.createContext({ current: null });
PortalContext.displayName = "PortalContext";
function PortalProvider({ container, children: children2 }) {
  return import_react26.default.createElement(PortalContext.Provider, { value: container }, children2);
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/usePortalContainer/usePortalContainer.js
function usePortalContainer() {
  var _a;
  const context = import_react27.default.useContext(PortalContext);
  let defaultContainer = null;
  if (typeof window === "object") {
    defaultContainer = window.document.body;
  }
  return (_a = context.current) !== null && _a !== void 0 ? _a : defaultContainer;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useSelect/useSelect.js
var import_react29 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/hooks/useSelect/useOpenState.js
var import_react28 = __toESM(require_react());
var useOpenState = (props) => {
  const [open, setOpenState] = import_react28.default.useState(props.defaultOpen || false);
  const { onOpenChange } = props;
  const isControlled = typeof props.open === "boolean";
  const openValue = isControlled ? props.open : open;
  const toggleOpen = import_react28.default.useCallback((val) => {
    const newOpen = typeof val === "boolean" ? val : !openValue;
    if (newOpen !== openValue) {
      onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(newOpen);
      if (!isControlled) {
        setOpenState(newOpen);
      }
    }
  }, [openValue, onOpenChange, isControlled]);
  return {
    open: openValue,
    toggleOpen
  };
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useSelect/useSelect.js
var useSelect = (props) => {
  const { value: valueProps, defaultValue = [], multiple, onUpdate } = props;
  const [innerValue, setInnerValue] = import_react29.default.useState(defaultValue);
  const [activeIndex, setActiveIndex] = import_react29.default.useState();
  const value = valueProps || innerValue;
  const uncontrolled = !valueProps;
  const _a = useOpenState(props), { toggleOpen } = _a, openState = __rest(_a, ["toggleOpen"]);
  const handleSingleSelection = import_react29.default.useCallback((option) => {
    if (!value.includes(option.value)) {
      const nextValue = [option.value];
      onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(nextValue);
      if (uncontrolled) {
        setInnerValue(nextValue);
      }
    }
    toggleOpen(false);
  }, [value, uncontrolled, onUpdate, toggleOpen]);
  const handleMultipleSelection = import_react29.default.useCallback((option) => {
    const alreadySelected = value.includes(option.value);
    const nextValue = alreadySelected ? value.filter((iteratedVal) => iteratedVal !== option.value) : [...value, option.value];
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(nextValue);
    if (uncontrolled) {
      setInnerValue(nextValue);
    }
  }, [value, uncontrolled, onUpdate]);
  const handleSelection = import_react29.default.useCallback((option) => {
    if (multiple) {
      handleMultipleSelection(option);
    } else {
      handleSingleSelection(option);
    }
  }, [multiple, handleSingleSelection, handleMultipleSelection]);
  const handleClearValue = import_react29.default.useCallback(() => {
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate([]);
    setInnerValue([]);
  }, [onUpdate]);
  return Object.assign({
    value,
    activeIndex,
    handleSelection,
    handleClearValue,
    /**
     * @deprecated use toggleOpen
     */
    setOpen: toggleOpen,
    toggleOpen,
    setActiveIndex
  }, openState);
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useTimeout/useTimeout.js
var import_react30 = __toESM(require_react());
function useTimeout(callback, ms) {
  import_react30.default.useEffect(() => {
    if (typeof ms !== "number") {
      return void 0;
    }
    const timer = setTimeout(() => {
      callback();
    }, ms);
    return () => {
      clearTimeout(timer);
    };
  }, [callback, ms]);
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useViewportSize/useViewportSize.js
var import_react31 = __toESM(require_react());
var getViewportSize = () => {
  var _a, _b, _c, _d, _e, _f;
  return {
    width: (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.visualViewport) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : window === null || window === void 0 ? void 0 : window.innerWidth) !== null && _c !== void 0 ? _c : void 0,
    height: (_f = (_e = (_d = window === null || window === void 0 ? void 0 : window.visualViewport) === null || _d === void 0 ? void 0 : _d.height) !== null && _e !== void 0 ? _e : window === null || window === void 0 ? void 0 : window.innerHeight) !== null && _f !== void 0 ? _f : void 0
  };
};
var useViewportSize = () => {
  const [size2, setSize] = import_react31.default.useState(getViewportSize());
  import_react31.default.useEffect(() => {
    var _a;
    const onResize = () => {
      let newSize = getViewportSize();
      if (newSize.width === (size2 === null || size2 === void 0 ? void 0 : size2.width) && newSize.height === (size2 === null || size2 === void 0 ? void 0 : size2.height)) {
        newSize = size2;
      }
      setSize(newSize);
    };
    ((_a = window.visualViewport) !== null && _a !== void 0 ? _a : window).addEventListener("resize", onResize);
    return () => {
      var _a2;
      ((_a2 = window.visualViewport) !== null && _a2 !== void 0 ? _a2 : window).removeEventListener("resize", onResize);
    };
  }, [size2]);
  return size2;
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/useVirtualElementRef/useVirtualElementRef.js
var import_react32 = __toESM(require_react());
var initialPosition = { top: 0, right: 0, bottom: 0, left: 0 };
function useVirtualElementRef(props = {}) {
  const { rect, contextElement } = props;
  const rectRef = import_react32.default.useRef(initialPosition);
  const ref2 = import_react32.default.useRef({
    contextElement,
    getBoundingClientRect() {
      const { top: top2, right: right2, bottom: bottom2, left: left2 } = rectRef.current;
      const width = right2 - left2;
      const height = bottom2 - top2;
      return {
        top: top2,
        right: right2,
        bottom: bottom2,
        left: left2,
        width,
        height
      };
    }
  });
  ref2.current.contextElement = contextElement;
  if (rect) {
    const { top: top2 = 0, left: left2 = 0, right: right2 = left2, bottom: bottom2 = top2 } = rect;
    rectRef.current = { top: top2, right: right2, bottom: bottom2, left: left2 };
  } else {
    rectRef.current = initialPosition;
  }
  return ref2;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/useUniqId/useUniqId.js
var import_react35 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Icon/Icon.js
var import_react33 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/utils/svg.js
var a11yHiddenSvgProps = {
  // Hides element from a11y tree
  "aria-hidden": true
};

// node_modules/@gravity-ui/uikit/build/esm/components/Icon/utils.js
function isSpriteData(data) {
  return typeof data === "object";
}
function isSvgrData(data) {
  return typeof data === "function" && (!data.prototype || !data.prototype.render);
}
function isComponentSvgData(data) {
  return typeof data === "object" && "defaultProps" in data;
}
function isStringSvgData(data) {
  return typeof data === "string";
}
function prepareStringData(data) {
  return data.replace(/<svg[^>]*>/, (match2) => {
    return match2.replace(/(width|height)=(["']?)\d+\2/g, "").replace(/(\s){2,}\b/g, "$1").replace(/(\s)+>/g, ">");
  });
}
function getStringViewBox(data) {
  const match2 = data.match(/viewBox=(["']?)([\d\s,-]+)\1/);
  return match2 ? match2[2] : void 0;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Icon/Icon.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Icon/Icon.css";
var b4 = block("icon");
var Icon = import_react33.default.forwardRef(({ data, width, height, size: size2, className, fill = "currentColor", stroke = "none", qa }, ref2) => {
  let w, h;
  if (size2) {
    w = size2;
    h = size2;
  }
  if (width) {
    w = width;
  }
  if (height) {
    h = height;
  }
  let viewBox;
  if (isSpriteData(data)) {
    ({ viewBox } = data);
  } else if (isStringSvgData(data)) {
    viewBox = getStringViewBox(data);
  } else if (isComponentSvgData(data)) {
    ({ viewBox } = data.defaultProps);
  } else if (isSvgrData(data)) {
    const el = data({});
    if (el) {
      ({ viewBox } = el.props);
    }
  }
  if (viewBox && (!w || !h)) {
    const values3 = viewBox.split(/\s+|\s*,\s*/);
    if (!w) {
      w = values3[2];
    }
    if (!h) {
      h = values3[3];
    }
  }
  const props = Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: w,
    height: h,
    className: b4(null, className),
    fill,
    stroke,
    "data-qa": qa
  }, a11yHiddenSvgProps);
  if (isStringSvgData(data)) {
    const preparedData = prepareStringData(data);
    return import_react33.default.createElement("svg", Object.assign({}, props, { ref: ref2, dangerouslySetInnerHTML: { __html: preparedData } }));
  }
  if (isSpriteData(data)) {
    const href = Icon.prefix + (data.url || `#${data.id}`);
    return import_react33.default.createElement(
      "svg",
      Object.assign({}, props, { viewBox, ref: ref2 }),
      import_react33.default.createElement("use", { href, xlinkHref: href })
    );
  }
  const IconComponent = data;
  if (IconComponent.defaultProps) {
    IconComponent.defaultProps.width = IconComponent.defaultProps.height = void 0;
  }
  return import_react33.default.createElement(
    "svg",
    Object.assign({}, props, { ref: ref2 }),
    import_react33.default.createElement(IconComponent, { width: void 0, height: void 0 })
  );
});
Icon.displayName = "Icon";
Icon.prefix = "";

// node_modules/@gravity-ui/uikit/build/esm/components/utils/isOfType.js
var import_react34 = __toESM(require_react());
function isOfType(Component2) {
  return function isMatching(component) {
    if (!import_react34.default.isValidElement(component)) {
      return false;
    }
    const { type } = component;
    return type === import_react34.default.Component || type.displayName === Component2.displayName;
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/common.js
var nextUniqueId = 1;
function getUniqId() {
  return `${NAMESPACE}uniq-${nextUniqueId++}`;
}
var isIcon = isOfType(Icon);

// node_modules/@gravity-ui/uikit/build/esm/hooks/useUniqId/useUniqId.js
function useUniqIdFallback() {
  const idRef = import_react35.default.useRef();
  if (idRef.current === void 0) {
    idRef.current = getUniqId();
  }
  return idRef.current;
}
function useIdNative() {
  return `${NAMESPACE_NEW}${import_react35.default.useId()}`;
}
var useUniqId = typeof import_react35.default.useId === "function" ? useIdNative : useUniqIdFallback;

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useBoolean/useBoolean.js
var import_react36 = __toESM(require_react());
function useBoolean(initialState2) {
  const [value, setValue] = import_react36.default.useState(initialState2);
  return [
    value,
    import_react36.default.useCallback(() => setValue(true), []),
    import_react36.default.useCallback(() => setValue(false), []),
    import_react36.default.useCallback(() => setValue((val) => !val), [])
  ];
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useCheckbox/useCheckbox.js
var import_react38 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/utils/event-broker/EventBroker.js
var EventBroker = class {
  constructor(prefix2) {
    this.subscriptions = [];
    this.componentPrefix = prefix2;
  }
  subscribe(subscription) {
    this.subscriptions.push(subscription);
  }
  unsubscribe(subscription) {
    const index = this.subscriptions.indexOf(subscription);
    if (index > -1) {
      this.subscriptions.splice(index, 1);
    }
  }
  publish(_a) {
    var { componentId } = _a, restData = __rest(_a, ["componentId"]);
    this.subscriptions.forEach((fn2) => fn2(Object.assign(Object.assign({}, restData), { componentId: this.componentPrefix ? `${this.componentPrefix}${componentId}` : componentId })));
  }
  withEventPublisher(componentId, qa) {
    return (eventBrokerData) => {
      this.publish(Object.assign(Object.assign({}, eventBrokerData), {
        componentId,
        qa
      }));
    };
  }
};
var eventBroker = new EventBroker(NAMESPACE);

// node_modules/@gravity-ui/uikit/build/esm/components/utils/event-broker/useEventBroker.js
var import_react37 = __toESM(require_react());
function useEventBroker(subscription, broker = eventBroker) {
  import_react37.default.useEffect(() => {
    broker.subscribe(subscription);
    return () => broker.unsubscribe(subscription);
  }, [broker, subscription]);
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useCheckbox/useCheckbox.js
function useCheckbox({ name, value, id, defaultChecked, checked, indeterminate, onUpdate, onChange, controlRef, controlProps, onFocus, onBlur, disabled }) {
  const innerControlRef = import_react38.default.useRef(null);
  const [checkedState, setCheckedState] = import_react38.default.useState(defaultChecked !== null && defaultChecked !== void 0 ? defaultChecked : false);
  const isControlled = typeof checked === "boolean";
  const isChecked = isControlled ? checked : checkedState;
  const inputChecked = indeterminate ? false : checked;
  const inputAriaChecked = indeterminate ? "mixed" : isChecked;
  const handleRef = useForkRef(controlRef, innerControlRef);
  import_react38.default.useLayoutEffect(() => {
    if (innerControlRef.current) {
      innerControlRef.current.indeterminate = Boolean(indeterminate);
    }
  }, [indeterminate]);
  const handleChange = (event) => {
    if (!isControlled) {
      setCheckedState(event.target.checked);
    }
    if (onChange) {
      onChange(event);
    }
    if (onUpdate) {
      onUpdate(event.target.checked);
    }
  };
  const handleClickCapture = import_react38.default.useCallback((event) => {
    eventBroker.publish({
      componentId: "Checkbox",
      eventId: "click",
      domEvent: event,
      meta: {
        checked: event.target.checked
      }
    });
  }, []);
  const inputProps = Object.assign(Object.assign({}, controlProps), {
    name,
    value,
    id,
    onFocus,
    onBlur,
    disabled,
    type: "checkbox",
    onChange: handleChange,
    onClickCapture: handleClickCapture,
    defaultChecked,
    checked: inputChecked,
    "aria-checked": inputAriaChecked,
    ref: handleRef
  });
  return { checked: isChecked, inputProps };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useHover/useHover.js
var import_react39 = __toESM(require_react());
function useHover() {
  const [isHovering, setIsHovering] = import_react39.default.useState(false);
  const onMouseEnter = import_react39.default.useCallback(() => {
    setIsHovering(true);
  }, []);
  const onMouseLeave = import_react39.default.useCallback(() => {
    setIsHovering(false);
  }, []);
  return [onMouseEnter, onMouseLeave, isHovering];
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useCloseOnTimeout/useCloseOnTimeout.js
function useCloseOnTimeout({ onClose, timeout: timeout2 }) {
  const [onMouseOver, onMouseLeave, isHovering] = useHover();
  useTimeout(onClose, isHovering ? null : timeout2);
  return { onMouseOver, onMouseLeave };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useStateWithCallback/useStateWithCallback.js
var import_react40 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/utils/typeCheckers.js
var isFunction = (value) => typeof value === "function";

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useStateWithCallback/useStateWithCallback.js
function useStateWithCallback(initialValue3, callback) {
  const [state, setState] = import_react40.default.useState(initialValue3);
  const setWithCallback = import_react40.default.useCallback((nextValue) => {
    if (isFunction(nextValue)) {
      setState((previousState) => {
        const newState = nextValue(previousState);
        callback === null || callback === void 0 ? void 0 : callback(newState);
        return newState;
      });
    } else {
      callback === null || callback === void 0 ? void 0 : callback(nextValue);
      setState(nextValue);
    }
  }, [callback]);
  return [state, setWithCallback];
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useConditionallyControlledState/useConditionallyControlledState.js
function useConditionallyControlledState(property, setProperty, initialState2, isControlled = property !== void 0 && setProperty !== void 0) {
  const state = useStateWithCallback(property || initialState2, setProperty);
  if (isControlled) {
    return [property, setProperty];
  }
  return state;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useElementSize/useElementSize.js
var import_react41 = __toESM(require_react());
var import_round = __toESM(require_round());
var import_throttle = __toESM(require_throttle());
var RESIZE_THROTTLE = 16;
var ROUND_PRESICION = 2;
function useElementSize(ref2, key) {
  const [size2, setSize] = import_react41.default.useState({
    width: 0,
    height: 0
  });
  import_react41.default.useLayoutEffect(() => {
    if (!(ref2 === null || ref2 === void 0 ? void 0 : ref2.current)) {
      return void 0;
    }
    const handleResize = (entries) => {
      if (!Array.isArray(entries)) {
        return;
      }
      const entry = entries[0];
      if (entry.borderBoxSize) {
        const borderBoxSize = entry.borderBoxSize[0] ? entry.borderBoxSize[0] : entry.borderBoxSize;
        setSize({
          width: (0, import_round.default)(borderBoxSize.inlineSize, ROUND_PRESICION),
          height: (0, import_round.default)(borderBoxSize.blockSize, ROUND_PRESICION)
        });
      } else {
        const target = entry.target;
        setSize({
          width: (0, import_round.default)(target.offsetWidth, ROUND_PRESICION),
          height: (0, import_round.default)(target.offsetHeight, ROUND_PRESICION)
        });
      }
    };
    const observer = new ResizeObserver((0, import_throttle.default)(handleResize, RESIZE_THROTTLE));
    observer.observe(ref2.current);
    return () => {
      observer.disconnect();
    };
  }, [ref2, key]);
  return size2;
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/usePopper/usePopper.js
var import_react42 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Popper.js
var React45 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Manager.js
var React42 = __toESM(require_react());
var ManagerReferenceNodeContext = React42.createContext();
var ManagerReferenceNodeSetterContext = React42.createContext();

// node_modules/react-popper/lib/esm/utils.js
var React43 = __toESM(require_react());
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" && window.document && window.document.createElement ? React43.useLayoutEffect : React43.useEffect;

// node_modules/react-popper/lib/esm/usePopper.js
var React44 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style3 = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style3);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style3 = styleProperties.reduce(function(style4, property) {
        style4[property] = "";
        return style4;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style3);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round2 = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round2(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round2(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle2(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset4 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset4, _state$modifiersData$.centerOffset = offset4 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round2(x * dpr) / dpr || 0,
    y: round2(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position3 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position3 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position3
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll3 = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll3) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll3) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset4 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset4[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b84) {
    return overflows[a] - overflows[b84];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset4) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset4 === "function" ? offset4(Object.assign({}, rects, {
    placement
  })) : offset4, skidding = _ref[0], distance3 = _ref[1];
  skidding = skidding || 0;
  distance3 = (distance3 || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance3,
    y: skidding
  } : {
    x: skidding,
    y: distance3
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset4 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset4);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset4 = popperOffsets2[mainAxis];
    var min2 = offset4 + overflow[mainSide];
    var max2 = offset4 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset4 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset4 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset4, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset4;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round2(rect.width) / element.offsetWidth || 1;
  var scaleY = round2(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll3 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll3 = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll3.scrollLeft - offsets.x,
    y: rect.top + scroll3.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers4 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers4, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers3 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers3
});

// node_modules/react-popper/lib/esm/usePopper.js
var import_react_fast_compare = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }
  var prevOptions = React44.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React44.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React44.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn2(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        ReactDOM.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element) {
              return [element, state2.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function(element) {
              return [element, state2.attributes[element]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React44.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React44.useRef();
  useIsomorphicLayoutEffect(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper4 = options.createPopper || createPopper3;
    var popperInstance = createPopper4(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/react-popper/lib/esm/Reference.js
var React46 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/usePopper/usePopper.js
var DEFAULT_PLACEMENT = [
  "bottom-start",
  "bottom",
  "bottom-end",
  "top-start",
  "top",
  "top-end",
  "right-start",
  "right",
  "right-end",
  "left-start",
  "left",
  "left-end"
];
function usePopper3({ anchorRef, placement = DEFAULT_PLACEMENT, offset: offset4, modifiers = [], strategy, altBoundary }) {
  const [popperElement, setPopperElement] = import_react42.default.useState(null);
  const [arrowElement, setArrowElement] = import_react42.default.useState(null);
  const placements2 = Array.isArray(placement) ? placement : [placement];
  const { attributes, styles } = usePopper(anchorRef === null || anchorRef === void 0 ? void 0 : anchorRef.current, popperElement, {
    strategy,
    modifiers: [
      { name: "arrow", options: { element: arrowElement } },
      { name: "offset", options: { offset: offset4, altBoundary } },
      { name: "flip", options: { fallbackPlacements: placements2.slice(1), altBoundary } },
      ...modifiers
    ],
    placement: placements2[0]
  });
  return {
    attributes,
    styles,
    setPopperRef: setPopperElement,
    setArrowRef: setArrowElement
  };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useRadio/useRadio.js
var import_react43 = __toESM(require_react());
function useRadio({ name, value, checked, defaultChecked, disabled, controlRef, controlProps, onUpdate, onChange, onFocus, onBlur, id }) {
  const controlId = useUniqId();
  const innerControlRef = import_react43.default.useRef(null);
  const [checkedState, setCheckedState] = import_react43.default.useState(defaultChecked !== null && defaultChecked !== void 0 ? defaultChecked : false);
  const isControlled = typeof checked === "boolean";
  const isChecked = isControlled ? checked : checkedState;
  const handleRef = useForkRef(controlRef, innerControlRef);
  const handleChange = (event) => {
    if (!isControlled) {
      setCheckedState(event.target.checked);
    }
    if (onChange) {
      onChange(event);
    }
    if (onUpdate) {
      onUpdate(event.target.checked);
    }
  };
  const onChangeCapture = (event) => {
    eventBroker.publish({
      componentId: "Radio",
      eventId: "click",
      domEvent: event
    });
  };
  const inputProps = Object.assign(Object.assign({}, controlProps), {
    name: name || controlId,
    value,
    id,
    onFocus,
    onBlur,
    disabled,
    type: "radio",
    onChange: handleChange,
    onChangeCapture,
    checked,
    defaultChecked,
    "aria-checked": isChecked,
    ref: handleRef
  });
  return { checked: isChecked, inputProps };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useRadioGroup/useRadioGroup.js
var import_react44 = __toESM(require_react());
function useRadioGroup(props) {
  var _a, _b;
  const { name, value, defaultValue, options = [], disabled, onUpdate, onChange, onFocus, onBlur } = props;
  const controlId = useUniqId();
  const [valueState, setValueState] = import_react44.default.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : (_b = (_a = options[0]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.toString());
  const isControlled = typeof value !== "undefined";
  const currentValue = isControlled ? value : valueState;
  const handleChange = import_react44.default.useCallback((event) => {
    if (!isControlled) {
      setValueState(event.target.value);
    }
    if (onChange) {
      onChange(event);
    }
    if (onUpdate) {
      onUpdate(event.target.value);
    }
  }, [isControlled, onUpdate, onChange]);
  const containerProps = {
    role: "radiogroup",
    "aria-disabled": disabled,
    "aria-label": props["aria-label"],
    "aria-labelledby": props["aria-labelledby"]
  };
  const optionsProps = options.map((option) => ({
    name: name || controlId,
    value: option.value,
    content: option.content,
    checked: currentValue === String(option.value),
    disabled: disabled || option.disabled,
    onChange: handleChange,
    onFocus,
    onBlur
  }));
  return { containerProps, optionsProps };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useRestoreFocus/useRestoreFocus.js
var import_react45 = __toESM(require_react());

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a, b84) {
  return a.tabIndex === b84.tabIndex ? a.documentOrder - b84.documentOrder : a.tabIndex - b84.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var focusable = function focusable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorFocusable.bind(null, options),
      flatten: true,
      getShadowRoot: options.getShadowRoot
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
  }
  return candidates;
};
var isTabbable = function isTabbable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, candidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorTabbable(options, node);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");
var isFocusable = function isFocusable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, focusableCandidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorFocusable(options, node);
};

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useRestoreFocus/useRestoreFocus.js
function useRestoreFocus({ enabled, restoreFocusRef, focusTrapped }) {
  const ref2 = import_react45.default.useRef(null);
  const initialActiveElementRef = import_react45.default.useRef(null);
  const lastActiveElementRef = import_react45.default.useRef(null);
  const handleFocus = (event) => {
    var _a;
    if (enabled && initialActiveElementRef.current === null) {
      initialActiveElementRef.current = event.relatedTarget;
      lastActiveElementRef.current = initialActiveElementRef.current;
      ref2.current = (_a = (restoreFocusRef === null || restoreFocusRef === void 0 ? void 0 : restoreFocusRef.current) || initialActiveElementRef.current) !== null && _a !== void 0 ? _a : null;
    }
  };
  import_react45.default.useEffect(() => {
    if (!enabled) {
      return void 0;
    }
    const handleFocusIn = (event) => {
      const element = event.target;
      if (!focusTrapped && element instanceof HTMLElement && isTabbable(element)) {
        lastActiveElementRef.current = element;
      }
    };
    const handlePointerDown = (event) => {
      const element = event.target;
      if (element instanceof HTMLElement && isTabbable(element)) {
        lastActiveElementRef.current = element;
      } else {
        lastActiveElementRef.current = null;
      }
    };
    window.addEventListener("focusin", handleFocusIn);
    window.addEventListener("mousedown", handlePointerDown);
    window.addEventListener("touchstart", handlePointerDown);
    return () => {
      window.removeEventListener("focusin", handleFocusIn);
      window.removeEventListener("mousedown", handlePointerDown);
      window.removeEventListener("touchstart", handlePointerDown);
    };
  }, [enabled, focusTrapped]);
  import_react45.default.useEffect(() => {
    var _a;
    if (enabled) {
      ref2.current = (_a = (restoreFocusRef === null || restoreFocusRef === void 0 ? void 0 : restoreFocusRef.current) || initialActiveElementRef.current) !== null && _a !== void 0 ? _a : null;
    } else {
      ref2.current = null;
    }
  });
  import_react45.default.useEffect(() => {
    if (!enabled) {
      return void 0;
    }
    return () => {
      let element = ref2.current;
      const lastActive = lastActiveElementRef.current;
      if (lastActive && document.contains(lastActive) && isTabbable(lastActive)) {
        element = lastActive;
      }
      if (element && typeof element.focus === "function" && document.contains(element) && isFocusable(element)) {
        if (element !== document.activeElement) {
          setTimeout(() => {
            element === null || element === void 0 ? void 0 : element.focus();
          }, 0);
        }
        initialActiveElementRef.current = null;
        lastActiveElementRef.current = null;
      }
    };
  }, [enabled]);
  return { onFocus: handleFocus };
}

// node_modules/@gravity-ui/uikit/build/esm/hooks/private/useUpdateEffect/useUpdateEffect.js
var import_react46 = __toESM(require_react());
var useUpdateEffect = (effect4, deps) => {
  const isInitial = import_react46.default.useRef(true);
  import_react46.default.useEffect(() => {
    if (isInitial.current) {
      isInitial.current = false;
      return;
    }
    effect4();
  }, deps);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.js
var import_react58 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/dom-helpers/esm/hasClass.js
function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList) element.classList.add(className);
  else if (!hasClass(element, className)) if (typeof element.className === "string") element.className = element.className + " " + className;
  else element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_react49 = __toESM(require_react());

// node_modules/react-transition-group/esm/Transition.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react48 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
  enter: import_prop_types.default.number,
  exit: import_prop_types.default.number,
  appear: import_prop_types.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  active: import_prop_types.default.string
}), import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  enterDone: import_prop_types.default.string,
  enterActive: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  exitDone: import_prop_types.default.string,
  exitActive: import_prop_types.default.string
})]) : null;

// node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react47 = __toESM(require_react());
var TransitionGroupContext_default = import_react47.default.createContext(null);

// node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};

// node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter2, appear;
    exit = enter2 = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter2 = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter2;
    }
    return {
      exit,
      enter: enter2,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          if (node) forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter2 = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter2 || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      import_react48.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children2 === "function" ? children2(status, childProps) : import_react48.default.cloneElement(import_react48.default.Children.only(children2), childProps))
    );
  };
  return Transition2;
}(import_react48.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types2.default.shape({
    current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types2.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types2.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types2.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types2.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types2.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types2.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types2.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types2.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types2.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types2.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types2.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types2.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types2.default.func
} : {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// node_modules/react-transition-group/esm/CSSTransition.js
var _addClass = function addClass2(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c) {
    return addClass(node, c);
  });
};
var removeClass2 = function removeClass3(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c) {
    return removeClass(node, c);
  });
};
var CSSTransition = function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node, "exit");
      _this.addClass(node, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type = appearing ? "appear" : "enter";
      _this.addClass(node, type, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type = appearing ? "appear" : "enter";
      _this.removeClasses(node, type);
      _this.addClass(node, type, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
      _this.removeClasses(node, "appear");
      _this.removeClasses(node, "enter");
      _this.addClass(node, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
      _this.addClass(node, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
      _this.removeClasses(node, "exit");
      _this.addClass(node, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === "string";
      var prefix2 = isStringClassNames && classNames ? classNames + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass3(node, type, phase) {
    var className = this.getClassNames(type)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type === "appear" && phase === "done" && doneClassName) {
      className += " " + doneClassName;
    }
    if (phase === "active") {
      if (node) forceReflow(node);
    }
    if (className) {
      this.appliedClasses[type][phase] = className;
      _addClass(node, className);
    }
  };
  _proto.removeClasses = function removeClasses(node, type) {
    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};
    if (baseClassName) {
      removeClass2(node, baseClassName);
    }
    if (activeClassName) {
      removeClass2(node, activeClassName);
    }
    if (doneClassName) {
      removeClass2(node, doneClassName);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
    return import_react49.default.createElement(Transition_default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
}(import_react49.default.Component);
CSSTransition.defaultProps = {
  classNames: ""
};
CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
  /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: classNamesShape,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExit: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExited: import_prop_types3.default.func
}) : {};
var CSSTransition_default = CSSTransition;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react52 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var import_prop_types4 = __toESM(require_prop_types());
var import_react51 = __toESM(require_react());

// node_modules/react-transition-group/esm/utils/ChildMapping.js
var import_react50 = __toESM(require_react());
function getChildMapping(children2, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react50.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = /* @__PURE__ */ Object.create(null);
  if (children2) import_react50.Children.map(children2, function(c) {
    return c;
  }).forEach(function(child) {
    result[child.key] = mapper(child);
  });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react50.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach(function(key) {
    var child = children2[key];
    if (!(0, import_react50.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, import_react50.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key] = (0, import_react50.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key] = (0, import_react50.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react50.isValidElement)(prevChild)) {
      children2[key] = (0, import_react50.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var values = Object.values || function(obj) {
  return Object.keys(obj).map(function(k) {
    return obj[k];
  });
};
var defaultProps = {
  component: "div",
  childFactory: function childFactory(child) {
    return child;
  }
};
var TransitionGroup = function(_React$Component) {
  _inheritsLoose(TransitionGroup2, _React$Component);
  function TransitionGroup2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited,
      firstRender: true
    };
    return _this;
  }
  var _proto = TransitionGroup2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };
  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping) return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState(function(state) {
        var children2 = _extends({}, state.children);
        delete children2[child.key];
        return {
          children: children2
        };
      });
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, Component2 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
    var contextValue = this.state.contextValue;
    var children2 = values(this.state.children).map(childFactory2);
    delete props.appear;
    delete props.enter;
    delete props.exit;
    if (Component2 === null) {
      return import_react51.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, children2);
    }
    return import_react51.default.createElement(TransitionGroupContext_default.Provider, {
      value: contextValue
    }, import_react51.default.createElement(Component2, props, children2));
  };
  return TransitionGroup2;
}(import_react51.default.Component);
TransitionGroup.propTypes = true ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: import_prop_types4.default.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: import_prop_types4.default.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: import_prop_types4.default.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: import_prop_types4.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;
var TransitionGroup_default = TransitionGroup;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var ReplaceTransition = function(_React$Component) {
  _inheritsLoose(ReplaceTransition2, _React$Component);
  function ReplaceTransition2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.handleEnter = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _this.handleLifecycle("onEnter", 0, args);
    };
    _this.handleEntering = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _this.handleLifecycle("onEntering", 0, args);
    };
    _this.handleEntered = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _this.handleLifecycle("onEntered", 0, args);
    };
    _this.handleExit = function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _this.handleLifecycle("onExit", 1, args);
    };
    _this.handleExiting = function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _this.handleLifecycle("onExiting", 1, args);
    };
    _this.handleExited = function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _this.handleLifecycle("onExited", 1, args);
    };
    return _this;
  }
  var _proto = ReplaceTransition2.prototype;
  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;
    var children2 = this.props.children;
    var child = import_react52.default.Children.toArray(children2)[idx];
    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) {
      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
      this.props[handler](maybeNode);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
    var _React$Children$toArr = import_react52.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return import_react52.default.createElement(TransitionGroup_default, props, inProp ? import_react52.default.cloneElement(first, {
      key: "first",
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : import_react52.default.cloneElement(second, {
      key: "second",
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };
  return ReplaceTransition2;
}(import_react52.default.Component);
ReplaceTransition.propTypes = true ? {
  in: import_prop_types5.default.bool.isRequired,
  children: function children(props, propName) {
    if (import_react52.default.Children.count(props[propName]) !== 2) return new Error('"' + propName + '" must be exactly two transition components.');
    return null;
  }
} : {};

// node_modules/react-transition-group/esm/SwitchTransition.js
var import_react53 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var _leaveRenders;
var _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren) return false;
  if (import_react53.default.isValidElement(oldChildren) && import_react53.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }
  return true;
}
var modes = {
  out: "out-in",
  in: "in-out"
};
var callHook = function callHook2(element, name, cb) {
  return function() {
    var _element$props;
    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
    cb();
  };
};
var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
  var current = _ref.current, changeState = _ref.changeState;
  return import_react53.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function(_ref2) {
  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;
  return [current, import_react53.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
  var children2 = _ref3.children, changeState = _ref3.changeState;
  return import_react53.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERED, import_react53.default.cloneElement(children2, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function(_ref4) {
  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;
  return [import_react53.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERED, import_react53.default.cloneElement(children2, {
        in: true
      }));
    })
  }), import_react53.default.cloneElement(children2, {
    in: true
  })];
}, _enterRenders);
var SwitchTransition = function(_React$Component) {
  _inheritsLoose(SwitchTransition2, _React$Component);
  function SwitchTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: ENTERED,
      current: null
    };
    _this.appeared = false;
    _this.changeState = function(status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }
      _this.setState({
        status,
        current
      });
    };
    return _this;
  }
  var _proto = SwitchTransition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };
  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children == null) {
      return {
        current: null
      };
    }
    if (state.status === ENTERING && props.mode === modes.in) {
      return {
        status: ENTERING
      };
    }
    if (state.current && areChildrenDifferent(state.current, props.children)) {
      return {
        status: EXITING
      };
    }
    return {
      current: import_react53.default.cloneElement(props.children, {
        in: true
      })
    };
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
    var data = {
      children: children2,
      current,
      changeState: this.changeState,
      status
    };
    var component;
    switch (status) {
      case ENTERING:
        component = enterRenders[mode](data);
        break;
      case EXITING:
        component = leaveRenders[mode](data);
        break;
      case ENTERED:
        component = current;
    }
    return import_react53.default.createElement(TransitionGroupContext_default.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };
  return SwitchTransition2;
}(import_react53.default.Component);
SwitchTransition.propTypes = true ? {
  /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
   *
   * @type {'out-in'|'in-out'}
   */
  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),
  /**
   * Any `Transition` or `CSSTransition` component.
   */
  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])
} : {};
SwitchTransition.defaultProps = {
  mode: modes.out
};

// node_modules/@gravity-ui/uikit/build/esm/components/Portal/Portal.js
var import_react54 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
function Portal({ container, children: children2, disablePortal }) {
  const defaultContainer = usePortalContainer();
  const containerNode = container !== null && container !== void 0 ? container : defaultContainer;
  if (disablePortal) {
    return import_react54.default.createElement(import_react54.default.Fragment, null, children2);
  }
  return containerNode ? import_react_dom3.default.createPortal(children2, containerNode) : null;
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/FocusTrap.js
var import_react55 = __toESM(require_react());

// node_modules/focus-trap/dist/focus-trap.esm.js
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
var activeFocusTraps = {
  activateTrap: function activateTrap(trapStack, trap) {
    if (trapStack.length > 0) {
      var activeTrap = trapStack[trapStack.length - 1];
      if (activeTrap !== trap) {
        activeTrap._setPausedState(true);
      }
    }
    var trapIndex = trapStack.indexOf(trap);
    if (trapIndex === -1) {
      trapStack.push(trap);
    } else {
      trapStack.splice(trapIndex, 1);
      trapStack.push(trap);
    }
  },
  deactivateTrap: function deactivateTrap(trapStack, trap) {
    var trapIndex = trapStack.indexOf(trap);
    if (trapIndex !== -1) {
      trapStack.splice(trapIndex, 1);
    }
    if (trapStack.length > 0 && !trapStack[trapStack.length - 1]._isManuallyPaused()) {
      trapStack[trapStack.length - 1]._setPausedState(false);
    }
  }
};
var isSelectableInput = function isSelectableInput2(node) {
  return node.tagName && node.tagName.toLowerCase() === "input" && typeof node.select === "function";
};
var isEscapeEvent = function isEscapeEvent2(e) {
  return (e === null || e === void 0 ? void 0 : e.key) === "Escape" || (e === null || e === void 0 ? void 0 : e.key) === "Esc" || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;
};
var isTabEvent = function isTabEvent2(e) {
  return (e === null || e === void 0 ? void 0 : e.key) === "Tab" || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;
};
var isKeyForward = function isKeyForward2(e) {
  return isTabEvent(e) && !e.shiftKey;
};
var isKeyBackward = function isKeyBackward2(e) {
  return isTabEvent(e) && e.shiftKey;
};
var delay = function delay2(fn2) {
  return setTimeout(fn2, 0);
};
var valueOrHandler = function valueOrHandler2(value) {
  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }
  return typeof value === "function" ? value.apply(void 0, params) : value;
};
var getActualTarget = function getActualTarget2(event) {
  return event.target.shadowRoot && typeof event.composedPath === "function" ? event.composedPath()[0] : event.target;
};
var internalTrapStack = [];
var createFocusTrap = function createFocusTrap2(elements, userOptions) {
  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;
  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;
  var config3 = _objectSpread2({
    returnFocusOnDeactivate: true,
    escapeDeactivates: true,
    delayInitialFocus: true,
    isKeyForward,
    isKeyBackward
  }, userOptions);
  var state = {
    // containers given to createFocusTrap()
    // @type {Array<HTMLElement>}
    containers: [],
    // list of objects identifying tabbable nodes in `containers` in the trap
    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
    //  is active, but the trap should never get to a state where there isn't at least one group
    //  with at least one tabbable node in it (that would lead to an error condition that would
    //  result in an error being thrown)
    // @type {Array<{
    //   container: HTMLElement,
    //   tabbableNodes: Array<HTMLElement>, // empty if none
    //   focusableNodes: Array<HTMLElement>, // empty if none
    //   posTabIndexesFound: boolean,
    //   firstTabbableNode: HTMLElement|undefined,
    //   lastTabbableNode: HTMLElement|undefined,
    //   firstDomTabbableNode: HTMLElement|undefined,
    //   lastDomTabbableNode: HTMLElement|undefined,
    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
    // }>}
    containerGroups: [],
    // same order/length as `containers` list
    // references to objects in `containerGroups`, but only those that actually have
    //  tabbable nodes in them
    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
    //  the same length
    tabbableGroups: [],
    nodeFocusedBeforeActivation: null,
    mostRecentlyFocusedNode: null,
    active: false,
    paused: false,
    manuallyPaused: false,
    // timer ID for when delayInitialFocus is true and initial focus in this trap
    //  has been delayed during activation
    delayInitialFocusTimer: void 0,
    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
    recentNavEvent: void 0
  };
  var trap;
  var getOption = function getOption2(configOverrideOptions, optionName, configOptionName) {
    return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : config3[configOptionName || optionName];
  };
  var findContainerIndex = function findContainerIndex2(element, event) {
    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
    return state.containerGroups.findIndex(function(_ref) {
      var container = _ref.container, tabbableNodes = _ref.tabbableNodes;
      return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
      //  web components if the `tabbableOptions.getShadowRoot` option was used for
      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
      //  look inside web components even if open)
      (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function(node) {
        return node === element;
      });
    });
  };
  var getNodeForOption = function getNodeForOption2(optionName) {
    var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref2$hasFallback = _ref2.hasFallback, hasFallback = _ref2$hasFallback === void 0 ? false : _ref2$hasFallback, _ref2$params = _ref2.params, params = _ref2$params === void 0 ? [] : _ref2$params;
    var optionValue = config3[optionName];
    if (typeof optionValue === "function") {
      optionValue = optionValue.apply(void 0, _toConsumableArray(params));
    }
    if (optionValue === true) {
      optionValue = void 0;
    }
    if (!optionValue) {
      if (optionValue === void 0 || optionValue === false) {
        return optionValue;
      }
      throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
    }
    var node = optionValue;
    if (typeof optionValue === "string") {
      try {
        node = doc.querySelector(optionValue);
      } catch (err) {
        throw new Error("`".concat(optionName, '` appears to be an invalid selector; error="').concat(err.message, '"'));
      }
      if (!node) {
        if (!hasFallback) {
          throw new Error("`".concat(optionName, "` as selector refers to no known node"));
        }
      }
    }
    return node;
  };
  var getInitialFocusNode = function getInitialFocusNode2() {
    var node = getNodeForOption("initialFocus", {
      hasFallback: true
    });
    if (node === false) {
      return false;
    }
    if (node === void 0 || node && !isFocusable(node, config3.tabbableOptions)) {
      if (findContainerIndex(doc.activeElement) >= 0) {
        node = doc.activeElement;
      } else {
        var firstTabbableGroup = state.tabbableGroups[0];
        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
        node = firstTabbableNode || getNodeForOption("fallbackFocus");
      }
    } else if (node === null) {
      node = getNodeForOption("fallbackFocus");
    }
    if (!node) {
      throw new Error("Your focus-trap needs to have at least one focusable element");
    }
    return node;
  };
  var updateTabbableNodes = function updateTabbableNodes2() {
    state.containerGroups = state.containers.map(function(container) {
      var tabbableNodes = tabbable(container, config3.tabbableOptions);
      var focusableNodes = focusable(container, config3.tabbableOptions);
      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
      var firstDomTabbableNode = focusableNodes.find(function(node) {
        return isTabbable(node);
      });
      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function(node) {
        return isTabbable(node);
      });
      var posTabIndexesFound = !!tabbableNodes.find(function(node) {
        return getTabIndex(node) > 0;
      });
      return {
        container,
        tabbableNodes,
        focusableNodes,
        /** True if at least one node with positive `tabindex` was found in this container. */
        posTabIndexesFound,
        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
        firstTabbableNode,
        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
        lastTabbableNode,
        // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
        //  because that API doesn't work with Shadow DOM as well as it should (@see
        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
        //  to address an edge case related to positive tabindex support, this seems like a much easier,
        //  "close enough most of the time" alternative for positive tabindexes which should generally
        //  be avoided anyway...
        /** First tabbable node in container, __DOM__ order; `undefined` if none. */
        firstDomTabbableNode,
        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
        lastDomTabbableNode,
        /**
         * Finds the __tabbable__ node that follows the given node in the specified direction,
         *  in this container, if any.
         * @param {HTMLElement} node
         * @param {boolean} [forward] True if going in forward tab order; false if going
         *  in reverse.
         * @returns {HTMLElement|undefined} The next tabbable node, if any.
         */
        nextTabbableNode: function nextTabbableNode(node) {
          var forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var nodeIdx = tabbableNodes.indexOf(node);
          if (nodeIdx < 0) {
            if (forward) {
              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function(el) {
                return isTabbable(el);
              });
            }
            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function(el) {
              return isTabbable(el);
            });
          }
          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
        }
      };
    });
    state.tabbableGroups = state.containerGroups.filter(function(group) {
      return group.tabbableNodes.length > 0;
    });
    if (state.tabbableGroups.length <= 0 && !getNodeForOption("fallbackFocus")) {
      throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
    }
    if (state.containerGroups.find(function(g) {
      return g.posTabIndexesFound;
    }) && state.containerGroups.length > 1) {
      throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
    }
  };
  var _getActiveElement = function getActiveElement(el) {
    var activeElement = el.activeElement;
    if (!activeElement) {
      return;
    }
    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {
      return _getActiveElement(activeElement.shadowRoot);
    }
    return activeElement;
  };
  var _tryFocus = function tryFocus(node) {
    if (node === false) {
      return;
    }
    if (node === _getActiveElement(document)) {
      return;
    }
    if (!node || !node.focus) {
      _tryFocus(getInitialFocusNode());
      return;
    }
    node.focus({
      preventScroll: !!config3.preventScroll
    });
    state.mostRecentlyFocusedNode = node;
    if (isSelectableInput(node)) {
      node.select();
    }
  };
  var getReturnFocusNode = function getReturnFocusNode2(previousActiveElement) {
    var node = getNodeForOption("setReturnFocus", {
      params: [previousActiveElement]
    });
    return node ? node : node === false ? false : previousActiveElement;
  };
  var findNextNavNode = function findNextNavNode2(_ref3) {
    var target = _ref3.target, event = _ref3.event, _ref3$isBackward = _ref3.isBackward, isBackward = _ref3$isBackward === void 0 ? false : _ref3$isBackward;
    target = target || getActualTarget(event);
    updateTabbableNodes();
    var destinationNode = null;
    if (state.tabbableGroups.length > 0) {
      var containerIndex = findContainerIndex(target, event);
      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : void 0;
      if (containerIndex < 0) {
        if (isBackward) {
          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
        } else {
          destinationNode = state.tabbableGroups[0].firstTabbableNode;
        }
      } else if (isBackward) {
        var startOfGroupIndex = state.tabbableGroups.findIndex(function(_ref4) {
          var firstTabbableNode = _ref4.firstTabbableNode;
          return target === firstTabbableNode;
        });
        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config3.tabbableOptions) && !isTabbable(target, config3.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
          startOfGroupIndex = containerIndex;
        }
        if (startOfGroupIndex >= 0) {
          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
          var destinationGroup = state.tabbableGroups[destinationGroupIndex];
          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
        } else if (!isTabEvent(event)) {
          destinationNode = containerGroup.nextTabbableNode(target, false);
        }
      } else {
        var lastOfGroupIndex = state.tabbableGroups.findIndex(function(_ref5) {
          var lastTabbableNode = _ref5.lastTabbableNode;
          return target === lastTabbableNode;
        });
        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config3.tabbableOptions) && !isTabbable(target, config3.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
          lastOfGroupIndex = containerIndex;
        }
        if (lastOfGroupIndex >= 0) {
          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
        } else if (!isTabEvent(event)) {
          destinationNode = containerGroup.nextTabbableNode(target);
        }
      }
    } else {
      destinationNode = getNodeForOption("fallbackFocus");
    }
    return destinationNode;
  };
  var checkPointerDown = function checkPointerDown2(e) {
    var target = getActualTarget(e);
    if (findContainerIndex(target, e) >= 0) {
      return;
    }
    if (valueOrHandler(config3.clickOutsideDeactivates, e)) {
      trap.deactivate({
        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
        //  which will result in the outside click setting focus to the node
        //  that was clicked (and if not focusable, to "nothing"); by setting
        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
        //  on activation (or the configured `setReturnFocus` node), whether the
        //  outside click was on a focusable node or not
        returnFocus: config3.returnFocusOnDeactivate
      });
      return;
    }
    if (valueOrHandler(config3.allowOutsideClick, e)) {
      return;
    }
    e.preventDefault();
  };
  var checkFocusIn = function checkFocusIn2(event) {
    var target = getActualTarget(event);
    var targetContained = findContainerIndex(target, event) >= 0;
    if (targetContained || target instanceof Document) {
      if (targetContained) {
        state.mostRecentlyFocusedNode = target;
      }
    } else {
      event.stopImmediatePropagation();
      var nextNode;
      var navAcrossContainers = true;
      if (state.mostRecentlyFocusedNode) {
        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
          if (tabbableNodes.length > 0) {
            var mruTabIdx = tabbableNodes.findIndex(function(node) {
              return node === state.mostRecentlyFocusedNode;
            });
            if (mruTabIdx >= 0) {
              if (config3.isKeyForward(state.recentNavEvent)) {
                if (mruTabIdx + 1 < tabbableNodes.length) {
                  nextNode = tabbableNodes[mruTabIdx + 1];
                  navAcrossContainers = false;
                }
              } else {
                if (mruTabIdx - 1 >= 0) {
                  nextNode = tabbableNodes[mruTabIdx - 1];
                  navAcrossContainers = false;
                }
              }
            }
          }
        } else {
          if (!state.containerGroups.some(function(g) {
            return g.tabbableNodes.some(function(n) {
              return getTabIndex(n) > 0;
            });
          })) {
            navAcrossContainers = false;
          }
        }
      } else {
        navAcrossContainers = false;
      }
      if (navAcrossContainers) {
        nextNode = findNextNavNode({
          // move FROM the MRU node, not event-related node (which will be the node that is
          //  outside the trap causing the focus escape we're trying to fix)
          target: state.mostRecentlyFocusedNode,
          isBackward: config3.isKeyBackward(state.recentNavEvent)
        });
      }
      if (nextNode) {
        _tryFocus(nextNode);
      } else {
        _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
      }
    }
    state.recentNavEvent = void 0;
  };
  var checkKeyNav = function checkKeyNav2(event) {
    var isBackward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    state.recentNavEvent = event;
    var destinationNode = findNextNavNode({
      event,
      isBackward
    });
    if (destinationNode) {
      if (isTabEvent(event)) {
        event.preventDefault();
      }
      _tryFocus(destinationNode);
    }
  };
  var checkTabKey = function checkTabKey2(event) {
    if (config3.isKeyForward(event) || config3.isKeyBackward(event)) {
      checkKeyNav(event, config3.isKeyBackward(event));
    }
  };
  var checkEscapeKey = function checkEscapeKey2(event) {
    if (isEscapeEvent(event) && valueOrHandler(config3.escapeDeactivates, event) !== false) {
      event.preventDefault();
      trap.deactivate();
    }
  };
  var checkClick = function checkClick2(e) {
    var target = getActualTarget(e);
    if (findContainerIndex(target, e) >= 0) {
      return;
    }
    if (valueOrHandler(config3.clickOutsideDeactivates, e)) {
      return;
    }
    if (valueOrHandler(config3.allowOutsideClick, e)) {
      return;
    }
    e.preventDefault();
    e.stopImmediatePropagation();
  };
  var addListeners = function addListeners2() {
    if (!state.active) {
      return;
    }
    activeFocusTraps.activateTrap(trapStack, trap);
    state.delayInitialFocusTimer = config3.delayInitialFocus ? delay(function() {
      _tryFocus(getInitialFocusNode());
    }) : _tryFocus(getInitialFocusNode());
    doc.addEventListener("focusin", checkFocusIn, true);
    doc.addEventListener("mousedown", checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener("touchstart", checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener("click", checkClick, {
      capture: true,
      passive: false
    });
    doc.addEventListener("keydown", checkTabKey, {
      capture: true,
      passive: false
    });
    doc.addEventListener("keydown", checkEscapeKey);
    return trap;
  };
  var removeListeners = function removeListeners2() {
    if (!state.active) {
      return;
    }
    doc.removeEventListener("focusin", checkFocusIn, true);
    doc.removeEventListener("mousedown", checkPointerDown, true);
    doc.removeEventListener("touchstart", checkPointerDown, true);
    doc.removeEventListener("click", checkClick, true);
    doc.removeEventListener("keydown", checkTabKey, true);
    doc.removeEventListener("keydown", checkEscapeKey);
    return trap;
  };
  var checkDomRemoval = function checkDomRemoval2(mutations) {
    var isFocusedNodeRemoved = mutations.some(function(mutation) {
      var removedNodes = Array.from(mutation.removedNodes);
      return removedNodes.some(function(node) {
        return node === state.mostRecentlyFocusedNode;
      });
    });
    if (isFocusedNodeRemoved) {
      _tryFocus(getInitialFocusNode());
    }
  };
  var mutationObserver = typeof window !== "undefined" && "MutationObserver" in window ? new MutationObserver(checkDomRemoval) : void 0;
  var updateObservedNodes = function updateObservedNodes2() {
    if (!mutationObserver) {
      return;
    }
    mutationObserver.disconnect();
    if (state.active && !state.paused) {
      state.containers.map(function(container) {
        mutationObserver.observe(container, {
          subtree: true,
          childList: true
        });
      });
    }
  };
  trap = {
    get active() {
      return state.active;
    },
    get paused() {
      return state.paused;
    },
    activate: function activate(activateOptions) {
      if (state.active) {
        return this;
      }
      var onActivate = getOption(activateOptions, "onActivate");
      var onPostActivate = getOption(activateOptions, "onPostActivate");
      var checkCanFocusTrap = getOption(activateOptions, "checkCanFocusTrap");
      if (!checkCanFocusTrap) {
        updateTabbableNodes();
      }
      state.active = true;
      state.paused = false;
      state.nodeFocusedBeforeActivation = _getActiveElement(doc);
      onActivate === null || onActivate === void 0 || onActivate();
      var finishActivation = function finishActivation2() {
        if (checkCanFocusTrap) {
          updateTabbableNodes();
        }
        addListeners();
        updateObservedNodes();
        onPostActivate === null || onPostActivate === void 0 || onPostActivate();
      };
      if (checkCanFocusTrap) {
        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
        return this;
      }
      finishActivation();
      return this;
    },
    deactivate: function deactivate(deactivateOptions) {
      if (!state.active) {
        return this;
      }
      var options = _objectSpread2({
        onDeactivate: config3.onDeactivate,
        onPostDeactivate: config3.onPostDeactivate,
        checkCanReturnFocus: config3.checkCanReturnFocus
      }, deactivateOptions);
      clearTimeout(state.delayInitialFocusTimer);
      state.delayInitialFocusTimer = void 0;
      removeListeners();
      state.active = false;
      state.paused = false;
      updateObservedNodes();
      activeFocusTraps.deactivateTrap(trapStack, trap);
      var onDeactivate = getOption(options, "onDeactivate");
      var onPostDeactivate = getOption(options, "onPostDeactivate");
      var checkCanReturnFocus = getOption(options, "checkCanReturnFocus");
      var returnFocus = getOption(options, "returnFocus", "returnFocusOnDeactivate");
      onDeactivate === null || onDeactivate === void 0 || onDeactivate();
      var finishDeactivation = function finishDeactivation2() {
        delay(function() {
          if (returnFocus) {
            _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
          }
          onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();
        });
      };
      if (returnFocus && checkCanReturnFocus) {
        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
        return this;
      }
      finishDeactivation();
      return this;
    },
    pause: function pause(pauseOptions) {
      if (!state.active) {
        return this;
      }
      state.manuallyPaused = true;
      return this._setPausedState(true, pauseOptions);
    },
    unpause: function unpause(unpauseOptions) {
      if (!state.active) {
        return this;
      }
      state.manuallyPaused = false;
      if (trapStack[trapStack.length - 1] !== this) {
        return this;
      }
      return this._setPausedState(false, unpauseOptions);
    },
    updateContainerElements: function updateContainerElements(containerElements) {
      var elementsAsArray = [].concat(containerElements).filter(Boolean);
      state.containers = elementsAsArray.map(function(element) {
        return typeof element === "string" ? doc.querySelector(element) : element;
      });
      if (state.active) {
        updateTabbableNodes();
      }
      updateObservedNodes();
      return this;
    }
  };
  Object.defineProperties(trap, {
    _isManuallyPaused: {
      value: function value() {
        return state.manuallyPaused;
      }
    },
    _setPausedState: {
      value: function value(paused, options) {
        if (state.paused === paused) {
          return this;
        }
        state.paused = paused;
        if (paused) {
          var onPause = getOption(options, "onPause");
          var onPostPause = getOption(options, "onPostPause");
          onPause === null || onPause === void 0 || onPause();
          removeListeners();
          updateObservedNodes();
          onPostPause === null || onPostPause === void 0 || onPostPause();
        } else {
          var onUnpause = getOption(options, "onUnpause");
          var onPostUnpause = getOption(options, "onPostUnpause");
          onUnpause === null || onUnpause === void 0 || onUnpause();
          updateTabbableNodes();
          addListeners();
          updateObservedNodes();
          onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();
        }
        return this;
      }
    }
  });
  trap.updateContainerElements(elements);
  return trap;
};

// node_modules/@gravity-ui/uikit/build/esm/components/utils/FocusTrap.js
var focusTrapContext = import_react55.default.createContext(void 0);
function FocusTrap({ children: children2, enabled = true, disableAutoFocus, autoFocus = true }) {
  const nodeRef = import_react55.default.useRef(null);
  const setAutoFocusRef = import_react55.default.useRef(!disableAutoFocus && autoFocus);
  import_react55.default.useEffect(() => {
    setAutoFocusRef.current = !disableAutoFocus && autoFocus;
  });
  const focusTrapRef = import_react55.default.useRef();
  const containersRef = import_react55.default.useRef({});
  const updateContainerElements = import_react55.default.useCallback(() => {
    var _a;
    (_a = focusTrapRef.current) === null || _a === void 0 ? void 0 : _a.updateContainerElements([
      nodeRef.current,
      ...Object.values(containersRef.current)
    ]);
  }, []);
  const actions = import_react55.default.useMemo(() => ({
    addNode(id, node) {
      var _a;
      if (containersRef.current[id] !== node && !((_a = nodeRef.current) === null || _a === void 0 ? void 0 : _a.contains(node))) {
        containersRef.current[id] = node;
        updateContainerElements();
      }
    },
    removeNode(id) {
      if (containersRef.current[id]) {
        delete containersRef.current[id];
        updateContainerElements();
      }
    }
  }), [updateContainerElements]);
  const handleNodeRef = import_react55.default.useCallback((node) => {
    var _a;
    if (enabled && node) {
      nodeRef.current = node;
      if (!focusTrapRef.current) {
        focusTrapRef.current = createFocusTrap([], {
          initialFocus: () => setAutoFocusRef.current && getFocusElement(node),
          fallbackFocus: () => node,
          returnFocusOnDeactivate: false,
          escapeDeactivates: false,
          clickOutsideDeactivates: false,
          allowOutsideClick: true
        });
      }
      updateContainerElements();
      focusTrapRef.current.activate();
    } else {
      (_a = focusTrapRef.current) === null || _a === void 0 ? void 0 : _a.deactivate();
      nodeRef.current = null;
    }
  }, [enabled, updateContainerElements]);
  const child = import_react55.default.Children.only(children2);
  if (!import_react55.default.isValidElement(child)) {
    throw new Error("Children must contain only one valid element");
  }
  const childRef = child.ref;
  const ref2 = useForkRef(handleNodeRef, childRef);
  return import_react55.default.createElement(focusTrapContext.Provider, { value: actions }, import_react55.default.cloneElement(child, { ref: ref2 }));
}
function useParentFocusTrap() {
  const actions = import_react55.default.useContext(focusTrapContext);
  const id = useUniqId();
  return import_react55.default.useMemo(() => {
    if (!actions) {
      return void 0;
    }
    return (node) => {
      if (node) {
        actions.addNode(id, node);
      } else {
        actions.removeNode(id);
      }
    };
  }, [actions, id]);
}
function getFocusElement(root) {
  if (!(document.activeElement instanceof HTMLElement) || !root.contains(document.activeElement)) {
    if (!root.hasAttribute("tabIndex")) {
      if (true) {
        console.error("@gravity-ui/uikit: focus-trap content node does node accept focus.");
      }
      root.setAttribute("tabIndex", "-1");
    }
    return root;
  }
  return document.activeElement;
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/layer-manager/LayerManager.js
var LayerManager = class {
  constructor() {
    this.stack = [];
    this.handleDocumentKeyDown = (event) => {
      var _a, _b, _c;
      if (event.code === KeyCode.ESCAPE) {
        const topLayer = this.getTopLayer();
        if (!topLayer.disableEscapeKeyDown) {
          (_a = topLayer.onEscapeKeyDown) === null || _a === void 0 ? void 0 : _a.call(topLayer, event);
          (_b = topLayer.onClose) === null || _b === void 0 ? void 0 : _b.call(topLayer, event, "escapeKeyDown");
        }
      }
      if (event.code === "Enter") {
        const topLayer = this.getTopLayer();
        (_c = topLayer.onEnterKeyDown) === null || _c === void 0 ? void 0 : _c.call(topLayer, event);
      }
    };
    this.handleDocumentClick = (event) => {
      var _a, _b;
      if (this.isToastClick(event)) {
        return;
      }
      let layer;
      let mouseDownTarget = null;
      if (this.mouseDownLayerTarget) {
        layer = this.mouseDownLayerTarget.layer;
        mouseDownTarget = this.mouseDownLayerTarget.target;
        this.mouseDownLayerTarget = void 0;
        if (!this.stack.includes(layer)) {
          return;
        }
      } else {
        layer = this.getTopLayer();
      }
      if (!layer.disableOutsideClick && this.isOutsideClick(layer, event, mouseDownTarget)) {
        (_a = layer.onOutsideClick) === null || _a === void 0 ? void 0 : _a.call(layer, event);
        (_b = layer.onClose) === null || _b === void 0 ? void 0 : _b.call(layer, event, "outsideClick");
      }
    };
    this.handleDocumentMouseDown = (event) => {
      const layer = this.getTopLayer();
      if (layer) {
        this.mouseDownLayerTarget = { layer, target: event.target };
      }
    };
  }
  add(config3) {
    this.stack.push(config3);
    if (this.stack.length === 1) {
      this.addListeners();
    }
    this.notifyLayersChange();
  }
  remove(config3) {
    const index = this.stack.indexOf(config3);
    this.stack.splice(index, 1);
    if (this.stack.length === 0) {
      this.removeListeners();
    }
    this.notifyLayersChange();
  }
  getLayersCount() {
    return this.stack.length;
  }
  getLayers() {
    return this.stack.map(({ type }) => ({ type }));
  }
  addListeners() {
    document.addEventListener("keydown", this.handleDocumentKeyDown);
    document.addEventListener("click", this.handleDocumentClick, true);
    document.addEventListener("mousedown", this.handleDocumentMouseDown, true);
  }
  removeListeners() {
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    document.removeEventListener("click", this.handleDocumentClick, true);
    document.removeEventListener("mousedown", this.handleDocumentMouseDown, true);
  }
  notifyLayersChange() {
    eventBroker.publish({
      componentId: "LayerManager",
      eventId: "layerschange",
      meta: {
        /**
         * @deprecated use layers
         */
        layersCount: this.getLayersCount(),
        layers: this.getLayers()
      }
    });
  }
  getTopLayer() {
    return this.stack[this.stack.length - 1];
  }
  isOutsideClick(layer, event, mouseDownTarget = null) {
    const contentElements = layer.contentRefs || [];
    const { target } = event;
    const composedPath = typeof event.composedPath === "function" ? event.composedPath() : [];
    if (contentElements.length > 0) {
      const isClickOnContentElements = contentElements.some((el) => {
        var _a, _b, _c, _d;
        return ((_b = (_a = el === null || el === void 0 ? void 0 : el.current) === null || _a === void 0 ? void 0 : _a.contains) === null || _b === void 0 ? void 0 : _b.call(_a, target)) || ((_d = (_c = el === null || el === void 0 ? void 0 : el.current) === null || _c === void 0 ? void 0 : _c.contains) === null || _d === void 0 ? void 0 : _d.call(_c, mouseDownTarget)) || composedPath.includes(el === null || el === void 0 ? void 0 : el.current);
      });
      return !isClickOnContentElements;
    }
    return false;
  }
  isToastClick(event) {
    const composedPath = typeof event.composedPath === "function" ? event.composedPath() : [];
    return composedPath.some((el) => {
      var _a;
      return Boolean((_a = el === null || el === void 0 ? void 0 : el.dataset) === null || _a === void 0 ? void 0 : _a.toast);
    });
  }
};
var layerManager = new LayerManager();
var getLayersCount = () => {
  return layerManager.getLayersCount();
};

// node_modules/@gravity-ui/uikit/build/esm/components/utils/layer-manager/useLayer.js
var import_react56 = __toESM(require_react());
function useLayer({ open, disableEscapeKeyDown, disableOutsideClick, onEscapeKeyDown, onEnterKeyDown, onOutsideClick, onClose, contentRefs, enabled = true, type }) {
  const layerConfigRef = import_react56.default.useRef({
    disableEscapeKeyDown,
    disableOutsideClick,
    onEscapeKeyDown,
    onEnterKeyDown,
    onOutsideClick,
    onClose,
    contentRefs,
    type
  });
  import_react56.default.useEffect(() => {
    Object.assign(layerConfigRef.current, {
      disableEscapeKeyDown,
      disableOutsideClick,
      onEscapeKeyDown,
      onEnterKeyDown,
      onOutsideClick,
      onClose,
      contentRefs,
      enabled
    });
  }, [
    disableEscapeKeyDown,
    disableOutsideClick,
    onEscapeKeyDown,
    onEnterKeyDown,
    onOutsideClick,
    onClose,
    contentRefs,
    enabled
  ]);
  import_react56.default.useEffect(() => {
    if (open && enabled) {
      const layerConfig = layerConfigRef.current;
      layerManager.add(layerConfig);
      return () => {
        layerManager.remove(layerConfig);
      };
    }
    return void 0;
  }, [open, enabled]);
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/transition.js
function getCSSTransitionClassNames(b84) {
  return {
    appear: modsClassName(b84({ appear: true })),
    appearActive: modsClassName(b84({ appear: "active" })),
    appearDone: modsClassName(b84({ appear: "done" })),
    enter: modsClassName(b84({ enter: true })),
    enterActive: modsClassName(b84({ enter: "active" })),
    enterDone: modsClassName(b84({ enter: "done" })),
    exit: modsClassName(b84({ exit: true })),
    exitActive: modsClassName(b84({ exit: "active" })),
    exitDone: modsClassName(b84({ exit: "done" }))
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/PopupArrow.js
var import_react57 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.css";
var b5 = block("popup");
function PopupArrow({ styles, attributes, setArrowRef }) {
  return import_react57.default.createElement(
    "div",
    Object.assign({ "data-popper-arrow": true, ref: setArrowRef, className: b5("arrow"), style: styles }, attributes),
    import_react57.default.createElement(
      "div",
      { className: b5("arrow-content") },
      import_react57.default.createElement(
        "div",
        { className: b5("arrow-circle-wrapper") },
        import_react57.default.createElement("div", { className: b5("arrow-circle", { left: true }) })
      ),
      import_react57.default.createElement(
        "div",
        { className: b5("arrow-circle-wrapper") },
        import_react57.default.createElement("div", { className: b5("arrow-circle", { right: true }) })
      )
    )
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Popup/Popup.css";
var b6 = block("popup");
var ARROW_SIZE = 8;
function Popup({ keepMounted = false, hasArrow = false, offset: offset4 = [0, 4], open, placement, anchorRef, disableEscapeKeyDown, disableOutsideClick, disableLayer, style: style3, className, contentClassName, modifiers = [], children: children2, onEscapeKeyDown, onOutsideClick, onClose, onClick, onMouseEnter, onMouseLeave, onFocus, onBlur, disablePortal, container, strategy, qa, restoreFocus, restoreFocusRef, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, role, id, focusTrap = false, autoFocus = false }) {
  const containerRef = import_react58.default.useRef(null);
  useLayer({
    open,
    disableEscapeKeyDown,
    disableOutsideClick,
    onEscapeKeyDown,
    onOutsideClick,
    onClose,
    contentRefs: [anchorRef, containerRef],
    enabled: !disableLayer,
    type: "popup"
  });
  const { attributes, styles, setPopperRef, setArrowRef } = usePopper3({
    anchorRef,
    placement,
    // Take arrow size into offset account
    offset: hasArrow ? [offset4[0], offset4[1] + ARROW_SIZE] : offset4,
    strategy,
    altBoundary: disablePortal,
    modifiers: [
      // Properly display arrow within rounded container
      { name: "arrow", options: { enabled: hasArrow, padding: 4 } },
      // Prevent border hiding
      { name: "preventOverflow", options: { padding: 1, altBoundary: disablePortal } },
      ...modifiers
    ]
  });
  const handleRef = useForkRef(setPopperRef, containerRef, useParentFocusTrap());
  const containerProps = useRestoreFocus({
    enabled: Boolean(restoreFocus && open),
    restoreFocusRef
  });
  return import_react58.default.createElement(
    Portal,
    { container, disablePortal },
    import_react58.default.createElement(
      CSSTransition_default,
      { nodeRef: containerRef, in: open, addEndListener: (done) => {
        var _a;
        return (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener("animationend", done);
      }, classNames: getCSSTransitionClassNames(b6), mountOnEnter: !keepMounted, unmountOnExit: !keepMounted, appear: true },
      import_react58.default.createElement(
        "div",
        Object.assign({ ref: handleRef, style: styles.popper }, attributes.popper, containerProps, { className: b6({ open }, className), "data-qa": qa, id, role, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy }),
        import_react58.default.createElement(
          FocusTrap,
          { enabled: focusTrap && open, disableAutoFocus: !autoFocus },
          import_react58.default.createElement(
            "div",
            { onClick, onMouseEnter, onMouseLeave, onFocus, onBlur, className: b6("content", contentClassName), style: style3, tabIndex: -1 },
            hasArrow && import_react58.default.createElement(PopupArrow, { styles: styles.arrow, attributes: attributes.arrow, setArrowRef }),
            children2
          )
        )
      )
    )
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Tooltip/Tooltip.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Tooltip/Tooltip.css";
var b7 = block("tooltip");
var DEFAULT_PLACEMENT2 = ["bottom", "top"];
var Tooltip = (props) => {
  const { children: children2, content, disabled, placement = DEFAULT_PLACEMENT2, qa } = props;
  const [anchorElement, setAnchorElement] = import_react59.default.useState(null);
  const tooltipVisible = useTooltipVisible(anchorElement, props);
  const renderPopup = () => {
    return import_react59.default.createElement(
      Popup,
      { id: props.id, role: "tooltip", className: b7(null, props.className), style: props.style, open: tooltipVisible && !disabled, placement, anchorRef: { current: anchorElement }, disablePortal: props.disablePortal, disableEscapeKeyDown: true, disableOutsideClick: true, disableLayer: true, qa },
      import_react59.default.createElement("div", { className: b7("content", props.contentClassName) }, content)
    );
  };
  const child = import_react59.default.Children.only(children2);
  const childRef = child.ref;
  const ref2 = useForkRef(setAnchorElement, childRef);
  return import_react59.default.createElement(
    import_react59.default.Fragment,
    null,
    import_react59.default.cloneElement(child, { ref: ref2 }),
    anchorElement ? renderPopup() : null
  );
};
function useTooltipVisible(anchor, { openDelay = 250, closeDelay }) {
  const [tooltipVisible, showTooltip, hideTooltip] = useBoolean(false);
  const timeoutRef = import_react59.default.useRef();
  const isFocusWithinRef = import_react59.default.useRef(false);
  import_react59.default.useEffect(() => {
    if (!anchor) {
      return void 0;
    }
    function handleMouseEnter() {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(showTooltip, openDelay);
    }
    function handleMouseLeave() {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(hideTooltip, closeDelay);
    }
    function handleFocusWithin(e) {
      if (!isFocusWithinRef.current && document.activeElement === e.target) {
        isFocusWithinRef.current = true;
        clearTimeout(timeoutRef.current);
        showTooltip();
      }
    }
    function handleBlurWithin(e) {
      if (isFocusWithinRef.current && !e.currentTarget.contains(e.relatedTarget)) {
        isFocusWithinRef.current = false;
        clearTimeout(timeoutRef.current);
        hideTooltip();
      }
    }
    function handleKeyDown(e) {
      if (e.key === KeyCode.ESCAPE) {
        clearTimeout(timeoutRef.current);
        hideTooltip();
      }
    }
    anchor.addEventListener("mouseenter", handleMouseEnter);
    anchor.addEventListener("mouseleave", handleMouseLeave);
    anchor.addEventListener("focus", handleFocusWithin);
    anchor.addEventListener("blur", handleBlurWithin);
    anchor.addEventListener("keydown", handleKeyDown);
    return () => {
      anchor.removeEventListener("mouseenter", handleMouseEnter);
      anchor.removeEventListener("mouseleave", handleMouseLeave);
      anchor.removeEventListener("focus", handleFocusWithin);
      anchor.removeEventListener("blur", handleBlurWithin);
      anchor.removeEventListener("keydown", handleKeyDown);
    };
  }, [anchor, showTooltip, hideTooltip, openDelay, closeDelay]);
  return tooltipVisible;
}

// node_modules/@gravity-ui/uikit/build/esm/components/ActionTooltip/ActionTooltip.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ActionTooltip/ActionTooltip.css";
var b8 = block("action-tooltip");
function ActionTooltip(props) {
  const { title, hotkey, description, children: children2 } = props, tooltipProps = __rest(props, ["title", "hotkey", "description", "children"]);
  return import_react60.default.createElement(Tooltip, Object.assign({}, tooltipProps, { className: b8(null, tooltipProps.className), contentClassName: b8("layout"), content: import_react60.default.createElement(
    import_react60.default.Fragment,
    null,
    import_react60.default.createElement(
      "div",
      { className: b8("heading") },
      import_react60.default.createElement("div", { className: b8("title") }, title),
      hotkey && import_react60.default.createElement(Hotkey, { view: "dark", value: hotkey, className: b8("hotkey") })
    ),
    description && import_react60.default.createElement("div", { className: b8("description") }, description)
  ) }), children2);
}

// node_modules/@gravity-ui/uikit/build/esm/components/ArrowToggle/ArrowToggle.js
var import_react61 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ArrowToggle/ArrowToggle.css";
var b9 = block("arrow-toggle");
function ArrowToggle({ size: size2 = 16, direction = "bottom", className, qa }) {
  return import_react61.default.createElement(
    "span",
    { style: { width: size2, height: size2 }, className: b9({ direction }, className), "data-qa": qa },
    import_react61.default.createElement(Icon, { data: ChevronDown_default, size: size2 })
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/Alert.js
var import_react82 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Button/Button.js
var import_react63 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Button/ButtonIcon.js
var import_react62 = __toESM(require_react());
var b10 = block("button");
var ButtonIcon = ({ side, className, children: children2 }) => {
  return import_react62.default.createElement(
    "span",
    { className: b10("icon", {
      side
    }, className) },
    import_react62.default.createElement("span", { className: b10("icon-inner") }, children2)
  );
};
ButtonIcon.displayName = "Button.Icon";

// node_modules/@gravity-ui/uikit/build/esm/components/Button/Button.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Button/Button.css";
var b11 = block("button");
var ButtonWithHandlers = import_react63.default.forwardRef(function Button({ view = "normal", size: size2 = "m", pin = "round-round", selected, disabled = false, loading = false, width, title, tabIndex, type = "button", component, href, target, rel, extraProps, onClick, onMouseEnter, onMouseLeave, onFocus, onBlur, children: children2, id, style: style3, className, qa }, ref2) {
  const handleClickCapture = import_react63.default.useCallback((event) => {
    eventBroker.publish({
      componentId: "Button",
      eventId: "click",
      domEvent: event,
      meta: {
        content: event.currentTarget.textContent,
        view
      }
    });
  }, [view]);
  const commonProps = {
    title,
    tabIndex,
    onClick,
    onClickCapture: handleClickCapture,
    onMouseEnter,
    onMouseLeave,
    onFocus,
    onBlur,
    id,
    style: style3,
    className: b11({
      view,
      size: size2,
      pin,
      selected,
      disabled: disabled || loading,
      loading,
      width
    }, className),
    "data-qa": qa
  };
  if (typeof href === "string" || component) {
    const linkProps = {
      href,
      target,
      rel: target === "_blank" && !rel ? "noopener noreferrer" : rel
    };
    return import_react63.default.createElement(component || "a", Object.assign(Object.assign(Object.assign(Object.assign({}, extraProps), commonProps), component ? {} : linkProps), { ref: ref2, "aria-disabled": disabled || loading }), prepareChildren(children2));
  } else {
    return import_react63.default.createElement("button", Object.assign({}, extraProps, commonProps, { ref: ref2, type, disabled: disabled || loading, "aria-pressed": selected }), prepareChildren(children2));
  }
});
ButtonWithHandlers.displayName = "Button";
var Button2 = Object.assign(ButtonWithHandlers, { Icon: ButtonIcon });
var isButtonIconComponent = isOfType(ButtonIcon);
function prepareChildren(children2) {
  const items = import_react63.default.Children.toArray(children2);
  if (items.length === 1) {
    const onlyItem = items[0];
    if (isButtonIconComponent(onlyItem)) {
      return onlyItem;
    } else if (isIcon(onlyItem)) {
      return import_react63.default.createElement(Button2.Icon, { key: "icon" }, onlyItem);
    } else {
      return import_react63.default.createElement("span", { key: "text", className: b11("text") }, onlyItem);
    }
  } else {
    let leftIcon, rightIcon, text2;
    const content = [];
    for (const item of items) {
      const isIconElement = isIcon(item);
      const isButtonIconElement = isButtonIconComponent(item);
      if (isIconElement || isButtonIconElement) {
        if (!leftIcon && content.length === 0) {
          const key = "icon-left";
          const side = "left";
          if (isIconElement) {
            leftIcon = import_react63.default.createElement(Button2.Icon, { key, side }, item);
          } else {
            leftIcon = import_react63.default.cloneElement(item, {
              side
            });
          }
        } else if (!rightIcon && content.length !== 0) {
          const key = "icon-right";
          const side = "right";
          if (isIconElement) {
            rightIcon = import_react63.default.createElement(Button2.Icon, { key, side }, item);
          } else {
            rightIcon = import_react63.default.cloneElement(item, {
              side
            });
          }
        }
      } else {
        content.push(item);
      }
    }
    if (content.length > 0) {
      text2 = import_react63.default.createElement("span", { key: "text", className: b11("text") }, content);
    }
    return [leftIcon, rightIcon, text2];
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/Card/Card.js
var import_react64 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Card/Card.css";
var b12 = block("card");
var Card = import_react64.default.forwardRef(function Card2(props, ref2) {
  const { type = "container", theme, view, size: size2 = "m", children: children2, className, onClick, disabled, selected, style: style3, qa } = props;
  const isTypeAction = type === "action";
  const isTypeSelection = type === "selection";
  const isTypeContainer = type === "container";
  const hasAction = isTypeAction || isTypeSelection;
  const isClickable = hasAction && Boolean(onClick) && !(disabled || selected);
  const defaultTheme = isTypeContainer ? "normal" : void 0;
  const defaultView = isTypeContainer || isTypeSelection ? "outlined" : void 0;
  const handleClick = isClickable ? onClick : void 0;
  const { onKeyDown } = useActionHandlers(onClick);
  return import_react64.default.createElement("div", { style: style3, ref: ref2, role: isClickable ? "button" : void 0, className: b12({
    theme: theme || defaultTheme,
    view: view || defaultView,
    type,
    selected,
    size: size2,
    disabled,
    clickable: isClickable
  }, className), onClick: handleClick, onKeyDown: isClickable ? onKeyDown : void 0, tabIndex: isClickable ? 0 : void 0, "data-qa": qa }, children2);
});

// node_modules/@gravity-ui/uikit/build/esm/components/Text/Text.js
var import_react65 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Text/colorText/colorText.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Text/colorText/colorText.css";
var b13 = block("color-text");
var TEXT_COLORS = [
  "primary",
  "complementary",
  "secondary",
  "hint",
  "info",
  "info-heavy",
  "positive",
  "positive-heavy",
  "warning",
  "warning-heavy",
  "danger",
  "danger-heavy",
  "utility",
  "utility-heavy",
  "misc",
  "misc-heavy",
  "brand",
  "link",
  "link-hover",
  "link-visited",
  "link-visited-hover",
  "dark-primary",
  "dark-complementary",
  "dark-secondary",
  "light-primary",
  "light-complementary",
  "light-secondary",
  "light-hint",
  "inverted-primary",
  "inverted-complementary",
  "inverted-secondary",
  "inverted-hint"
];
var colorText = ({ color }, className) => b13({ color }, className);

// node_modules/@gravity-ui/uikit/build/esm/components/Text/text/text.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Text/text/text.css";
var b14 = block("text");
var TEXT_VARIANTS = [
  "display-4",
  "display-3",
  "display-2",
  "display-1",
  "header-2",
  "header-1",
  "subheader-3",
  "subheader-2",
  "subheader-1",
  "body-3",
  "body-2",
  "body-1",
  "body-short",
  "caption-2",
  "caption-1",
  "code-3",
  "code-inline-3",
  "code-2",
  "code-inline-2",
  "code-1",
  "code-inline-1"
];
var text = ({ variant = "body-1", ellipsis, whiteSpace, wordBreak }, className) => b14({ variant, ellipsis, ws: whiteSpace, wb: wordBreak }, className);

// node_modules/@gravity-ui/uikit/build/esm/components/Text/Text.js
var Text = import_react65.default.forwardRef((_a, ref2) => {
  var { as, children: children2, variant, className, ellipsis, color, whiteSpace, wordBreak, qa } = _a, rest = __rest(_a, ["as", "children", "variant", "className", "ellipsis", "color", "whiteSpace", "wordBreak", "qa"]);
  const Tag = as || "span";
  return import_react65.default.createElement(Tag, Object.assign({ ref: ref2, className: text({ variant, ellipsis, whiteSpace, wordBreak }, color ? colorText({ color }, className) : className), "data-qa": qa }, rest), children2);
});
Text.displayName = "Text";

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Col/Col.js
var import_react66 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/layout/constants.js
var CSS_SIZE_EXCEPTION = {
  "0.5": "half"
};
var DEFAULT_LAYOUT_THEME = {
  breakpoints: {
    s: 576,
    m: 768,
    l: 1080,
    xl: 1200,
    xxl: 1400,
    xxxl: 1920
  },
  spaceBaseSize: 4,
  components: {
    container: {
      gutters: "3",
      media: {
        l: {
          gutters: "5"
        }
      }
    }
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/utils/index.js
var mediaByOrder = {
  s: 0,
  m: 1,
  l: 2,
  xl: 3,
  xxl: 4,
  xxxl: 5
};
var isMediaActiveFactory = (activeType) => (toCheck) => {
  return activeType in mediaByOrder ? mediaByOrder[activeType] - mediaByOrder[toCheck] >= 0 : false;
};
var mediaOrder = ["s", "m", "l", "xl", "xxl", "xxxl"];
var getClosestMediaPropsFactory = (currentActive) => (medias = {}) => {
  if (!currentActive) {
    return void 0;
  }
  let candidate = currentActive;
  while (candidate) {
    if (medias[candidate]) {
      return medias[candidate];
    }
    candidate = mediaOrder[mediaByOrder[candidate] - 1];
  }
  return void 0;
};
var makeCssMod = (space2) => {
  return space2 in CSS_SIZE_EXCEPTION ? CSS_SIZE_EXCEPTION[space2] : String(space2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Col/Col.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Col/Col.css";
var b15 = block("col");
var Col = (_a) => {
  var { children: children2, style: style3, className, qa } = _a, media = __rest(_a, ["children", "style", "className", "qa"]);
  const mods = Object.entries(media).reduce((acc, [mod, modSize]) => {
    acc[`s-${mod}`] = makeCssMod(modSize);
    return acc;
  }, {});
  return import_react66.default.createElement("div", { style: style3, className: b15(mods, className), "data-qa": qa }, children2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Row/Row.js
var import_react69 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useLayoutContext.js
var import_react68 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/layout/contexts/LayoutContext.js
var import_react67 = __toESM(require_react());
var LayoutContext = import_react67.default.createContext({
  theme: DEFAULT_LAYOUT_THEME,
  activeMediaQuery: "s"
});

// node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useLayoutContext.js
var useLayoutContext = () => {
  const { activeMediaQuery, theme } = import_react68.default.useContext(LayoutContext);
  const { isMediaActive, getClosestMediaProps } = import_react68.default.useMemo(() => ({
    isMediaActive: isMediaActiveFactory(activeMediaQuery),
    getClosestMediaProps: getClosestMediaPropsFactory(activeMediaQuery)
  }), [activeMediaQuery]);
  return {
    theme,
    activeMediaQuery,
    isMediaActive,
    getClosestMediaProps
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Row/Row.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Row/Row.css";
var b16 = block("row");
var Row = ({ children: children2, style: style3, className, space: space2, spaceRow, qa }) => {
  const { getClosestMediaProps } = useLayoutContext();
  let s;
  let sr;
  if (typeof space2 === "object") {
    const res = getClosestMediaProps(space2);
    if (res) {
      s = makeCssMod(res);
    }
  } else if (space2) {
    s = makeCssMod(space2);
  }
  if (typeof spaceRow === "object") {
    const res = getClosestMediaProps(spaceRow);
    if (res) {
      sr = makeCssMod(res);
    }
  } else if (spaceRow) {
    sr = String(spaceRow);
  }
  return import_react69.default.createElement("div", { style: style3, className: b16({
    s,
    sr
  }, className), "data-qa": qa }, children2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Flex/Flex.js
var import_react70 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Flex/Flex.css";
var b17 = block("flex");
var Flex = import_react70.default.forwardRef(function Flex2(props, ref2) {
  const { as: Tag = "div", direction, width, grow, basis, children: children2, style: style3, alignContent, alignItems, alignSelf, justifyContent, justifyItems, justifySelf, shrink: shrink3, wrap, inline, title, gap, gapRow, className, space: space2, qa } = props, restProps = __rest(props, ["as", "direction", "width", "grow", "basis", "children", "style", "alignContent", "alignItems", "alignSelf", "justifyContent", "justifyItems", "justifySelf", "shrink", "wrap", "inline", "title", "gap", "gapRow", "className", "space", "qa"]);
  const { getClosestMediaProps, theme: { spaceBaseSize } } = useLayoutContext();
  const applyMediaProps = (property) => typeof property === "object" && property !== null ? getClosestMediaProps(property) : property;
  const gapSpaceSize = applyMediaProps(gap);
  const columnGap = gapSpaceSize ? spaceBaseSize * Number(gapSpaceSize) : void 0;
  const gapRowSpaceSize = applyMediaProps(gapRow) || gapSpaceSize;
  const rowGap = gapRowSpaceSize ? spaceBaseSize * Number(gapRowSpaceSize) : void 0;
  const spaceSize = applyMediaProps(space2);
  const s = !gap && !gapRow && spaceSize ? makeCssMod(spaceSize) : void 0;
  return import_react70.default.createElement(Tag, Object.assign({ className: b17({
    inline,
    s
  }, className), style: Object.assign({
    width,
    flexDirection: applyMediaProps(direction),
    flexGrow: grow === true ? 1 : grow,
    flexWrap: wrap === true ? "wrap" : wrap,
    flexBasis: basis,
    flexShrink: shrink3,
    columnGap,
    rowGap,
    alignContent: applyMediaProps(alignContent),
    alignItems: applyMediaProps(alignItems),
    alignSelf: applyMediaProps(alignSelf),
    justifyContent: applyMediaProps(justifyContent),
    justifyItems: applyMediaProps(justifyItems),
    justifySelf: applyMediaProps(justifySelf)
  }, style3), title, ref: ref2, "data-qa": qa }, restProps), space2 ? import_react70.default.Children.map(children2, (child) => (
    // `space` uses negative margins under the hood. This is hack to prevent wrong background position appearance.
    child ? import_react70.default.createElement("div", { className: b17("wr") }, child) : child
  )) : children2);
});

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/Container.js
var import_react72 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/layout/spacing/spacing.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/spacing/spacing.css";
var b18 = block("s");
var spacing = (props, className) => {
  const classes = [];
  for (const key in props) {
    if (Object.prototype.hasOwnProperty.call(props, key)) {
      const value = props[key];
      if (typeof value !== "undefined") {
        classes.push(b18(`${key}_${makeCssMod(value)}`));
      }
    }
  }
  if (className) {
    classes.push(className);
  }
  return classes.join(" ");
};
var sp = spacing;

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/useContainerThemeProps.js
var import_react71 = __toESM(require_react());
var pickContainerProps = ({ gutters, spaceRow, space: space2 } = {}) => {
  const res = {};
  if (gutters) {
    res.gutters = gutters;
  }
  if (spaceRow || space2) {
    res.spaceRow = spaceRow || space2;
  }
  return res;
};
var useContainerThemeProps = () => {
  const { theme, getClosestMediaProps } = useLayoutContext();
  const containerThemeProps = import_react71.default.useMemo(() => {
    var _a, _b, _c;
    return Object.assign(Object.assign({}, pickContainerProps((_a = theme.components) === null || _a === void 0 ? void 0 : _a.container)), pickContainerProps(getClosestMediaProps((_c = (_b = theme.components) === null || _b === void 0 ? void 0 : _b.container) === null || _c === void 0 ? void 0 : _c.media)));
  }, [getClosestMediaProps, theme]);
  return {
    getClosestMediaProps,
    containerThemeProps
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/Container.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/layout/Container/Container.css";
var b19 = block("container");
var Container = ({ children: children2, style: style3, as: Tag = "div", className, maxWidth, gutters, spaceRow, qa }) => {
  const { getClosestMediaProps, containerThemeProps } = useContainerThemeProps();
  let sr;
  if (typeof spaceRow === "object") {
    const propsCandidate = getClosestMediaProps(spaceRow);
    if (propsCandidate) {
      sr = makeCssMod(propsCandidate);
    }
  } else if (spaceRow) {
    sr = makeCssMod(spaceRow);
  }
  return import_react72.default.createElement(Tag, { style: style3, className: b19({
    mw: maxWidth,
    sr
  }, gutters === false ? className : sp({
    px: gutters || containerThemeProps.gutters
  }, className)), "data-qa": qa }, children2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/LayoutProvider/LayoutProvider.js
var import_react74 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useCurrentActiveMediaQuery.js
var import_react73 = __toESM(require_react());
var mockMediaQueryList = {
  media: "",
  matches: false,
  onchange: () => {
  },
  addListener: () => {
  },
  removeListener: () => {
  },
  addEventListener: () => {
  },
  removeEventListener: () => {
  },
  dispatchEvent: (_) => true
};
var makeCurrentActiveMediaExpressions = (mediaToValue) => ({
  s: `(max-width: ${mediaToValue.m - 1}px)`,
  m: `(min-width: ${mediaToValue.m}px) and (max-width: ${mediaToValue.l - 1}px)`,
  l: `(min-width: ${mediaToValue.l}px) and (max-width: ${mediaToValue.xl - 1}px)`,
  xl: `(min-width: ${mediaToValue.xl}px) and (max-width: ${mediaToValue.xxl - 1}px)`,
  xxl: `(min-width: ${mediaToValue.xxl}px) and (max-width: ${mediaToValue.xxxl - 1}px)`,
  xxxl: `(min-width: ${mediaToValue.xxxl}px)`
});
var safeMatchMedia = (query) => {
  if (typeof window === "undefined" || typeof window.matchMedia !== "function") {
    return mockMediaQueryList;
  }
  return window.matchMedia(String(query));
};
var Queries = class {
  constructor(breakpointsMap) {
    this.queryListsDecl = [];
    const mediaToExpressionMap = makeCurrentActiveMediaExpressions(breakpointsMap);
    this.queryListsDecl = [
      // order important here
      ["s", safeMatchMedia(mediaToExpressionMap.s)],
      ["m", safeMatchMedia(mediaToExpressionMap.m)],
      ["l", safeMatchMedia(mediaToExpressionMap.l)],
      ["xl", safeMatchMedia(mediaToExpressionMap.xl)],
      ["xxl", safeMatchMedia(mediaToExpressionMap.xxl)],
      ["xxxl", safeMatchMedia(mediaToExpressionMap.xxxl)]
    ];
  }
  getCurrentActiveMedia() {
    const activeMedia = this.queryListsDecl.find(([_, queryList]) => queryList.matches);
    if (!activeMedia) {
      return "s";
    }
    return activeMedia[0];
  }
  addListeners(fn2) {
    this.queryListsDecl.forEach(([_, queryList]) => queryList.addEventListener("change", fn2));
  }
  removeListeners(fn2) {
    this.queryListsDecl.forEach(([_, queryList]) => queryList.removeEventListener("change", fn2));
  }
};
var useCurrentActiveMediaQuery = (breakpointsMap, initialMediaQuery = "s") => {
  const [state, _setState] = import_react73.default.useState(initialMediaQuery);
  import_react73.default.useLayoutEffect(() => {
    let mounted = true;
    const queries = new Queries(breakpointsMap);
    const setState = () => {
      _setState(queries.getCurrentActiveMedia());
    };
    const onChange = () => {
      if (!mounted) {
        return;
      }
      setState();
    };
    queries.addListeners(onChange);
    setState();
    return () => {
      mounted = false;
      queries.removeListeners(onChange);
    };
  }, []);
  return state;
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/utils/makeLayoutDefaultTheme.js
var import_merge = __toESM(require_merge());
var makeLayoutDefaultTheme = ({ override } = {}) => {
  return (0, import_merge.default)(DEFAULT_LAYOUT_THEME, override);
};

// node_modules/@gravity-ui/uikit/build/esm/components/layout/LayoutProvider/LayoutProvider.js
function LayoutProvider({ children: children2, theme: override, initialMediaQuery }) {
  const theme = makeLayoutDefaultTheme({ override });
  const activeMediaQuery = useCurrentActiveMediaQuery(theme.breakpoints, initialMediaQuery);
  return import_react74.default.createElement(LayoutContext.Provider, { value: {
    activeMediaQuery,
    theme
  } }, children2);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertAction.js
var import_react77 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/useAlertContext.js
var import_react76 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertContext.js
var import_react75 = __toESM(require_react());
var AlertContext = import_react75.default.createContext(null);

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/useAlertContext.js
var useAlertContext = () => {
  const context = import_react76.default.useContext(AlertContext);
  if (!context)
    throw new Error('Alert: `useAlertContext` hook is used out of "AlertContext"');
  return context;
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertAction.js
var AlertAction = (props) => {
  const { view } = useAlertContext();
  return import_react77.default.createElement(Button2, Object.assign({ view: view === "filled" ? "normal-contrast" : void 0 }, props));
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertActions.js
var import_react78 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/constants.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Alert/Alert.css";
var DEFAULT_ICON_SIZE = 18;
var bAlert = block("alert");

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertActions.js
var AlertActions = ({ items, children: children2, className }) => {
  const { layout } = useAlertContext();
  return import_react78.default.createElement(Flex, { className: bAlert("actions", { minContent: layout === "horizontal" }, className), direction: "row", gap: "3", wrap: true, alignItems: layout === "horizontal" ? "center" : "flex-start" }, (items === null || items === void 0 ? void 0 : items.map(({ handler, text: text2 }, i) => import_react78.default.createElement(AlertAction, { key: i, onClick: handler }, text2))) || children2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertContextProvider.js
var import_react79 = __toESM(require_react());
var AlertContextProvider = ({ layout, view, children: children2 }) => {
  return import_react79.default.createElement(AlertContext.Provider, { value: { layout, view } }, children2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertIcon.js
var import_react80 = __toESM(require_react());
var typeToIcon = {
  danger: {
    filled: CircleXmarkFill_default,
    outlined: CircleXmark_default
  },
  info: {
    filled: CircleInfoFill_default,
    outlined: CircleInfo_default
  },
  positive: {
    filled: CircleCheckFill_default,
    outlined: CircleCheck_default
  },
  success: {
    filled: CircleCheckFill_default,
    outlined: CircleCheck_default
  },
  warning: {
    filled: TriangleExclamationFill_default,
    outlined: TriangleExclamation_default
  },
  utility: {
    filled: ThunderboltFill_default,
    outlined: Thunderbolt_default
  },
  normal: null
};
var AlertIcon = ({ className, theme, view = "filled", size: size2 = DEFAULT_ICON_SIZE }) => {
  const iconByTheme = typeToIcon[theme];
  if (!iconByTheme) {
    return null;
  }
  let color;
  if (theme === "success") {
    color = "positive";
  } else if (theme !== "normal") {
    color = theme;
  }
  return import_react80.default.createElement(
    "div",
    { className: bAlert("icon", colorText({ color }, className)) },
    import_react80.default.createElement(Icon, { data: iconByTheme[view], size: size2 })
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertTitle.js
var import_react81 = __toESM(require_react());
var AlertTitle = ({ text: text2, className }) => {
  return import_react81.default.createElement(Text, { variant: "subheader-2", className: bAlert("title", className) }, text2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Alert/Alert.js
var Alert = (props) => {
  const { theme = "normal", view = "filled", layout = "vertical", message, className, corners, style: style3, onClose, align, qa } = props;
  return import_react82.default.createElement(
    AlertContextProvider,
    { layout, view },
    import_react82.default.createElement(
      Card,
      { style: style3, className: bAlert({ corners }, spacing({ py: 4, px: 5 }, className)), theme, view, qa },
      import_react82.default.createElement(
        Flex,
        { gap: "3", alignItems: align },
        props.icon || import_react82.default.createElement(Alert.Icon, { theme, view }),
        import_react82.default.createElement(
          Flex,
          { direction: layout === "vertical" ? "column" : "row", gap: "5", grow: true },
          import_react82.default.createElement(
            Flex,
            { gap: "2", grow: true, className: bAlert("text-content") },
            import_react82.default.createElement(
              Flex,
              { direction: "column", gap: "1", grow: true, justifyContent: align },
              typeof props.title === "string" ? import_react82.default.createElement(Alert.Title, { text: props.title }) : props.title,
              message
            )
          ),
          Array.isArray(props.actions) ? import_react82.default.createElement(Alert.Actions, { items: props.actions }) : props.actions
        ),
        onClose && import_react82.default.createElement(
          Button2,
          { view: "flat", onClick: onClose },
          import_react82.default.createElement(Icon, { data: Xmark_default, size: DEFAULT_ICON_SIZE, className: colorText({ color: "secondary" }) })
        )
      )
    )
  );
};
Alert.Icon = AlertIcon;
Alert.Title = AlertTitle;
Alert.Actions = AlertActions;
Alert.Action = AlertAction;

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/Breadcrumbs.js
var import_react98 = __toESM(require_react());
var import_throttle2 = __toESM(require_throttle());

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsItem.js
var import_react84 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Link/Link.js
var import_react83 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Link/Link.css";
var b20 = block("link");
var Link = import_react83.default.forwardRef(function Link2({ view = "normal", visitable, href, target, rel, title, children: children2, extraProps, onClick, onFocus, onBlur, id, style: style3, className, qa }, ref2) {
  const handleClickCapture = import_react83.default.useCallback((event) => {
    eventBroker.publish({
      componentId: "Link",
      eventId: "click",
      domEvent: event
    });
  }, []);
  const commonProps = {
    title,
    onClick,
    onClickCapture: handleClickCapture,
    onFocus,
    onBlur,
    id,
    style: style3,
    className: b20({ view, visitable }, className),
    "data-qa": qa
  };
  if (typeof href === "string") {
    const relProp = target === "_blank" && !rel ? "noopener noreferrer" : rel;
    return import_react83.default.createElement("a", Object.assign({}, extraProps, commonProps, { ref: ref2, href, target, rel: relProp }), children2);
  } else {
    return import_react83.default.createElement("span", Object.assign({}, extraProps, commonProps, {
      ref: ref2,
      // as this element has onClick handler
      // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
      tabIndex: 0
    }), children2);
  }
});

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsItem.js
var b21 = block("breadcrumbs");
function Item({ data, isCurrent, isPrevCurrent, renderItem }) {
  const { text: text2, title, href, action } = data;
  const itemTitle = title || text2;
  if (isPrevCurrent || !isCurrent) {
    return import_react84.default.createElement(Link, { key: text2, view: "secondary", href, title: itemTitle, onClick: action, className: b21("item", { "prev-current": isPrevCurrent }) }, renderItem ? renderItem(data, isCurrent, isPrevCurrent) : text2);
  }
  return import_react84.default.createElement("div", { title: itemTitle, className: b21("item", { current: true }) }, renderItem ? renderItem(data, isCurrent, isPrevCurrent) : text2);
}
var BreadcrumbsItem = import_react84.default.memo(Item);
BreadcrumbsItem.displayName = "Breadcrumbs.Item";

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsMore.js
var import_react96 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.js
var import_react95 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.classname.js
var cnDropdownMenu = block("dropdown-menu");

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuContext.js
var import_react85 = __toESM(require_react());
var DropdownMenuContext = import_react85.default.createContext({
  toggle() {
  },
  data: void 0
});
DropdownMenuContext.displayName = "DropdownMenu.Context";

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuItem.js
var import_react92 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/Menu.js
var import_react88 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/MenuGroup.js
var import_react86 = __toESM(require_react());
var b22 = block("menu");
var MenuGroup = import_react86.default.forwardRef(function MenuGroup2({ label, children: children2, style: style3, className, qa }, ref2) {
  const labelId = useUniqId();
  return import_react86.default.createElement(
    "li",
    { ref: ref2, className: b22("list-group-item") },
    import_react86.default.createElement(
      "div",
      { style: style3, className: b22("group", className), "data-qa": qa },
      label && import_react86.default.createElement("div", { id: labelId, className: b22("group-label") }, label),
      import_react86.default.createElement("ul", { role: "group", "aria-labelledby": labelId, className: b22("group-list") }, children2)
    )
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/MenuItem.js
var import_react87 = __toESM(require_react());
var b23 = block("menu");
var MenuItem = import_react87.default.forwardRef(function MenuItem2({ icon, iconStart = icon, iconEnd, title, disabled, active, selected, href, target, rel, onClick, style: style3, className, theme, extraProps, children: children2, qa }, ref2) {
  const { onKeyDown } = useActionHandlers(onClick);
  const handleClickCapture = import_react87.default.useCallback((event) => {
    eventBroker.publish({
      componentId: "MenuItem",
      eventId: "click",
      domEvent: event
    });
  }, []);
  const defaultProps3 = {
    role: "menuitem",
    onKeyDown: onClick && !disabled ? onKeyDown : void 0
  };
  const commonProps = {
    title,
    onClick: disabled ? void 0 : onClick,
    onClickCapture: disabled ? void 0 : handleClickCapture,
    style: style3,
    tabIndex: disabled ? -1 : 0,
    className: b23("item", { disabled, active, selected, theme, interactive: Boolean(onClick) }, className),
    "data-qa": qa
  };
  const content = [
    iconStart && import_react87.default.createElement("div", { key: "icon-start", className: b23("item-icon") }, iconStart),
    import_react87.default.createElement("div", { key: "content", className: b23("item-content") }, children2),
    iconEnd && import_react87.default.createElement("div", { key: "icon-end", className: b23("item-icon-end") }, iconEnd)
  ];
  let item;
  if (href) {
    item = import_react87.default.createElement("a", Object.assign({}, defaultProps3, extraProps, commonProps, { href, target, rel }), content);
  } else {
    item = import_react87.default.createElement("div", Object.assign({}, defaultProps3, extraProps, commonProps), content);
  }
  return import_react87.default.createElement("li", { ref: ref2, className: b23("list-item") }, item);
});

// node_modules/@gravity-ui/uikit/build/esm/components/Menu/Menu.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Menu/Menu.css";
var b24 = block("menu");
var Menu = import_react88.default.forwardRef(function Menu2({ size: size2 = "m", children: children2, style: style3, className, qa }, ref2) {
  return import_react88.default.createElement("ul", {
    ref: ref2,
    role: "menu",
    // tabIndex={0}
    style: style3,
    className: b24({ size: size2 }, className),
    "data-qa": qa
  }, children2);
});
Menu.Item = MenuItem;
Menu.Group = MenuGroup;

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuPopup.js
var import_react90 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuNavigationContext.js
var import_react89 = __toESM(require_react());
var rootMenuPath = [];
var DropdownMenuNavigationContext = import_react89.default.createContext({
  activeMenuPath: rootMenuPath,
  setActiveMenuPath: () => {
  },
  anchorRef: { current: null }
});
var DropdownMenuNavigationContextProvider = ({ anchorRef, children: children2, disabled }) => {
  const [activeMenuPath, setActiveMenuPath] = import_react89.default.useState(rootMenuPath);
  import_react89.default.useEffect(() => {
    if (disabled) {
      setActiveMenuPath(rootMenuPath);
    }
  }, [disabled]);
  const contextValue = import_react89.default.useMemo(() => ({
    activeMenuPath,
    setActiveMenuPath,
    anchorRef
  }), [activeMenuPath, anchorRef]);
  return import_react89.default.createElement(DropdownMenuNavigationContext.Provider, { value: contextValue }, children2);
};

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/constants.js
var subMenuPlacement = ["right-start", "left-start"];
var dropdownMenuSeparator = { text: "", action: () => {
}, path: [] };

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/isSeparator.js
function isSeparator(item) {
  return item === dropdownMenuSeparator;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/shouldSkipItemNavigation.js
function shouldSkipItemNavigation(item) {
  return item.disabled || isSeparator(item);
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/stringifyNavigationPath.js
function stringifyNavigationPath(path) {
  var _a;
  return (_a = path === null || path === void 0 ? void 0 : path.join(" ")) !== null && _a !== void 0 ? _a : "";
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuPopup.js
var DropdownMenuPopup = ({ items, open, anchorRef, onClose, size: size2, menuProps, children: children2, popupProps, path = [] }) => {
  const { toggle, data } = import_react90.default.useContext(DropdownMenuContext);
  const { activeMenuPath, setActiveMenuPath, anchorRef: navigationAnchorRef } = import_react90.default.useContext(DropdownMenuNavigationContext);
  const isSubmenu = path.length > 0;
  const activateParent = import_react90.default.useCallback(() => {
    setActiveMenuPath(path.slice(0, path.length - 1));
  }, [setActiveMenuPath, path]);
  const handleMouseEnter = import_react90.default.useCallback((event) => {
    var _a;
    setActiveMenuPath(path);
    (_a = popupProps === null || popupProps === void 0 ? void 0 : popupProps.onMouseEnter) === null || _a === void 0 ? void 0 : _a.call(popupProps, event);
  }, [path, popupProps, setActiveMenuPath]);
  const handleMouseLeave = import_react90.default.useCallback((event) => {
    var _a;
    activateParent();
    (_a = popupProps === null || popupProps === void 0 ? void 0 : popupProps.onMouseLeave) === null || _a === void 0 ? void 0 : _a.call(popupProps, event);
  }, [activateParent, popupProps]);
  const handleSelect = import_react90.default.useCallback((activeItem, event) => {
    var _a;
    if (activeItem.items && activeItem.path) {
      setActiveMenuPath(activeItem.path);
    } else {
      (_a = activeItem.action) === null || _a === void 0 ? void 0 : _a.call(activeItem, event, data);
      toggle(false);
    }
  }, [data, setActiveMenuPath, toggle]);
  const handleKeydown = import_react90.default.useCallback((activeItemIndex2, event) => {
    switch (event.key) {
      case "Escape": {
        if (isSubmenu) {
          event.stopPropagation();
          activateParent === null || activateParent === void 0 ? void 0 : activateParent();
        }
        return false;
      }
      case "Enter":
      case " ": {
        const activeItem = items[activeItemIndex2];
        const isSubmenuToggleActive = activeItem === null || activeItem === void 0 ? void 0 : activeItem.items;
        if (isSubmenu || isSubmenuToggleActive) {
          event.stopPropagation();
          event.preventDefault();
        }
        if (activeItem) {
          handleSelect(activeItem, event);
        }
        return false;
      }
    }
    return true;
  }, [activateParent, handleSelect, isSubmenu, items]);
  const isNavigationActive = open && stringifyNavigationPath(path) === stringifyNavigationPath(activeMenuPath);
  const { activeItemIndex, setActiveItemIndex, reset: resetNavigation } = useListNavigation({
    items,
    skip: shouldSkipItemNavigation,
    anchorRef: navigationAnchorRef,
    onAnchorKeyDown: handleKeydown,
    disabled: !isNavigationActive,
    initialValue: isSubmenu ? 0 : -1
  });
  import_react90.default.useEffect(() => {
    if (!open) {
      resetNavigation();
    }
  }, [open, resetNavigation]);
  return import_react90.default.createElement(Popup, Object.assign({ open, anchorRef, onClose }, popupProps, { onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }), children2 || import_react90.default.createElement(Menu, Object.assign({ className: cnDropdownMenu("menu"), size: size2 }, menuProps), items.map((item, index) => {
    const isActive = isNavigationActive && activeItemIndex === index;
    const activate = () => setActiveItemIndex(index);
    const extraProps = Object.assign(Object.assign({}, item.extraProps), { onMouseEnter: activate });
    return import_react90.default.createElement(DropdownMenuItem, Object.assign({ key: index, className: cnDropdownMenu("menu-item", { separator: isSeparator(item) }, item.className), selected: isActive, popupProps, closeMenu: onClose }, item, { extraProps }));
  })));
};

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/useSubmenu.js
var import_react91 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/isSubmenuOpen.js
function isSubmenuOpen(path, activeMenuPath) {
  var _a;
  return (_a = path === null || path === void 0 ? void 0 : path.every((item, index) => item === (activeMenuPath === null || activeMenuPath === void 0 ? void 0 : activeMenuPath[index]))) !== null && _a !== void 0 ? _a : false;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/useSubmenu.js
function useSubmenu({ items, path }) {
  const { activeMenuPath, setActiveMenuPath } = import_react91.default.useContext(DropdownMenuNavigationContext);
  const hasSubmenu = Boolean(path) && Boolean(items === null || items === void 0 ? void 0 : items.length);
  const closeSubmenu = import_react91.default.useCallback(() => {
    if (!path) {
      return;
    }
    setActiveMenuPath(path.slice(0, path.length - 1));
  }, [path, setActiveMenuPath]);
  const openSubmenu = import_react91.default.useCallback(() => {
    if (!path) {
      return;
    }
    setActiveMenuPath(path);
  }, [path, setActiveMenuPath]);
  return {
    hasSubmenu,
    isSubmenuOpen: isSubmenuOpen(path, activeMenuPath),
    openSubmenu,
    closeSubmenu
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenuItem.js
var DropdownMenuItem = (_a) => {
  var { text: text2, action, items: subMenuItems, popupProps, closeMenu, children: children2, path } = _a, props = __rest(_a, ["text", "action", "items", "popupProps", "closeMenu", "children", "path"]);
  const { toggle, data } = import_react92.default.useContext(DropdownMenuContext);
  const menuItemRef = import_react92.default.useRef(null);
  const { hasSubmenu, isSubmenuOpen: isSubmenuOpen2, closeSubmenu, openSubmenu } = useSubmenu({
    items: subMenuItems,
    path
  });
  const handleCloseMenu = import_react92.default.useCallback(() => {
    const close = () => {
      if (closeMenu) {
        closeMenu();
      } else {
        toggle(false);
      }
    };
    if (hasSubmenu) {
      closeSubmenu();
      requestAnimationFrame(close);
    } else {
      close();
    }
  }, [closeMenu, closeSubmenu, hasSubmenu, toggle]);
  const handleMenuItemClick = import_react92.default.useCallback((event) => {
    if (hasSubmenu) {
      return;
    }
    action === null || action === void 0 ? void 0 : action(event, data);
    handleCloseMenu();
  }, [action, data, handleCloseMenu, hasSubmenu]);
  const extraProps = import_react92.default.useMemo(() => {
    return Object.assign(Object.assign({}, props.extraProps), { onMouseEnter: (event) => {
      var _a2, _b;
      (_b = (_a2 = props.extraProps) === null || _a2 === void 0 ? void 0 : _a2.onMouseEnter) === null || _b === void 0 ? void 0 : _b.call(_a2, event);
      if (hasSubmenu) {
        openSubmenu();
      }
    }, onMouseLeave: (event) => {
      var _a2, _b;
      (_b = (_a2 = props.extraProps) === null || _a2 === void 0 ? void 0 : _a2.onMouseLeave) === null || _b === void 0 ? void 0 : _b.call(_a2, event);
      if (hasSubmenu) {
        closeSubmenu();
      }
    } });
  }, [props.extraProps, closeSubmenu, hasSubmenu, openSubmenu]);
  const iconEnd = hasSubmenu ? import_react92.default.createElement(Icon, { data: ChevronRight_default, size: 10, className: cnDropdownMenu("sub-menu-arrow") }) : props.iconEnd;
  return import_react92.default.createElement(
    import_react92.default.Fragment,
    null,
    import_react92.default.createElement(Menu.Item, Object.assign({ ref: menuItemRef }, props, { extraProps, onClick: handleMenuItemClick, iconEnd }), text2 || children2),
    hasSubmenu && subMenuItems && import_react92.default.createElement(DropdownMenuPopup, { popupProps: Object.assign(Object.assign({}, popupProps), { className: cnDropdownMenu("sub-menu", popupProps === null || popupProps === void 0 ? void 0 : popupProps.className), placement: subMenuPlacement }), items: subMenuItems, path, open: isSubmenuOpen2, anchorRef: menuItemRef, onClose: handleCloseMenu })
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/usePopupVisibility.js
var import_react93 = __toESM(require_react());
function usePopupVisibility(visible, onChangeVisibility, disabled) {
  const [isPopupShown, setPopupShown] = useConditionallyControlledState(visible, onChangeVisibility, false);
  const togglePopup = import_react93.default.useCallback((open) => {
    setPopupShown((isShown) => {
      if (typeof open === "boolean") {
        return open;
      }
      return !isShown;
    });
  }, [setPopupShown]);
  const closePopup = import_react93.default.useCallback(() => {
    setPopupShown(false);
  }, [setPopupShown]);
  import_react93.default.useEffect(() => {
    if (disabled && isPopupShown) {
      closePopup();
    }
  }, [closePopup, disabled, isPopupShown]);
  return {
    isPopupShown,
    togglePopup,
    closePopup
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/hooks/useScrollHandler.js
var import_react94 = __toESM(require_react());
function useScrollHandler(onScroll, anchorRef, disabled) {
  import_react94.default.useEffect(() => {
    if (disabled) {
      return void 0;
    }
    const handleScroll = (event) => {
      if (event.target.contains(anchorRef.current)) {
        onScroll(event);
      }
    };
    document.addEventListener("scroll", handleScroll, true);
    return () => {
      document.removeEventListener("scroll", handleScroll, true);
    };
  }, [anchorRef, onScroll, disabled]);
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/utils/toItemList.js
function toItemList(items, separator, path = []) {
  const updatedItems = [];
  let addedGroup = false;
  let index = -1;
  for (const item of items) {
    if (Array.isArray(item)) {
      const groupItemsList = toItemList(item, separator, [...path, index]);
      if (groupItemsList.length === 0) {
        continue;
      }
      if (updatedItems.length !== 0) {
        updatedItems.push(separator);
      }
      for (const groupItem of groupItemsList) {
        groupItem.path[path.length] = ++index;
      }
      updatedItems.push(...groupItemsList);
      addedGroup = true;
    } else {
      if (item.hidden) {
        continue;
      }
      if (addedGroup) {
        updatedItems.push(separator);
      }
      const updatedItem = Object.assign({}, item);
      updatedItem.path = [...path, ++index];
      if (item.items) {
        updatedItem.items = toItemList(item.items, separator, updatedItem.path);
      }
      updatedItems.push(updatedItem);
      addedGroup = false;
    }
  }
  return updatedItems;
}

// node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/DropdownMenu/DropdownMenu.css";
var DropdownMenu = ({ items = [], size: size2 = "m", icon = import_react95.default.createElement(Icon, { data: Ellipsis_default }), open, onOpenToggle, hideOnScroll = true, data, disabled, switcher, renderSwitcher, switcherWrapperClassName, defaultSwitcherProps, defaultSwitcherClassName, onSwitcherClick, menuProps, popupProps, children: children2 }) => {
  const anchorRef = import_react95.default.useRef(null);
  const { isPopupShown, togglePopup, closePopup } = usePopupVisibility(open, onOpenToggle, disabled);
  useScrollHandler(closePopup, anchorRef, !isPopupShown || !hideOnScroll);
  const contextValue = import_react95.default.useMemo(() => ({
    toggle: togglePopup,
    data
  }), [data, togglePopup]);
  const itemsList = import_react95.default.useMemo(() => toItemList(items, dropdownMenuSeparator), [items]);
  const handleSwitcherClick = import_react95.default.useCallback((event) => {
    if (disabled) {
      return;
    }
    onSwitcherClick === null || onSwitcherClick === void 0 ? void 0 : onSwitcherClick(event);
    togglePopup();
  }, [disabled, onSwitcherClick, togglePopup]);
  const { onKeyDown: handleSwitcherKeyDown } = useActionHandlers(handleSwitcherClick);
  const switcherProps = import_react95.default.useMemo(() => ({
    onClick: handleSwitcherClick,
    onKeyDown: handleSwitcherKeyDown
  }), [handleSwitcherClick, handleSwitcherKeyDown]);
  return import_react95.default.createElement(
    DropdownMenuContext.Provider,
    { value: contextValue },
    import_react95.default.createElement("div", Object.assign({ ref: anchorRef, className: cnDropdownMenu("switcher-wrapper", switcherWrapperClassName) }, renderSwitcher ? {} : switcherProps), (renderSwitcher === null || renderSwitcher === void 0 ? void 0 : renderSwitcher(switcherProps)) || switcher || import_react95.default.createElement(Button2, Object.assign({ view: "flat", size: size2 }, defaultSwitcherProps, { className: cnDropdownMenu("switcher-button", defaultSwitcherClassName), disabled }), icon)),
    import_react95.default.createElement(
      DropdownMenuNavigationContextProvider,
      { anchorRef, disabled: !isPopupShown },
      import_react95.default.createElement(DropdownMenuPopup, { items: itemsList, open: isPopupShown, size: size2, menuProps, anchorRef, onClose: closePopup, popupProps }, children2)
    )
  );
};
var DropdownMenuExport = Object.assign(DropdownMenu, { Item: DropdownMenuItem });

// node_modules/@gravity-ui/i18n/build/esm/replace-params.js
var PARAM_REGEXP = /{{(.*?)}}/g;
function replaceParams(keyValue, params) {
  let result = "";
  let lastIndex = PARAM_REGEXP.lastIndex = 0;
  let match2;
  while (match2 = PARAM_REGEXP.exec(keyValue)) {
    if (lastIndex !== match2.index) {
      result += keyValue.slice(lastIndex, match2.index);
    }
    lastIndex = PARAM_REGEXP.lastIndex;
    const [all, key] = match2;
    if (key && Object.prototype.hasOwnProperty.call(params, key)) {
      result += params[key];
    } else {
      result += all;
    }
  }
  if (lastIndex < keyValue.length) {
    result += keyValue.slice(lastIndex);
  }
  return result;
}

// node_modules/@gravity-ui/i18n/build/esm/consts.js
var KEYSET_SEPARATOR = "::";
var MAX_NESTING_DEPTH = 1;
var getNestingTranslationsRegExp = () => new RegExp(/\$t{([^}]+)}/g);

// node_modules/@gravity-ui/i18n/build/esm/translation-helpers.js
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["EmptyKeyset"] = "EMPTY_KEYSET";
  ErrorCode2["EmptyLanguageData"] = "EMPTY_LANGUAGE_DATA";
  ErrorCode2["KeysetNotFound"] = "KEYSET_NOT_FOUND";
  ErrorCode2["MissingKey"] = "MISSING_KEY";
  ErrorCode2["MissingKeyFor0"] = "MISSING_KEY_FOR_0";
  ErrorCode2["MissingKeyParamsCount"] = "MISSING_KEY_PARAMS_COUNT";
  ErrorCode2["MissingKeyPlurals"] = "MISSING_KEY_PLURALS";
  ErrorCode2["MissingInheritedKey"] = "MISSING_INHERITED_KEY";
  ErrorCode2["NestedPlural"] = "NESTED_PLURAL";
  ErrorCode2["ExceedTranslationNestingDepth"] = "EXCEED_TRANSLATION_NESTING_DEPTH";
  ErrorCode2["NoLanguageData"] = "NO_LANGUAGE_DATA";
})(ErrorCode || (ErrorCode = {}));
var codeValues = Object.values(ErrorCode);
function mapErrorCodeToMessage(args) {
  const { code, fallbackLang, lang } = args;
  let message = `Using language ${lang}. `;
  switch (code) {
    case ErrorCode.EmptyKeyset: {
      message += `Keyset is empty.`;
      break;
    }
    case ErrorCode.EmptyLanguageData: {
      message += "Language data is empty.";
      break;
    }
    case ErrorCode.KeysetNotFound: {
      message += "Keyset not found.";
      break;
    }
    case ErrorCode.MissingKey: {
      message += "Missing key.";
      break;
    }
    case ErrorCode.MissingKeyFor0: {
      message += "Missing key for 0";
      return message;
    }
    case ErrorCode.MissingKeyParamsCount: {
      message += "Missing params.count for key.";
      break;
    }
    case ErrorCode.MissingKeyPlurals: {
      message += "Missing required plurals.";
      break;
    }
    case ErrorCode.NoLanguageData: {
      message = `Language "${lang}" is not defined, make sure you call setLang for the same language you called registerKeysets for!`;
    }
  }
  if (fallbackLang) {
    message += ` Trying to use fallback language "${fallbackLang}"...`;
  }
  return message;
}
var hasNestingTranslations = (keyValue) => {
  var _a;
  const NESTING_PREGEXP = getNestingTranslationsRegExp();
  const match2 = NESTING_PREGEXP.exec(keyValue);
  return ((_a = match2 === null || match2 === void 0 ? void 0 : match2.length) !== null && _a !== void 0 ? _a : 0) > 0;
};
var getPluralValues = (keyValue) => {
  if (keyValue instanceof Array) {
    return keyValue;
  } else if (keyValue instanceof Object) {
    return Object.values(keyValue);
  }
  return [];
};

// node_modules/@gravity-ui/i18n/build/esm/types.js
var PluralForm;
(function(PluralForm2) {
  PluralForm2[PluralForm2["One"] = 0] = "One";
  PluralForm2[PluralForm2["Few"] = 1] = "Few";
  PluralForm2[PluralForm2["Many"] = 2] = "Many";
  PluralForm2[PluralForm2["None"] = 3] = "None";
})(PluralForm || (PluralForm = {}));
function isPluralValue(value) {
  return typeof value !== "string";
}

// node_modules/@gravity-ui/i18n/build/esm/plural/en.js
function en_default(count2, pluralForms) {
  if (count2 === 0) {
    return pluralForms.None;
  }
  if (count2 === 1 || count2 === -1) {
    return pluralForms.One;
  }
  return pluralForms.Many;
}

// node_modules/@gravity-ui/i18n/build/esm/plural/ru.js
function ru_default(count2, pluralForms) {
  const lastDigit = Math.abs(count2 % 10);
  const last2Digits = Math.abs(count2 % 100);
  if (count2 === 0) {
    return pluralForms.None;
  }
  if (lastDigit === 1 && last2Digits !== 11) {
    return pluralForms.One;
  }
  if (lastDigit > 1 && lastDigit < 5 && (last2Digits < 10 || last2Digits > 20)) {
    return pluralForms.Few;
  }
  return pluralForms.Many;
}

// node_modules/@gravity-ui/i18n/build/esm/plural/general.js
function getPluralViaIntl(value, count2, lang) {
  if (value.zero && count2 === 0) {
    return value.zero;
  }
  if (!Intl.PluralRules) {
    throw new Error("Intl.PluralRules is not available. Use polyfill.");
  }
  const pluralRules = new Intl.PluralRules(lang);
  const form = pluralRules.select(count2);
  if (form === "other" && typeof value.other === "undefined") {
    return value.many || value.few;
  }
  return value[form] || value.other;
}
function getPluralValue({ value, count: count2, lang, pluralizers, log: log2, key }) {
  if (!Array.isArray(value)) {
    return getPluralViaIntl(value, count2, lang) || key;
  }
  if (!pluralizers) {
    log2("Can not use deprecated plural format without pluralizers");
    return key;
  }
  if (!pluralizers[lang]) {
    log2(`Pluralization is not configured for language '${lang}', falling back to the english ruleset`);
  }
  if (value.length < 3) {
    log2("Missing required plurals");
    return key;
  }
  const pluralizer = pluralizers[lang] || pluralizers["en"];
  if (!pluralizer) {
    log2("Fallback pluralization is not configured!");
    return key;
  }
  return value[pluralizer(count2, PluralForm)] || value[PluralForm.Many] || key;
}

// node_modules/@gravity-ui/i18n/build/esm/index.js
var I18N = class {
  constructor(options = {}) {
    this.data = {};
    this.pluralizers = {
      en: en_default,
      ru: ru_default
    };
    this.logger = null;
    const { data, fallbackLang, lang, logger = null } = options;
    this.fallbackLang = fallbackLang;
    this.lang = lang;
    this.logger = logger;
    if (data) {
      Object.entries(data).forEach(([keysetLang, keysetData]) => {
        this.registerKeysets(keysetLang, keysetData);
      });
    }
  }
  setLang(lang) {
    this.lang = lang;
  }
  setFallbackLang(fallbackLang) {
    this.fallbackLang = fallbackLang;
  }
  /**
   * @deprecated Plurals automatically used from Intl.PluralRules. You can safely remove this call. Will be removed in v2.
   */
  configurePluralization(pluralizers) {
    this.pluralizers = Object.assign({}, this.pluralizers, pluralizers);
  }
  registerKeyset(lang, keysetName, data = {}) {
    const isAlreadyRegistered = this.data[lang] && Object.prototype.hasOwnProperty.call(this.data[lang], keysetName);
    if (isAlreadyRegistered && true) {
      this.warn(`Keyset '${keysetName}' is already registered.`);
    }
    this.data[lang] = Object.assign({}, this.data[lang], { [keysetName]: data });
  }
  registerKeysets(lang, data) {
    Object.keys(data).forEach((keysetName) => {
      this.registerKeyset(lang, keysetName, data[keysetName]);
    });
  }
  has(keysetName, key, lang) {
    var _a;
    const languageData = this.getLanguageData(lang);
    return Boolean(languageData && languageData[keysetName] && ((_a = languageData[keysetName]) === null || _a === void 0 ? void 0 : _a[key]));
  }
  i18n(keysetName, key, params) {
    if (!this.lang && !this.fallbackLang) {
      throw new Error('Language is not specified. You should set at least one of these: "lang", "fallbackLang"');
    }
    let text2;
    if (this.lang) {
      text2 = this._i18n(keysetName, key, this.lang, params);
    } else {
      this.warn("Target language is not specified.");
    }
    if (text2 === void 0 && this.fallbackLang && this.fallbackLang !== this.lang) {
      text2 = this._i18n(keysetName, key, this.fallbackLang, params);
    }
    return text2 !== null && text2 !== void 0 ? text2 : key;
  }
  keyset(keysetName) {
    return (key, params) => {
      return this.i18n(keysetName, key, params);
    };
  }
  warn(msg, keyset, key) {
    var _a;
    let cacheKey = "";
    if (keyset) {
      cacheKey += keyset;
      if (key) {
        cacheKey += `.${key}`;
      }
    } else {
      cacheKey = "languageData";
    }
    (_a = this.logger) === null || _a === void 0 ? void 0 : _a.log(`I18n: ${msg}`, {
      level: "info",
      logger: cacheKey,
      extra: {
        type: "i18n"
      }
    });
  }
  getLanguageData(lang) {
    const langCode = lang || this.lang;
    return langCode ? this.data[langCode] : void 0;
  }
  _i18n(keysetName, key, lang, params) {
    const { text: text2, details } = new I18NTranslation(this, lang, key, keysetName, params).getTranslationData();
    if (details) {
      const message = mapErrorCodeToMessage({
        code: details.code,
        lang,
        fallbackLang: this.fallbackLang === lang ? void 0 : this.fallbackLang
      });
      this.warn(message, details.keysetName, details.key);
    }
    return text2;
  }
};
var I18NTranslation = class _I18NTranslation {
  constructor(i18n2, lang, key, keysetName, params, nestingDepth) {
    this.i18n = i18n2;
    this.lang = lang;
    this.key = key;
    this.keysetName = keysetName;
    this.params = params;
    this.nestingDepth = nestingDepth !== null && nestingDepth !== void 0 ? nestingDepth : 0;
  }
  getTranslationData() {
    var _a;
    const { data: keyset, details } = this.getKeyset();
    if (details) {
      return { details };
    }
    const keyValue = keyset && keyset[this.key];
    const result = {};
    if (keyValue === void 0) {
      return this.getTranslationDataError(ErrorCode.MissingKey);
    }
    if (isPluralValue(keyValue)) {
      const isNested = this.nestingDepth > 0;
      const isPluralValueHasNestingTranslations = getPluralValues(keyValue).some((kv) => hasNestingTranslations(kv));
      if (isNested || isPluralValueHasNestingTranslations) {
        return this.getTranslationDataError(ErrorCode.NestedPlural);
      }
      const count2 = Number((_a = this.params) === null || _a === void 0 ? void 0 : _a.count);
      if (Number.isNaN(count2)) {
        return this.getTranslationDataError(ErrorCode.MissingKeyParamsCount);
      }
      result.text = getPluralValue({
        key: this.key,
        value: keyValue,
        count: count2,
        lang: this.lang || "en",
        pluralizers: this.i18n.pluralizers,
        log: (message) => this.i18n.warn(message, this.keysetName, this.key)
      });
    } else {
      result.text = String(keyValue);
    }
    if (this.params) {
      result.text = replaceParams(String(result.text), this.params);
    }
    const replaceTranslationsInheritanceResult = this.replaceTranslationsInheritance({
      keyValue: String(result.text)
    });
    if (!replaceTranslationsInheritanceResult.text) {
      return replaceTranslationsInheritanceResult;
    }
    result.text = replaceTranslationsInheritanceResult.text;
    return result;
  }
  getTranslationDataError(errorCode) {
    return { details: { code: errorCode, keysetName: this.keysetName, key: this.key } };
  }
  getKeyset() {
    const languageData = this.i18n.getLanguageData(this.lang);
    if (typeof languageData === "undefined") {
      return this.getTranslationDataError(ErrorCode.NoLanguageData);
    }
    if (Object.keys(languageData).length === 0) {
      return this.getTranslationDataError(ErrorCode.EmptyLanguageData);
    }
    const keyset = languageData[this.keysetName];
    if (!keyset) {
      return this.getTranslationDataError(ErrorCode.KeysetNotFound);
    }
    if (Object.keys(keyset).length === 0) {
      return this.getTranslationDataError(ErrorCode.EmptyKeyset);
    }
    return { data: keyset };
  }
  replaceTranslationsInheritance(args) {
    const { keyValue } = args;
    const NESTING_PREGEXP = getNestingTranslationsRegExp();
    let result = "";
    let lastIndex = NESTING_PREGEXP.lastIndex = 0;
    let match2;
    while (match2 = NESTING_PREGEXP.exec(keyValue)) {
      if (lastIndex !== match2.index) {
        result += keyValue.slice(lastIndex, match2.index);
      }
      lastIndex = NESTING_PREGEXP.lastIndex;
      const [all, key] = match2;
      if (key) {
        if (this.nestingDepth + 1 > MAX_NESTING_DEPTH) {
          return this.getTranslationDataError(ErrorCode.ExceedTranslationNestingDepth);
        }
        let [inheritedKey, inheritedKeysetName] = [
          key,
          void 0
        ];
        const parts = key.split(KEYSET_SEPARATOR);
        if (parts.length > 1) {
          [inheritedKeysetName, inheritedKey] = [parts[0], parts[1]];
        }
        if (!inheritedKey) {
          return this.getTranslationDataError(ErrorCode.MissingInheritedKey);
        }
        const data = new _I18NTranslation(this.i18n, this.lang, inheritedKey, inheritedKeysetName !== null && inheritedKeysetName !== void 0 ? inheritedKeysetName : this.keysetName, void 0, this.nestingDepth + 1).getTranslationData();
        if (data.details) {
          return this.getTranslationDataError(ErrorCode.MissingInheritedKey);
        }
        result += data.text;
      } else {
        result += all;
      }
    }
    if (lastIndex < keyValue.length) {
      result += keyValue.slice(lastIndex);
    }
    return { text: result };
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/utils/configure.js
var Lang;
(function(Lang2) {
  Lang2["Ru"] = "ru";
  Lang2["En"] = "en";
})(Lang || (Lang = {}));
var subs = [];
var config = {
  lang: Lang.En
};
var configure = (newConfig) => {
  Object.assign(config, newConfig);
  subs.forEach((sub) => {
    sub(config);
  });
};
var subscribeConfigure = (sub) => {
  subs.push(sub);
  return () => {
    subs = subs.filter((item) => item !== sub);
  };
};
var getConfig = () => config;

// node_modules/@gravity-ui/uikit/build/esm/i18n.js
var i18n = new I18N();
i18n.setLang(getConfig().lang);
subscribeConfigure((config3) => {
  i18n.setLang(config3.lang);
});

// node_modules/@gravity-ui/uikit/build/esm/components/utils/addComponentKeysets.js
function addComponentKeysets(data, keysetName) {
  Object.entries(data).forEach(([lang, keys]) => i18n.registerKeyset(lang, keysetName, keys));
  return i18n.keyset(keysetName);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/i18n/en.json
var en_default2 = {
  label_more: "Show more"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/i18n/ru.json
var ru_default2 = {
  label_more: "Показать больше"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/i18n/index.js
var COMPONENT = "Breadcrumbs";
var i18n_default = addComponentKeysets({ en: en_default2, ru: ru_default2 }, COMPONENT);

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsMore.js
var b25 = block("breadcrumbs");
function BreadcrumbsMore({ popupStyle, popupPlacement, items }) {
  return import_react96.default.createElement(DropdownMenuExport, { items, popupProps: {
    className: b25("popup", {
      staircase: popupStyle === "staircase"
    }),
    placement: popupPlacement
  }, renderSwitcher: ({ onClick }) => import_react96.default.createElement(Link, { view: "secondary", title: i18n_default("label_more"), className: b25("item", { more: true }), onClick }, "...") });
}
BreadcrumbsMore.displayName = "Breadcrumbs.More";

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/BreadcrumbsSeparator.js
var import_react97 = __toESM(require_react());
var b26 = block("breadcrumbs");
function BreadcrumbsSeparator({ renderItemDivider }) {
  return import_react97.default.createElement("div", { "aria-hidden": true, className: b26("divider") }, renderItemDivider ? renderItemDivider() : "/");
}
BreadcrumbsSeparator.displayName = "Breadcrumbs.Separator";

// node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/Breadcrumbs.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Breadcrumbs/Breadcrumbs.css";
var RESIZE_THROTTLE2 = 200;
var MORE_ITEM_WIDTH = 34;
var DEFAULT_POPUP_PLACEMENT = ["bottom", "top"];
var b27 = block("breadcrumbs");
var LastDisplayedItemsCount;
(function(LastDisplayedItemsCount2) {
  LastDisplayedItemsCount2[LastDisplayedItemsCount2["One"] = 1] = "One";
  LastDisplayedItemsCount2[LastDisplayedItemsCount2["Two"] = 2] = "Two";
})(LastDisplayedItemsCount || (LastDisplayedItemsCount = {}));
var FirstDisplayedItemsCount;
(function(FirstDisplayedItemsCount2) {
  FirstDisplayedItemsCount2[FirstDisplayedItemsCount2["Zero"] = 0] = "Zero";
  FirstDisplayedItemsCount2[FirstDisplayedItemsCount2["One"] = 1] = "One";
})(FirstDisplayedItemsCount || (FirstDisplayedItemsCount = {}));
var Breadcrumbs = class _Breadcrumbs extends import_react98.default.Component {
  static prepareInitialState(props) {
    const { firstDisplayedItemsCount } = props;
    return {
      calculated: false,
      rootItem: firstDisplayedItemsCount ? props.items[0] : void 0,
      visibleItems: props.items.slice(firstDisplayedItemsCount),
      hiddenItems: [],
      allItems: props.items
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.allItems !== props.items) {
      return _Breadcrumbs.prepareInitialState(props);
    }
    return null;
  }
  constructor(props) {
    super(props);
    this.handleResize = () => {
      const state = _Breadcrumbs.prepareInitialState(this.props);
      this.setState(state, this.recalculate);
    };
    this.handleResize = (0, import_throttle2.default)(this.handleResize, RESIZE_THROTTLE2);
    this.resizeObserver = new ResizeObserver(this.handleResize);
    this.container = import_react98.default.createRef();
    this.state = _Breadcrumbs.prepareInitialState(props);
  }
  componentDidMount() {
    this.recalculate();
    this.resizeObserver.observe(this.container.current);
  }
  componentDidUpdate(prevProps) {
    if (prevProps.items !== this.state.allItems) {
      this.recalculate();
    }
  }
  componentWillUnmount() {
    this.resizeObserver.disconnect();
  }
  render() {
    const { className, qa } = this.props;
    const { calculated } = this.state;
    const rootItem = this.renderRootItem();
    return import_react98.default.createElement(
      "div",
      { className: b27({ calculated: calculated ? "yes" : "no" }, className), "data-qa": qa },
      import_react98.default.createElement(
        "div",
        { className: b27("inner"), ref: this.container },
        rootItem,
        this.renderMoreItem(),
        this.renderVisibleItems()
      )
    );
  }
  renderItem(data, isCurrent, isPrevCurrent) {
    const { renderItemContent } = this.props;
    return import_react98.default.createElement(BreadcrumbsItem, { data, isCurrent, isPrevCurrent, renderItem: renderItemContent });
  }
  renderItemDivider() {
    const { renderItemDivider } = this.props;
    return import_react98.default.createElement(BreadcrumbsSeparator, { renderItemDivider });
  }
  renderRootItem() {
    const { renderRootContent, renderItemContent } = this.props;
    const { rootItem, visibleItems } = this.state;
    const isCurrent = visibleItems.length === 0;
    if (!rootItem) {
      return null;
    }
    return import_react98.default.createElement(BreadcrumbsItem, { data: rootItem, isCurrent, isPrevCurrent: false, renderItem: renderRootContent || renderItemContent });
  }
  renderVisibleItems() {
    const { visibleItems } = this.state;
    return visibleItems.map((item, index, items) => {
      const isCurrent = index === items.length - 1;
      const isPrevCurrent = index === items.length - 2;
      return import_react98.default.createElement(
        import_react98.default.Fragment,
        { key: index },
        this.renderItemDivider(),
        this.renderItem(item, isCurrent, isPrevCurrent)
      );
    });
  }
  renderMoreItem() {
    const { hiddenItems } = this.state;
    if (hiddenItems.length === 0) {
      return null;
    }
    const { popupStyle, popupPlacement, renderItemDivider } = this.props;
    return import_react98.default.createElement(
      import_react98.default.Fragment,
      null,
      import_react98.default.createElement(BreadcrumbsSeparator, { renderItemDivider }),
      import_react98.default.createElement(BreadcrumbsMore, { items: hiddenItems, popupPlacement, popupStyle })
    );
  }
  recalculate() {
    const { items: allItems, lastDisplayedItemsCount, firstDisplayedItemsCount } = this.props;
    if (this.container.current) {
      const dividers = Array.from(this.container.current.querySelectorAll(`.${b27("divider")}`));
      const items = Array.from(this.container.current.querySelectorAll(`.${b27("item")}`));
      const availableWidth = this.container.current.offsetWidth;
      const itemsWidths = items.map((elem) => elem.scrollWidth);
      const dividersWidths = dividers.map((elem) => elem.offsetWidth);
      const buttonsWidth = itemsWidths.reduce((total, width, index, widths) => {
        const isLastItem = widths.length - 1 === index;
        const isItemBeforeLast = lastDisplayedItemsCount === LastDisplayedItemsCount.Two && widths.length - 2 === index;
        if (isLastItem || isItemBeforeLast) {
          return total + Math.min(width, 200);
        }
        return total + width;
      }, 0);
      const dividersWidth = dividersWidths.reduce((total, width) => total + width, 0);
      let totalWidth = buttonsWidth + dividersWidth;
      let visibleItemsStartIndex = 1;
      while (totalWidth > availableWidth && visibleItemsStartIndex < items.length - lastDisplayedItemsCount) {
        if (visibleItemsStartIndex === 1) {
          totalWidth += MORE_ITEM_WIDTH + dividersWidths[visibleItemsStartIndex];
        }
        totalWidth -= itemsWidths[visibleItemsStartIndex] + dividersWidths[visibleItemsStartIndex];
        visibleItemsStartIndex++;
      }
      this.setState({
        calculated: true,
        visibleItems: allItems.slice(visibleItemsStartIndex - (1 - firstDisplayedItemsCount)),
        hiddenItems: allItems.slice(firstDisplayedItemsCount, visibleItemsStartIndex - (1 - firstDisplayedItemsCount))
      });
    }
  }
};
Breadcrumbs.defaultProps = {
  popupPlacement: DEFAULT_POPUP_PLACEMENT
};

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/Checkbox.js
var import_react102 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/ControlLabel/ControlLabel.js
var import_react99 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ControlLabel/ControlLabel.css";
var b28 = block("control-label");
var ControlLabel = import_react99.default.forwardRef(({ children: children2, className, labelClassName, title, style: style3, disabled = false, control, size: size2 = "m", qa }, ref2) => {
  const clonedControl = import_react99.default.cloneElement(control, {
    className: b28("indicator", control.props.className)
  });
  return import_react99.default.createElement(
    "label",
    { ref: ref2, title, style: style3, className: b28({ size: size2, disabled }, className), "data-qa": qa },
    clonedControl,
    children2 ? import_react99.default.createElement("span", { className: b28("text", labelClassName) }, children2) : null
  );
});
ControlLabel.displayName = "ControlLabel";

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/CheckboxDashIcon.js
var import_react100 = __toESM(require_react());
function CheckboxDashIcon(props) {
  return import_react100.default.createElement(
    "svg",
    Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 17 17", width: "16", height: "16", fill: "currentColor" }, props),
    import_react100.default.createElement("path", { d: "M4 7h9v3H4z" })
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/CheckboxTickIcon.js
var import_react101 = __toESM(require_react());
function CheckboxTickIcon(props) {
  return import_react101.default.createElement(
    "svg",
    Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 12 10", width: "16", height: "16", fill: "currentColor" }, props),
    import_react101.default.createElement("path", { d: "M.49 5.385l1.644-1.644 4.385 4.385L4.874 9.77.49 5.385zm4.384 1.096L10.356 1 12 2.644 6.519 8.126 4.874 6.48v.001z" })
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/Checkbox.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Checkbox/Checkbox.css";
var b29 = block("checkbox");
var Checkbox = import_react102.default.forwardRef(function Checkbox2(props, ref2) {
  const { size: size2 = "m", indeterminate, disabled = false, content, children: children2, title, style: style3, className, qa } = props;
  const { checked, inputProps } = useCheckbox(props);
  const text2 = content || children2;
  const control = import_react102.default.createElement(
    "span",
    { className: b29("indicator") },
    import_react102.default.createElement("span", { className: b29("icon"), "aria-hidden": true }, indeterminate ? import_react102.default.createElement(CheckboxDashIcon, { className: b29("icon-svg", { type: "dash" }) }) : import_react102.default.createElement(CheckboxTickIcon, { className: b29("icon-svg", { type: "tick" }) })),
    import_react102.default.createElement("input", Object.assign({}, inputProps, { className: b29("control") })),
    import_react102.default.createElement("span", { className: b29("outline") })
  );
  return import_react102.default.createElement(ControlLabel, { ref: ref2, title, style: style3, size: size2, disabled, className: b29({
    size: size2,
    disabled,
    indeterminate,
    checked
  }, className), qa, control }, text2);
});

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/ClipboardButton.js
var import_react105 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardIcon/ClipboardIcon.js
var import_react103 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/CopyToClipboard/types.js
var CopyToClipboardStatus;
(function(CopyToClipboardStatus2) {
  CopyToClipboardStatus2["Pending"] = "pending";
  CopyToClipboardStatus2["Success"] = "success";
  CopyToClipboardStatus2["Error"] = "error";
})(CopyToClipboardStatus || (CopyToClipboardStatus = {}));

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardIcon/ClipboardIcon.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ClipboardIcon/ClipboardIcon.css";
var b30 = block("clipboard-icon");
var renderStatusPath = (path) => import_react103.default.createElement("path", { stroke: "currentColor", fill: "transparent", className: b30("state"), strokeWidth: "1.5", d: path });
var STATUS_PATH = {
  [CopyToClipboardStatus.Success]: renderStatusPath("M9.5 13l3 3l5 -5"),
  [CopyToClipboardStatus.Error]: renderStatusPath("M9.5 10l8 8m-8 0l8 -8")
};
function ClipboardIcon({ size: size2, status, className }) {
  return import_react103.default.createElement(
    "svg",
    Object.assign({ width: size2, height: size2, viewBox: "0 0 24 24", className: b30(null, className) }, a11yHiddenSvgProps),
    import_react103.default.createElement("path", { fill: "currentColor", d: "M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" }),
    status === CopyToClipboardStatus.Pending ? null : STATUS_PATH[status]
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/CopyToClipboard/CopyToClipboard.js
var import_react104 = __toESM(require_react());
var import_react_copy_to_clipboard = __toESM(require_lib());
var CopyToClipboard = class _CopyToClipboard extends import_react104.default.Component {
  constructor() {
    super(...arguments);
    this.state = {
      status: _CopyToClipboard.INITIAL_STATUS
    };
    this.handleCopy = (text2, result) => {
      const { timeout: timeout2, onCopy } = this.props;
      this.setState({
        status: result ? CopyToClipboardStatus.Success : CopyToClipboardStatus.Error
      });
      clearTimeout(this.timerId);
      this.timerId = window.setTimeout(() => {
        this.setState({ status: _CopyToClipboard.INITIAL_STATUS });
        this.timerId = void 0;
      }, timeout2);
      onCopy === null || onCopy === void 0 ? void 0 : onCopy(text2, result);
    };
  }
  componentWillUnmount() {
    clearTimeout(this.timerId);
  }
  render() {
    const { children: children2, text: text2, options } = this.props;
    const { status } = this.state;
    const content = children2(status);
    if (!import_react104.default.isValidElement(content)) {
      throw new Error("Content must be a valid react element");
    }
    return import_react104.default.createElement(import_react_copy_to_clipboard.default, { text: String(text2), onCopy: this.handleCopy, options }, content);
  }
};
CopyToClipboard.INITIAL_STATUS = CopyToClipboardStatus.Pending;

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/i18n/en.json
var en_default3 = {
  startCopy: "Copy",
  endCopy: "Copied!"
};

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/i18n/ru.json
var ru_default3 = {
  startCopy: "Копировать",
  endCopy: "Скопировано!"
};

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/i18n/index.js
var COMPONENT2 = "ClipboardButton";
var i18n_default2 = addComponentKeysets({ en: en_default3, ru: ru_default3 }, COMPONENT2);

// node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/ClipboardButton.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/ClipboardButton/ClipboardButton.css";
var b31 = block("clipboard-button");
var DEFAULT_ICON_SIZE2 = 24;
var DEFAULT_TIMEOUT = 1e3;
var ClipboardButtonComponent = (props) => {
  const { size: size2 = DEFAULT_ICON_SIZE2, className, qa, hasTooltip = true, tooltipInitialText = i18n_default2("startCopy"), tooltipSuccessText = i18n_default2("endCopy"), status, onClick } = props;
  const buttonRef = import_react105.default.useRef(null);
  import_react105.default.useEffect(() => {
    var _a;
    (_a = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a === void 0 ? void 0 : _a.style.setProperty("--yc-button-height", `${size2}px`);
  }, [size2]);
  return import_react105.default.createElement(
    Tooltip,
    { disabled: !hasTooltip, content: status === CopyToClipboardStatus.Success ? tooltipSuccessText : tooltipInitialText },
    import_react105.default.createElement(
      Button2,
      { ref: buttonRef, view: "flat", className: b31(null, className), qa, onClick },
      import_react105.default.createElement(
        Button2.Icon,
        null,
        import_react105.default.createElement(ClipboardIcon, { status, size: size2, className: b31("icon") })
      )
    )
  );
};
function ClipboardButton(props) {
  const { text: text2, timeout: timeout2 = DEFAULT_TIMEOUT, onCopy, options } = props, buttonProps = __rest(props, ["text", "timeout", "onCopy", "options"]);
  return import_react105.default.createElement(CopyToClipboard, { text: text2, timeout: timeout2, onCopy, options }, (status) => import_react105.default.createElement(ClipboardButtonComponent, Object.assign({}, buttonProps, { status })));
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/Dialog.js
var import_react112 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Modal/Modal.js
var import_react106 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Modal/Modal.css";
var b32 = block("modal");
function Modal({ open = false, keepMounted = false, disableBodyScrollLock = false, disableEscapeKeyDown, disableOutsideClick, disableFocusTrap, disableAutoFocus, focusTrap = true, autoFocus = true, restoreFocusRef, onEscapeKeyDown, onEnterKeyDown, onOutsideClick, onClose, onTransitionEnter, onTransitionEntered, onTransitionExit, onTransitionExited, children: children2, style: style3, className, contentClassName, "aria-labelledby": ariaLabelledBy, "aria-label": ariaLabel, container, qa }) {
  const containerRef = import_react106.default.useRef(null);
  const contentRef = import_react106.default.useRef(null);
  const [inTransition, setInTransition] = import_react106.default.useState(false);
  useBodyScrollLock({ enabled: !disableBodyScrollLock && (open || inTransition) });
  const containerProps = useRestoreFocus({
    enabled: open || inTransition,
    restoreFocusRef,
    focusTrapped: true
  });
  useLayer({
    open,
    disableEscapeKeyDown,
    disableOutsideClick,
    onEscapeKeyDown,
    onEnterKeyDown,
    onOutsideClick,
    onClose,
    contentRefs: [contentRef],
    type: "modal"
  });
  return import_react106.default.createElement(
    Portal,
    { container },
    import_react106.default.createElement(
      CSSTransition_default,
      { nodeRef: containerRef, in: open, addEndListener: (done) => {
        var _a;
        return (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener("animationend", done);
      }, classNames: getCSSTransitionClassNames(b32), mountOnEnter: !keepMounted, unmountOnExit: !keepMounted, appear: true, onEnter: () => {
        setInTransition(true);
        onTransitionEnter === null || onTransitionEnter === void 0 ? void 0 : onTransitionEnter();
      }, onExit: () => {
        setInTransition(true);
        onTransitionExit === null || onTransitionExit === void 0 ? void 0 : onTransitionExit();
      }, onEntered: () => {
        setInTransition(false);
        onTransitionEntered === null || onTransitionEntered === void 0 ? void 0 : onTransitionEntered();
      }, onExited: () => {
        setInTransition(false);
        onTransitionExited === null || onTransitionExited === void 0 ? void 0 : onTransitionExited();
      } },
      import_react106.default.createElement(
        "div",
        { ref: containerRef, style: style3, className: b32({ open }, className), "data-qa": qa },
        import_react106.default.createElement(
          "div",
          { className: b32("table") },
          import_react106.default.createElement(
            "div",
            { className: b32("cell") },
            import_react106.default.createElement(
              FocusTrap,
              { enabled: !disableFocusTrap && focusTrap && open && !inTransition, autoFocus: !disableAutoFocus && autoFocus },
              import_react106.default.createElement("div", Object.assign({ ref: contentRef, tabIndex: -1, role: "dialog", "aria-modal": open, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, className: b32("content", contentClassName) }, containerProps), children2)
            )
          )
        )
      )
    )
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/ButtonClose/ButtonClose.js
var import_react107 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/i18n/en.json
var en_default4 = {
  close: "Close dialog"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/i18n/ru.json
var ru_default4 = {
  close: "Закрыть диалоговое окно"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/i18n/index.js
var COMPONENT3 = "Dialog";
var i18n_default3 = addComponentKeysets({ en: en_default4, ru: ru_default4 }, COMPONENT3);

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/ButtonClose/ButtonClose.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/ButtonClose/ButtonClose.css";
var b33 = block("dialog-btn-close");
function ButtonClose({ onClose }) {
  return import_react107.default.createElement(
    "div",
    { className: b33() },
    import_react107.default.createElement(
      Button2,
      { view: "flat", size: "l", className: b33("btn"), onClick: (event) => onClose(event, { isOutsideClick: false }), extraProps: {
        "aria-label": i18n_default3("close")
      } },
      import_react107.default.createElement(Icon, { data: Xmark_default, size: 20 })
    )
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogBody/DialogBody.js
var import_react108 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogBody/DialogBody.css";
var b34 = block("dialog-body");
function DialogBody(props) {
  const { className } = props;
  return import_react108.default.createElement("div", { className: b34(null, className) }, props.children);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogDivider/DialogDivider.js
var import_react109 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogDivider/DialogDivider.css";
var b35 = block("dialog-divider");
function DialogDivider({ className }) {
  return import_react109.default.createElement("div", { className: b35(null, className) });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogFooter/DialogFooter.js
var import_react110 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogFooter/DialogFooter.css";
var b36 = block("dialog-footer");
function getButtonView(preset2) {
  switch (preset2) {
    case "default":
      return "action";
    case "success":
      return "action";
    case "danger":
      return "action";
    default:
      return "action";
  }
}
var DialogFooter = class extends import_react110.default.Component {
  constructor() {
    super(...arguments);
    this.errorTooltipRef = import_react110.default.createRef();
    this.handleKeyDown = (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        if (this.props.onClickButtonApply) {
          this.props.onClickButtonApply(event);
        }
      }
    };
  }
  componentDidMount() {
    if (this.props.listenKeyEnter) {
      this.attachKeyDownListeners();
    }
  }
  componentDidUpdate(prevProps) {
    if (!this.props.listenKeyEnter && prevProps.listenKeyEnter) {
      this.detachKeyDownListeners();
    }
    if (this.props.listenKeyEnter && !prevProps.listenKeyEnter) {
      this.attachKeyDownListeners();
    }
  }
  componentWillUnmount() {
    this.detachKeyDownListeners();
  }
  render() {
    const { onClickButtonCancel, onClickButtonApply, loading, textButtonCancel, textButtonApply, propsButtonCancel, propsButtonApply, preset: preset2, children: children2, errorText, showError, renderButtons } = this.props;
    const buttonCancel = import_react110.default.createElement(
      "div",
      { className: b36("button", { action: "cancel" }) },
      import_react110.default.createElement(Button2, Object.assign({ view: textButtonApply ? "flat" : "normal", size: "l", width: "max", onClick: onClickButtonCancel, disabled: loading }, propsButtonCancel), textButtonCancel)
    );
    const buttonApply = import_react110.default.createElement(
      "div",
      { className: b36("button", { action: "apply" }) },
      import_react110.default.createElement(Button2, Object.assign({ ref: this.errorTooltipRef, type: "submit", view: getButtonView(preset2), size: "l", width: "max", onClick: onClickButtonApply, loading, className: b36("button-apply", { preset: preset2 }) }, propsButtonApply), textButtonApply),
      errorText && import_react110.default.createElement(
        Popup,
        { open: showError, anchorRef: this.errorTooltipRef, placement: ["bottom", "top"], disableLayer: true, hasArrow: true },
        import_react110.default.createElement("div", { className: b36("error") }, errorText)
      )
    );
    return import_react110.default.createElement(
      "div",
      { className: b36() },
      import_react110.default.createElement("div", { className: b36("children") }, children2),
      import_react110.default.createElement("div", { className: b36("bts-wrapper") }, renderButtons ? renderButtons(buttonApply, buttonCancel) : import_react110.default.createElement(
        import_react110.default.Fragment,
        null,
        textButtonCancel && buttonCancel,
        textButtonApply && buttonApply
      ))
    );
  }
  attachKeyDownListeners() {
    setTimeout(() => {
      window.addEventListener("keydown", this.handleKeyDown);
    }, 0);
  }
  detachKeyDownListeners() {
    window.removeEventListener("keydown", this.handleKeyDown);
  }
};
DialogFooter.defaultProps = {
  preset: "default",
  showError: false,
  listenKeyEnter: false
};

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogHeader/DialogHeader.js
var import_react111 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/DialogHeader/DialogHeader.css";
var b37 = block("dialog-header");
function DialogHeader(props) {
  const { caption = "", insertBefore, insertAfter, className, id } = props;
  return import_react111.default.createElement(
    "div",
    { className: b37(null, className) },
    insertBefore,
    import_react111.default.createElement("div", { className: b37("caption"), id }, caption),
    insertAfter
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Dialog/Dialog.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Dialog/Dialog.css";
var b38 = block("dialog");
var Dialog = class extends import_react112.default.Component {
  constructor() {
    super(...arguments);
    this.handleCloseButtonClick = (event) => {
      const { onClose } = this.props;
      onClose(event.nativeEvent, "closeButtonClick");
    };
  }
  render() {
    const { container, children: children2, open, disableBodyScrollLock, disableEscapeKeyDown, disableOutsideClick, disableFocusTrap, disableAutoFocus, restoreFocusRef, keepMounted, size: size2, className, modalClassName, hasCloseButton, onEscapeKeyDown, onEnterKeyDown, onOutsideClick, onClose, onTransitionEnter, onTransitionEntered, onTransitionExit, onTransitionExited, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, qa } = this.props;
    return import_react112.default.createElement(
      Modal,
      { open, disableBodyScrollLock, disableEscapeKeyDown, disableOutsideClick, disableFocusTrap, disableAutoFocus, restoreFocusRef, keepMounted, onEscapeKeyDown, onEnterKeyDown, onOutsideClick, onClose, onTransitionEnter, onTransitionEntered, onTransitionExit, onTransitionExited, className: b38("modal", modalClassName), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, container, qa },
      import_react112.default.createElement(
        "div",
        { className: b38({ size: size2, "has-close": hasCloseButton }, className) },
        children2,
        hasCloseButton && import_react112.default.createElement(ButtonClose, { onClose: this.handleCloseButtonClick })
      )
    );
  }
};
Dialog.defaultProps = {
  disableBodyScrollLock: false,
  disableEscapeKeyDown: false,
  disableOutsideClick: false,
  keepMounted: false,
  hasCloseButton: true
};
Dialog.Footer = DialogFooter;
Dialog.Header = DialogHeader;
Dialog.Body = DialogBody;
Dialog.Divider = DialogDivider;

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/Disclosure.js
var import_react116 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureContext.js
var import_react113 = __toESM(require_react());
var DisclosureAttributesContext = import_react113.default.createContext(void 0);
var DisclosureToggleContext = import_react113.default.createContext(void 0);
function DisclosureProvider(props) {
  const { size: size2, disabled, defaultExpanded, arrowPosition, summary, keepMounted, onUpdate, expanded: controlledExpanded } = props;
  const [expanded, setExpanded] = import_react113.default.useState(() => Boolean(defaultExpanded));
  const controlledMode = controlledExpanded !== void 0;
  const handleToggle = () => {
    setExpanded((prev) => !prev);
    const newValue = controlledMode ? !controlledExpanded : !expanded;
    onUpdate(newValue);
  };
  const ariaControls = useUniqId();
  const ariaLabelledby = `disclosure${ariaControls}`;
  return import_react113.default.createElement(
    DisclosureAttributesContext.Provider,
    { value: {
      size: size2,
      disabled,
      summary,
      arrowPosition,
      keepMounted,
      expanded: controlledMode ? controlledExpanded : expanded,
      ariaControls,
      ariaLabelledby
    } },
    import_react113.default.createElement(DisclosureToggleContext.Provider, { value: handleToggle }, props.children)
  );
}
function useDisclosureAttributes() {
  const state = import_react113.default.useContext(DisclosureAttributesContext);
  if (state === void 0) {
    throw new Error("useDisclosureAttributes must be used within DisclosureProvider");
  }
  return state;
}
function useToggleDisclosure() {
  const state = import_react113.default.useContext(DisclosureToggleContext);
  if (state === void 0) {
    throw new Error("useToggleDisclosure must be used within DisclosureProvider");
  }
  return state;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureDetails/DisclosureDetails.js
var import_react114 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/constants.js
var b39 = blockNew("disclosure");
var DisclosureQa = {
  SUMMARY: "disclosure-summary",
  DETAILS: "disclosure-details"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureDetails/DisclosureDetails.js
function DisclosureDetails({ children: children2 }) {
  const containerRef = import_react114.default.useRef(null);
  const { ariaControls, ariaLabelledby, keepMounted, expanded } = useDisclosureAttributes();
  return import_react114.default.createElement(
    CSSTransition_default,
    { nodeRef: containerRef, in: expanded, addEndListener: (done) => {
      var _a;
      return (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener("animationend", done);
    }, classNames: getCSSTransitionClassNames(b39), mountOnEnter: !keepMounted, unmountOnExit: !keepMounted, appear: true },
    import_react114.default.createElement("div", { ref: containerRef, id: ariaControls, role: "region", "aria-labelledby": ariaLabelledby, className: b39("content", { visible: expanded }), "data-qa": DisclosureQa.DETAILS }, children2)
  );
}
DisclosureDetails.displayName = "DisclosureDetails";

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/DisclosureSummary/DisclosureSummary.js
var import_react115 = __toESM(require_react());
var ComponentSizeToIconSizeMap = {
  m: 14,
  l: 16,
  xl: 20
};
function DisclosureSummary({ children: renderFunction }) {
  const handleToggle = useToggleDisclosure();
  const { ariaControls, ariaLabelledby: id, expanded, disabled } = useDisclosureAttributes();
  return renderFunction({ onClick: handleToggle, ariaControls, id, expanded, disabled });
}
function DefaultDisclosureSummary({ onClick, ariaControls, id, expanded, disabled }) {
  const { size: size2, summary, arrowPosition } = useDisclosureAttributes();
  return import_react115.default.createElement(
    "button",
    { type: "button", "aria-expanded": expanded, className: b39("trigger", { disabled, "arrow-right": arrowPosition === "right" }), "aria-controls": ariaControls, id, onClick, disabled, "data-qa": DisclosureQa.SUMMARY },
    import_react115.default.createElement(ArrowToggle, { size: ComponentSizeToIconSizeMap[size2], direction: expanded ? "top" : "bottom" }),
    summary
  );
}
DisclosureSummary.displayName = "DisclosureSummary";

// node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/Disclosure.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Disclosure/Disclosure.css";
var isDisclosureSummaryComponent = isOfType(DisclosureSummary);
var Disclosure = import_react116.default.forwardRef(function Disclosure2(props, ref2) {
  const { size: size2 = "m", disabled = false, defaultExpanded = false, arrowPosition = "left", summary = "", className, keepMounted = true, children: children2, onUpdate = () => {
  }, expanded, qa } = props;
  const [summaryContent, detailsContent] = prepareChildren2(children2);
  return import_react116.default.createElement(
    DisclosureProvider,
    { disabled, defaultExpanded, expanded, keepMounted, size: size2, summary, arrowPosition, onUpdate },
    import_react116.default.createElement(
      "section",
      { ref: ref2, className: b39({ size: size2 }, className), "data-qa": qa },
      summaryContent,
      detailsContent
    )
  );
});
function prepareChildren2(children2) {
  const items = import_react116.default.Children.toArray(children2);
  let summary, details;
  const content = [];
  for (const item of items) {
    const isDisclosureSummary = isDisclosureSummaryComponent(item);
    if (isDisclosureSummary) {
      if (summary) {
        throw new Error("Only one <Disclosure.Summary> component is allowed");
      }
      summary = item;
      continue;
    }
    content.push(item);
  }
  if (content.length > 0) {
    details = import_react116.default.createElement(DisclosureDetails, null, content);
  }
  if (!summary) {
    summary = import_react116.default.createElement(DisclosureSummary, null, (props) => import_react116.default.createElement(DefaultDisclosureSummary, Object.assign({}, props)));
  }
  return [summary, details];
}
Disclosure.Summary = DisclosureSummary;
Disclosure.displayName = "Disclosure";

// node_modules/@gravity-ui/uikit/build/esm/components/Label/Label.js
var import_react117 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Label/Label.css";
var b40 = block("label");
var sizeMap = {
  xs: { copyIconSize: 12, closeIconSize: 12, buttonSize: "xs" },
  s: { copyIconSize: 14, closeIconSize: 14, buttonSize: "s" },
  m: { copyIconSize: 16, closeIconSize: 16, buttonSize: "m" }
};
var commonActionButtonProps = {
  pin: "brick-round",
  className: b40("addon", {
    side: "right",
    interactive: true
  })
};
var Label = import_react117.default.forwardRef(function Label2(props, ref2) {
  const { type = "default", theme = "normal", size: size2 = "xs", icon, children: children2, onClose, className, disabled, copyText, closeButtonLabel, copyButtonLabel, interactive = false, value, onCopy, onClick, qa } = props;
  const actionButtonRef = import_react117.default.useRef(null);
  const hasContent = Boolean(children2 !== "" && import_react117.default.Children.count(children2) > 0);
  const typeClose = type === "close" && hasContent;
  const typeCopy = type === "copy" && hasContent;
  const hasOnClick = Boolean(onClick);
  const hasCopy = Boolean(typeCopy && copyText);
  const isInteractive = (hasOnClick || hasCopy || interactive) && !disabled;
  const { copyIconSize, closeIconSize, buttonSize } = sizeMap[size2];
  const leftIcon = icon && import_react117.default.createElement("div", { className: b40("addon", { side: hasContent ? "left" : void 0 }) }, icon);
  const content = hasContent && import_react117.default.createElement(
    "div",
    { className: b40("text") },
    import_react117.default.createElement("div", { className: b40("content") }, children2),
    Boolean(value) && import_react117.default.createElement(
      "div",
      { className: b40("value") },
      import_react117.default.createElement("div", { className: b40("separator") }, ":"),
      import_react117.default.createElement("div", { className: b40("key") }, value)
    )
  );
  const handleCloseClick = (event) => {
    if (hasOnClick) {
      event.stopPropagation();
    }
    if (onClose) {
      onClose(event);
    }
  };
  const handleClick = (event) => {
    var _a;
    if (!((_a = actionButtonRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
      onClick === null || onClick === void 0 ? void 0 : onClick(event);
    }
  };
  const { onKeyDown } = useActionHandlers(handleClick);
  const renderLabel = (status) => {
    let actionButton;
    if (typeCopy) {
      actionButton = import_react117.default.createElement(
        Button2,
        Object.assign({ ref: actionButtonRef, size: buttonSize, extraProps: { "aria-label": copyButtonLabel || void 0 } }, commonActionButtonProps),
        import_react117.default.createElement(
          Button2.Icon,
          null,
          import_react117.default.createElement(ClipboardIcon, { status: status || CopyToClipboardStatus.Pending, size: copyIconSize })
        )
      );
    } else if (typeClose) {
      actionButton = import_react117.default.createElement(
        Button2,
        Object.assign({ ref: actionButtonRef, onClick: onClose ? handleCloseClick : void 0, size: buttonSize, extraProps: { "aria-label": closeButtonLabel || void 0 } }, commonActionButtonProps),
        import_react117.default.createElement(Icon, { size: closeIconSize, data: Xmark_default })
      );
    }
    return import_react117.default.createElement(
      "div",
      { ref: ref2, role: hasOnClick ? "button" : void 0, tabIndex: hasOnClick ? 0 : void 0, onClick: hasOnClick ? handleClick : void 0, onKeyDown: hasOnClick ? onKeyDown : void 0, className: b40({
        theme,
        size: size2,
        type,
        "is-interactive": isInteractive,
        "has-right-addon": Boolean(actionButton),
        "has-left-addon": Boolean(leftIcon),
        disabled
      }, className), "data-qa": qa },
      leftIcon,
      content,
      actionButton
    );
  };
  if (hasCopy && copyText && !hasOnClick) {
    return import_react117.default.createElement(CopyToClipboard, { text: copyText, onCopy, timeout: 1e3 }, (status) => renderLabel(status));
  }
  return renderLabel();
});

// node_modules/@gravity-ui/uikit/build/esm/components/List/index.js
var import_react147 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/List/List.js
var import_react146 = __toESM(require_react());
var import_isEqual = __toESM(require_isEqual());
var import_isObject = __toESM(require_isObject());

// node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
var import_react126 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty2(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread22(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty2(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}

// node_modules/redux/es/redux.js
var $$observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var randomString = function randomString2() {
  return Math.random().toString(36).substring(7).split("").join(".");
};
var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
function isPlainObject(obj) {
  if (typeof obj !== "object" || obj === null) return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
function miniKindOf(val) {
  if (val === void 0) return "undefined";
  if (val === null) return "null";
  var type = typeof val;
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function": {
      return type;
    }
  }
  if (Array.isArray(val)) return "array";
  if (isDate(val)) return "date";
  if (isError(val)) return "error";
  var constructorName = ctorName(val);
  switch (constructorName) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return constructorName;
  }
  return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
  return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
  return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
  var typeOfVal = typeof val;
  if (true) {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore(reducer3, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
    }
    return enhancer(createStore)(reducer3, preloadedState);
  }
  if (typeof reducer3 !== "function") {
    throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer3) + "'");
  }
  var currentReducer = reducer3;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
    }
    if (typeof action.type === "undefined") {
      throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }
    }, _ref[$$observable] = function() {
      return this;
    }, _ref;
  }
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
function bindActionCreator(actionCreator, dispatch) {
  return function() {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === "function") {
    return bindActionCreator(actionCreators, dispatch);
  }
  if (typeof actionCreators !== "object" || actionCreators === null) {
    throw new Error(false ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + `'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
  }
  var boundActionCreators = {};
  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === "function") {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  if (funcs.length === 0) {
    return function(arg) {
      return arg;
    };
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(function(a, b84) {
    return function() {
      return a(b84.apply(void 0, arguments));
    };
  });
}
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }
  return function(createStore3) {
    return function() {
      var store = createStore3.apply(void 0, arguments);
      var _dispatch = function dispatch() {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function(middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread22(_objectSpread22({}, store), {}, {
        dispatch: _dispatch
      });
    };
  };
}

// node_modules/react-redux/es/components/Provider.js
var import_react120 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());

// node_modules/react-redux/es/components/Context.js
var import_react118 = __toESM(require_react());
var ReactReduxContext = import_react118.default.createContext(null);
if (true) {
  ReactReduxContext.displayName = "ReactRedux";
}

// node_modules/react-redux/es/utils/batch.js
function defaultNoopBatch(callback) {
  callback();
}
var batch = defaultNoopBatch;
var setBatch = function setBatch2(newBatch) {
  return batch = newBatch;
};
var getBatch = function getBatch2() {
  return batch;
};

// node_modules/react-redux/es/utils/Subscription.js
function createListenerCollection() {
  var batch2 = getBatch();
  var first = null;
  var last = null;
  return {
    clear: function clear() {
      first = null;
      last = null;
    },
    notify: function notify2() {
      batch2(function() {
        var listener = first;
        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get: function get4() {
      var listeners = [];
      var listener = first;
      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }
      return listeners;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener = last = {
        callback,
        next: null,
        prev: last
      };
      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null) return;
        isSubscribed = false;
        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }
        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}
var nullListeners = {
  notify: function notify() {
  },
  get: function get() {
    return [];
  }
};
function createSubscription(store, parentSub) {
  var unsubscribe;
  var listeners = nullListeners;
  function addNestedSub(listener) {
    trySubscribe();
    return listeners.subscribe(listener);
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return Boolean(unsubscribe);
  }
  function trySubscribe() {
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    if (unsubscribe) {
      unsubscribe();
      unsubscribe = void 0;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  var subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe,
    tryUnsubscribe,
    getListeners: function getListeners() {
      return listeners;
    }
  };
  return subscription;
}

// node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
var import_react119 = __toESM(require_react());
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react119.useLayoutEffect : import_react119.useEffect;

// node_modules/react-redux/es/components/Provider.js
function Provider(_ref) {
  var store = _ref.store, context = _ref.context, children2 = _ref.children;
  var contextValue = (0, import_react120.useMemo)(function() {
    var subscription = createSubscription(store);
    return {
      store,
      subscription
    };
  }, [store]);
  var previousState = (0, import_react120.useMemo)(function() {
    return store.getState();
  }, [store]);
  useIsomorphicLayoutEffect2(function() {
    var subscription = contextValue.subscription;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return function() {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || ReactReduxContext;
  return import_react120.default.createElement(Context.Provider, {
    value: contextValue
  }, children2);
}
if (true) {
  Provider.propTypes = {
    store: import_prop_types7.default.shape({
      subscribe: import_prop_types7.default.func.isRequired,
      dispatch: import_prop_types7.default.func.isRequired,
      getState: import_prop_types7.default.func.isRequired
    }),
    context: import_prop_types7.default.object,
    children: import_prop_types7.default.any
  };
}
var Provider_default = Provider;

// node_modules/react-redux/es/components/connectAdvanced.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
var import_react121 = __toESM(require_react());
var import_react_is = __toESM(require_react_is2());
var _excluded = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"];
var _excluded2 = ["reactReduxForwardedRef"];
var EMPTY_ARRAY = [];
var NO_SUBSCRIPTION_ARRAY = [null, null];
var stringifyComponent = function stringifyComponent2(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};
function storeStateUpdatesReducer(state, action) {
  var updateCount = state[1];
  return [action.payload, updateCount + 1];
}
function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  useIsomorphicLayoutEffect2(function() {
    return effectFunc.apply(void 0, effectArgs);
  }, dependencies);
}
function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  lastWrapperProps.current = wrapperProps;
  lastChildProps.current = actualChildProps;
  renderIsScheduled.current = false;
  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}
function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
  if (!shouldHandleStateChanges) return;
  var didUnsubscribe = false;
  var lastThrownError = null;
  var checkForUpdates = function checkForUpdates2() {
    if (didUnsubscribe) {
      return;
    }
    var latestStoreState = store.getState();
    var newChildProps, error2;
    try {
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e) {
      error2 = e;
      lastThrownError = e;
    }
    if (!error2) {
      lastThrownError = null;
    }
    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true;
      forceComponentUpdateDispatch({
        type: "STORE_UPDATED",
        payload: {
          error: error2
        }
      });
    }
  };
  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe();
  checkForUpdates();
  var unsubscribeWrapper = function unsubscribeWrapper2() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;
    if (lastThrownError) {
      throw lastThrownError;
    }
  };
  return unsubscribeWrapper;
}
var initStateUpdates = function initStateUpdates2() {
  return [null, 0];
};
function connectAdvanced(selectorFactory, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }
  var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded);
  if (true) {
    if (renderCountProp !== void 0) {
      throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
    }
    if (withRef) {
      throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
    }
    var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
    if (storeKey !== "store") {
      throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
    }
  }
  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    if (!(0, import_react_is.isValidElementType)(WrappedComponent)) {
      throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
    }
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    var displayName = getDisplayName(wrappedComponentName);
    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName,
      methodName,
      renderCountProp,
      shouldHandleStateChanges,
      storeKey,
      displayName,
      wrappedComponentName,
      WrappedComponent
    });
    var pure = connectOptions.pure;
    function createChildSelector(store) {
      return selectorFactory(store.dispatch, selectorFactoryOptions);
    }
    var usePureOnlyMemo = pure ? import_react121.useMemo : function(callback) {
      return callback();
    };
    function ConnectFunction(props) {
      var _useMemo = (0, import_react121.useMemo)(function() {
        var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded2);
        return [props.context, reactReduxForwardedRef2, wrapperProps2];
      }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
      var ContextToUse = (0, import_react121.useMemo)(function() {
        return propsContext && propsContext.Consumer && (0, import_react_is.isContextConsumer)(import_react121.default.createElement(propsContext.Consumer, null)) ? propsContext : Context;
      }, [propsContext, Context]);
      var contextValue = (0, import_react121.useContext)(ContextToUse);
      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
      if (!didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
      }
      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var childPropsSelector = (0, import_react121.useMemo)(function() {
        return createChildSelector(store);
      }, [store]);
      var _useMemo2 = (0, import_react121.useMemo)(function() {
        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;
        var subscription2 = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription);
        var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
        return [subscription2, notifyNestedSubs2];
      }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
      var overriddenContextValue = (0, import_react121.useMemo)(function() {
        if (didStoreComeFromProps) {
          return contextValue;
        }
        return _extends({}, contextValue, {
          subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]);
      var _useReducer = (0, import_react121.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
      if (previousStateUpdateResult && previousStateUpdateResult.error) {
        throw previousStateUpdateResult.error;
      }
      var lastChildProps = (0, import_react121.useRef)();
      var lastWrapperProps = (0, import_react121.useRef)(wrapperProps);
      var childPropsFromStoreUpdate = (0, import_react121.useRef)();
      var renderIsScheduled = (0, import_react121.useRef)(false);
      var actualChildProps = usePureOnlyMemo(function() {
        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
          return childPropsFromStoreUpdate.current;
        }
        return childPropsSelector(store.getState(), wrapperProps);
      }, [store, previousStateUpdateResult, wrapperProps]);
      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
      var renderedWrappedComponent = (0, import_react121.useMemo)(function() {
        return import_react121.default.createElement(WrappedComponent, _extends({}, actualChildProps, {
          ref: reactReduxForwardedRef
        }));
      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
      var renderedChild = (0, import_react121.useMemo)(function() {
        if (shouldHandleStateChanges) {
          return import_react121.default.createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }
        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    }
    var Connect = pure ? import_react121.default.memo(ConnectFunction) : ConnectFunction;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = ConnectFunction.displayName = displayName;
    if (forwardRef) {
      var forwarded = import_react121.default.forwardRef(function forwardConnectRef(props, ref2) {
        return import_react121.default.createElement(Connect, _extends({}, props, {
          reactReduxForwardedRef: ref2
        }));
      });
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return (0, import_hoist_non_react_statics.default)(forwarded, WrappedComponent);
    }
    return (0, import_hoist_non_react_statics.default)(Connect, WrappedComponent);
  };
}

// node_modules/react-redux/es/utils/shallowEqual.js
function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;
  for (var i = 0; i < keysA.length; i++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }
  return true;
}

// node_modules/react-redux/es/utils/bindActionCreators.js
function bindActionCreators2(actionCreators, dispatch) {
  var boundActionCreators = {};
  var _loop = function _loop2(key2) {
    var actionCreator = actionCreators[key2];
    if (typeof actionCreator === "function") {
      boundActionCreators[key2] = function() {
        return dispatch(actionCreator.apply(void 0, arguments));
      };
    }
  };
  for (var key in actionCreators) {
    _loop(key);
  }
  return boundActionCreators;
}

// node_modules/react-redux/es/utils/isPlainObject.js
function isPlainObject2(obj) {
  if (typeof obj !== "object" || obj === null) return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null) return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}

// node_modules/react-redux/es/utils/warning.js
function warning2(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e) {
  }
}

// node_modules/react-redux/es/utils/verifyPlainObject.js
function verifyPlainObject(value, displayName, methodName) {
  if (!isPlainObject2(value)) {
    warning2(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}

// node_modules/react-redux/es/connect/wrapMapToProps.js
function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);
    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;
    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };
    proxy.dependsOnOwnProps = true;
    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);
      if (typeof props === "function") {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }
      if (true) verifyPlainObject(props, displayName, methodName);
      return props;
    };
    return proxy;
  };
}

// node_modules/react-redux/es/connect/mapDispatchToProps.js
function whenMapDispatchToPropsIsFunction(mapDispatchToProps2) {
  return typeof mapDispatchToProps2 === "function" ? wrapMapToPropsFunc(mapDispatchToProps2, "mapDispatchToProps") : void 0;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps2) {
  return !mapDispatchToProps2 ? wrapMapToPropsConstant(function(dispatch) {
    return {
      dispatch
    };
  }) : void 0;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps2) {
  return mapDispatchToProps2 && typeof mapDispatchToProps2 === "object" ? wrapMapToPropsConstant(function(dispatch) {
    return bindActionCreators2(mapDispatchToProps2, dispatch);
  }) : void 0;
}
var mapDispatchToProps_default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

// node_modules/react-redux/es/connect/mapStateToProps.js
function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function() {
    return {};
  }) : void 0;
}
var mapStateToProps_default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

// node_modules/react-redux/es/connect/mergeProps.js
function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (true) verifyPlainObject(mergedProps, displayName, "mergeProps");
      }
      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function() {
    return defaultMergeProps;
  } : void 0;
}
var mergeProps_default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

// node_modules/react-redux/es/connect/verifySubselectors.js
function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
    if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
      warning2("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}
function verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps, displayName) {
  verify(mapStateToProps, "mapStateToProps", displayName);
  verify(mapDispatchToProps2, "mapDispatchToProps", displayName);
  verify(mergeProps, "mergeProps", displayName);
}

// node_modules/react-redux/es/connect/selectorFactory.js
var _excluded3 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps2(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;
  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }
  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps2.dependsOnOwnProps) dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps2.dependsOnOwnProps) dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }
  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}
function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose(_ref2, _excluded3);
  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps2 = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);
  if (true) {
    verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps, options.displayName);
  }
  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch, options);
}

// node_modules/react-redux/es/connect/connect.js
var _excluded4 = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }
  return function(dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}
function strictEqual(a, b84) {
  return a === b84;
}
function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? mapStateToProps_default : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? mapDispatchToProps_default : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? mergeProps_default : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
  return function connect(mapStateToProps, mapDispatchToProps2, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }
    var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded4);
    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
    var initMapDispatchToProps = match(mapDispatchToProps2, mapDispatchToPropsFactories, "mapDispatchToProps");
    var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
    return connectHOC(selectorFactory, _extends({
      // used in error messages
      methodName: "connect",
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps,
      initMapDispatchToProps,
      initMergeProps,
      pure,
      areStatesEqual,
      areOwnPropsEqual,
      areStatePropsEqual,
      areMergedPropsEqual
    }, extraOptions));
  };
}
var connect_default = createConnect();

// node_modules/react-redux/es/hooks/useStore.js
var import_react123 = __toESM(require_react());

// node_modules/react-redux/es/hooks/useReduxContext.js
var import_react122 = __toESM(require_react());
function useReduxContext() {
  var contextValue = (0, import_react122.useContext)(ReactReduxContext);
  if (!contextValue) {
    throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
  }
  return contextValue;
}

// node_modules/react-redux/es/hooks/useStore.js
function createStoreHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react123.useContext)(context);
  };
  return function useStore2() {
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store;
    return store;
  };
}
var useStore = createStoreHook();

// node_modules/react-redux/es/hooks/useDispatch.js
function createDispatchHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);
  return function useDispatch2() {
    var store = useStore2();
    return store.dispatch;
  };
}
var useDispatch = createDispatchHook();

// node_modules/react-redux/es/hooks/useSelector.js
var import_react124 = __toESM(require_react());
var refEquality = function refEquality2(a, b84) {
  return a === b84;
};
function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = (0, import_react124.useReducer)(function(s) {
    return s + 1;
  }, 0), forceRender = _useReducer[1];
  var subscription = (0, import_react124.useMemo)(function() {
    return createSubscription(store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = (0, import_react124.useRef)();
  var latestSelector = (0, import_react124.useRef)();
  var latestStoreState = (0, import_react124.useRef)();
  var latestSelectedState = (0, import_react124.useRef)();
  var storeState = store.getState();
  var selectedState;
  try {
    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
      var newSelectedState = selector(storeState);
      if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
        selectedState = newSelectedState;
      } else {
        selectedState = latestSelectedState.current;
      }
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }
    throw err;
  }
  useIsomorphicLayoutEffect2(function() {
    latestSelector.current = selector;
    latestStoreState.current = storeState;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = void 0;
  });
  useIsomorphicLayoutEffect2(function() {
    function checkForUpdates() {
      try {
        var newStoreState = store.getState();
        if (newStoreState === latestStoreState.current) {
          return;
        }
        var _newSelectedState = latestSelector.current(newStoreState);
        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
          return;
        }
        latestSelectedState.current = _newSelectedState;
        latestStoreState.current = newStoreState;
      } catch (err) {
        latestSubscriptionCallbackError.current = err;
      }
      forceRender();
    }
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function() {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}
function createSelectorHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react124.useContext)(context);
  };
  return function useSelector2(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }
    if (true) {
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }
      if (typeof selector !== "function") {
        throw new Error("You must pass a function as a selector to useSelector");
      }
      if (typeof equalityFn !== "function") {
        throw new Error("You must pass a function as an equality function to useSelector");
      }
    }
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;
    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
    (0, import_react124.useDebugValue)(selectedState);
    return selectedState;
  };
}
var useSelector = createSelectorHook();

// node_modules/react-redux/es/utils/reactBatchedUpdates.js
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/react-redux/es/index.js
setBatch(import_react_dom4.unstable_batchedUpdates);

// node_modules/use-memo-one/dist/use-memo-one.esm.js
var import_react125 = __toESM(require_react());
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (newInputs[i] !== lastInputs[i]) {
      return false;
    }
  }
  return true;
}
function useMemoOne(getResult, inputs) {
  var initial = (0, import_react125.useState)(function() {
    return {
      inputs,
      result: getResult()
    };
  })[0];
  var isFirstRun = (0, import_react125.useRef)(true);
  var committed = (0, import_react125.useRef)(initial);
  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
  var cache = useCache ? committed.current : {
    inputs,
    result: getResult()
  };
  (0, import_react125.useEffect)(function() {
    isFirstRun.current = false;
    committed.current = cache;
  }, [cache]);
  return cache.result;
}
function useCallbackOne(callback, inputs) {
  return useMemoOne(function() {
    return callback;
  }, inputs);
}
var useMemo6 = useMemoOne;
var useCallback3 = useCallbackOne;

// node_modules/css-box-model/dist/css-box-model.esm.js
var getRect = function getRect2(_ref) {
  var top2 = _ref.top, right2 = _ref.right, bottom2 = _ref.bottom, left2 = _ref.left;
  var width = right2 - left2;
  var height = bottom2 - top2;
  var rect = {
    top: top2,
    right: right2,
    bottom: bottom2,
    left: left2,
    width,
    height,
    x: left2,
    y: top2,
    center: {
      x: (right2 + left2) / 2,
      y: (bottom2 + top2) / 2
    }
  };
  return rect;
};
var expand = function expand2(target, expandBy) {
  return {
    top: target.top - expandBy.top,
    left: target.left - expandBy.left,
    bottom: target.bottom + expandBy.bottom,
    right: target.right + expandBy.right
  };
};
var shrink = function shrink2(target, shrinkBy) {
  return {
    top: target.top + shrinkBy.top,
    left: target.left + shrinkBy.left,
    bottom: target.bottom - shrinkBy.bottom,
    right: target.right - shrinkBy.right
  };
};
var shift = function shift2(target, shiftBy) {
  return {
    top: target.top + shiftBy.y,
    left: target.left + shiftBy.x,
    bottom: target.bottom + shiftBy.y,
    right: target.right + shiftBy.x
  };
};
var noSpacing = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var createBox = function createBox2(_ref2) {
  var borderBox = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
  var marginBox = getRect(expand(borderBox, margin));
  var paddingBox = getRect(shrink(borderBox, border));
  var contentBox = getRect(shrink(paddingBox, padding));
  return {
    marginBox,
    borderBox: getRect(borderBox),
    paddingBox,
    contentBox,
    margin,
    border,
    padding
  };
};
var parse = function parse2(raw) {
  var value = raw.slice(0, -2);
  var suffix2 = raw.slice(-2);
  if (suffix2 !== "px") {
    return 0;
  }
  var result = Number(value);
  !!isNaN(result) ? true ? invariant(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]") : invariant(false) : void 0;
  return result;
};
var getWindowScroll2 = function getWindowScroll3() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};
var offset2 = function offset3(original, change) {
  var borderBox = original.borderBox, border = original.border, margin = original.margin, padding = original.padding;
  var shifted = shift(borderBox, change);
  return createBox({
    borderBox: shifted,
    border,
    margin,
    padding
  });
};
var withScroll = function withScroll2(original, scroll3) {
  if (scroll3 === void 0) {
    scroll3 = getWindowScroll2();
  }
  return offset2(original, scroll3);
};
var calculateBox = function calculateBox2(borderBox, styles) {
  var margin = {
    top: parse(styles.marginTop),
    right: parse(styles.marginRight),
    bottom: parse(styles.marginBottom),
    left: parse(styles.marginLeft)
  };
  var padding = {
    top: parse(styles.paddingTop),
    right: parse(styles.paddingRight),
    bottom: parse(styles.paddingBottom),
    left: parse(styles.paddingLeft)
  };
  var border = {
    top: parse(styles.borderTopWidth),
    right: parse(styles.borderRightWidth),
    bottom: parse(styles.borderBottomWidth),
    left: parse(styles.borderLeftWidth)
  };
  return createBox({
    borderBox,
    margin,
    padding,
    border
  });
};
var getBox = function getBox2(el) {
  var borderBox = el.getBoundingClientRect();
  var styles = window.getComputedStyle(el);
  return calculateBox(borderBox, styles);
};

// node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual2(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual2(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual2(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual7) {
  if (isEqual7 === void 0) {
    isEqual7 = areInputsEqual2;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual7(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var memoize_one_esm_default = memoizeOne;

// node_modules/raf-schd/dist/raf-schd.esm.js
var rafSchd = function rafSchd2(fn2) {
  var lastArgs = [];
  var frameId = null;
  var wrapperFn = function wrapperFn2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    lastArgs = args;
    if (frameId) {
      return;
    }
    frameId = requestAnimationFrame(function() {
      frameId = null;
      fn2.apply(void 0, lastArgs);
    });
  };
  wrapperFn.cancel = function() {
    if (!frameId) {
      return;
    }
    cancelAnimationFrame(frameId);
    frameId = null;
  };
  return wrapperFn;
};
var raf_schd_esm_default = rafSchd;

// node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
var import_react_dom5 = __toESM(require_react_dom());
var isProduction = false;
var spacesAndTabs = /[ \t]{2,}/g;
var lineStartWithSpaces = /^[ \t]*/gm;
var clean = function clean2(value) {
  return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
};
var getDevMessage = function getDevMessage2(message) {
  return clean("\n  %creact-beautiful-dnd\n\n  %c" + clean(message) + "\n\n  %c👷‍ This is a development only message. It will be removed in production builds.\n");
};
var getFormattedMessage = function getFormattedMessage2(message) {
  return [getDevMessage(message), "color: #00C584; font-size: 1.2em; font-weight: bold;", "line-height: 1.5", "color: #723874;"];
};
var isDisabledFlag = "__react-beautiful-dnd-disable-dev-warnings";
function log(type, message) {
  var _console;
  if (isProduction) {
    return;
  }
  if (typeof window !== "undefined" && window[isDisabledFlag]) {
    return;
  }
  (_console = console)[type].apply(_console, getFormattedMessage(message));
}
var warning3 = log.bind(null, "warn");
var error = log.bind(null, "error");
function noop2() {
}
function getOptions(shared2, fromBinding) {
  return _extends({}, shared2, {}, fromBinding);
}
function bindEvents(el, bindings, sharedOptions) {
  var unbindings = bindings.map(function(binding) {
    var options = getOptions(sharedOptions, binding.options);
    el.addEventListener(binding.eventName, binding.fn, options);
    return function unbind() {
      el.removeEventListener(binding.eventName, binding.fn, options);
    };
  });
  return function unbindAll() {
    unbindings.forEach(function(unbind) {
      unbind();
    });
  };
}
var isProduction$1 = false;
var prefix = "Invariant failed";
function RbdInvariant(message) {
  this.message = message;
}
RbdInvariant.prototype.toString = function toString() {
  return this.message;
};
function invariant2(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction$1) {
    throw new RbdInvariant(prefix);
  } else {
    throw new RbdInvariant(prefix + ": " + (message || ""));
  }
}
var ErrorBoundary = function(_React$Component) {
  _inheritsLoose(ErrorBoundary2, _React$Component);
  function ErrorBoundary2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.callbacks = null;
    _this.unbind = noop2;
    _this.onWindowError = function(event) {
      var callbacks = _this.getCallbacks();
      if (callbacks.isDragging()) {
        callbacks.tryAbort();
        true ? warning3("\n        An error was caught by our window 'error' event listener while a drag was occurring.\n        The active drag has been aborted.\n      ") : void 0;
      }
      var err = event.error;
      if (err instanceof RbdInvariant) {
        event.preventDefault();
        if (true) {
          error(err.message);
        }
      }
    };
    _this.getCallbacks = function() {
      if (!_this.callbacks) {
        throw new Error("Unable to find AppCallbacks in <ErrorBoundary/>");
      }
      return _this.callbacks;
    };
    _this.setCallbacks = function(callbacks) {
      _this.callbacks = callbacks;
    };
    return _this;
  }
  var _proto = ErrorBoundary2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.unbind = bindEvents(window, [{
      eventName: "error",
      fn: this.onWindowError
    }]);
  };
  _proto.componentDidCatch = function componentDidCatch(err) {
    if (err instanceof RbdInvariant) {
      if (true) {
        error(err.message);
      }
      this.setState({});
      return;
    }
    throw err;
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.unbind();
  };
  _proto.render = function render() {
    return this.props.children(this.setCallbacks);
  };
  return ErrorBoundary2;
}(import_react126.default.Component);
var dragHandleUsageInstructions = "\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n";
var position = function position2(index) {
  return index + 1;
};
var onDragStart = function onDragStart2(start4) {
  return "\n  You have lifted an item in position " + position(start4.source.index) + "\n";
};
var withLocation = function withLocation2(source, destination) {
  var isInHomeList = source.droppableId === destination.droppableId;
  var startPosition = position(source.index);
  var endPosition = position(destination.index);
  if (isInHomeList) {
    return "\n      You have moved the item from position " + startPosition + "\n      to position " + endPosition + "\n    ";
  }
  return "\n    You have moved the item from position " + startPosition + "\n    in list " + source.droppableId + "\n    to list " + destination.droppableId + "\n    in position " + endPosition + "\n  ";
};
var withCombine = function withCombine2(id, source, combine2) {
  var inHomeList = source.droppableId === combine2.droppableId;
  if (inHomeList) {
    return "\n      The item " + id + "\n      has been combined with " + combine2.draggableId;
  }
  return "\n      The item " + id + "\n      in list " + source.droppableId + "\n      has been combined with " + combine2.draggableId + "\n      in list " + combine2.droppableId + "\n    ";
};
var onDragUpdate = function onDragUpdate2(update2) {
  var location = update2.destination;
  if (location) {
    return withLocation(update2.source, location);
  }
  var combine2 = update2.combine;
  if (combine2) {
    return withCombine(update2.draggableId, update2.source, combine2);
  }
  return "You are over an area that cannot be dropped on";
};
var returnedToStart = function returnedToStart2(source) {
  return "\n  The item has returned to its starting position\n  of " + position(source.index) + "\n";
};
var onDragEnd = function onDragEnd2(result) {
  if (result.reason === "CANCEL") {
    return "\n      Movement cancelled.\n      " + returnedToStart(result.source) + "\n    ";
  }
  var location = result.destination;
  var combine2 = result.combine;
  if (location) {
    return "\n      You have dropped the item.\n      " + withLocation(result.source, location) + "\n    ";
  }
  if (combine2) {
    return "\n      You have dropped the item.\n      " + withCombine(result.draggableId, result.source, combine2) + "\n    ";
  }
  return "\n    The item has been dropped while not over a drop area.\n    " + returnedToStart(result.source) + "\n  ";
};
var preset = {
  dragHandleUsageInstructions,
  onDragStart,
  onDragUpdate,
  onDragEnd
};
var origin = {
  x: 0,
  y: 0
};
var add = function add2(point1, point2) {
  return {
    x: point1.x + point2.x,
    y: point1.y + point2.y
  };
};
var subtract = function subtract2(point1, point2) {
  return {
    x: point1.x - point2.x,
    y: point1.y - point2.y
  };
};
var isEqual3 = function isEqual4(point1, point2) {
  return point1.x === point2.x && point1.y === point2.y;
};
var negate = function negate2(point) {
  return {
    x: point.x !== 0 ? -point.x : 0,
    y: point.y !== 0 ? -point.y : 0
  };
};
var patch = function patch2(line, value, otherValue) {
  var _ref;
  if (otherValue === void 0) {
    otherValue = 0;
  }
  return _ref = {}, _ref[line] = value, _ref[line === "x" ? "y" : "x"] = otherValue, _ref;
};
var distance = function distance2(point1, point2) {
  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
};
var closest = function closest2(target, points) {
  return Math.min.apply(Math, points.map(function(point) {
    return distance(target, point);
  }));
};
var apply = function apply2(fn2) {
  return function(point) {
    return {
      x: fn2(point.x),
      y: fn2(point.y)
    };
  };
};
var executeClip = function(frame, subject) {
  var result = getRect({
    top: Math.max(subject.top, frame.top),
    right: Math.min(subject.right, frame.right),
    bottom: Math.min(subject.bottom, frame.bottom),
    left: Math.max(subject.left, frame.left)
  });
  if (result.width <= 0 || result.height <= 0) {
    return null;
  }
  return result;
};
var offsetByPosition = function offsetByPosition2(spacing2, point) {
  return {
    top: spacing2.top + point.y,
    left: spacing2.left + point.x,
    bottom: spacing2.bottom + point.y,
    right: spacing2.right + point.x
  };
};
var getCorners = function getCorners2(spacing2) {
  return [{
    x: spacing2.left,
    y: spacing2.top
  }, {
    x: spacing2.right,
    y: spacing2.top
  }, {
    x: spacing2.left,
    y: spacing2.bottom
  }, {
    x: spacing2.right,
    y: spacing2.bottom
  }];
};
var noSpacing2 = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var scroll = function scroll2(target, frame) {
  if (!frame) {
    return target;
  }
  return offsetByPosition(target, frame.scroll.diff.displacement);
};
var increase = function increase2(target, axis, withPlaceholder) {
  if (withPlaceholder && withPlaceholder.increasedBy) {
    var _extends2;
    return _extends({}, target, (_extends2 = {}, _extends2[axis.end] = target[axis.end] + withPlaceholder.increasedBy[axis.line], _extends2));
  }
  return target;
};
var clip = function clip2(target, frame) {
  if (frame && frame.shouldClipSubject) {
    return executeClip(frame.pageMarginBox, target);
  }
  return getRect(target);
};
var getSubject = function(_ref) {
  var page = _ref.page, withPlaceholder = _ref.withPlaceholder, axis = _ref.axis, frame = _ref.frame;
  var scrolled = scroll(page.marginBox, frame);
  var increased = increase(scrolled, axis, withPlaceholder);
  var clipped = clip(increased, frame);
  return {
    page,
    withPlaceholder,
    active: clipped
  };
};
var scrollDroppable = function(droppable2, newScroll) {
  !droppable2.frame ? true ? invariant2(false) : invariant2(false) : void 0;
  var scrollable = droppable2.frame;
  var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
  var scrollDisplacement = negate(scrollDiff);
  var frame = _extends({}, scrollable, {
    scroll: {
      initial: scrollable.scroll.initial,
      current: newScroll,
      diff: {
        value: scrollDiff,
        displacement: scrollDisplacement
      },
      max: scrollable.scroll.max
    }
  });
  var subject = getSubject({
    page: droppable2.subject.page,
    withPlaceholder: droppable2.subject.withPlaceholder,
    axis: droppable2.axis,
    frame
  });
  var result = _extends({}, droppable2, {
    frame,
    subject
  });
  return result;
};
function isInteger(value) {
  if (Number.isInteger) {
    return Number.isInteger(value);
  }
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
}
function values2(map) {
  if (Object.values) {
    return Object.values(map);
  }
  return Object.keys(map).map(function(key) {
    return map[key];
  });
}
function findIndex(list, predicate) {
  if (list.findIndex) {
    return list.findIndex(predicate);
  }
  for (var i = 0; i < list.length; i++) {
    if (predicate(list[i])) {
      return i;
    }
  }
  return -1;
}
function find(list, predicate) {
  if (list.find) {
    return list.find(predicate);
  }
  var index = findIndex(list, predicate);
  if (index !== -1) {
    return list[index];
  }
  return void 0;
}
function toArray(list) {
  return Array.prototype.slice.call(list);
}
var toDroppableMap = memoize_one_esm_default(function(droppables) {
  return droppables.reduce(function(previous, current) {
    previous[current.descriptor.id] = current;
    return previous;
  }, {});
});
var toDraggableMap = memoize_one_esm_default(function(draggables) {
  return draggables.reduce(function(previous, current) {
    previous[current.descriptor.id] = current;
    return previous;
  }, {});
});
var toDroppableList = memoize_one_esm_default(function(droppables) {
  return values2(droppables);
});
var toDraggableList = memoize_one_esm_default(function(draggables) {
  return values2(draggables);
});
var getDraggablesInsideDroppable = memoize_one_esm_default(function(droppableId, draggables) {
  var result = toDraggableList(draggables).filter(function(draggable2) {
    return droppableId === draggable2.descriptor.droppableId;
  }).sort(function(a, b84) {
    return a.descriptor.index - b84.descriptor.index;
  });
  return result;
});
function tryGetDestination(impact) {
  if (impact.at && impact.at.type === "REORDER") {
    return impact.at.destination;
  }
  return null;
}
function tryGetCombine(impact) {
  if (impact.at && impact.at.type === "COMBINE") {
    return impact.at.combine;
  }
  return null;
}
var removeDraggableFromList = memoize_one_esm_default(function(remove, list) {
  return list.filter(function(item) {
    return item.descriptor.id !== remove.descriptor.id;
  });
});
var moveToNextCombine = function(_ref) {
  var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var location = tryGetDestination(previousImpact);
  if (!location) {
    return null;
  }
  function getImpact(target) {
    var at = {
      type: "COMBINE",
      combine: {
        draggableId: target,
        droppableId: destination.descriptor.id
      }
    };
    return _extends({}, previousImpact, {
      at
    });
  }
  var all = previousImpact.displaced.all;
  var closestId = all.length ? all[0] : null;
  if (isMovingForward) {
    return closestId ? getImpact(closestId) : null;
  }
  var withoutDraggable = removeDraggableFromList(draggable2, insideDestination);
  if (!closestId) {
    if (!withoutDraggable.length) {
      return null;
    }
    var last = withoutDraggable[withoutDraggable.length - 1];
    return getImpact(last.descriptor.id);
  }
  var indexOfClosest = findIndex(withoutDraggable, function(d) {
    return d.descriptor.id === closestId;
  });
  !(indexOfClosest !== -1) ? true ? invariant2(false, "Could not find displaced item in set") : invariant2(false) : void 0;
  var proposedIndex = indexOfClosest - 1;
  if (proposedIndex < 0) {
    return null;
  }
  var before = withoutDraggable[proposedIndex];
  return getImpact(before.descriptor.id);
};
var isHomeOf = function(draggable2, destination) {
  return draggable2.descriptor.droppableId === destination.descriptor.id;
};
var noDisplacedBy = {
  point: origin,
  value: 0
};
var emptyGroups = {
  invisible: {},
  visible: {},
  all: []
};
var noImpact = {
  displaced: emptyGroups,
  displacedBy: noDisplacedBy,
  at: null
};
var isWithin = function(lowerBound, upperBound) {
  return function(value) {
    return lowerBound <= value && value <= upperBound;
  };
};
var isPartiallyVisibleThroughFrame = function(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function(subject) {
    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    if (isContained) {
      return true;
    }
    var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
    var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
    var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;
    if (isPartiallyContained) {
      return true;
    }
    var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
    var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
    var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;
    if (isTargetBiggerThanFrame) {
      return true;
    }
    var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
    return isTargetBiggerOnOneAxis;
  };
};
var isTotallyVisibleThroughFrame = function(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function(subject) {
    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    return isContained;
  };
};
var vertical = {
  direction: "vertical",
  line: "y",
  crossAxisLine: "x",
  start: "top",
  end: "bottom",
  size: "height",
  crossAxisStart: "left",
  crossAxisEnd: "right",
  crossAxisSize: "width"
};
var horizontal = {
  direction: "horizontal",
  line: "x",
  crossAxisLine: "y",
  start: "left",
  end: "right",
  size: "width",
  crossAxisStart: "top",
  crossAxisEnd: "bottom",
  crossAxisSize: "height"
};
var isTotallyVisibleThroughFrameOnAxis = function(axis) {
  return function(frame) {
    var isWithinVertical = isWithin(frame.top, frame.bottom);
    var isWithinHorizontal = isWithin(frame.left, frame.right);
    return function(subject) {
      if (axis === vertical) {
        return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
      }
      return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    };
  };
};
var getDroppableDisplaced = function getDroppableDisplaced2(target, destination) {
  var displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
  return offsetByPosition(target, displacement);
};
var isVisibleInDroppable = function isVisibleInDroppable2(target, destination, isVisibleThroughFrameFn) {
  if (!destination.subject.active) {
    return false;
  }
  return isVisibleThroughFrameFn(destination.subject.active)(target);
};
var isVisibleInViewport = function isVisibleInViewport2(target, viewport2, isVisibleThroughFrameFn) {
  return isVisibleThroughFrameFn(viewport2)(target);
};
var isVisible = function isVisible2(_ref) {
  var toBeDisplaced = _ref.target, destination = _ref.destination, viewport2 = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
  var displacedTarget = withDroppableDisplacement2 ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
  return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport2, isVisibleThroughFrameFn);
};
var isPartiallyVisible = function isPartiallyVisible2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
  }));
};
var isTotallyVisible = function isTotallyVisible2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
  }));
};
var isTotallyVisibleOnAxis = function isTotallyVisibleOnAxis2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
  }));
};
var getShouldAnimate = function getShouldAnimate2(id, last, forceShouldAnimate) {
  if (typeof forceShouldAnimate === "boolean") {
    return forceShouldAnimate;
  }
  if (!last) {
    return true;
  }
  var invisible = last.invisible, visible = last.visible;
  if (invisible[id]) {
    return false;
  }
  var previous = visible[id];
  return previous ? previous.shouldAnimate : true;
};
function getTarget(draggable2, displacedBy) {
  var marginBox = draggable2.page.marginBox;
  var expandBy = {
    top: displacedBy.point.y,
    right: 0,
    bottom: 0,
    left: displacedBy.point.x
  };
  return getRect(expand(marginBox, expandBy));
}
function getDisplacementGroups(_ref) {
  var afterDragging = _ref.afterDragging, destination = _ref.destination, displacedBy = _ref.displacedBy, viewport2 = _ref.viewport, forceShouldAnimate = _ref.forceShouldAnimate, last = _ref.last;
  return afterDragging.reduce(function process2(groups, draggable2) {
    var target = getTarget(draggable2, displacedBy);
    var id = draggable2.descriptor.id;
    groups.all.push(id);
    var isVisible3 = isPartiallyVisible({
      target,
      destination,
      viewport: viewport2,
      withDroppableDisplacement: true
    });
    if (!isVisible3) {
      groups.invisible[draggable2.descriptor.id] = true;
      return groups;
    }
    var shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);
    var displacement = {
      draggableId: id,
      shouldAnimate
    };
    groups.visible[id] = displacement;
    return groups;
  }, {
    all: [],
    visible: {},
    invisible: {}
  });
}
function getIndexOfLastItem(draggables, options) {
  if (!draggables.length) {
    return 0;
  }
  var indexOfLastItem = draggables[draggables.length - 1].descriptor.index;
  return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
}
function goAtEnd(_ref) {
  var insideDestination = _ref.insideDestination, inHomeList = _ref.inHomeList, displacedBy = _ref.displacedBy, destination = _ref.destination;
  var newIndex = getIndexOfLastItem(insideDestination, {
    inHomeList
  });
  return {
    displaced: emptyGroups,
    displacedBy,
    at: {
      type: "REORDER",
      destination: {
        droppableId: destination.descriptor.id,
        index: newIndex
      }
    }
  };
}
function calculateReorderImpact(_ref2) {
  var draggable2 = _ref2.draggable, insideDestination = _ref2.insideDestination, destination = _ref2.destination, viewport2 = _ref2.viewport, displacedBy = _ref2.displacedBy, last = _ref2.last, index = _ref2.index, forceShouldAnimate = _ref2.forceShouldAnimate;
  var inHomeList = isHomeOf(draggable2, destination);
  if (index == null) {
    return goAtEnd({
      insideDestination,
      inHomeList,
      displacedBy,
      destination
    });
  }
  var match2 = find(insideDestination, function(item) {
    return item.descriptor.index === index;
  });
  if (!match2) {
    return goAtEnd({
      insideDestination,
      inHomeList,
      displacedBy,
      destination
    });
  }
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var sliceFrom = insideDestination.indexOf(match2);
  var impacted = withoutDragging.slice(sliceFrom);
  var displaced = getDisplacementGroups({
    afterDragging: impacted,
    destination,
    displacedBy,
    last,
    viewport: viewport2.frame,
    forceShouldAnimate
  });
  return {
    displaced,
    displacedBy,
    at: {
      type: "REORDER",
      destination: {
        droppableId: destination.descriptor.id,
        index
      }
    }
  };
}
function didStartAfterCritical(draggableId, afterCritical) {
  return Boolean(afterCritical.effected[draggableId]);
}
var fromCombine = function(_ref) {
  var isMovingForward = _ref.isMovingForward, destination = _ref.destination, draggables = _ref.draggables, combine2 = _ref.combine, afterCritical = _ref.afterCritical;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var combineId = combine2.draggableId;
  var combineWith = draggables[combineId];
  var combineWithIndex = combineWith.descriptor.index;
  var didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);
  if (didCombineWithStartAfterCritical) {
    if (isMovingForward) {
      return combineWithIndex;
    }
    return combineWithIndex - 1;
  }
  if (isMovingForward) {
    return combineWithIndex + 1;
  }
  return combineWithIndex;
};
var fromReorder = function(_ref) {
  var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, insideDestination = _ref.insideDestination, location = _ref.location;
  if (!insideDestination.length) {
    return null;
  }
  var currentIndex = location.index;
  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
  var firstIndex = insideDestination[0].descriptor.index;
  var lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;
  var upperBound = isInHomeList ? lastIndex : lastIndex + 1;
  if (proposedIndex < firstIndex) {
    return null;
  }
  if (proposedIndex > upperBound) {
    return null;
  }
  return proposedIndex;
};
var moveToNextIndex = function(_ref) {
  var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
  var wasAt = previousImpact.at;
  !wasAt ? true ? invariant2(false, "Cannot move in direction without previous impact location") : invariant2(false) : void 0;
  if (wasAt.type === "REORDER") {
    var _newIndex = fromReorder({
      isMovingForward,
      isInHomeList,
      location: wasAt.destination,
      insideDestination
    });
    if (_newIndex == null) {
      return null;
    }
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport: viewport2,
      last: previousImpact.displaced,
      displacedBy: previousImpact.displacedBy,
      index: _newIndex
    });
  }
  var newIndex = fromCombine({
    isMovingForward,
    destination,
    displaced: previousImpact.displaced,
    draggables,
    combine: wasAt.combine,
    afterCritical
  });
  if (newIndex == null) {
    return null;
  }
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport: viewport2,
    last: previousImpact.displaced,
    displacedBy: previousImpact.displacedBy,
    index: newIndex
  });
};
var getCombinedItemDisplacement = function(_ref) {
  var displaced = _ref.displaced, afterCritical = _ref.afterCritical, combineWith = _ref.combineWith, displacedBy = _ref.displacedBy;
  var isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);
  if (didStartAfterCritical(combineWith, afterCritical)) {
    return isDisplaced ? origin : negate(displacedBy.point);
  }
  return isDisplaced ? displacedBy.point : origin;
};
var whenCombining = function(_ref) {
  var afterCritical = _ref.afterCritical, impact = _ref.impact, draggables = _ref.draggables;
  var combine2 = tryGetCombine(impact);
  !combine2 ? true ? invariant2(false) : invariant2(false) : void 0;
  var combineWith = combine2.draggableId;
  var center = draggables[combineWith].page.borderBox.center;
  var displaceBy = getCombinedItemDisplacement({
    displaced: impact.displaced,
    afterCritical,
    combineWith,
    displacedBy: impact.displacedBy
  });
  return add(center, displaceBy);
};
var distanceFromStartToBorderBoxCenter = function distanceFromStartToBorderBoxCenter2(axis, box) {
  return box.margin[axis.start] + box.borderBox[axis.size] / 2;
};
var distanceFromEndToBorderBoxCenter = function distanceFromEndToBorderBoxCenter2(axis, box) {
  return box.margin[axis.end] + box.borderBox[axis.size] / 2;
};
var getCrossAxisBorderBoxCenter = function getCrossAxisBorderBoxCenter2(axis, target, isMoving) {
  return target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
};
var goAfter = function goAfter2(_ref) {
  var axis = _ref.axis, moveRelativeTo = _ref.moveRelativeTo, isMoving = _ref.isMoving;
  return patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
};
var goBefore = function goBefore2(_ref2) {
  var axis = _ref2.axis, moveRelativeTo = _ref2.moveRelativeTo, isMoving = _ref2.isMoving;
  return patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
};
var goIntoStart = function goIntoStart2(_ref3) {
  var axis = _ref3.axis, moveInto = _ref3.moveInto, isMoving = _ref3.isMoving;
  return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
};
var whenReordering = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, draggables = _ref.draggables, droppable2 = _ref.droppable, afterCritical = _ref.afterCritical;
  var insideDestination = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
  var draggablePage = draggable2.page;
  var axis = droppable2.axis;
  if (!insideDestination.length) {
    return goIntoStart({
      axis,
      moveInto: droppable2.page,
      isMoving: draggablePage
    });
  }
  var displaced = impact.displaced, displacedBy = impact.displacedBy;
  var closestAfter = displaced.all[0];
  if (closestAfter) {
    var closest3 = draggables[closestAfter];
    if (didStartAfterCritical(closestAfter, afterCritical)) {
      return goBefore({
        axis,
        moveRelativeTo: closest3.page,
        isMoving: draggablePage
      });
    }
    var withDisplacement = offset2(closest3.page, displacedBy.point);
    return goBefore({
      axis,
      moveRelativeTo: withDisplacement,
      isMoving: draggablePage
    });
  }
  var last = insideDestination[insideDestination.length - 1];
  if (last.descriptor.id === draggable2.descriptor.id) {
    return draggablePage.borderBox.center;
  }
  if (didStartAfterCritical(last.descriptor.id, afterCritical)) {
    var page = offset2(last.page, negate(afterCritical.displacedBy.point));
    return goAfter({
      axis,
      moveRelativeTo: page,
      isMoving: draggablePage
    });
  }
  return goAfter({
    axis,
    moveRelativeTo: last.page,
    isMoving: draggablePage
  });
};
var withDroppableDisplacement = function(droppable2, point) {
  var frame = droppable2.frame;
  if (!frame) {
    return point;
  }
  return add(point, frame.scroll.diff.displacement);
};
var getResultWithoutDroppableDisplacement = function getResultWithoutDroppableDisplacement2(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, afterCritical = _ref.afterCritical;
  var original = draggable2.page.borderBox.center;
  var at = impact.at;
  if (!droppable2) {
    return original;
  }
  if (!at) {
    return original;
  }
  if (at.type === "REORDER") {
    return whenReordering({
      impact,
      draggable: draggable2,
      draggables,
      droppable: droppable2,
      afterCritical
    });
  }
  return whenCombining({
    impact,
    draggables,
    afterCritical
  });
};
var getPageBorderBoxCenterFromImpact = function(args) {
  var withoutDisplacement = getResultWithoutDroppableDisplacement(args);
  var droppable2 = args.droppable;
  var withDisplacement = droppable2 ? withDroppableDisplacement(droppable2, withoutDisplacement) : withoutDisplacement;
  return withDisplacement;
};
var scrollViewport = function(viewport2, newScroll) {
  var diff = subtract(newScroll, viewport2.scroll.initial);
  var displacement = negate(diff);
  var frame = getRect({
    top: newScroll.y,
    bottom: newScroll.y + viewport2.frame.height,
    left: newScroll.x,
    right: newScroll.x + viewport2.frame.width
  });
  var updated = {
    frame,
    scroll: {
      initial: viewport2.scroll.initial,
      max: viewport2.scroll.max,
      current: newScroll,
      diff: {
        value: diff,
        displacement
      }
    }
  };
  return updated;
};
function getDraggables(ids, draggables) {
  return ids.map(function(id) {
    return draggables[id];
  });
}
function tryGetVisible(id, groups) {
  for (var i = 0; i < groups.length; i++) {
    var displacement = groups[i].visible[id];
    if (displacement) {
      return displacement;
    }
  }
  return null;
}
var speculativelyIncrease = function(_ref) {
  var impact = _ref.impact, viewport2 = _ref.viewport, destination = _ref.destination, draggables = _ref.draggables, maxScrollChange = _ref.maxScrollChange;
  var scrolledViewport = scrollViewport(viewport2, add(viewport2.scroll.current, maxScrollChange));
  var scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
  var last = impact.displaced;
  var withViewportScroll = getDisplacementGroups({
    afterDragging: getDraggables(last.all, draggables),
    destination,
    displacedBy: impact.displacedBy,
    viewport: scrolledViewport.frame,
    last,
    forceShouldAnimate: false
  });
  var withDroppableScroll2 = getDisplacementGroups({
    afterDragging: getDraggables(last.all, draggables),
    destination: scrolledDroppable,
    displacedBy: impact.displacedBy,
    viewport: viewport2.frame,
    last,
    forceShouldAnimate: false
  });
  var invisible = {};
  var visible = {};
  var groups = [last, withViewportScroll, withDroppableScroll2];
  last.all.forEach(function(id) {
    var displacement = tryGetVisible(id, groups);
    if (displacement) {
      visible[id] = displacement;
      return;
    }
    invisible[id] = true;
  });
  var newImpact = _extends({}, impact, {
    displaced: {
      all: last.all,
      invisible,
      visible
    }
  });
  return newImpact;
};
var withViewportDisplacement = function(viewport2, point) {
  return add(viewport2.scroll.diff.displacement, point);
};
var getClientFromPageBorderBoxCenter = function(_ref) {
  var pageBorderBoxCenter = _ref.pageBorderBoxCenter, draggable2 = _ref.draggable, viewport2 = _ref.viewport;
  var withoutPageScrollChange = withViewportDisplacement(viewport2, pageBorderBoxCenter);
  var offset4 = subtract(withoutPageScrollChange, draggable2.page.borderBox.center);
  return add(draggable2.client.borderBox.center, offset4);
};
var isTotallyVisibleInNewLocation = function(_ref) {
  var draggable2 = _ref.draggable, destination = _ref.destination, newPageBorderBoxCenter = _ref.newPageBorderBoxCenter, viewport2 = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, _ref$onlyOnMainAxis = _ref.onlyOnMainAxis, onlyOnMainAxis = _ref$onlyOnMainAxis === void 0 ? false : _ref$onlyOnMainAxis;
  var changeNeeded = subtract(newPageBorderBoxCenter, draggable2.page.borderBox.center);
  var shifted = offsetByPosition(draggable2.page.borderBox, changeNeeded);
  var args = {
    target: shifted,
    destination,
    withDroppableDisplacement: withDroppableDisplacement2,
    viewport: viewport2
  };
  return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
};
var moveToNextPlace = function(_ref) {
  var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, draggables = _ref.draggables, previousImpact = _ref.previousImpact, viewport2 = _ref.viewport, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, previousClientSelection = _ref.previousClientSelection, afterCritical = _ref.afterCritical;
  if (!destination.isEnabled) {
    return null;
  }
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var isInHomeList = isHomeOf(draggable2, destination);
  var impact = moveToNextCombine({
    isMovingForward,
    draggable: draggable2,
    destination,
    insideDestination,
    previousImpact
  }) || moveToNextIndex({
    isMovingForward,
    isInHomeList,
    draggable: draggable2,
    draggables,
    destination,
    insideDestination,
    previousImpact,
    viewport: viewport2,
    afterCritical
  });
  if (!impact) {
    return null;
  }
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    afterCritical
  });
  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
    draggable: draggable2,
    destination,
    newPageBorderBoxCenter: pageBorderBoxCenter,
    viewport: viewport2.frame,
    withDroppableDisplacement: false,
    onlyOnMainAxis: true
  });
  if (isVisibleInNewLocation) {
    var clientSelection = getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable: draggable2,
      viewport: viewport2
    });
    return {
      clientSelection,
      impact,
      scrollJumpRequest: null
    };
  }
  var distance3 = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
  var cautious = speculativelyIncrease({
    impact,
    viewport: viewport2,
    destination,
    draggables,
    maxScrollChange: distance3
  });
  return {
    clientSelection: previousClientSelection,
    impact: cautious,
    scrollJumpRequest: distance3
  };
};
var getKnownActive = function getKnownActive2(droppable2) {
  var rect = droppable2.subject.active;
  !rect ? true ? invariant2(false, "Cannot get clipped area from droppable") : invariant2(false) : void 0;
  return rect;
};
var getBestCrossAxisDroppable = function(_ref) {
  var isMovingForward = _ref.isMovingForward, pageBorderBoxCenter = _ref.pageBorderBoxCenter, source = _ref.source, droppables = _ref.droppables, viewport2 = _ref.viewport;
  var active = source.subject.active;
  if (!active) {
    return null;
  }
  var axis = source.axis;
  var isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
  var candidates = toDroppableList(droppables).filter(function(droppable2) {
    return droppable2 !== source;
  }).filter(function(droppable2) {
    return droppable2.isEnabled;
  }).filter(function(droppable2) {
    return Boolean(droppable2.subject.active);
  }).filter(function(droppable2) {
    return isPartiallyVisibleThroughFrame(viewport2.frame)(getKnownActive(droppable2));
  }).filter(function(droppable2) {
    var activeOfTarget = getKnownActive(droppable2);
    if (isMovingForward) {
      return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
    }
    return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
  }).filter(function(droppable2) {
    var activeOfTarget = getKnownActive(droppable2);
    var isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
    return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
  }).sort(function(a, b84) {
    var first = getKnownActive(a)[axis.crossAxisStart];
    var second = getKnownActive(b84)[axis.crossAxisStart];
    if (isMovingForward) {
      return first - second;
    }
    return second - first;
  }).filter(function(droppable2, index, array) {
    return getKnownActive(droppable2)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart];
  });
  if (!candidates.length) {
    return null;
  }
  if (candidates.length === 1) {
    return candidates[0];
  }
  var contains2 = candidates.filter(function(droppable2) {
    var isWithinDroppable = isWithin(getKnownActive(droppable2)[axis.start], getKnownActive(droppable2)[axis.end]);
    return isWithinDroppable(pageBorderBoxCenter[axis.line]);
  });
  if (contains2.length === 1) {
    return contains2[0];
  }
  if (contains2.length > 1) {
    return contains2.sort(function(a, b84) {
      return getKnownActive(a)[axis.start] - getKnownActive(b84)[axis.start];
    })[0];
  }
  return candidates.sort(function(a, b84) {
    var first = closest(pageBorderBoxCenter, getCorners(getKnownActive(a)));
    var second = closest(pageBorderBoxCenter, getCorners(getKnownActive(b84)));
    if (first !== second) {
      return first - second;
    }
    return getKnownActive(a)[axis.start] - getKnownActive(b84)[axis.start];
  })[0];
};
var getCurrentPageBorderBoxCenter = function getCurrentPageBorderBoxCenter2(draggable2, afterCritical) {
  var original = draggable2.page.borderBox.center;
  return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
};
var getCurrentPageBorderBox = function getCurrentPageBorderBox2(draggable2, afterCritical) {
  var original = draggable2.page.borderBox;
  return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
};
var getClosestDraggable = function(_ref) {
  var pageBorderBoxCenter = _ref.pageBorderBoxCenter, viewport2 = _ref.viewport, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
  var sorted = insideDestination.filter(function(draggable2) {
    return isTotallyVisible({
      target: getCurrentPageBorderBox(draggable2, afterCritical),
      destination,
      viewport: viewport2.frame,
      withDroppableDisplacement: true
    });
  }).sort(function(a, b84) {
    var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a, afterCritical)));
    var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b84, afterCritical)));
    if (distanceToA < distanceToB) {
      return -1;
    }
    if (distanceToB < distanceToA) {
      return 1;
    }
    return a.descriptor.index - b84.descriptor.index;
  });
  return sorted[0] || null;
};
var getDisplacedBy = memoize_one_esm_default(function getDisplacedBy2(axis, displaceBy) {
  var displacement = displaceBy[axis.line];
  return {
    value: displacement,
    point: patch(axis.line, displacement)
  };
});
var getRequiredGrowthForPlaceholder = function getRequiredGrowthForPlaceholder2(droppable2, placeholderSize, draggables) {
  var axis = droppable2.axis;
  if (droppable2.descriptor.mode === "virtual") {
    return patch(axis.line, placeholderSize[axis.line]);
  }
  var availableSpace = droppable2.subject.page.contentBox[axis.size];
  var insideDroppable = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
  var spaceUsed = insideDroppable.reduce(function(sum, dimension) {
    return sum + dimension.client.marginBox[axis.size];
  }, 0);
  var requiredSpace = spaceUsed + placeholderSize[axis.line];
  var needsToGrowBy = requiredSpace - availableSpace;
  if (needsToGrowBy <= 0) {
    return null;
  }
  return patch(axis.line, needsToGrowBy);
};
var withMaxScroll = function withMaxScroll2(frame, max2) {
  return _extends({}, frame, {
    scroll: _extends({}, frame.scroll, {
      max: max2
    })
  });
};
var addPlaceholder = function addPlaceholder2(droppable2, draggable2, draggables) {
  var frame = droppable2.frame;
  !!isHomeOf(draggable2, droppable2) ? true ? invariant2(false, "Should not add placeholder space to home list") : invariant2(false) : void 0;
  !!droppable2.subject.withPlaceholder ? true ? invariant2(false, "Cannot add placeholder size to a subject when it already has one") : invariant2(false) : void 0;
  var placeholderSize = getDisplacedBy(droppable2.axis, draggable2.displaceBy).point;
  var requiredGrowth = getRequiredGrowthForPlaceholder(droppable2, placeholderSize, draggables);
  var added = {
    placeholderSize,
    increasedBy: requiredGrowth,
    oldFrameMaxScroll: droppable2.frame ? droppable2.frame.scroll.max : null
  };
  if (!frame) {
    var _subject = getSubject({
      page: droppable2.subject.page,
      withPlaceholder: added,
      axis: droppable2.axis,
      frame: droppable2.frame
    });
    return _extends({}, droppable2, {
      subject: _subject
    });
  }
  var maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;
  var newFrame = withMaxScroll(frame, maxScroll);
  var subject = getSubject({
    page: droppable2.subject.page,
    withPlaceholder: added,
    axis: droppable2.axis,
    frame: newFrame
  });
  return _extends({}, droppable2, {
    subject,
    frame: newFrame
  });
};
var removePlaceholder = function removePlaceholder2(droppable2) {
  var added = droppable2.subject.withPlaceholder;
  !added ? true ? invariant2(false, "Cannot remove placeholder form subject when there was none") : invariant2(false) : void 0;
  var frame = droppable2.frame;
  if (!frame) {
    var _subject2 = getSubject({
      page: droppable2.subject.page,
      axis: droppable2.axis,
      frame: null,
      withPlaceholder: null
    });
    return _extends({}, droppable2, {
      subject: _subject2
    });
  }
  var oldMaxScroll = added.oldFrameMaxScroll;
  !oldMaxScroll ? true ? invariant2(false, "Expected droppable with frame to have old max frame scroll when removing placeholder") : invariant2(false) : void 0;
  var newFrame = withMaxScroll(frame, oldMaxScroll);
  var subject = getSubject({
    page: droppable2.subject.page,
    axis: droppable2.axis,
    frame: newFrame,
    withPlaceholder: null
  });
  return _extends({}, droppable2, {
    subject,
    frame: newFrame
  });
};
var moveToNewDroppable = function(_ref) {
  var previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, moveRelativeTo = _ref.moveRelativeTo, insideDestination = _ref.insideDestination, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
  if (!moveRelativeTo) {
    if (insideDestination.length) {
      return null;
    }
    var proposed = {
      displaced: emptyGroups,
      displacedBy: noDisplacedBy,
      at: {
        type: "REORDER",
        destination: {
          droppableId: destination.descriptor.id,
          index: 0
        }
      }
    };
    var proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact: proposed,
      draggable: draggable2,
      droppable: destination,
      draggables,
      afterCritical
    });
    var withPlaceholder = isHomeOf(draggable2, destination) ? destination : addPlaceholder(destination, draggable2, draggables);
    var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
      draggable: draggable2,
      destination: withPlaceholder,
      newPageBorderBoxCenter: proposedPageBorderBoxCenter,
      viewport: viewport2.frame,
      withDroppableDisplacement: false,
      onlyOnMainAxis: true
    });
    return isVisibleInNewLocation ? proposed : null;
  }
  var isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);
  var proposedIndex = function() {
    var relativeTo = moveRelativeTo.descriptor.index;
    if (moveRelativeTo.descriptor.id === draggable2.descriptor.id) {
      return relativeTo;
    }
    if (isGoingBeforeTarget) {
      return relativeTo;
    }
    return relativeTo + 1;
  }();
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport: viewport2,
    displacedBy,
    last: emptyGroups,
    index: proposedIndex
  });
};
var moveCrossAxis = function(_ref) {
  var isMovingForward = _ref.isMovingForward, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, draggable2 = _ref.draggable, isOver = _ref.isOver, draggables = _ref.draggables, droppables = _ref.droppables, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
  var destination = getBestCrossAxisDroppable({
    isMovingForward,
    pageBorderBoxCenter: previousPageBorderBoxCenter,
    source: isOver,
    droppables,
    viewport: viewport2
  });
  if (!destination) {
    return null;
  }
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var moveRelativeTo = getClosestDraggable({
    pageBorderBoxCenter: previousPageBorderBoxCenter,
    viewport: viewport2,
    destination,
    insideDestination,
    afterCritical
  });
  var impact = moveToNewDroppable({
    previousPageBorderBoxCenter,
    destination,
    draggable: draggable2,
    draggables,
    moveRelativeTo,
    insideDestination,
    viewport: viewport2,
    afterCritical
  });
  if (!impact) {
    return null;
  }
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    afterCritical
  });
  var clientSelection = getClientFromPageBorderBoxCenter({
    pageBorderBoxCenter,
    draggable: draggable2,
    viewport: viewport2
  });
  return {
    clientSelection,
    impact,
    scrollJumpRequest: null
  };
};
var whatIsDraggedOver = function(impact) {
  var at = impact.at;
  if (!at) {
    return null;
  }
  if (at.type === "REORDER") {
    return at.destination.droppableId;
  }
  return at.combine.droppableId;
};
var getDroppableOver = function getDroppableOver2(impact, droppables) {
  var id = whatIsDraggedOver(impact);
  return id ? droppables[id] : null;
};
var moveInDirection = function(_ref) {
  var state = _ref.state, type = _ref.type;
  var isActuallyOver = getDroppableOver(state.impact, state.dimensions.droppables);
  var isMainAxisMovementAllowed = Boolean(isActuallyOver);
  var home2 = state.dimensions.droppables[state.critical.droppable.id];
  var isOver = isActuallyOver || home2;
  var direction = isOver.axis.direction;
  var isMovingOnMainAxis = direction === "vertical" && (type === "MOVE_UP" || type === "MOVE_DOWN") || direction === "horizontal" && (type === "MOVE_LEFT" || type === "MOVE_RIGHT");
  if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
    return null;
  }
  var isMovingForward = type === "MOVE_DOWN" || type === "MOVE_RIGHT";
  var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
  var previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
  var _state$dimensions = state.dimensions, draggables = _state$dimensions.draggables, droppables = _state$dimensions.droppables;
  return isMovingOnMainAxis ? moveToNextPlace({
    isMovingForward,
    previousPageBorderBoxCenter,
    draggable: draggable2,
    destination: isOver,
    draggables,
    viewport: state.viewport,
    previousClientSelection: state.current.client.selection,
    previousImpact: state.impact,
    afterCritical: state.afterCritical
  }) : moveCrossAxis({
    isMovingForward,
    previousPageBorderBoxCenter,
    draggable: draggable2,
    isOver,
    draggables,
    droppables,
    viewport: state.viewport,
    afterCritical: state.afterCritical
  });
};
function isMovementAllowed(state) {
  return state.phase === "DRAGGING" || state.phase === "COLLECTING";
}
function isPositionInFrame(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function run(point) {
    return isWithinVertical(point.y) && isWithinHorizontal(point.x);
  };
}
function getHasOverlap(first, second) {
  return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
}
function getFurthestAway(_ref) {
  var pageBorderBox = _ref.pageBorderBox, draggable2 = _ref.draggable, candidates = _ref.candidates;
  var startCenter = draggable2.page.borderBox.center;
  var sorted = candidates.map(function(candidate) {
    var axis = candidate.axis;
    var target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);
    return {
      id: candidate.descriptor.id,
      distance: distance(startCenter, target)
    };
  }).sort(function(a, b84) {
    return b84.distance - a.distance;
  });
  return sorted[0] ? sorted[0].id : null;
}
function getDroppableOver$1(_ref2) {
  var pageBorderBox = _ref2.pageBorderBox, draggable2 = _ref2.draggable, droppables = _ref2.droppables;
  var candidates = toDroppableList(droppables).filter(function(item) {
    if (!item.isEnabled) {
      return false;
    }
    var active = item.subject.active;
    if (!active) {
      return false;
    }
    if (!getHasOverlap(pageBorderBox, active)) {
      return false;
    }
    if (isPositionInFrame(active)(pageBorderBox.center)) {
      return true;
    }
    var axis = item.axis;
    var childCenter = active.center[axis.crossAxisLine];
    var crossAxisStart = pageBorderBox[axis.crossAxisStart];
    var crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
    var isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
    var isStartContained = isContained(crossAxisStart);
    var isEndContained = isContained(crossAxisEnd);
    if (!isStartContained && !isEndContained) {
      return true;
    }
    if (isStartContained) {
      return crossAxisStart < childCenter;
    }
    return crossAxisEnd > childCenter;
  });
  if (!candidates.length) {
    return null;
  }
  if (candidates.length === 1) {
    return candidates[0].descriptor.id;
  }
  return getFurthestAway({
    pageBorderBox,
    draggable: draggable2,
    candidates
  });
}
var offsetRectByPosition = function offsetRectByPosition2(rect, point) {
  return getRect(offsetByPosition(rect, point));
};
var withDroppableScroll = function(droppable2, area) {
  var frame = droppable2.frame;
  if (!frame) {
    return area;
  }
  return offsetRectByPosition(area, frame.scroll.diff.value);
};
function getIsDisplaced(_ref) {
  var displaced = _ref.displaced, id = _ref.id;
  return Boolean(displaced.visible[id] || displaced.invisible[id]);
}
function atIndex(_ref) {
  var draggable2 = _ref.draggable, closest3 = _ref.closest, inHomeList = _ref.inHomeList;
  if (!closest3) {
    return null;
  }
  if (!inHomeList) {
    return closest3.descriptor.index;
  }
  if (closest3.descriptor.index > draggable2.descriptor.index) {
    return closest3.descriptor.index - 1;
  }
  return closest3.descriptor.index;
}
var getReorderImpact = function(_ref2) {
  var targetRect = _ref2.pageBorderBoxWithDroppableScroll, draggable2 = _ref2.draggable, destination = _ref2.destination, insideDestination = _ref2.insideDestination, last = _ref2.last, viewport2 = _ref2.viewport, afterCritical = _ref2.afterCritical;
  var axis = destination.axis;
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  var displacement = displacedBy.value;
  var targetStart = targetRect[axis.start];
  var targetEnd = targetRect[axis.end];
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var closest3 = find(withoutDragging, function(child) {
    var id = child.descriptor.id;
    var childCenter = child.page.borderBox.center[axis.line];
    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
    var isDisplaced = getIsDisplaced({
      displaced: last,
      id
    });
    if (didStartAfterCritical$1) {
      if (isDisplaced) {
        return targetEnd <= childCenter;
      }
      return targetStart < childCenter - displacement;
    }
    if (isDisplaced) {
      return targetEnd <= childCenter + displacement;
    }
    return targetStart < childCenter;
  });
  var newIndex = atIndex({
    draggable: draggable2,
    closest: closest3,
    inHomeList: isHomeOf(draggable2, destination)
  });
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport: viewport2,
    last,
    displacedBy,
    index: newIndex
  });
};
var combineThresholdDivisor = 4;
var getCombineImpact = function(_ref) {
  var draggable2 = _ref.draggable, targetRect = _ref.pageBorderBoxWithDroppableScroll, previousImpact = _ref.previousImpact, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var axis = destination.axis;
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  var displacement = displacedBy.value;
  var targetStart = targetRect[axis.start];
  var targetEnd = targetRect[axis.end];
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var combineWith = find(withoutDragging, function(child) {
    var id = child.descriptor.id;
    var childRect = child.page.borderBox;
    var childSize = childRect[axis.size];
    var threshold = childSize / combineThresholdDivisor;
    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
    var isDisplaced = getIsDisplaced({
      displaced: previousImpact.displaced,
      id
    });
    if (didStartAfterCritical$1) {
      if (isDisplaced) {
        return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
      }
      return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
    }
    if (isDisplaced) {
      return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
    }
    return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
  });
  if (!combineWith) {
    return null;
  }
  var impact = {
    displacedBy,
    displaced: previousImpact.displaced,
    at: {
      type: "COMBINE",
      combine: {
        draggableId: combineWith.descriptor.id,
        droppableId: destination.descriptor.id
      }
    }
  };
  return impact;
};
var getDragImpact = function(_ref) {
  var pageOffset = _ref.pageOffset, draggable2 = _ref.draggable, draggables = _ref.draggables, droppables = _ref.droppables, previousImpact = _ref.previousImpact, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
  var pageBorderBox = offsetRectByPosition(draggable2.page.borderBox, pageOffset);
  var destinationId = getDroppableOver$1({
    pageBorderBox,
    draggable: draggable2,
    droppables
  });
  if (!destinationId) {
    return noImpact;
  }
  var destination = droppables[destinationId];
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);
  return getCombineImpact({
    pageBorderBoxWithDroppableScroll,
    draggable: draggable2,
    previousImpact,
    destination,
    insideDestination,
    afterCritical
  }) || getReorderImpact({
    pageBorderBoxWithDroppableScroll,
    draggable: draggable2,
    destination,
    insideDestination,
    last: previousImpact.displaced,
    viewport: viewport2,
    afterCritical
  });
};
var patchDroppableMap = function(droppables, updated) {
  var _extends2;
  return _extends({}, droppables, (_extends2 = {}, _extends2[updated.descriptor.id] = updated, _extends2));
};
var clearUnusedPlaceholder = function clearUnusedPlaceholder2(_ref) {
  var previousImpact = _ref.previousImpact, impact = _ref.impact, droppables = _ref.droppables;
  var last = whatIsDraggedOver(previousImpact);
  var now2 = whatIsDraggedOver(impact);
  if (!last) {
    return droppables;
  }
  if (last === now2) {
    return droppables;
  }
  var lastDroppable = droppables[last];
  if (!lastDroppable.subject.withPlaceholder) {
    return droppables;
  }
  var updated = removePlaceholder(lastDroppable);
  return patchDroppableMap(droppables, updated);
};
var recomputePlaceholders = function(_ref2) {
  var draggable2 = _ref2.draggable, draggables = _ref2.draggables, droppables = _ref2.droppables, previousImpact = _ref2.previousImpact, impact = _ref2.impact;
  var cleaned = clearUnusedPlaceholder({
    previousImpact,
    impact,
    droppables
  });
  var isOver = whatIsDraggedOver(impact);
  if (!isOver) {
    return cleaned;
  }
  var droppable2 = droppables[isOver];
  if (isHomeOf(draggable2, droppable2)) {
    return cleaned;
  }
  if (droppable2.subject.withPlaceholder) {
    return cleaned;
  }
  var patched = addPlaceholder(droppable2, draggable2, draggables);
  return patchDroppableMap(cleaned, patched);
};
var update = function(_ref) {
  var state = _ref.state, forcedClientSelection = _ref.clientSelection, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport, forcedImpact = _ref.impact, scrollJumpRequest = _ref.scrollJumpRequest;
  var viewport2 = forcedViewport || state.viewport;
  var dimensions = forcedDimensions || state.dimensions;
  var clientSelection = forcedClientSelection || state.current.client.selection;
  var offset4 = subtract(clientSelection, state.initial.client.selection);
  var client = {
    offset: offset4,
    selection: clientSelection,
    borderBoxCenter: add(state.initial.client.borderBoxCenter, offset4)
  };
  var page = {
    selection: add(client.selection, viewport2.scroll.current),
    borderBoxCenter: add(client.borderBoxCenter, viewport2.scroll.current),
    offset: add(client.offset, viewport2.scroll.diff.value)
  };
  var current = {
    client,
    page
  };
  if (state.phase === "COLLECTING") {
    return _extends({
      phase: "COLLECTING"
    }, state, {
      dimensions,
      viewport: viewport2,
      current
    });
  }
  var draggable2 = dimensions.draggables[state.critical.draggable.id];
  var newImpact = forcedImpact || getDragImpact({
    pageOffset: page.offset,
    draggable: draggable2,
    draggables: dimensions.draggables,
    droppables: dimensions.droppables,
    previousImpact: state.impact,
    viewport: viewport2,
    afterCritical: state.afterCritical
  });
  var withUpdatedPlaceholders = recomputePlaceholders({
    draggable: draggable2,
    impact: newImpact,
    previousImpact: state.impact,
    draggables: dimensions.draggables,
    droppables: dimensions.droppables
  });
  var result = _extends({}, state, {
    current,
    dimensions: {
      draggables: dimensions.draggables,
      droppables: withUpdatedPlaceholders
    },
    impact: newImpact,
    viewport: viewport2,
    scrollJumpRequest: scrollJumpRequest || null,
    forceShouldAnimate: scrollJumpRequest ? false : null
  });
  return result;
};
function getDraggables$1(ids, draggables) {
  return ids.map(function(id) {
    return draggables[id];
  });
}
var recompute = function(_ref) {
  var impact = _ref.impact, viewport2 = _ref.viewport, draggables = _ref.draggables, destination = _ref.destination, forceShouldAnimate = _ref.forceShouldAnimate;
  var last = impact.displaced;
  var afterDragging = getDraggables$1(last.all, draggables);
  var displaced = getDisplacementGroups({
    afterDragging,
    destination,
    displacedBy: impact.displacedBy,
    viewport: viewport2.frame,
    forceShouldAnimate,
    last
  });
  return _extends({}, impact, {
    displaced
  });
};
var getClientBorderBoxCenter = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    draggables,
    droppable: droppable2,
    afterCritical
  });
  return getClientFromPageBorderBoxCenter({
    pageBorderBoxCenter,
    draggable: draggable2,
    viewport: viewport2
  });
};
var refreshSnap = function(_ref) {
  var state = _ref.state, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport;
  !(state.movementMode === "SNAP") ? true ? invariant2(false) : invariant2(false) : void 0;
  var needsVisibilityCheck = state.impact;
  var viewport2 = forcedViewport || state.viewport;
  var dimensions = forcedDimensions || state.dimensions;
  var draggables = dimensions.draggables, droppables = dimensions.droppables;
  var draggable2 = draggables[state.critical.draggable.id];
  var isOver = whatIsDraggedOver(needsVisibilityCheck);
  !isOver ? true ? invariant2(false, "Must be over a destination in SNAP movement mode") : invariant2(false) : void 0;
  var destination = droppables[isOver];
  var impact = recompute({
    impact: needsVisibilityCheck,
    viewport: viewport2,
    destination,
    draggables
  });
  var clientSelection = getClientBorderBoxCenter({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    viewport: viewport2,
    afterCritical: state.afterCritical
  });
  return update({
    impact,
    clientSelection,
    state,
    dimensions,
    viewport: viewport2
  });
};
var getHomeLocation = function(descriptor) {
  return {
    index: descriptor.index,
    droppableId: descriptor.droppableId
  };
};
var getLiftEffect = function(_ref) {
  var draggable2 = _ref.draggable, home2 = _ref.home, draggables = _ref.draggables, viewport2 = _ref.viewport;
  var displacedBy = getDisplacedBy(home2.axis, draggable2.displaceBy);
  var insideHome = getDraggablesInsideDroppable(home2.descriptor.id, draggables);
  var rawIndex = insideHome.indexOf(draggable2);
  !(rawIndex !== -1) ? true ? invariant2(false, "Expected draggable to be inside home list") : invariant2(false) : void 0;
  var afterDragging = insideHome.slice(rawIndex + 1);
  var effected = afterDragging.reduce(function(previous, item) {
    previous[item.descriptor.id] = true;
    return previous;
  }, {});
  var afterCritical = {
    inVirtualList: home2.descriptor.mode === "virtual",
    displacedBy,
    effected
  };
  var displaced = getDisplacementGroups({
    afterDragging,
    destination: home2,
    displacedBy,
    last: null,
    viewport: viewport2.frame,
    forceShouldAnimate: false
  });
  var impact = {
    displaced,
    displacedBy,
    at: {
      type: "REORDER",
      destination: getHomeLocation(draggable2.descriptor)
    }
  };
  return {
    impact,
    afterCritical
  };
};
var patchDimensionMap = function(dimensions, updated) {
  return {
    draggables: dimensions.draggables,
    droppables: patchDroppableMap(dimensions.droppables, updated)
  };
};
var start2 = function start3(key) {
  if (true) {
    {
      return;
    }
  }
};
var finish = function finish2(key) {
  if (true) {
    {
      return;
    }
  }
};
var offsetDraggable = function(_ref) {
  var draggable2 = _ref.draggable, offset$1 = _ref.offset, initialWindowScroll = _ref.initialWindowScroll;
  var client = offset2(draggable2.client, offset$1);
  var page = withScroll(client, initialWindowScroll);
  var moved = _extends({}, draggable2, {
    placeholder: _extends({}, draggable2.placeholder, {
      client
    }),
    client,
    page
  });
  return moved;
};
var getFrame = function(droppable2) {
  var frame = droppable2.frame;
  !frame ? true ? invariant2(false, "Expected Droppable to have a frame") : invariant2(false) : void 0;
  return frame;
};
var adjustAdditionsForScrollChanges = function(_ref) {
  var additions = _ref.additions, updatedDroppables = _ref.updatedDroppables, viewport2 = _ref.viewport;
  var windowScrollChange = viewport2.scroll.diff.value;
  return additions.map(function(draggable2) {
    var droppableId = draggable2.descriptor.droppableId;
    var modified = updatedDroppables[droppableId];
    var frame = getFrame(modified);
    var droppableScrollChange = frame.scroll.diff.value;
    var totalChange = add(windowScrollChange, droppableScrollChange);
    var moved = offsetDraggable({
      draggable: draggable2,
      offset: totalChange,
      initialWindowScroll: viewport2.scroll.initial
    });
    return moved;
  });
};
var publishWhileDraggingInVirtual = function(_ref) {
  var state = _ref.state, published = _ref.published;
  start2();
  var withScrollChange = published.modified.map(function(update2) {
    var existing = state.dimensions.droppables[update2.droppableId];
    var scrolled = scrollDroppable(existing, update2.scroll);
    return scrolled;
  });
  var droppables = _extends({}, state.dimensions.droppables, {}, toDroppableMap(withScrollChange));
  var updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
    additions: published.additions,
    updatedDroppables: droppables,
    viewport: state.viewport
  }));
  var draggables = _extends({}, state.dimensions.draggables, {}, updatedAdditions);
  published.removals.forEach(function(id) {
    delete draggables[id];
  });
  var dimensions = {
    droppables,
    draggables
  };
  var wasOverId = whatIsDraggedOver(state.impact);
  var wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
  var draggable2 = dimensions.draggables[state.critical.draggable.id];
  var home2 = dimensions.droppables[state.critical.droppable.id];
  var _getLiftEffect = getLiftEffect({
    draggable: draggable2,
    home: home2,
    draggables,
    viewport: state.viewport
  }), onLiftImpact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
  var previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;
  var impact = getDragImpact({
    pageOffset: state.current.page.offset,
    draggable: dimensions.draggables[state.critical.draggable.id],
    draggables: dimensions.draggables,
    droppables: dimensions.droppables,
    previousImpact,
    viewport: state.viewport,
    afterCritical
  });
  finish();
  var draggingState = _extends({
    phase: "DRAGGING"
  }, state, {
    phase: "DRAGGING",
    impact,
    onLiftImpact,
    dimensions,
    afterCritical,
    forceShouldAnimate: false
  });
  if (state.phase === "COLLECTING") {
    return draggingState;
  }
  var dropPending3 = _extends({
    phase: "DROP_PENDING"
  }, draggingState, {
    phase: "DROP_PENDING",
    reason: state.reason,
    isWaiting: false
  });
  return dropPending3;
};
var isSnapping = function isSnapping2(state) {
  return state.movementMode === "SNAP";
};
var postDroppableChange = function postDroppableChange2(state, updated, isEnabledChanging) {
  var dimensions = patchDimensionMap(state.dimensions, updated);
  if (!isSnapping(state) || isEnabledChanging) {
    return update({
      state,
      dimensions
    });
  }
  return refreshSnap({
    state,
    dimensions
  });
};
function removeScrollJumpRequest(state) {
  if (state.isDragging && state.movementMode === "SNAP") {
    return _extends({
      phase: "DRAGGING"
    }, state, {
      scrollJumpRequest: null
    });
  }
  return state;
}
var idle = {
  phase: "IDLE",
  completed: null,
  shouldFlush: false
};
var reducer = function(state, action) {
  if (state === void 0) {
    state = idle;
  }
  if (action.type === "FLUSH") {
    return _extends({}, idle, {
      shouldFlush: true
    });
  }
  if (action.type === "INITIAL_PUBLISH") {
    !(state.phase === "IDLE") ? true ? invariant2(false, "INITIAL_PUBLISH must come after a IDLE phase") : invariant2(false) : void 0;
    var _action$payload = action.payload, critical = _action$payload.critical, clientSelection = _action$payload.clientSelection, viewport2 = _action$payload.viewport, dimensions = _action$payload.dimensions, movementMode = _action$payload.movementMode;
    var draggable2 = dimensions.draggables[critical.draggable.id];
    var home2 = dimensions.droppables[critical.droppable.id];
    var client = {
      selection: clientSelection,
      borderBoxCenter: draggable2.client.borderBox.center,
      offset: origin
    };
    var initial = {
      client,
      page: {
        selection: add(client.selection, viewport2.scroll.initial),
        borderBoxCenter: add(client.selection, viewport2.scroll.initial),
        offset: add(client.selection, viewport2.scroll.diff.value)
      }
    };
    var isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(function(item) {
      return !item.isFixedOnPage;
    });
    var _getLiftEffect = getLiftEffect({
      draggable: draggable2,
      home: home2,
      draggables: dimensions.draggables,
      viewport: viewport2
    }), impact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
    var result = {
      phase: "DRAGGING",
      isDragging: true,
      critical,
      movementMode,
      dimensions,
      initial,
      current: initial,
      isWindowScrollAllowed,
      impact,
      afterCritical,
      onLiftImpact: impact,
      viewport: viewport2,
      scrollJumpRequest: null,
      forceShouldAnimate: null
    };
    return result;
  }
  if (action.type === "COLLECTION_STARTING") {
    if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
      return state;
    }
    !(state.phase === "DRAGGING") ? true ? invariant2(false, "Collection cannot start from phase " + state.phase) : invariant2(false) : void 0;
    var _result = _extends({
      phase: "COLLECTING"
    }, state, {
      phase: "COLLECTING"
    });
    return _result;
  }
  if (action.type === "PUBLISH_WHILE_DRAGGING") {
    !(state.phase === "COLLECTING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Unexpected " + action.type + " received in phase " + state.phase) : invariant2(false) : void 0;
    return publishWhileDraggingInVirtual({
      state,
      published: action.payload
    });
  }
  if (action.type === "MOVE") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, action.type + " not permitted in phase " + state.phase) : invariant2(false) : void 0;
    var _clientSelection = action.payload.client;
    if (isEqual3(_clientSelection, state.current.client.selection)) {
      return state;
    }
    return update({
      state,
      clientSelection: _clientSelection,
      impact: isSnapping(state) ? state.impact : null
    });
  }
  if (action.type === "UPDATE_DROPPABLE_SCROLL") {
    if (state.phase === "DROP_PENDING") {
      return removeScrollJumpRequest(state);
    }
    if (state.phase === "COLLECTING") {
      return removeScrollJumpRequest(state);
    }
    !isMovementAllowed(state) ? true ? invariant2(false, action.type + " not permitted in phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload2 = action.payload, id = _action$payload2.id, newScroll = _action$payload2.newScroll;
    var target = state.dimensions.droppables[id];
    if (!target) {
      return state;
    }
    var scrolled = scrollDroppable(target, newScroll);
    return postDroppableChange(state, scrolled, false);
  }
  if (action.type === "UPDATE_DROPPABLE_IS_ENABLED") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Attempting to move in an unsupported phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload3 = action.payload, _id = _action$payload3.id, isEnabled = _action$payload3.isEnabled;
    var _target = state.dimensions.droppables[_id];
    !_target ? true ? invariant2(false, "Cannot find Droppable[id: " + _id + "] to toggle its enabled state") : invariant2(false) : void 0;
    !(_target.isEnabled !== isEnabled) ? true ? invariant2(false, "Trying to set droppable isEnabled to " + String(isEnabled) + "\n      but it is already " + String(_target.isEnabled)) : invariant2(false) : void 0;
    var updated = _extends({}, _target, {
      isEnabled
    });
    return postDroppableChange(state, updated, true);
  }
  if (action.type === "UPDATE_DROPPABLE_IS_COMBINE_ENABLED") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Attempting to move in an unsupported phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload4 = action.payload, _id2 = _action$payload4.id, isCombineEnabled = _action$payload4.isCombineEnabled;
    var _target2 = state.dimensions.droppables[_id2];
    !_target2 ? true ? invariant2(false, "Cannot find Droppable[id: " + _id2 + "] to toggle its isCombineEnabled state") : invariant2(false) : void 0;
    !(_target2.isCombineEnabled !== isCombineEnabled) ? true ? invariant2(false, "Trying to set droppable isCombineEnabled to " + String(isCombineEnabled) + "\n      but it is already " + String(_target2.isCombineEnabled)) : invariant2(false) : void 0;
    var _updated = _extends({}, _target2, {
      isCombineEnabled
    });
    return postDroppableChange(state, _updated, true);
  }
  if (action.type === "MOVE_BY_WINDOW_SCROLL") {
    if (state.phase === "DROP_PENDING" || state.phase === "DROP_ANIMATING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Cannot move by window in phase " + state.phase) : invariant2(false) : void 0;
    !state.isWindowScrollAllowed ? true ? invariant2(false, "Window scrolling is currently not supported for fixed lists") : invariant2(false) : void 0;
    var _newScroll = action.payload.newScroll;
    if (isEqual3(state.viewport.scroll.current, _newScroll)) {
      return removeScrollJumpRequest(state);
    }
    var _viewport = scrollViewport(state.viewport, _newScroll);
    if (isSnapping(state)) {
      return refreshSnap({
        state,
        viewport: _viewport
      });
    }
    return update({
      state,
      viewport: _viewport
    });
  }
  if (action.type === "UPDATE_VIEWPORT_MAX_SCROLL") {
    if (!isMovementAllowed(state)) {
      return state;
    }
    var maxScroll = action.payload.maxScroll;
    if (isEqual3(maxScroll, state.viewport.scroll.max)) {
      return state;
    }
    var withMaxScroll3 = _extends({}, state.viewport, {
      scroll: _extends({}, state.viewport.scroll, {
        max: maxScroll
      })
    });
    return _extends({
      phase: "DRAGGING"
    }, state, {
      viewport: withMaxScroll3
    });
  }
  if (action.type === "MOVE_UP" || action.type === "MOVE_DOWN" || action.type === "MOVE_LEFT" || action.type === "MOVE_RIGHT") {
    if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
      return state;
    }
    !(state.phase === "DRAGGING") ? true ? invariant2(false, action.type + " received while not in DRAGGING phase") : invariant2(false) : void 0;
    var _result2 = moveInDirection({
      state,
      type: action.type
    });
    if (!_result2) {
      return state;
    }
    return update({
      state,
      impact: _result2.impact,
      clientSelection: _result2.clientSelection,
      scrollJumpRequest: _result2.scrollJumpRequest
    });
  }
  if (action.type === "DROP_PENDING") {
    var reason = action.payload.reason;
    !(state.phase === "COLLECTING") ? true ? invariant2(false, "Can only move into the DROP_PENDING phase from the COLLECTING phase") : invariant2(false) : void 0;
    var newState = _extends({
      phase: "DROP_PENDING"
    }, state, {
      phase: "DROP_PENDING",
      isWaiting: true,
      reason
    });
    return newState;
  }
  if (action.type === "DROP_ANIMATE") {
    var _action$payload5 = action.payload, completed = _action$payload5.completed, dropDuration = _action$payload5.dropDuration, newHomeClientOffset = _action$payload5.newHomeClientOffset;
    !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Cannot animate drop from phase " + state.phase) : invariant2(false) : void 0;
    var _result3 = {
      phase: "DROP_ANIMATING",
      completed,
      dropDuration,
      newHomeClientOffset,
      dimensions: state.dimensions
    };
    return _result3;
  }
  if (action.type === "DROP_COMPLETE") {
    var _completed = action.payload.completed;
    return {
      phase: "IDLE",
      completed: _completed,
      shouldFlush: false
    };
  }
  return state;
};
var beforeInitialCapture = function beforeInitialCapture2(args) {
  return {
    type: "BEFORE_INITIAL_CAPTURE",
    payload: args
  };
};
var lift = function lift2(args) {
  return {
    type: "LIFT",
    payload: args
  };
};
var initialPublish = function initialPublish2(args) {
  return {
    type: "INITIAL_PUBLISH",
    payload: args
  };
};
var publishWhileDragging = function publishWhileDragging2(args) {
  return {
    type: "PUBLISH_WHILE_DRAGGING",
    payload: args
  };
};
var collectionStarting = function collectionStarting2() {
  return {
    type: "COLLECTION_STARTING",
    payload: null
  };
};
var updateDroppableScroll = function updateDroppableScroll2(args) {
  return {
    type: "UPDATE_DROPPABLE_SCROLL",
    payload: args
  };
};
var updateDroppableIsEnabled = function updateDroppableIsEnabled2(args) {
  return {
    type: "UPDATE_DROPPABLE_IS_ENABLED",
    payload: args
  };
};
var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled2(args) {
  return {
    type: "UPDATE_DROPPABLE_IS_COMBINE_ENABLED",
    payload: args
  };
};
var move = function move2(args) {
  return {
    type: "MOVE",
    payload: args
  };
};
var moveByWindowScroll = function moveByWindowScroll2(args) {
  return {
    type: "MOVE_BY_WINDOW_SCROLL",
    payload: args
  };
};
var updateViewportMaxScroll = function updateViewportMaxScroll2(args) {
  return {
    type: "UPDATE_VIEWPORT_MAX_SCROLL",
    payload: args
  };
};
var moveUp = function moveUp2() {
  return {
    type: "MOVE_UP",
    payload: null
  };
};
var moveDown = function moveDown2() {
  return {
    type: "MOVE_DOWN",
    payload: null
  };
};
var moveRight = function moveRight2() {
  return {
    type: "MOVE_RIGHT",
    payload: null
  };
};
var moveLeft = function moveLeft2() {
  return {
    type: "MOVE_LEFT",
    payload: null
  };
};
var flush = function flush2() {
  return {
    type: "FLUSH",
    payload: null
  };
};
var animateDrop = function animateDrop2(args) {
  return {
    type: "DROP_ANIMATE",
    payload: args
  };
};
var completeDrop = function completeDrop2(args) {
  return {
    type: "DROP_COMPLETE",
    payload: args
  };
};
var drop = function drop2(args) {
  return {
    type: "DROP",
    payload: args
  };
};
var dropPending = function dropPending2(args) {
  return {
    type: "DROP_PENDING",
    payload: args
  };
};
var dropAnimationFinished = function dropAnimationFinished2() {
  return {
    type: "DROP_ANIMATION_FINISHED",
    payload: null
  };
};
function checkIndexes(insideDestination) {
  if (insideDestination.length <= 1) {
    return;
  }
  var indexes = insideDestination.map(function(d) {
    return d.descriptor.index;
  });
  var errors = {};
  for (var i = 1; i < indexes.length; i++) {
    var current = indexes[i];
    var previous = indexes[i - 1];
    if (current !== previous + 1) {
      errors[current] = true;
    }
  }
  if (!Object.keys(errors).length) {
    return;
  }
  var formatted = indexes.map(function(index) {
    var hasError = Boolean(errors[index]);
    return hasError ? "[🔥" + index + "]" : "" + index;
  }).join(", ");
  true ? warning3("\n    Detected non-consecutive <Draggable /> indexes.\n\n    (This can cause unexpected bugs)\n\n    " + formatted + "\n  ") : void 0;
}
function validateDimensions(critical, dimensions) {
  if (true) {
    var insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);
    checkIndexes(insideDestination);
  }
}
var lift$1 = function(marshal) {
  return function(_ref) {
    var getState = _ref.getState, dispatch = _ref.dispatch;
    return function(next) {
      return function(action) {
        if (action.type !== "LIFT") {
          next(action);
          return;
        }
        var _action$payload = action.payload, id = _action$payload.id, clientSelection = _action$payload.clientSelection, movementMode = _action$payload.movementMode;
        var initial = getState();
        if (initial.phase === "DROP_ANIMATING") {
          dispatch(completeDrop({
            completed: initial.completed
          }));
        }
        !(getState().phase === "IDLE") ? true ? invariant2(false, "Unexpected phase to start a drag") : invariant2(false) : void 0;
        dispatch(flush());
        dispatch(beforeInitialCapture({
          draggableId: id,
          movementMode
        }));
        var scrollOptions = {
          shouldPublishImmediately: movementMode === "SNAP"
        };
        var request = {
          draggableId: id,
          scrollOptions
        };
        var _marshal$startPublish = marshal.startPublishing(request), critical = _marshal$startPublish.critical, dimensions = _marshal$startPublish.dimensions, viewport2 = _marshal$startPublish.viewport;
        validateDimensions(critical, dimensions);
        dispatch(initialPublish({
          critical,
          dimensions,
          clientSelection,
          movementMode,
          viewport: viewport2
        }));
      };
    };
  };
};
var style = function(marshal) {
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "INITIAL_PUBLISH") {
          marshal.dragging();
        }
        if (action.type === "DROP_ANIMATE") {
          marshal.dropping(action.payload.completed.result.reason);
        }
        if (action.type === "FLUSH" || action.type === "DROP_COMPLETE") {
          marshal.resting();
        }
        next(action);
      };
    };
  };
};
var curves = {
  outOfTheWay: "cubic-bezier(0.2, 0, 0, 1)",
  drop: "cubic-bezier(.2,1,.1,1)"
};
var combine = {
  opacity: {
    drop: 0,
    combining: 0.7
  },
  scale: {
    drop: 0.75
  }
};
var timings = {
  outOfTheWay: 0.2,
  minDropTime: 0.33,
  maxDropTime: 0.55
};
var outOfTheWayTiming = timings.outOfTheWay + "s " + curves.outOfTheWay;
var transitions = {
  fluid: "opacity " + outOfTheWayTiming,
  snap: "transform " + outOfTheWayTiming + ", opacity " + outOfTheWayTiming,
  drop: function drop3(duration) {
    var timing = duration + "s " + curves.drop;
    return "transform " + timing + ", opacity " + timing;
  },
  outOfTheWay: "transform " + outOfTheWayTiming,
  placeholder: "height " + outOfTheWayTiming + ", width " + outOfTheWayTiming + ", margin " + outOfTheWayTiming
};
var moveTo = function moveTo2(offset4) {
  return isEqual3(offset4, origin) ? null : "translate(" + offset4.x + "px, " + offset4.y + "px)";
};
var transforms = {
  moveTo,
  drop: function drop4(offset4, isCombining) {
    var translate = moveTo(offset4);
    if (!translate) {
      return null;
    }
    if (!isCombining) {
      return translate;
    }
    return translate + " scale(" + combine.scale.drop + ")";
  }
};
var minDropTime = timings.minDropTime;
var maxDropTime = timings.maxDropTime;
var dropTimeRange = maxDropTime - minDropTime;
var maxDropTimeAtDistance = 1500;
var cancelDropModifier = 0.6;
var getDropDuration = function(_ref) {
  var current = _ref.current, destination = _ref.destination, reason = _ref.reason;
  var distance$1 = distance(current, destination);
  if (distance$1 <= 0) {
    return minDropTime;
  }
  if (distance$1 >= maxDropTimeAtDistance) {
    return maxDropTime;
  }
  var percentage = distance$1 / maxDropTimeAtDistance;
  var duration = minDropTime + dropTimeRange * percentage;
  var withDuration = reason === "CANCEL" ? duration * cancelDropModifier : duration;
  return Number(withDuration.toFixed(2));
};
var getNewHomeClientOffset = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, dimensions = _ref.dimensions, viewport2 = _ref.viewport, afterCritical = _ref.afterCritical;
  var draggables = dimensions.draggables, droppables = dimensions.droppables;
  var droppableId = whatIsDraggedOver(impact);
  var destination = droppableId ? droppables[droppableId] : null;
  var home2 = droppables[draggable2.descriptor.droppableId];
  var newClientCenter = getClientBorderBoxCenter({
    impact,
    draggable: draggable2,
    draggables,
    afterCritical,
    droppable: destination || home2,
    viewport: viewport2
  });
  var offset4 = subtract(newClientCenter, draggable2.client.borderBox.center);
  return offset4;
};
var getDropImpact = function(_ref) {
  var draggables = _ref.draggables, reason = _ref.reason, lastImpact = _ref.lastImpact, home2 = _ref.home, viewport2 = _ref.viewport, onLiftImpact = _ref.onLiftImpact;
  if (!lastImpact.at || reason !== "DROP") {
    var recomputedHomeImpact = recompute({
      draggables,
      impact: onLiftImpact,
      destination: home2,
      viewport: viewport2,
      forceShouldAnimate: true
    });
    return {
      impact: recomputedHomeImpact,
      didDropInsideDroppable: false
    };
  }
  if (lastImpact.at.type === "REORDER") {
    return {
      impact: lastImpact,
      didDropInsideDroppable: true
    };
  }
  var withoutMovement = _extends({}, lastImpact, {
    displaced: emptyGroups
  });
  return {
    impact: withoutMovement,
    didDropInsideDroppable: true
  };
};
var drop$1 = function(_ref) {
  var getState = _ref.getState, dispatch = _ref.dispatch;
  return function(next) {
    return function(action) {
      if (action.type !== "DROP") {
        next(action);
        return;
      }
      var state = getState();
      var reason = action.payload.reason;
      if (state.phase === "COLLECTING") {
        dispatch(dropPending({
          reason
        }));
        return;
      }
      if (state.phase === "IDLE") {
        return;
      }
      var isWaitingForDrop = state.phase === "DROP_PENDING" && state.isWaiting;
      !!isWaitingForDrop ? true ? invariant2(false, "A DROP action occurred while DROP_PENDING and still waiting") : invariant2(false) : void 0;
      !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Cannot drop in phase: " + state.phase) : invariant2(false) : void 0;
      var critical = state.critical;
      var dimensions = state.dimensions;
      var draggable2 = dimensions.draggables[state.critical.draggable.id];
      var _getDropImpact = getDropImpact({
        reason,
        lastImpact: state.impact,
        afterCritical: state.afterCritical,
        onLiftImpact: state.onLiftImpact,
        home: state.dimensions.droppables[state.critical.droppable.id],
        viewport: state.viewport,
        draggables: state.dimensions.draggables
      }), impact = _getDropImpact.impact, didDropInsideDroppable = _getDropImpact.didDropInsideDroppable;
      var destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
      var combine2 = didDropInsideDroppable ? tryGetCombine(impact) : null;
      var source = {
        index: critical.draggable.index,
        droppableId: critical.droppable.id
      };
      var result = {
        draggableId: draggable2.descriptor.id,
        type: draggable2.descriptor.type,
        source,
        reason,
        mode: state.movementMode,
        destination,
        combine: combine2
      };
      var newHomeClientOffset = getNewHomeClientOffset({
        impact,
        draggable: draggable2,
        dimensions,
        viewport: state.viewport,
        afterCritical: state.afterCritical
      });
      var completed = {
        critical: state.critical,
        afterCritical: state.afterCritical,
        result,
        impact
      };
      var isAnimationRequired = !isEqual3(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);
      if (!isAnimationRequired) {
        dispatch(completeDrop({
          completed
        }));
        return;
      }
      var dropDuration = getDropDuration({
        current: state.current.client.offset,
        destination: newHomeClientOffset,
        reason
      });
      var args = {
        newHomeClientOffset,
        dropDuration,
        completed
      };
      dispatch(animateDrop(args));
    };
  };
};
var getWindowScroll4 = function() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};
function getWindowScrollBinding(update2) {
  return {
    eventName: "scroll",
    options: {
      passive: true,
      capture: false
    },
    fn: function fn2(event) {
      if (event.target !== window && event.target !== window.document) {
        return;
      }
      update2();
    }
  };
}
function getScrollListener(_ref) {
  var onWindowScroll = _ref.onWindowScroll;
  function updateScroll() {
    onWindowScroll(getWindowScroll4());
  }
  var scheduled = raf_schd_esm_default(updateScroll);
  var binding = getWindowScrollBinding(scheduled);
  var unbind = noop2;
  function isActive() {
    return unbind !== noop2;
  }
  function start4() {
    !!isActive() ? true ? invariant2(false, "Cannot start scroll listener when already active") : invariant2(false) : void 0;
    unbind = bindEvents(window, [binding]);
  }
  function stop() {
    !isActive() ? true ? invariant2(false, "Cannot stop scroll listener when not active") : invariant2(false) : void 0;
    scheduled.cancel();
    unbind();
    unbind = noop2;
  }
  return {
    start: start4,
    stop,
    isActive
  };
}
var shouldEnd = function shouldEnd2(action) {
  return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
};
var scrollListener = function(store) {
  var listener = getScrollListener({
    onWindowScroll: function onWindowScroll(newScroll) {
      store.dispatch(moveByWindowScroll({
        newScroll
      }));
    }
  });
  return function(next) {
    return function(action) {
      if (!listener.isActive() && action.type === "INITIAL_PUBLISH") {
        listener.start();
      }
      if (listener.isActive() && shouldEnd(action)) {
        listener.stop();
      }
      next(action);
    };
  };
};
var getExpiringAnnounce = function(announce) {
  var wasCalled = false;
  var isExpired = false;
  var timeoutId = setTimeout(function() {
    isExpired = true;
  });
  var result = function result2(message) {
    if (wasCalled) {
      true ? warning3("Announcement already made. Not making a second announcement") : void 0;
      return;
    }
    if (isExpired) {
      true ? warning3("\n        Announcements cannot be made asynchronously.\n        Default message has already been announced.\n      ") : void 0;
      return;
    }
    wasCalled = true;
    announce(message);
    clearTimeout(timeoutId);
  };
  result.wasCalled = function() {
    return wasCalled;
  };
  return result;
};
var getAsyncMarshal = function() {
  var entries = [];
  var execute3 = function execute4(timerId) {
    var index = findIndex(entries, function(item) {
      return item.timerId === timerId;
    });
    !(index !== -1) ? true ? invariant2(false, "Could not find timer") : invariant2(false) : void 0;
    var _entries$splice = entries.splice(index, 1), entry = _entries$splice[0];
    entry.callback();
  };
  var add3 = function add4(fn2) {
    var timerId = setTimeout(function() {
      return execute3(timerId);
    });
    var entry = {
      timerId,
      callback: fn2
    };
    entries.push(entry);
  };
  var flush3 = function flush4() {
    if (!entries.length) {
      return;
    }
    var shallow = [].concat(entries);
    entries.length = 0;
    shallow.forEach(function(entry) {
      clearTimeout(entry.timerId);
      entry.callback();
    });
  };
  return {
    add: add3,
    flush: flush3
  };
};
var areLocationsEqual = function areLocationsEqual2(first, second) {
  if (first == null && second == null) {
    return true;
  }
  if (first == null || second == null) {
    return false;
  }
  return first.droppableId === second.droppableId && first.index === second.index;
};
var isCombineEqual = function isCombineEqual2(first, second) {
  if (first == null && second == null) {
    return true;
  }
  if (first == null || second == null) {
    return false;
  }
  return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
};
var isCriticalEqual = function isCriticalEqual2(first, second) {
  if (first === second) {
    return true;
  }
  var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
  var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
  return isDraggableEqual && isDroppableEqual;
};
var withTimings = function withTimings2(key, fn2) {
  start2();
  fn2();
  finish();
};
var getDragStart = function getDragStart2(critical, mode) {
  return {
    draggableId: critical.draggable.id,
    type: critical.droppable.type,
    source: {
      droppableId: critical.droppable.id,
      index: critical.draggable.index
    },
    mode
  };
};
var execute = function execute2(responder, data, announce, getDefaultMessage) {
  if (!responder) {
    announce(getDefaultMessage(data));
    return;
  }
  var willExpire = getExpiringAnnounce(announce);
  var provided = {
    announce: willExpire
  };
  responder(data, provided);
  if (!willExpire.wasCalled()) {
    announce(getDefaultMessage(data));
  }
};
var getPublisher = function(getResponders, announce) {
  var asyncMarshal = getAsyncMarshal();
  var dragging = null;
  var beforeCapture = function beforeCapture2(draggableId, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeCapture as a drag start has already been published") : invariant2(false) : void 0;
    withTimings("onBeforeCapture", function() {
      var fn2 = getResponders().onBeforeCapture;
      if (fn2) {
        var before = {
          draggableId,
          mode
        };
        fn2(before);
      }
    });
  };
  var beforeStart = function beforeStart2(critical, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant2(false) : void 0;
    withTimings("onBeforeDragStart", function() {
      var fn2 = getResponders().onBeforeDragStart;
      if (fn2) {
        fn2(getDragStart(critical, mode));
      }
    });
  };
  var start4 = function start5(critical, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant2(false) : void 0;
    var data = getDragStart(critical, mode);
    dragging = {
      mode,
      lastCritical: critical,
      lastLocation: data.source,
      lastCombine: null
    };
    asyncMarshal.add(function() {
      withTimings("onDragStart", function() {
        return execute(getResponders().onDragStart, data, announce, preset.onDragStart);
      });
    });
  };
  var update2 = function update3(critical, impact) {
    var location = tryGetDestination(impact);
    var combine2 = tryGetCombine(impact);
    !dragging ? true ? invariant2(false, "Cannot fire onDragMove when onDragStart has not been called") : invariant2(false) : void 0;
    var hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);
    if (hasCriticalChanged) {
      dragging.lastCritical = critical;
    }
    var hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);
    if (hasLocationChanged) {
      dragging.lastLocation = location;
    }
    var hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine2);
    if (hasGroupingChanged) {
      dragging.lastCombine = combine2;
    }
    if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
      return;
    }
    var data = _extends({}, getDragStart(critical, dragging.mode), {
      combine: combine2,
      destination: location
    });
    asyncMarshal.add(function() {
      withTimings("onDragUpdate", function() {
        return execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate);
      });
    });
  };
  var flush3 = function flush4() {
    !dragging ? true ? invariant2(false, "Can only flush responders while dragging") : invariant2(false) : void 0;
    asyncMarshal.flush();
  };
  var drop5 = function drop6(result) {
    !dragging ? true ? invariant2(false, "Cannot fire onDragEnd when there is no matching onDragStart") : invariant2(false) : void 0;
    dragging = null;
    withTimings("onDragEnd", function() {
      return execute(getResponders().onDragEnd, result, announce, preset.onDragEnd);
    });
  };
  var abort = function abort2() {
    if (!dragging) {
      return;
    }
    var result = _extends({}, getDragStart(dragging.lastCritical, dragging.mode), {
      combine: null,
      destination: null,
      reason: "CANCEL"
    });
    drop5(result);
  };
  return {
    beforeCapture,
    beforeStart,
    start: start4,
    update: update2,
    flush: flush3,
    drop: drop5,
    abort
  };
};
var responders = function(getResponders, announce) {
  var publisher = getPublisher(getResponders, announce);
  return function(store) {
    return function(next) {
      return function(action) {
        if (action.type === "BEFORE_INITIAL_CAPTURE") {
          publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
          return;
        }
        if (action.type === "INITIAL_PUBLISH") {
          var critical = action.payload.critical;
          publisher.beforeStart(critical, action.payload.movementMode);
          next(action);
          publisher.start(critical, action.payload.movementMode);
          return;
        }
        if (action.type === "DROP_COMPLETE") {
          var result = action.payload.completed.result;
          publisher.flush();
          next(action);
          publisher.drop(result);
          return;
        }
        next(action);
        if (action.type === "FLUSH") {
          publisher.abort();
          return;
        }
        var state = store.getState();
        if (state.phase === "DRAGGING") {
          publisher.update(state.critical, state.impact);
        }
      };
    };
  };
};
var dropAnimationFinish = function(store) {
  return function(next) {
    return function(action) {
      if (action.type !== "DROP_ANIMATION_FINISHED") {
        next(action);
        return;
      }
      var state = store.getState();
      !(state.phase === "DROP_ANIMATING") ? true ? invariant2(false, "Cannot finish a drop animating when no drop is occurring") : invariant2(false) : void 0;
      store.dispatch(completeDrop({
        completed: state.completed
      }));
    };
  };
};
var dropAnimationFlushOnScroll = function(store) {
  var unbind = null;
  var frameId = null;
  function clear() {
    if (frameId) {
      cancelAnimationFrame(frameId);
      frameId = null;
    }
    if (unbind) {
      unbind();
      unbind = null;
    }
  }
  return function(next) {
    return function(action) {
      if (action.type === "FLUSH" || action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATION_FINISHED") {
        clear();
      }
      next(action);
      if (action.type !== "DROP_ANIMATE") {
        return;
      }
      var binding = {
        eventName: "scroll",
        options: {
          capture: true,
          passive: false,
          once: true
        },
        fn: function flushDropAnimation() {
          var state = store.getState();
          if (state.phase === "DROP_ANIMATING") {
            store.dispatch(dropAnimationFinished());
          }
        }
      };
      frameId = requestAnimationFrame(function() {
        frameId = null;
        unbind = bindEvents(window, [binding]);
      });
    };
  };
};
var dimensionMarshalStopper = function(marshal) {
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "DROP_COMPLETE" || action.type === "FLUSH" || action.type === "DROP_ANIMATE") {
          marshal.stopPublishing();
        }
        next(action);
      };
    };
  };
};
var focus = function(marshal) {
  var isWatching = false;
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "INITIAL_PUBLISH") {
          isWatching = true;
          marshal.tryRecordFocus(action.payload.critical.draggable.id);
          next(action);
          marshal.tryRestoreFocusRecorded();
          return;
        }
        next(action);
        if (!isWatching) {
          return;
        }
        if (action.type === "FLUSH") {
          isWatching = false;
          marshal.tryRestoreFocusRecorded();
          return;
        }
        if (action.type === "DROP_COMPLETE") {
          isWatching = false;
          var result = action.payload.completed.result;
          if (result.combine) {
            marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
          }
          marshal.tryRestoreFocusRecorded();
        }
      };
    };
  };
};
var shouldStop = function shouldStop2(action) {
  return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
};
var autoScroll = function(autoScroller) {
  return function(store) {
    return function(next) {
      return function(action) {
        if (shouldStop(action)) {
          autoScroller.stop();
          next(action);
          return;
        }
        if (action.type === "INITIAL_PUBLISH") {
          next(action);
          var state = store.getState();
          !(state.phase === "DRAGGING") ? true ? invariant2(false, "Expected phase to be DRAGGING after INITIAL_PUBLISH") : invariant2(false) : void 0;
          autoScroller.start(state);
          return;
        }
        next(action);
        autoScroller.scroll(store.getState());
      };
    };
  };
};
var pendingDrop = function(store) {
  return function(next) {
    return function(action) {
      next(action);
      if (action.type !== "PUBLISH_WHILE_DRAGGING") {
        return;
      }
      var postActionState = store.getState();
      if (postActionState.phase !== "DROP_PENDING") {
        return;
      }
      if (postActionState.isWaiting) {
        return;
      }
      store.dispatch(drop({
        reason: postActionState.reason
      }));
    };
  };
};
var composeEnhancers = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
  name: "react-beautiful-dnd"
}) : compose;
var createStore2 = function(_ref) {
  var dimensionMarshal = _ref.dimensionMarshal, focusMarshal = _ref.focusMarshal, styleMarshal = _ref.styleMarshal, getResponders = _ref.getResponders, announce = _ref.announce, autoScroller = _ref.autoScroller;
  return createStore(reducer, composeEnhancers(applyMiddleware(style(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift$1(dimensionMarshal), drop$1, dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));
};
var clean$1 = function clean3() {
  return {
    additions: {},
    removals: {},
    modified: {}
  };
};
function createPublisher(_ref) {
  var registry = _ref.registry, callbacks = _ref.callbacks;
  var staging = clean$1();
  var frameId = null;
  var collect = function collect2() {
    if (frameId) {
      return;
    }
    callbacks.collectionStarting();
    frameId = requestAnimationFrame(function() {
      frameId = null;
      start2();
      var _staging = staging, additions = _staging.additions, removals = _staging.removals, modified = _staging.modified;
      var added = Object.keys(additions).map(function(id) {
        return registry.draggable.getById(id).getDimension(origin);
      }).sort(function(a, b84) {
        return a.descriptor.index - b84.descriptor.index;
      });
      var updated = Object.keys(modified).map(function(id) {
        var entry = registry.droppable.getById(id);
        var scroll3 = entry.callbacks.getScrollWhileDragging();
        return {
          droppableId: id,
          scroll: scroll3
        };
      });
      var result = {
        additions: added,
        removals: Object.keys(removals),
        modified: updated
      };
      staging = clean$1();
      finish();
      callbacks.publish(result);
    });
  };
  var add3 = function add4(entry) {
    var id = entry.descriptor.id;
    staging.additions[id] = entry;
    staging.modified[entry.descriptor.droppableId] = true;
    if (staging.removals[id]) {
      delete staging.removals[id];
    }
    collect();
  };
  var remove = function remove2(entry) {
    var descriptor = entry.descriptor;
    staging.removals[descriptor.id] = true;
    staging.modified[descriptor.droppableId] = true;
    if (staging.additions[descriptor.id]) {
      delete staging.additions[descriptor.id];
    }
    collect();
  };
  var stop = function stop2() {
    if (!frameId) {
      return;
    }
    cancelAnimationFrame(frameId);
    frameId = null;
    staging = clean$1();
  };
  return {
    add: add3,
    remove,
    stop
  };
}
var getMaxScroll = function(_ref) {
  var scrollHeight = _ref.scrollHeight, scrollWidth = _ref.scrollWidth, height = _ref.height, width = _ref.width;
  var maxScroll = subtract({
    x: scrollWidth,
    y: scrollHeight
  }, {
    x: width,
    y: height
  });
  var adjustedMaxScroll = {
    x: Math.max(0, maxScroll.x),
    y: Math.max(0, maxScroll.y)
  };
  return adjustedMaxScroll;
};
var getDocumentElement2 = function() {
  var doc = document.documentElement;
  !doc ? true ? invariant2(false, "Cannot find document.documentElement") : invariant2(false) : void 0;
  return doc;
};
var getMaxWindowScroll = function() {
  var doc = getDocumentElement2();
  var maxScroll = getMaxScroll({
    scrollHeight: doc.scrollHeight,
    scrollWidth: doc.scrollWidth,
    width: doc.clientWidth,
    height: doc.clientHeight
  });
  return maxScroll;
};
var getViewport = function() {
  var scroll3 = getWindowScroll4();
  var maxScroll = getMaxWindowScroll();
  var top2 = scroll3.y;
  var left2 = scroll3.x;
  var doc = getDocumentElement2();
  var width = doc.clientWidth;
  var height = doc.clientHeight;
  var right2 = left2 + width;
  var bottom2 = top2 + height;
  var frame = getRect({
    top: top2,
    left: left2,
    right: right2,
    bottom: bottom2
  });
  var viewport2 = {
    frame,
    scroll: {
      initial: scroll3,
      current: scroll3,
      max: maxScroll,
      diff: {
        value: origin,
        displacement: origin
      }
    }
  };
  return viewport2;
};
var getInitialPublish = function(_ref) {
  var critical = _ref.critical, scrollOptions = _ref.scrollOptions, registry = _ref.registry;
  start2();
  var viewport2 = getViewport();
  var windowScroll = viewport2.scroll.current;
  var home2 = critical.droppable;
  var droppables = registry.droppable.getAllByType(home2.type).map(function(entry) {
    return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
  });
  var draggables = registry.draggable.getAllByType(critical.draggable.type).map(function(entry) {
    return entry.getDimension(windowScroll);
  });
  var dimensions = {
    draggables: toDraggableMap(draggables),
    droppables: toDroppableMap(droppables)
  };
  finish();
  var result = {
    dimensions,
    critical,
    viewport: viewport2
  };
  return result;
};
function shouldPublishUpdate(registry, dragging, entry) {
  if (entry.descriptor.id === dragging.id) {
    return false;
  }
  if (entry.descriptor.type !== dragging.type) {
    return false;
  }
  var home2 = registry.droppable.getById(entry.descriptor.droppableId);
  if (home2.descriptor.mode !== "virtual") {
    true ? warning3("\n      You are attempting to add or remove a Draggable [id: " + entry.descriptor.id + "]\n      while a drag is occurring. This is only supported for virtual lists.\n\n      See https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/virtual-lists.md\n    ") : void 0;
    return false;
  }
  return true;
}
var createDimensionMarshal = function(registry, callbacks) {
  var collection = null;
  var publisher = createPublisher({
    callbacks: {
      publish: callbacks.publishWhileDragging,
      collectionStarting: callbacks.collectionStarting
    },
    registry
  });
  var updateDroppableIsEnabled3 = function updateDroppableIsEnabled4(id, isEnabled) {
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update is enabled flag of Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    if (!collection) {
      return;
    }
    callbacks.updateDroppableIsEnabled({
      id,
      isEnabled
    });
  };
  var updateDroppableIsCombineEnabled3 = function updateDroppableIsCombineEnabled4(id, isCombineEnabled) {
    if (!collection) {
      return;
    }
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update isCombineEnabled flag of Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    callbacks.updateDroppableIsCombineEnabled({
      id,
      isCombineEnabled
    });
  };
  var updateDroppableScroll3 = function updateDroppableScroll4(id, newScroll) {
    if (!collection) {
      return;
    }
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    callbacks.updateDroppableScroll({
      id,
      newScroll
    });
  };
  var scrollDroppable2 = function scrollDroppable3(id, change) {
    if (!collection) {
      return;
    }
    registry.droppable.getById(id).callbacks.scroll(change);
  };
  var stopPublishing = function stopPublishing2() {
    if (!collection) {
      return;
    }
    publisher.stop();
    var home2 = collection.critical.droppable;
    registry.droppable.getAllByType(home2.type).forEach(function(entry) {
      return entry.callbacks.dragStopped();
    });
    collection.unsubscribe();
    collection = null;
  };
  var subscriber = function subscriber2(event) {
    !collection ? true ? invariant2(false, "Should only be subscribed when a collection is occurring") : invariant2(false) : void 0;
    var dragging = collection.critical.draggable;
    if (event.type === "ADDITION") {
      if (shouldPublishUpdate(registry, dragging, event.value)) {
        publisher.add(event.value);
      }
    }
    if (event.type === "REMOVAL") {
      if (shouldPublishUpdate(registry, dragging, event.value)) {
        publisher.remove(event.value);
      }
    }
  };
  var startPublishing = function startPublishing2(request) {
    !!collection ? true ? invariant2(false, "Cannot start capturing critical dimensions as there is already a collection") : invariant2(false) : void 0;
    var entry = registry.draggable.getById(request.draggableId);
    var home2 = registry.droppable.getById(entry.descriptor.droppableId);
    var critical = {
      draggable: entry.descriptor,
      droppable: home2.descriptor
    };
    var unsubscribe = registry.subscribe(subscriber);
    collection = {
      critical,
      unsubscribe
    };
    return getInitialPublish({
      critical,
      registry,
      scrollOptions: request.scrollOptions
    });
  };
  var marshal = {
    updateDroppableIsEnabled: updateDroppableIsEnabled3,
    updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled3,
    scrollDroppable: scrollDroppable2,
    updateDroppableScroll: updateDroppableScroll3,
    startPublishing,
    stopPublishing
  };
  return marshal;
};
var canStartDrag = function(state, id) {
  if (state.phase === "IDLE") {
    return true;
  }
  if (state.phase !== "DROP_ANIMATING") {
    return false;
  }
  if (state.completed.result.draggableId === id) {
    return false;
  }
  return state.completed.result.reason === "DROP";
};
var scrollWindow = function(change) {
  window.scrollBy(change.x, change.y);
};
var getScrollableDroppables = memoize_one_esm_default(function(droppables) {
  return toDroppableList(droppables).filter(function(droppable2) {
    if (!droppable2.isEnabled) {
      return false;
    }
    if (!droppable2.frame) {
      return false;
    }
    return true;
  });
});
var getScrollableDroppableOver = function getScrollableDroppableOver2(target, droppables) {
  var maybe = find(getScrollableDroppables(droppables), function(droppable2) {
    !droppable2.frame ? true ? invariant2(false, "Invalid result") : invariant2(false) : void 0;
    return isPositionInFrame(droppable2.frame.pageMarginBox)(target);
  });
  return maybe;
};
var getBestScrollableDroppable = function(_ref) {
  var center = _ref.center, destination = _ref.destination, droppables = _ref.droppables;
  if (destination) {
    var _dimension = droppables[destination];
    if (!_dimension.frame) {
      return null;
    }
    return _dimension;
  }
  var dimension = getScrollableDroppableOver(center, droppables);
  return dimension;
};
var config2 = {
  startFromPercentage: 0.25,
  maxScrollAtPercentage: 0.05,
  maxPixelScroll: 28,
  ease: function ease(percentage) {
    return Math.pow(percentage, 2);
  },
  durationDampening: {
    stopDampeningAt: 1200,
    accelerateAt: 360
  }
};
var getDistanceThresholds = function(container, axis) {
  var startScrollingFrom = container[axis.size] * config2.startFromPercentage;
  var maxScrollValueAt = container[axis.size] * config2.maxScrollAtPercentage;
  var thresholds = {
    startScrollingFrom,
    maxScrollValueAt
  };
  return thresholds;
};
var getPercentage = function(_ref) {
  var startOfRange = _ref.startOfRange, endOfRange = _ref.endOfRange, current = _ref.current;
  var range = endOfRange - startOfRange;
  if (range === 0) {
    true ? warning3("\n      Detected distance range of 0 in the fluid auto scroller\n      This is unexpected and would cause a divide by 0 issue.\n      Not allowing an auto scroll\n    ") : void 0;
    return 0;
  }
  var currentInRange = current - startOfRange;
  var percentage = currentInRange / range;
  return percentage;
};
var minScroll = 1;
var getValueFromDistance = function(distanceToEdge, thresholds) {
  if (distanceToEdge > thresholds.startScrollingFrom) {
    return 0;
  }
  if (distanceToEdge <= thresholds.maxScrollValueAt) {
    return config2.maxPixelScroll;
  }
  if (distanceToEdge === thresholds.startScrollingFrom) {
    return minScroll;
  }
  var percentageFromMaxScrollValueAt = getPercentage({
    startOfRange: thresholds.maxScrollValueAt,
    endOfRange: thresholds.startScrollingFrom,
    current: distanceToEdge
  });
  var percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
  var scroll3 = config2.maxPixelScroll * config2.ease(percentageFromStartScrollingFrom);
  return Math.ceil(scroll3);
};
var accelerateAt = config2.durationDampening.accelerateAt;
var stopAt = config2.durationDampening.stopDampeningAt;
var dampenValueByTime = function(proposedScroll, dragStartTime) {
  var startOfRange = dragStartTime;
  var endOfRange = stopAt;
  var now2 = Date.now();
  var runTime = now2 - startOfRange;
  if (runTime >= stopAt) {
    return proposedScroll;
  }
  if (runTime < accelerateAt) {
    return minScroll;
  }
  var betweenAccelerateAtAndStopAtPercentage = getPercentage({
    startOfRange: accelerateAt,
    endOfRange,
    current: runTime
  });
  var scroll3 = proposedScroll * config2.ease(betweenAccelerateAtAndStopAtPercentage);
  return Math.ceil(scroll3);
};
var getValue = function(_ref) {
  var distanceToEdge = _ref.distanceToEdge, thresholds = _ref.thresholds, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var scroll3 = getValueFromDistance(distanceToEdge, thresholds);
  if (scroll3 === 0) {
    return 0;
  }
  if (!shouldUseTimeDampening) {
    return scroll3;
  }
  return Math.max(dampenValueByTime(scroll3, dragStartTime), minScroll);
};
var getScrollOnAxis = function(_ref) {
  var container = _ref.container, distanceToEdges = _ref.distanceToEdges, dragStartTime = _ref.dragStartTime, axis = _ref.axis, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var thresholds = getDistanceThresholds(container, axis);
  var isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];
  if (isCloserToEnd) {
    return getValue({
      distanceToEdge: distanceToEdges[axis.end],
      thresholds,
      dragStartTime,
      shouldUseTimeDampening
    });
  }
  return -1 * getValue({
    distanceToEdge: distanceToEdges[axis.start],
    thresholds,
    dragStartTime,
    shouldUseTimeDampening
  });
};
var adjustForSizeLimits = function(_ref) {
  var container = _ref.container, subject = _ref.subject, proposedScroll = _ref.proposedScroll;
  var isTooBigVertically = subject.height > container.height;
  var isTooBigHorizontally = subject.width > container.width;
  if (!isTooBigHorizontally && !isTooBigVertically) {
    return proposedScroll;
  }
  if (isTooBigHorizontally && isTooBigVertically) {
    return null;
  }
  return {
    x: isTooBigHorizontally ? 0 : proposedScroll.x,
    y: isTooBigVertically ? 0 : proposedScroll.y
  };
};
var clean$2 = apply(function(value) {
  return value === 0 ? 0 : value;
});
var getScroll = function(_ref) {
  var dragStartTime = _ref.dragStartTime, container = _ref.container, subject = _ref.subject, center = _ref.center, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var distanceToEdges = {
    top: center.y - container.top,
    right: container.right - center.x,
    bottom: container.bottom - center.y,
    left: center.x - container.left
  };
  var y = getScrollOnAxis({
    container,
    distanceToEdges,
    dragStartTime,
    axis: vertical,
    shouldUseTimeDampening
  });
  var x = getScrollOnAxis({
    container,
    distanceToEdges,
    dragStartTime,
    axis: horizontal,
    shouldUseTimeDampening
  });
  var required2 = clean$2({
    x,
    y
  });
  if (isEqual3(required2, origin)) {
    return null;
  }
  var limited = adjustForSizeLimits({
    container,
    subject,
    proposedScroll: required2
  });
  if (!limited) {
    return null;
  }
  return isEqual3(limited, origin) ? null : limited;
};
var smallestSigned = apply(function(value) {
  if (value === 0) {
    return 0;
  }
  return value > 0 ? 1 : -1;
});
var getOverlap = /* @__PURE__ */ function() {
  var getRemainder = function getRemainder2(target, max2) {
    if (target < 0) {
      return target;
    }
    if (target > max2) {
      return target - max2;
    }
    return 0;
  };
  return function(_ref) {
    var current = _ref.current, max2 = _ref.max, change = _ref.change;
    var targetScroll = add(current, change);
    var overlap = {
      x: getRemainder(targetScroll.x, max2.x),
      y: getRemainder(targetScroll.y, max2.y)
    };
    if (isEqual3(overlap, origin)) {
      return null;
    }
    return overlap;
  };
}();
var canPartiallyScroll = function canPartiallyScroll2(_ref2) {
  var rawMax = _ref2.max, current = _ref2.current, change = _ref2.change;
  var max2 = {
    x: Math.max(current.x, rawMax.x),
    y: Math.max(current.y, rawMax.y)
  };
  var smallestChange = smallestSigned(change);
  var overlap = getOverlap({
    max: max2,
    current,
    change: smallestChange
  });
  if (!overlap) {
    return true;
  }
  if (smallestChange.x !== 0 && overlap.x === 0) {
    return true;
  }
  if (smallestChange.y !== 0 && overlap.y === 0) {
    return true;
  }
  return false;
};
var canScrollWindow = function canScrollWindow2(viewport2, change) {
  return canPartiallyScroll({
    current: viewport2.scroll.current,
    max: viewport2.scroll.max,
    change
  });
};
var getWindowOverlap = function getWindowOverlap2(viewport2, change) {
  if (!canScrollWindow(viewport2, change)) {
    return null;
  }
  var max2 = viewport2.scroll.max;
  var current = viewport2.scroll.current;
  return getOverlap({
    current,
    max: max2,
    change
  });
};
var canScrollDroppable = function canScrollDroppable2(droppable2, change) {
  var frame = droppable2.frame;
  if (!frame) {
    return false;
  }
  return canPartiallyScroll({
    current: frame.scroll.current,
    max: frame.scroll.max,
    change
  });
};
var getDroppableOverlap = function getDroppableOverlap2(droppable2, change) {
  var frame = droppable2.frame;
  if (!frame) {
    return null;
  }
  if (!canScrollDroppable(droppable2, change)) {
    return null;
  }
  return getOverlap({
    current: frame.scroll.current,
    max: frame.scroll.max,
    change
  });
};
var getWindowScrollChange = function(_ref) {
  var viewport2 = _ref.viewport, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var scroll3 = getScroll({
    dragStartTime,
    container: viewport2.frame,
    subject,
    center,
    shouldUseTimeDampening
  });
  return scroll3 && canScrollWindow(viewport2, scroll3) ? scroll3 : null;
};
var getDroppableScrollChange = function(_ref) {
  var droppable2 = _ref.droppable, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var frame = droppable2.frame;
  if (!frame) {
    return null;
  }
  var scroll3 = getScroll({
    dragStartTime,
    container: frame.pageMarginBox,
    subject,
    center,
    shouldUseTimeDampening
  });
  return scroll3 && canScrollDroppable(droppable2, scroll3) ? scroll3 : null;
};
var scroll$1 = function(_ref) {
  var state = _ref.state, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening, scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
  var center = state.current.page.borderBoxCenter;
  var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
  var subject = draggable2.page.marginBox;
  if (state.isWindowScrollAllowed) {
    var viewport2 = state.viewport;
    var _change = getWindowScrollChange({
      dragStartTime,
      viewport: viewport2,
      subject,
      center,
      shouldUseTimeDampening
    });
    if (_change) {
      scrollWindow2(_change);
      return;
    }
  }
  var droppable2 = getBestScrollableDroppable({
    center,
    destination: whatIsDraggedOver(state.impact),
    droppables: state.dimensions.droppables
  });
  if (!droppable2) {
    return;
  }
  var change = getDroppableScrollChange({
    dragStartTime,
    droppable: droppable2,
    subject,
    center,
    shouldUseTimeDampening
  });
  if (change) {
    scrollDroppable2(droppable2.descriptor.id, change);
  }
};
var createFluidScroller = function(_ref) {
  var scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
  var scheduleWindowScroll = raf_schd_esm_default(scrollWindow2);
  var scheduleDroppableScroll = raf_schd_esm_default(scrollDroppable2);
  var dragging = null;
  var tryScroll = function tryScroll2(state) {
    !dragging ? true ? invariant2(false, "Cannot fluid scroll if not dragging") : invariant2(false) : void 0;
    var _dragging = dragging, shouldUseTimeDampening = _dragging.shouldUseTimeDampening, dragStartTime = _dragging.dragStartTime;
    scroll$1({
      state,
      scrollWindow: scheduleWindowScroll,
      scrollDroppable: scheduleDroppableScroll,
      dragStartTime,
      shouldUseTimeDampening
    });
  };
  var start$1 = function start$12(state) {
    start2();
    !!dragging ? true ? invariant2(false, "Cannot start auto scrolling when already started") : invariant2(false) : void 0;
    var dragStartTime = Date.now();
    var wasScrollNeeded = false;
    var fakeScrollCallback = function fakeScrollCallback2() {
      wasScrollNeeded = true;
    };
    scroll$1({
      state,
      dragStartTime: 0,
      shouldUseTimeDampening: false,
      scrollWindow: fakeScrollCallback,
      scrollDroppable: fakeScrollCallback
    });
    dragging = {
      dragStartTime,
      shouldUseTimeDampening: wasScrollNeeded
    };
    finish();
    if (wasScrollNeeded) {
      tryScroll(state);
    }
  };
  var stop = function stop2() {
    if (!dragging) {
      return;
    }
    scheduleWindowScroll.cancel();
    scheduleDroppableScroll.cancel();
    dragging = null;
  };
  return {
    start: start$1,
    stop,
    scroll: tryScroll
  };
};
var createJumpScroller = function(_ref) {
  var move3 = _ref.move, scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow;
  var moveByOffset = function moveByOffset2(state, offset4) {
    var client = add(state.current.client.selection, offset4);
    move3({
      client
    });
  };
  var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan2(droppable2, change) {
    if (!canScrollDroppable(droppable2, change)) {
      return change;
    }
    var overlap = getDroppableOverlap(droppable2, change);
    if (!overlap) {
      scrollDroppable2(droppable2.descriptor.id, change);
      return null;
    }
    var whatTheDroppableCanScroll = subtract(change, overlap);
    scrollDroppable2(droppable2.descriptor.id, whatTheDroppableCanScroll);
    var remainder = subtract(change, whatTheDroppableCanScroll);
    return remainder;
  };
  var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan2(isWindowScrollAllowed, viewport2, change) {
    if (!isWindowScrollAllowed) {
      return change;
    }
    if (!canScrollWindow(viewport2, change)) {
      return change;
    }
    var overlap = getWindowOverlap(viewport2, change);
    if (!overlap) {
      scrollWindow2(change);
      return null;
    }
    var whatTheWindowCanScroll = subtract(change, overlap);
    scrollWindow2(whatTheWindowCanScroll);
    var remainder = subtract(change, whatTheWindowCanScroll);
    return remainder;
  };
  var jumpScroller = function jumpScroller2(state) {
    var request = state.scrollJumpRequest;
    if (!request) {
      return;
    }
    var destination = whatIsDraggedOver(state.impact);
    !destination ? true ? invariant2(false, "Cannot perform a jump scroll when there is no destination") : invariant2(false) : void 0;
    var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);
    if (!droppableRemainder) {
      return;
    }
    var viewport2 = state.viewport;
    var windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport2, droppableRemainder);
    if (!windowRemainder) {
      return;
    }
    moveByOffset(state, windowRemainder);
  };
  return jumpScroller;
};
var createAutoScroller = function(_ref) {
  var scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow, move3 = _ref.move;
  var fluidScroller = createFluidScroller({
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2
  });
  var jumpScroll = createJumpScroller({
    move: move3,
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2
  });
  var scroll3 = function scroll4(state) {
    if (state.phase !== "DRAGGING") {
      return;
    }
    if (state.movementMode === "FLUID") {
      fluidScroller.scroll(state);
      return;
    }
    if (!state.scrollJumpRequest) {
      return;
    }
    jumpScroll(state);
  };
  var scroller = {
    scroll: scroll3,
    start: fluidScroller.start,
    stop: fluidScroller.stop
  };
  return scroller;
};
var prefix$1 = "data-rbd";
var dragHandle = function() {
  var base = prefix$1 + "-drag-handle";
  return {
    base,
    draggableId: base + "-draggable-id",
    contextId: base + "-context-id"
  };
}();
var draggable = function() {
  var base = prefix$1 + "-draggable";
  return {
    base,
    contextId: base + "-context-id",
    id: base + "-id"
  };
}();
var droppable = function() {
  var base = prefix$1 + "-droppable";
  return {
    base,
    contextId: base + "-context-id",
    id: base + "-id"
  };
}();
var scrollContainer = {
  contextId: prefix$1 + "-scroll-container-context-id"
};
var makeGetSelector = function makeGetSelector2(context) {
  return function(attribute) {
    return "[" + attribute + '="' + context + '"]';
  };
};
var getStyles = function getStyles2(rules, property) {
  return rules.map(function(rule) {
    var value = rule.styles[property];
    if (!value) {
      return "";
    }
    return rule.selector + " { " + value + " }";
  }).join(" ");
};
var noPointerEvents = "pointer-events: none;";
var getStyles$1 = function(contextId) {
  var getSelector2 = makeGetSelector(contextId);
  var dragHandle$1 = function() {
    var grabCursor = "\n      cursor: -webkit-grab;\n      cursor: grab;\n    ";
    return {
      selector: getSelector2(dragHandle.contextId),
      styles: {
        always: "\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",
        resting: grabCursor,
        dragging: noPointerEvents,
        dropAnimating: grabCursor
      }
    };
  }();
  var draggable$1 = function() {
    var transition = "\n      transition: " + transitions.outOfTheWay + ";\n    ";
    return {
      selector: getSelector2(draggable.contextId),
      styles: {
        dragging: transition,
        dropAnimating: transition,
        userCancel: transition
      }
    };
  }();
  var droppable$1 = {
    selector: getSelector2(droppable.contextId),
    styles: {
      always: "overflow-anchor: none;"
    }
  };
  var body = {
    selector: "body",
    styles: {
      dragging: "\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "
    }
  };
  var rules = [draggable$1, dragHandle$1, droppable$1, body];
  return {
    always: getStyles(rules, "always"),
    resting: getStyles(rules, "resting"),
    dragging: getStyles(rules, "dragging"),
    dropAnimating: getStyles(rules, "dropAnimating"),
    userCancel: getStyles(rules, "userCancel")
  };
};
var useIsomorphicLayoutEffect3 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react126.useLayoutEffect : import_react126.useEffect;
var getHead = function getHead2() {
  var head = document.querySelector("head");
  !head ? true ? invariant2(false, "Cannot find the head to append a style to") : invariant2(false) : void 0;
  return head;
};
var createStyleEl = function createStyleEl2(nonce) {
  var el = document.createElement("style");
  if (nonce) {
    el.setAttribute("nonce", nonce);
  }
  el.type = "text/css";
  return el;
};
function useStyleMarshal(contextId, nonce) {
  var styles = useMemo6(function() {
    return getStyles$1(contextId);
  }, [contextId]);
  var alwaysRef = (0, import_react126.useRef)(null);
  var dynamicRef = (0, import_react126.useRef)(null);
  var setDynamicStyle = useCallback3(memoize_one_esm_default(function(proposed) {
    var el = dynamicRef.current;
    !el ? true ? invariant2(false, "Cannot set dynamic style element if it is not set") : invariant2(false) : void 0;
    el.textContent = proposed;
  }), []);
  var setAlwaysStyle = useCallback3(function(proposed) {
    var el = alwaysRef.current;
    !el ? true ? invariant2(false, "Cannot set dynamic style element if it is not set") : invariant2(false) : void 0;
    el.textContent = proposed;
  }, []);
  useIsomorphicLayoutEffect3(function() {
    !(!alwaysRef.current && !dynamicRef.current) ? true ? invariant2(false, "style elements already mounted") : invariant2(false) : void 0;
    var always = createStyleEl(nonce);
    var dynamic = createStyleEl(nonce);
    alwaysRef.current = always;
    dynamicRef.current = dynamic;
    always.setAttribute(prefix$1 + "-always", contextId);
    dynamic.setAttribute(prefix$1 + "-dynamic", contextId);
    getHead().appendChild(always);
    getHead().appendChild(dynamic);
    setAlwaysStyle(styles.always);
    setDynamicStyle(styles.resting);
    return function() {
      var remove = function remove2(ref2) {
        var current = ref2.current;
        !current ? true ? invariant2(false, "Cannot unmount ref as it is not set") : invariant2(false) : void 0;
        getHead().removeChild(current);
        ref2.current = null;
      };
      remove(alwaysRef);
      remove(dynamicRef);
    };
  }, [nonce, setAlwaysStyle, setDynamicStyle, styles.always, styles.resting, contextId]);
  var dragging = useCallback3(function() {
    return setDynamicStyle(styles.dragging);
  }, [setDynamicStyle, styles.dragging]);
  var dropping = useCallback3(function(reason) {
    if (reason === "DROP") {
      setDynamicStyle(styles.dropAnimating);
      return;
    }
    setDynamicStyle(styles.userCancel);
  }, [setDynamicStyle, styles.dropAnimating, styles.userCancel]);
  var resting = useCallback3(function() {
    if (!dynamicRef.current) {
      return;
    }
    setDynamicStyle(styles.resting);
  }, [setDynamicStyle, styles.resting]);
  var marshal = useMemo6(function() {
    return {
      dragging,
      dropping,
      resting
    };
  }, [dragging, dropping, resting]);
  return marshal;
}
var getWindowFromEl = function(el) {
  return el && el.ownerDocument ? el.ownerDocument.defaultView : window;
};
function isHtmlElement(el) {
  return el instanceof getWindowFromEl(el).HTMLElement;
}
function findDragHandle(contextId, draggableId) {
  var selector = "[" + dragHandle.contextId + '="' + contextId + '"]';
  var possible = toArray(document.querySelectorAll(selector));
  if (!possible.length) {
    true ? warning3('Unable to find any drag handles in the context "' + contextId + '"') : void 0;
    return null;
  }
  var handle = find(possible, function(el) {
    return el.getAttribute(dragHandle.draggableId) === draggableId;
  });
  if (!handle) {
    true ? warning3('Unable to find drag handle with id "' + draggableId + '" as no handle with a matching id was found') : void 0;
    return null;
  }
  if (!isHtmlElement(handle)) {
    true ? warning3("drag handle needs to be a HTMLElement") : void 0;
    return null;
  }
  return handle;
}
function useFocusMarshal(contextId) {
  var entriesRef = (0, import_react126.useRef)({});
  var recordRef = (0, import_react126.useRef)(null);
  var restoreFocusFrameRef = (0, import_react126.useRef)(null);
  var isMountedRef = (0, import_react126.useRef)(false);
  var register = useCallback3(function register2(id, focus2) {
    var entry = {
      id,
      focus: focus2
    };
    entriesRef.current[id] = entry;
    return function unregister() {
      var entries = entriesRef.current;
      var current = entries[id];
      if (current !== entry) {
        delete entries[id];
      }
    };
  }, []);
  var tryGiveFocus = useCallback3(function tryGiveFocus2(tryGiveFocusTo) {
    var handle = findDragHandle(contextId, tryGiveFocusTo);
    if (handle && handle !== document.activeElement) {
      handle.focus();
    }
  }, [contextId]);
  var tryShiftRecord = useCallback3(function tryShiftRecord2(previous, redirectTo) {
    if (recordRef.current === previous) {
      recordRef.current = redirectTo;
    }
  }, []);
  var tryRestoreFocusRecorded = useCallback3(function tryRestoreFocusRecorded2() {
    if (restoreFocusFrameRef.current) {
      return;
    }
    if (!isMountedRef.current) {
      return;
    }
    restoreFocusFrameRef.current = requestAnimationFrame(function() {
      restoreFocusFrameRef.current = null;
      var record = recordRef.current;
      if (record) {
        tryGiveFocus(record);
      }
    });
  }, [tryGiveFocus]);
  var tryRecordFocus = useCallback3(function tryRecordFocus2(id) {
    recordRef.current = null;
    var focused = document.activeElement;
    if (!focused) {
      return;
    }
    if (focused.getAttribute(dragHandle.draggableId) !== id) {
      return;
    }
    recordRef.current = id;
  }, []);
  useIsomorphicLayoutEffect3(function() {
    isMountedRef.current = true;
    return function clearFrameOnUnmount() {
      isMountedRef.current = false;
      var frameId = restoreFocusFrameRef.current;
      if (frameId) {
        cancelAnimationFrame(frameId);
      }
    };
  }, []);
  var marshal = useMemo6(function() {
    return {
      register,
      tryRecordFocus,
      tryRestoreFocusRecorded,
      tryShiftRecord
    };
  }, [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
  return marshal;
}
function createRegistry() {
  var entries = {
    draggables: {},
    droppables: {}
  };
  var subscribers = [];
  function subscribe(cb) {
    subscribers.push(cb);
    return function unsubscribe() {
      var index = subscribers.indexOf(cb);
      if (index === -1) {
        return;
      }
      subscribers.splice(index, 1);
    };
  }
  function notify2(event) {
    if (subscribers.length) {
      subscribers.forEach(function(cb) {
        return cb(event);
      });
    }
  }
  function findDraggableById(id) {
    return entries.draggables[id] || null;
  }
  function getDraggableById(id) {
    var entry = findDraggableById(id);
    !entry ? true ? invariant2(false, "Cannot find draggable entry with id [" + id + "]") : invariant2(false) : void 0;
    return entry;
  }
  var draggableAPI = {
    register: function register(entry) {
      entries.draggables[entry.descriptor.id] = entry;
      notify2({
        type: "ADDITION",
        value: entry
      });
    },
    update: function update2(entry, last) {
      var current = entries.draggables[last.descriptor.id];
      if (!current) {
        return;
      }
      if (current.uniqueId !== entry.uniqueId) {
        return;
      }
      delete entries.draggables[last.descriptor.id];
      entries.draggables[entry.descriptor.id] = entry;
    },
    unregister: function unregister(entry) {
      var draggableId = entry.descriptor.id;
      var current = findDraggableById(draggableId);
      if (!current) {
        return;
      }
      if (entry.uniqueId !== current.uniqueId) {
        return;
      }
      delete entries.draggables[draggableId];
      notify2({
        type: "REMOVAL",
        value: entry
      });
    },
    getById: getDraggableById,
    findById: findDraggableById,
    exists: function exists(id) {
      return Boolean(findDraggableById(id));
    },
    getAllByType: function getAllByType(type) {
      return values2(entries.draggables).filter(function(entry) {
        return entry.descriptor.type === type;
      });
    }
  };
  function findDroppableById(id) {
    return entries.droppables[id] || null;
  }
  function getDroppableById(id) {
    var entry = findDroppableById(id);
    !entry ? true ? invariant2(false, "Cannot find droppable entry with id [" + id + "]") : invariant2(false) : void 0;
    return entry;
  }
  var droppableAPI = {
    register: function register(entry) {
      entries.droppables[entry.descriptor.id] = entry;
    },
    unregister: function unregister(entry) {
      var current = findDroppableById(entry.descriptor.id);
      if (!current) {
        return;
      }
      if (entry.uniqueId !== current.uniqueId) {
        return;
      }
      delete entries.droppables[entry.descriptor.id];
    },
    getById: getDroppableById,
    findById: findDroppableById,
    exists: function exists(id) {
      return Boolean(findDroppableById(id));
    },
    getAllByType: function getAllByType(type) {
      return values2(entries.droppables).filter(function(entry) {
        return entry.descriptor.type === type;
      });
    }
  };
  function clean4() {
    entries.draggables = {};
    entries.droppables = {};
    subscribers.length = 0;
  }
  return {
    draggable: draggableAPI,
    droppable: droppableAPI,
    subscribe,
    clean: clean4
  };
}
function useRegistry() {
  var registry = useMemo6(createRegistry, []);
  (0, import_react126.useEffect)(function() {
    return function unmount() {
      requestAnimationFrame(registry.clean);
    };
  }, [registry]);
  return registry;
}
var StoreContext = import_react126.default.createContext(null);
var getBodyElement = function() {
  var body = document.body;
  !body ? true ? invariant2(false, "Cannot find document.body") : invariant2(false) : void 0;
  return body;
};
var visuallyHidden = {
  position: "absolute",
  width: "1px",
  height: "1px",
  margin: "-1px",
  border: "0",
  padding: "0",
  overflow: "hidden",
  clip: "rect(0 0 0 0)",
  "clip-path": "inset(100%)"
};
var getId = function getId2(contextId) {
  return "rbd-announcement-" + contextId;
};
function useAnnouncer(contextId) {
  var id = useMemo6(function() {
    return getId(contextId);
  }, [contextId]);
  var ref2 = (0, import_react126.useRef)(null);
  (0, import_react126.useEffect)(function setup() {
    var el = document.createElement("div");
    ref2.current = el;
    el.id = id;
    el.setAttribute("aria-live", "assertive");
    el.setAttribute("aria-atomic", "true");
    _extends(el.style, visuallyHidden);
    getBodyElement().appendChild(el);
    return function cleanup() {
      setTimeout(function remove() {
        var body = getBodyElement();
        if (body.contains(el)) {
          body.removeChild(el);
        }
        if (el === ref2.current) {
          ref2.current = null;
        }
      });
    };
  }, [id]);
  var announce = useCallback3(function(message) {
    var el = ref2.current;
    if (el) {
      el.textContent = message;
      return;
    }
    true ? warning3('\n      A screen reader message was trying to be announced but it was unable to do so.\n      This can occur if you unmount your <DragDropContext /> in your onDragEnd.\n      Consider calling provided.announce() before the unmount so that the instruction will\n      not be lost for users relying on a screen reader.\n\n      Message not passed to screen reader:\n\n      "' + message + '"\n    ') : void 0;
  }, []);
  return announce;
}
var count = 0;
var defaults = {
  separator: "::"
};
function useUniqueId(prefix2, options) {
  if (options === void 0) {
    options = defaults;
  }
  return useMemo6(function() {
    return "" + prefix2 + options.separator + count++;
  }, [options.separator, prefix2]);
}
function getElementId(_ref) {
  var contextId = _ref.contextId, uniqueId = _ref.uniqueId;
  return "rbd-hidden-text-" + contextId + "-" + uniqueId;
}
function useHiddenTextElement(_ref2) {
  var contextId = _ref2.contextId, text2 = _ref2.text;
  var uniqueId = useUniqueId("hidden-text", {
    separator: "-"
  });
  var id = useMemo6(function() {
    return getElementId({
      contextId,
      uniqueId
    });
  }, [uniqueId, contextId]);
  (0, import_react126.useEffect)(function mount() {
    var el = document.createElement("div");
    el.id = id;
    el.textContent = text2;
    el.style.display = "none";
    getBodyElement().appendChild(el);
    return function unmount() {
      var body = getBodyElement();
      if (body.contains(el)) {
        body.removeChild(el);
      }
    };
  }, [id, text2]);
  return id;
}
var AppContext = import_react126.default.createContext(null);
var peerDependencies = {
  react: "^16.8.5 || ^17.0.0 || ^18.0.0",
  "react-dom": "^16.8.5 || ^17.0.0 || ^18.0.0"
};
var semver = /(\d+)\.(\d+)\.(\d+)/;
var getVersion = function getVersion2(value) {
  var result = semver.exec(value);
  !(result != null) ? true ? invariant2(false, "Unable to parse React version " + value) : invariant2(false) : void 0;
  var major = Number(result[1]);
  var minor = Number(result[2]);
  var patch3 = Number(result[3]);
  return {
    major,
    minor,
    patch: patch3,
    raw: value
  };
};
var isSatisfied = function isSatisfied2(expected, actual) {
  if (actual.major > expected.major) {
    return true;
  }
  if (actual.major < expected.major) {
    return false;
  }
  if (actual.minor > expected.minor) {
    return true;
  }
  if (actual.minor < expected.minor) {
    return false;
  }
  return actual.patch >= expected.patch;
};
var checkReactVersion = function(peerDepValue, actualValue) {
  var peerDep = getVersion(peerDepValue);
  var actual = getVersion(actualValue);
  if (isSatisfied(peerDep, actual)) {
    return;
  }
  true ? warning3("\n    React version: [" + actual.raw + "]\n    does not satisfy expected peer dependency version: [" + peerDep.raw + "]\n\n    This can result in run time bugs, and even fatal crashes\n  ") : void 0;
};
var suffix = "\n  We expect a html5 doctype: <!doctype html>\n  This is to ensure consistent browser layout and measurement\n\n  More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/doctype.md\n";
var checkDoctype = function(doc) {
  var doctype = doc.doctype;
  if (!doctype) {
    true ? warning3("\n      No <!doctype html> found.\n\n      " + suffix + "\n    ") : void 0;
    return;
  }
  if (doctype.name.toLowerCase() !== "html") {
    true ? warning3("\n      Unexpected <!doctype> found: (" + doctype.name + ")\n\n      " + suffix + "\n    ") : void 0;
  }
  if (doctype.publicId !== "") {
    true ? warning3("\n      Unexpected <!doctype> publicId found: (" + doctype.publicId + ")\n      A html5 doctype does not have a publicId\n\n      " + suffix + "\n    ") : void 0;
  }
};
function useDev(useHook) {
  if (true) {
    useHook();
  }
}
function useDevSetupWarning(fn2, inputs) {
  useDev(function() {
    (0, import_react126.useEffect)(function() {
      try {
        fn2();
      } catch (e) {
        error("\n          A setup problem was encountered.\n\n          > " + e.message + "\n        ");
      }
    }, inputs);
  });
}
function useStartupValidation() {
  useDevSetupWarning(function() {
    checkReactVersion(peerDependencies.react, import_react126.default.version);
    checkDoctype(document);
  }, []);
}
function usePrevious(current) {
  var ref2 = (0, import_react126.useRef)(current);
  (0, import_react126.useEffect)(function() {
    ref2.current = current;
  });
  return ref2;
}
function create() {
  var lock = null;
  function isClaimed() {
    return Boolean(lock);
  }
  function isActive(value) {
    return value === lock;
  }
  function claim(abandon) {
    !!lock ? true ? invariant2(false, "Cannot claim lock as it is already claimed") : invariant2(false) : void 0;
    var newLock = {
      abandon
    };
    lock = newLock;
    return newLock;
  }
  function release() {
    !lock ? true ? invariant2(false, "Cannot release lock when there is no lock") : invariant2(false) : void 0;
    lock = null;
  }
  function tryAbandon() {
    if (lock) {
      lock.abandon();
      release();
    }
  }
  return {
    isClaimed,
    isActive,
    claim,
    release,
    tryAbandon
  };
}
var tab = 9;
var enter = 13;
var escape = 27;
var space = 32;
var pageUp = 33;
var pageDown = 34;
var end2 = 35;
var home = 36;
var arrowLeft = 37;
var arrowUp = 38;
var arrowRight = 39;
var arrowDown = 40;
var _preventedKeys;
var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
var preventStandardKeyEvents = function(event) {
  if (preventedKeys[event.keyCode]) {
    event.preventDefault();
  }
};
var supportedEventName = function() {
  var base = "visibilitychange";
  if (typeof document === "undefined") {
    return base;
  }
  var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
  var supported = find(candidates, function(eventName) {
    return "on" + eventName in document;
  });
  return supported || base;
}();
var primaryButton = 0;
var sloppyClickThreshold = 5;
function isSloppyClickThresholdExceeded(original, current) {
  return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
}
var idle$1 = {
  type: "IDLE"
};
function getCaptureBindings(_ref) {
  var cancel = _ref.cancel, completed = _ref.completed, getPhase = _ref.getPhase, setPhase = _ref.setPhase;
  return [{
    eventName: "mousemove",
    fn: function fn2(event) {
      var button = event.button, clientX = event.clientX, clientY = event.clientY;
      if (button !== primaryButton) {
        return;
      }
      var point = {
        x: clientX,
        y: clientY
      };
      var phase = getPhase();
      if (phase.type === "DRAGGING") {
        event.preventDefault();
        phase.actions.move(point);
        return;
      }
      !(phase.type === "PENDING") ? true ? invariant2(false, "Cannot be IDLE") : invariant2(false) : void 0;
      var pending = phase.point;
      if (!isSloppyClickThresholdExceeded(pending, point)) {
        return;
      }
      event.preventDefault();
      var actions = phase.actions.fluidLift(point);
      setPhase({
        type: "DRAGGING",
        actions
      });
    }
  }, {
    eventName: "mouseup",
    fn: function fn2(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      phase.actions.drop({
        shouldBlockNextClick: true
      });
      completed();
    }
  }, {
    eventName: "mousedown",
    fn: function fn2(event) {
      if (getPhase().type === "DRAGGING") {
        event.preventDefault();
      }
      cancel();
    }
  }, {
    eventName: "keydown",
    fn: function fn2(event) {
      var phase = getPhase();
      if (phase.type === "PENDING") {
        cancel();
        return;
      }
      if (event.keyCode === escape) {
        event.preventDefault();
        cancel();
        return;
      }
      preventStandardKeyEvents(event);
    }
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "scroll",
    options: {
      passive: true,
      capture: false
    },
    fn: function fn2() {
      if (getPhase().type === "PENDING") {
        cancel();
      }
    }
  }, {
    eventName: "webkitmouseforcedown",
    fn: function fn2(event) {
      var phase = getPhase();
      !(phase.type !== "IDLE") ? true ? invariant2(false, "Unexpected phase") : invariant2(false) : void 0;
      if (phase.actions.shouldRespectForcePress()) {
        cancel();
        return;
      }
      event.preventDefault();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useMouseSensor(api) {
  var phaseRef = (0, import_react126.useRef)(idle$1);
  var unbindEventsRef = (0, import_react126.useRef)(noop2);
  var startCaptureBinding = useMemo6(function() {
    return {
      eventName: "mousedown",
      fn: function onMouseDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.button !== primaryButton) {
          return;
        }
        if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        event.preventDefault();
        var point = {
          x: event.clientX,
          y: event.clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    };
  }, [api]);
  var preventForcePressBinding = useMemo6(function() {
    return {
      eventName: "webkitmouseforcewillbegin",
      fn: function fn2(event) {
        if (event.defaultPrevented) {
          return;
        }
        var id = api.findClosestDraggableId(event);
        if (!id) {
          return;
        }
        var options = api.findOptionsForDraggable(id);
        if (!options) {
          return;
        }
        if (options.shouldRespectForcePress) {
          return;
        }
        if (!api.canGetLock(id)) {
          return;
        }
        event.preventDefault();
      }
    };
  }, [api]);
  var listenForCapture = useCallback3(function listenForCapture2() {
    var options = {
      passive: false,
      capture: true
    };
    unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
  }, [preventForcePressBinding, startCaptureBinding]);
  var stop = useCallback3(function() {
    var current = phaseRef.current;
    if (current.type === "IDLE") {
      return;
    }
    phaseRef.current = idle$1;
    unbindEventsRef.current();
    listenForCapture();
  }, [listenForCapture]);
  var cancel = useCallback3(function() {
    var phase = phaseRef.current;
    stop();
    if (phase.type === "DRAGGING") {
      phase.actions.cancel({
        shouldBlockNextClick: true
      });
    }
    if (phase.type === "PENDING") {
      phase.actions.abort();
    }
  }, [stop]);
  var bindCapturingEvents = useCallback3(function bindCapturingEvents2() {
    var options = {
      capture: true,
      passive: false
    };
    var bindings = getCaptureBindings({
      cancel,
      completed: stop,
      getPhase: function getPhase() {
        return phaseRef.current;
      },
      setPhase: function setPhase(phase) {
        phaseRef.current = phase;
      }
    });
    unbindEventsRef.current = bindEvents(window, bindings, options);
  }, [cancel, stop]);
  var startPendingDrag = useCallback3(function startPendingDrag2(actions, point) {
    !(phaseRef.current.type === "IDLE") ? true ? invariant2(false, "Expected to move from IDLE to PENDING drag") : invariant2(false) : void 0;
    phaseRef.current = {
      type: "PENDING",
      point,
      actions
    };
    bindCapturingEvents();
  }, [bindCapturingEvents]);
  useIsomorphicLayoutEffect3(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
    };
  }, [listenForCapture]);
}
var _scrollJumpKeys;
function noop$1() {
}
var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end2] = true, _scrollJumpKeys);
function getDraggingBindings(actions, stop) {
  function cancel() {
    stop();
    actions.cancel();
  }
  function drop5() {
    stop();
    actions.drop();
  }
  return [{
    eventName: "keydown",
    fn: function fn2(event) {
      if (event.keyCode === escape) {
        event.preventDefault();
        cancel();
        return;
      }
      if (event.keyCode === space) {
        event.preventDefault();
        drop5();
        return;
      }
      if (event.keyCode === arrowDown) {
        event.preventDefault();
        actions.moveDown();
        return;
      }
      if (event.keyCode === arrowUp) {
        event.preventDefault();
        actions.moveUp();
        return;
      }
      if (event.keyCode === arrowRight) {
        event.preventDefault();
        actions.moveRight();
        return;
      }
      if (event.keyCode === arrowLeft) {
        event.preventDefault();
        actions.moveLeft();
        return;
      }
      if (scrollJumpKeys[event.keyCode]) {
        event.preventDefault();
        return;
      }
      preventStandardKeyEvents(event);
    }
  }, {
    eventName: "mousedown",
    fn: cancel
  }, {
    eventName: "mouseup",
    fn: cancel
  }, {
    eventName: "click",
    fn: cancel
  }, {
    eventName: "touchstart",
    fn: cancel
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "wheel",
    fn: cancel,
    options: {
      passive: true
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useKeyboardSensor(api) {
  var unbindEventsRef = (0, import_react126.useRef)(noop$1);
  var startCaptureBinding = useMemo6(function() {
    return {
      eventName: "keydown",
      fn: function onKeyDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.keyCode !== space) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var preDrag = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!preDrag) {
          return;
        }
        event.preventDefault();
        var isCapturing = true;
        var actions = preDrag.snapLift();
        unbindEventsRef.current();
        function stop() {
          !isCapturing ? true ? invariant2(false, "Cannot stop capturing a keyboard drag when not capturing") : invariant2(false) : void 0;
          isCapturing = false;
          unbindEventsRef.current();
          listenForCapture();
        }
        unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
          capture: true,
          passive: false
        });
      }
    };
  }, [api]);
  var listenForCapture = useCallback3(function tryStartCapture() {
    var options = {
      passive: false,
      capture: true
    };
    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
  }, [startCaptureBinding]);
  useIsomorphicLayoutEffect3(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
    };
  }, [listenForCapture]);
}
var idle$2 = {
  type: "IDLE"
};
var timeForLongPress = 120;
var forcePressThreshold = 0.15;
function getWindowBindings(_ref) {
  var cancel = _ref.cancel, getPhase = _ref.getPhase;
  return [{
    eventName: "orientationchange",
    fn: cancel
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "contextmenu",
    fn: function fn2(event) {
      event.preventDefault();
    }
  }, {
    eventName: "keydown",
    fn: function fn2(event) {
      if (getPhase().type !== "DRAGGING") {
        cancel();
        return;
      }
      if (event.keyCode === escape) {
        event.preventDefault();
      }
      cancel();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function getHandleBindings(_ref2) {
  var cancel = _ref2.cancel, completed = _ref2.completed, getPhase = _ref2.getPhase;
  return [{
    eventName: "touchmove",
    options: {
      capture: false
    },
    fn: function fn2(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      phase.hasMoved = true;
      var _event$touches$ = event.touches[0], clientX = _event$touches$.clientX, clientY = _event$touches$.clientY;
      var point = {
        x: clientX,
        y: clientY
      };
      event.preventDefault();
      phase.actions.move(point);
    }
  }, {
    eventName: "touchend",
    fn: function fn2(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      phase.actions.drop({
        shouldBlockNextClick: true
      });
      completed();
    }
  }, {
    eventName: "touchcancel",
    fn: function fn2(event) {
      if (getPhase().type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      cancel();
    }
  }, {
    eventName: "touchforcechange",
    fn: function fn2(event) {
      var phase = getPhase();
      !(phase.type !== "IDLE") ? true ? invariant2(false) : invariant2(false) : void 0;
      var touch = event.touches[0];
      if (!touch) {
        return;
      }
      var isForcePress = touch.force >= forcePressThreshold;
      if (!isForcePress) {
        return;
      }
      var shouldRespect = phase.actions.shouldRespectForcePress();
      if (phase.type === "PENDING") {
        if (shouldRespect) {
          cancel();
        }
        return;
      }
      if (shouldRespect) {
        if (phase.hasMoved) {
          event.preventDefault();
          return;
        }
        cancel();
        return;
      }
      event.preventDefault();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useTouchSensor(api) {
  var phaseRef = (0, import_react126.useRef)(idle$2);
  var unbindEventsRef = (0, import_react126.useRef)(noop2);
  var getPhase = useCallback3(function getPhase2() {
    return phaseRef.current;
  }, []);
  var setPhase = useCallback3(function setPhase2(phase) {
    phaseRef.current = phase;
  }, []);
  var startCaptureBinding = useMemo6(function() {
    return {
      eventName: "touchstart",
      fn: function onTouchStart(event) {
        if (event.defaultPrevented) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        var touch = event.touches[0];
        var clientX = touch.clientX, clientY = touch.clientY;
        var point = {
          x: clientX,
          y: clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    };
  }, [api]);
  var listenForCapture = useCallback3(function listenForCapture2() {
    var options = {
      capture: true,
      passive: false
    };
    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
  }, [startCaptureBinding]);
  var stop = useCallback3(function() {
    var current = phaseRef.current;
    if (current.type === "IDLE") {
      return;
    }
    if (current.type === "PENDING") {
      clearTimeout(current.longPressTimerId);
    }
    setPhase(idle$2);
    unbindEventsRef.current();
    listenForCapture();
  }, [listenForCapture, setPhase]);
  var cancel = useCallback3(function() {
    var phase = phaseRef.current;
    stop();
    if (phase.type === "DRAGGING") {
      phase.actions.cancel({
        shouldBlockNextClick: true
      });
    }
    if (phase.type === "PENDING") {
      phase.actions.abort();
    }
  }, [stop]);
  var bindCapturingEvents = useCallback3(function bindCapturingEvents2() {
    var options = {
      capture: true,
      passive: false
    };
    var args = {
      cancel,
      completed: stop,
      getPhase
    };
    var unbindTarget = bindEvents(window, getHandleBindings(args), options);
    var unbindWindow = bindEvents(window, getWindowBindings(args), options);
    unbindEventsRef.current = function unbindAll() {
      unbindTarget();
      unbindWindow();
    };
  }, [cancel, getPhase, stop]);
  var startDragging = useCallback3(function startDragging2() {
    var phase = getPhase();
    !(phase.type === "PENDING") ? true ? invariant2(false, "Cannot start dragging from phase " + phase.type) : invariant2(false) : void 0;
    var actions = phase.actions.fluidLift(phase.point);
    setPhase({
      type: "DRAGGING",
      actions,
      hasMoved: false
    });
  }, [getPhase, setPhase]);
  var startPendingDrag = useCallback3(function startPendingDrag2(actions, point) {
    !(getPhase().type === "IDLE") ? true ? invariant2(false, "Expected to move from IDLE to PENDING drag") : invariant2(false) : void 0;
    var longPressTimerId = setTimeout(startDragging, timeForLongPress);
    setPhase({
      type: "PENDING",
      point,
      actions,
      longPressTimerId
    });
    bindCapturingEvents();
  }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
  useIsomorphicLayoutEffect3(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
      var phase = getPhase();
      if (phase.type === "PENDING") {
        clearTimeout(phase.longPressTimerId);
        setPhase(idle$2);
      }
    };
  }, [getPhase, listenForCapture, setPhase]);
  useIsomorphicLayoutEffect3(function webkitHack() {
    var unbind = bindEvents(window, [{
      eventName: "touchmove",
      fn: function fn2() {
      },
      options: {
        capture: false,
        passive: false
      }
    }]);
    return unbind;
  }, []);
}
function useValidateSensorHooks(sensorHooks) {
  useDev(function() {
    var previousRef = usePrevious(sensorHooks);
    useDevSetupWarning(function() {
      !(previousRef.current.length === sensorHooks.length) ? true ? invariant2(false, "Cannot change the amount of sensor hooks after mounting") : invariant2(false) : void 0;
    });
  });
}
var interactiveTagNames = {
  input: true,
  button: true,
  textarea: true,
  select: true,
  option: true,
  optgroup: true,
  video: true,
  audio: true
};
function isAnInteractiveElement(parent, current) {
  if (current == null) {
    return false;
  }
  var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);
  if (hasAnInteractiveTag) {
    return true;
  }
  var attribute = current.getAttribute("contenteditable");
  if (attribute === "true" || attribute === "") {
    return true;
  }
  if (current === parent) {
    return false;
  }
  return isAnInteractiveElement(parent, current.parentElement);
}
function isEventInInteractiveElement(draggable2, event) {
  var target = event.target;
  if (!isHtmlElement(target)) {
    return false;
  }
  return isAnInteractiveElement(draggable2, target);
}
var getBorderBoxCenterPosition = function(el) {
  return getRect(el.getBoundingClientRect()).center;
};
function isElement2(el) {
  return el instanceof getWindowFromEl(el).Element;
}
var supportedMatchesName = function() {
  var base = "matches";
  if (typeof document === "undefined") {
    return base;
  }
  var candidates = [base, "msMatchesSelector", "webkitMatchesSelector"];
  var value = find(candidates, function(name) {
    return name in Element.prototype;
  });
  return value || base;
}();
function closestPonyfill(el, selector) {
  if (el == null) {
    return null;
  }
  if (el[supportedMatchesName](selector)) {
    return el;
  }
  return closestPonyfill(el.parentElement, selector);
}
function closest$1(el, selector) {
  if (el.closest) {
    return el.closest(selector);
  }
  return closestPonyfill(el, selector);
}
function getSelector(contextId) {
  return "[" + dragHandle.contextId + '="' + contextId + '"]';
}
function findClosestDragHandleFromEvent(contextId, event) {
  var target = event.target;
  if (!isElement2(target)) {
    true ? warning3("event.target must be a Element") : void 0;
    return null;
  }
  var selector = getSelector(contextId);
  var handle = closest$1(target, selector);
  if (!handle) {
    return null;
  }
  if (!isHtmlElement(handle)) {
    true ? warning3("drag handle must be a HTMLElement") : void 0;
    return null;
  }
  return handle;
}
function tryGetClosestDraggableIdFromEvent(contextId, event) {
  var handle = findClosestDragHandleFromEvent(contextId, event);
  if (!handle) {
    return null;
  }
  return handle.getAttribute(dragHandle.draggableId);
}
function findDraggable(contextId, draggableId) {
  var selector = "[" + draggable.contextId + '="' + contextId + '"]';
  var possible = toArray(document.querySelectorAll(selector));
  var draggable$1 = find(possible, function(el) {
    return el.getAttribute(draggable.id) === draggableId;
  });
  if (!draggable$1) {
    return null;
  }
  if (!isHtmlElement(draggable$1)) {
    true ? warning3("Draggable element is not a HTMLElement") : void 0;
    return null;
  }
  return draggable$1;
}
function preventDefault(event) {
  event.preventDefault();
}
function _isActive(_ref) {
  var expected = _ref.expected, phase = _ref.phase, isLockActive = _ref.isLockActive, shouldWarn = _ref.shouldWarn;
  if (!isLockActive()) {
    if (shouldWarn) {
      true ? warning3("\n        Cannot perform action.\n        The sensor no longer has an action lock.\n\n        Tips:\n\n        - Throw away your action handlers when forceStop() is called\n        - Check actions.isActive() if you really need to\n      ") : void 0;
    }
    return false;
  }
  if (expected !== phase) {
    if (shouldWarn) {
      true ? warning3("\n        Cannot perform action.\n        The actions you used belong to an outdated phase\n\n        Current phase: " + expected + "\n        You called an action from outdated phase: " + phase + "\n\n        Tips:\n\n        - Do not use preDragActions actions after calling preDragActions.lift()\n      ") : void 0;
    }
    return false;
  }
  return true;
}
function canStart(_ref2) {
  var lockAPI = _ref2.lockAPI, store = _ref2.store, registry = _ref2.registry, draggableId = _ref2.draggableId;
  if (lockAPI.isClaimed()) {
    return false;
  }
  var entry = registry.draggable.findById(draggableId);
  if (!entry) {
    true ? warning3("Unable to find draggable with id: " + draggableId) : void 0;
    return false;
  }
  if (!entry.options.isEnabled) {
    return false;
  }
  if (!canStartDrag(store.getState(), draggableId)) {
    return false;
  }
  return true;
}
function tryStart(_ref3) {
  var lockAPI = _ref3.lockAPI, contextId = _ref3.contextId, store = _ref3.store, registry = _ref3.registry, draggableId = _ref3.draggableId, forceSensorStop = _ref3.forceSensorStop, sourceEvent = _ref3.sourceEvent;
  var shouldStart = canStart({
    lockAPI,
    store,
    registry,
    draggableId
  });
  if (!shouldStart) {
    return null;
  }
  var entry = registry.draggable.getById(draggableId);
  var el = findDraggable(contextId, entry.descriptor.id);
  if (!el) {
    true ? warning3("Unable to find draggable element with id: " + draggableId) : void 0;
    return null;
  }
  if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
    return null;
  }
  var lock = lockAPI.claim(forceSensorStop || noop2);
  var phase = "PRE_DRAG";
  function getShouldRespectForcePress() {
    return entry.options.shouldRespectForcePress;
  }
  function isLockActive() {
    return lockAPI.isActive(lock);
  }
  function tryDispatch(expected, getAction) {
    if (_isActive({
      expected,
      phase,
      isLockActive,
      shouldWarn: true
    })) {
      store.dispatch(getAction());
    }
  }
  var tryDispatchWhenDragging = tryDispatch.bind(null, "DRAGGING");
  function lift$12(args) {
    function completed() {
      lockAPI.release();
      phase = "COMPLETED";
    }
    if (phase !== "PRE_DRAG") {
      completed();
      !(phase === "PRE_DRAG") ? true ? invariant2(false, "Cannot lift in phase " + phase) : invariant2(false) : void 0;
    }
    store.dispatch(lift(args.liftActionArgs));
    phase = "DRAGGING";
    function finish3(reason, options) {
      if (options === void 0) {
        options = {
          shouldBlockNextClick: false
        };
      }
      args.cleanup();
      if (options.shouldBlockNextClick) {
        var unbind = bindEvents(window, [{
          eventName: "click",
          fn: preventDefault,
          options: {
            once: true,
            passive: false,
            capture: true
          }
        }]);
        setTimeout(unbind);
      }
      completed();
      store.dispatch(drop({
        reason
      }));
    }
    return _extends({
      isActive: function isActive() {
        return _isActive({
          expected: "DRAGGING",
          phase,
          isLockActive,
          shouldWarn: false
        });
      },
      shouldRespectForcePress: getShouldRespectForcePress,
      drop: function drop5(options) {
        return finish3("DROP", options);
      },
      cancel: function cancel(options) {
        return finish3("CANCEL", options);
      }
    }, args.actions);
  }
  function fluidLift(clientSelection) {
    var move$1 = raf_schd_esm_default(function(client) {
      tryDispatchWhenDragging(function() {
        return move({
          client
        });
      });
    });
    var api = lift$12({
      liftActionArgs: {
        id: draggableId,
        clientSelection,
        movementMode: "FLUID"
      },
      cleanup: function cleanup() {
        return move$1.cancel();
      },
      actions: {
        move: move$1
      }
    });
    return _extends({}, api, {
      move: move$1
    });
  }
  function snapLift() {
    var actions = {
      moveUp: function moveUp$1() {
        return tryDispatchWhenDragging(moveUp);
      },
      moveRight: function moveRight$1() {
        return tryDispatchWhenDragging(moveRight);
      },
      moveDown: function moveDown$1() {
        return tryDispatchWhenDragging(moveDown);
      },
      moveLeft: function moveLeft$1() {
        return tryDispatchWhenDragging(moveLeft);
      }
    };
    return lift$12({
      liftActionArgs: {
        id: draggableId,
        clientSelection: getBorderBoxCenterPosition(el),
        movementMode: "SNAP"
      },
      cleanup: noop2,
      actions
    });
  }
  function abortPreDrag() {
    var shouldRelease = _isActive({
      expected: "PRE_DRAG",
      phase,
      isLockActive,
      shouldWarn: true
    });
    if (shouldRelease) {
      lockAPI.release();
    }
  }
  var preDrag = {
    isActive: function isActive() {
      return _isActive({
        expected: "PRE_DRAG",
        phase,
        isLockActive,
        shouldWarn: false
      });
    },
    shouldRespectForcePress: getShouldRespectForcePress,
    fluidLift,
    snapLift,
    abort: abortPreDrag
  };
  return preDrag;
}
var defaultSensors = [useMouseSensor, useKeyboardSensor, useTouchSensor];
function useSensorMarshal(_ref4) {
  var contextId = _ref4.contextId, store = _ref4.store, registry = _ref4.registry, customSensors = _ref4.customSensors, enableDefaultSensors = _ref4.enableDefaultSensors;
  var useSensors = [].concat(enableDefaultSensors ? defaultSensors : [], customSensors || []);
  var lockAPI = (0, import_react126.useState)(function() {
    return create();
  })[0];
  var tryAbandonLock = useCallback3(function tryAbandonLock2(previous, current) {
    if (previous.isDragging && !current.isDragging) {
      lockAPI.tryAbandon();
    }
  }, [lockAPI]);
  useIsomorphicLayoutEffect3(function listenToStore() {
    var previous = store.getState();
    var unsubscribe = store.subscribe(function() {
      var current = store.getState();
      tryAbandonLock(previous, current);
      previous = current;
    });
    return unsubscribe;
  }, [lockAPI, store, tryAbandonLock]);
  useIsomorphicLayoutEffect3(function() {
    return lockAPI.tryAbandon;
  }, [lockAPI.tryAbandon]);
  var canGetLock = useCallback3(function(draggableId) {
    return canStart({
      lockAPI,
      registry,
      store,
      draggableId
    });
  }, [lockAPI, registry, store]);
  var tryGetLock = useCallback3(function(draggableId, forceStop, options) {
    return tryStart({
      lockAPI,
      registry,
      contextId,
      store,
      draggableId,
      forceSensorStop: forceStop,
      sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
    });
  }, [contextId, lockAPI, registry, store]);
  var findClosestDraggableId = useCallback3(function(event) {
    return tryGetClosestDraggableIdFromEvent(contextId, event);
  }, [contextId]);
  var findOptionsForDraggable = useCallback3(function(id) {
    var entry = registry.draggable.findById(id);
    return entry ? entry.options : null;
  }, [registry.draggable]);
  var tryReleaseLock = useCallback3(function tryReleaseLock2() {
    if (!lockAPI.isClaimed()) {
      return;
    }
    lockAPI.tryAbandon();
    if (store.getState().phase !== "IDLE") {
      store.dispatch(flush());
    }
  }, [lockAPI, store]);
  var isLockClaimed = useCallback3(lockAPI.isClaimed, [lockAPI]);
  var api = useMemo6(function() {
    return {
      canGetLock,
      tryGetLock,
      findClosestDraggableId,
      findOptionsForDraggable,
      tryReleaseLock,
      isLockClaimed
    };
  }, [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);
  useValidateSensorHooks(useSensors);
  for (var i = 0; i < useSensors.length; i++) {
    useSensors[i](api);
  }
}
var createResponders = function createResponders2(props) {
  return {
    onBeforeCapture: props.onBeforeCapture,
    onBeforeDragStart: props.onBeforeDragStart,
    onDragStart: props.onDragStart,
    onDragEnd: props.onDragEnd,
    onDragUpdate: props.onDragUpdate
  };
};
function getStore(lazyRef) {
  !lazyRef.current ? true ? invariant2(false, "Could not find store from lazy ref") : invariant2(false) : void 0;
  return lazyRef.current;
}
function App(props) {
  var contextId = props.contextId, setCallbacks = props.setCallbacks, sensors = props.sensors, nonce = props.nonce, dragHandleUsageInstructions2 = props.dragHandleUsageInstructions;
  var lazyStoreRef = (0, import_react126.useRef)(null);
  useStartupValidation();
  var lastPropsRef = usePrevious(props);
  var getResponders = useCallback3(function() {
    return createResponders(lastPropsRef.current);
  }, [lastPropsRef]);
  var announce = useAnnouncer(contextId);
  var dragHandleUsageInstructionsId = useHiddenTextElement({
    contextId,
    text: dragHandleUsageInstructions2
  });
  var styleMarshal = useStyleMarshal(contextId, nonce);
  var lazyDispatch = useCallback3(function(action) {
    getStore(lazyStoreRef).dispatch(action);
  }, []);
  var marshalCallbacks = useMemo6(function() {
    return bindActionCreators({
      publishWhileDragging,
      updateDroppableScroll,
      updateDroppableIsEnabled,
      updateDroppableIsCombineEnabled,
      collectionStarting
    }, lazyDispatch);
  }, [lazyDispatch]);
  var registry = useRegistry();
  var dimensionMarshal = useMemo6(function() {
    return createDimensionMarshal(registry, marshalCallbacks);
  }, [registry, marshalCallbacks]);
  var autoScroller = useMemo6(function() {
    return createAutoScroller(_extends({
      scrollWindow,
      scrollDroppable: dimensionMarshal.scrollDroppable
    }, bindActionCreators({
      move
    }, lazyDispatch)));
  }, [dimensionMarshal.scrollDroppable, lazyDispatch]);
  var focusMarshal = useFocusMarshal(contextId);
  var store = useMemo6(function() {
    return createStore2({
      announce,
      autoScroller,
      dimensionMarshal,
      focusMarshal,
      getResponders,
      styleMarshal
    });
  }, [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);
  if (true) {
    if (lazyStoreRef.current && lazyStoreRef.current !== store) {
      true ? warning3("unexpected store change") : void 0;
    }
  }
  lazyStoreRef.current = store;
  var tryResetStore = useCallback3(function() {
    var current = getStore(lazyStoreRef);
    var state = current.getState();
    if (state.phase !== "IDLE") {
      current.dispatch(flush());
    }
  }, []);
  var isDragging = useCallback3(function() {
    var state = getStore(lazyStoreRef).getState();
    return state.isDragging || state.phase === "DROP_ANIMATING";
  }, []);
  var appCallbacks = useMemo6(function() {
    return {
      isDragging,
      tryAbort: tryResetStore
    };
  }, [isDragging, tryResetStore]);
  setCallbacks(appCallbacks);
  var getCanLift = useCallback3(function(id) {
    return canStartDrag(getStore(lazyStoreRef).getState(), id);
  }, []);
  var getIsMovementAllowed = useCallback3(function() {
    return isMovementAllowed(getStore(lazyStoreRef).getState());
  }, []);
  var appContext = useMemo6(function() {
    return {
      marshal: dimensionMarshal,
      focus: focusMarshal,
      contextId,
      canLift: getCanLift,
      isMovementAllowed: getIsMovementAllowed,
      dragHandleUsageInstructionsId,
      registry
    };
  }, [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
  useSensorMarshal({
    contextId,
    store,
    registry,
    customSensors: sensors,
    enableDefaultSensors: props.enableDefaultSensors !== false
  });
  (0, import_react126.useEffect)(function() {
    return tryResetStore;
  }, [tryResetStore]);
  return import_react126.default.createElement(AppContext.Provider, {
    value: appContext
  }, import_react126.default.createElement(Provider_default, {
    context: StoreContext,
    store
  }, props.children));
}
var count$1 = 0;
function useInstanceCount() {
  return useMemo6(function() {
    return "" + count$1++;
  }, []);
}
function DragDropContext(props) {
  var contextId = useInstanceCount();
  var dragHandleUsageInstructions2 = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;
  return import_react126.default.createElement(ErrorBoundary, null, function(setCallbacks) {
    return import_react126.default.createElement(App, {
      nonce: props.nonce,
      contextId,
      setCallbacks,
      dragHandleUsageInstructions: dragHandleUsageInstructions2,
      enableDefaultSensors: props.enableDefaultSensors,
      sensors: props.sensors,
      onBeforeCapture: props.onBeforeCapture,
      onBeforeDragStart: props.onBeforeDragStart,
      onDragStart: props.onDragStart,
      onDragUpdate: props.onDragUpdate,
      onDragEnd: props.onDragEnd
    }, props.children);
  });
}
var isEqual$1 = function isEqual5(base) {
  return function(value) {
    return base === value;
  };
};
var isScroll = isEqual$1("scroll");
var isAuto = isEqual$1("auto");
var isVisible$1 = isEqual$1("visible");
var isEither = function isEither2(overflow, fn2) {
  return fn2(overflow.overflowX) || fn2(overflow.overflowY);
};
var isBoth = function isBoth2(overflow, fn2) {
  return fn2(overflow.overflowX) && fn2(overflow.overflowY);
};
var isElementScrollable = function isElementScrollable2(el) {
  var style3 = window.getComputedStyle(el);
  var overflow = {
    overflowX: style3.overflowX,
    overflowY: style3.overflowY
  };
  return isEither(overflow, isScroll) || isEither(overflow, isAuto);
};
var isBodyScrollable = function isBodyScrollable2() {
  if (false) {
    return false;
  }
  var body = getBodyElement();
  var html = document.documentElement;
  !html ? true ? invariant2(false) : invariant2(false) : void 0;
  if (!isElementScrollable(body)) {
    return false;
  }
  var htmlStyle = window.getComputedStyle(html);
  var htmlOverflow = {
    overflowX: htmlStyle.overflowX,
    overflowY: htmlStyle.overflowY
  };
  if (isBoth(htmlOverflow, isVisible$1)) {
    return false;
  }
  true ? warning3("\n    We have detected that your <body> element might be a scroll container.\n    We have found no reliable way of detecting whether the <body> element is a scroll container.\n    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)\n\n    Because we cannot determine if the <body> is a scroll container, and generally it is not one,\n    we will be treating the <body> as *not* a scroll container\n\n    More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/how-we-detect-scroll-containers.md\n  ") : void 0;
  return false;
};
var getClosestScrollable = function getClosestScrollable2(el) {
  if (el == null) {
    return null;
  }
  if (el === document.body) {
    return isBodyScrollable() ? el : null;
  }
  if (el === document.documentElement) {
    return null;
  }
  if (!isElementScrollable(el)) {
    return getClosestScrollable2(el.parentElement);
  }
  return el;
};
var checkForNestedScrollContainers = function(scrollable) {
  if (!scrollable) {
    return;
  }
  var anotherScrollParent = getClosestScrollable(scrollable.parentElement);
  if (!anotherScrollParent) {
    return;
  }
  true ? warning3("\n    Droppable: unsupported nested scroll container detected.\n    A Droppable can only have one scroll parent (which can be itself)\n    Nested scroll containers are currently not supported.\n\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\n  ") : void 0;
};
var getScroll$1 = function(el) {
  return {
    x: el.scrollLeft,
    y: el.scrollTop
  };
};
var getIsFixed = function getIsFixed2(el) {
  if (!el) {
    return false;
  }
  var style3 = window.getComputedStyle(el);
  if (style3.position === "fixed") {
    return true;
  }
  return getIsFixed2(el.parentElement);
};
var getEnv = function(start4) {
  var closestScrollable = getClosestScrollable(start4);
  var isFixedOnPage = getIsFixed(start4);
  return {
    closestScrollable,
    isFixedOnPage
  };
};
var getDroppableDimension = function(_ref) {
  var descriptor = _ref.descriptor, isEnabled = _ref.isEnabled, isCombineEnabled = _ref.isCombineEnabled, isFixedOnPage = _ref.isFixedOnPage, direction = _ref.direction, client = _ref.client, page = _ref.page, closest3 = _ref.closest;
  var frame = function() {
    if (!closest3) {
      return null;
    }
    var scrollSize = closest3.scrollSize, frameClient = closest3.client;
    var maxScroll = getMaxScroll({
      scrollHeight: scrollSize.scrollHeight,
      scrollWidth: scrollSize.scrollWidth,
      height: frameClient.paddingBox.height,
      width: frameClient.paddingBox.width
    });
    return {
      pageMarginBox: closest3.page.marginBox,
      frameClient,
      scrollSize,
      shouldClipSubject: closest3.shouldClipSubject,
      scroll: {
        initial: closest3.scroll,
        current: closest3.scroll,
        max: maxScroll,
        diff: {
          value: origin,
          displacement: origin
        }
      }
    };
  }();
  var axis = direction === "vertical" ? vertical : horizontal;
  var subject = getSubject({
    page,
    withPlaceholder: null,
    axis,
    frame
  });
  var dimension = {
    descriptor,
    isCombineEnabled,
    isFixedOnPage,
    axis,
    isEnabled,
    client,
    page,
    frame,
    subject
  };
  return dimension;
};
var getClient = function getClient2(targetRef, closestScrollable) {
  var base = getBox(targetRef);
  if (!closestScrollable) {
    return base;
  }
  if (targetRef !== closestScrollable) {
    return base;
  }
  var top2 = base.paddingBox.top - closestScrollable.scrollTop;
  var left2 = base.paddingBox.left - closestScrollable.scrollLeft;
  var bottom2 = top2 + closestScrollable.scrollHeight;
  var right2 = left2 + closestScrollable.scrollWidth;
  var paddingBox = {
    top: top2,
    right: right2,
    bottom: bottom2,
    left: left2
  };
  var borderBox = expand(paddingBox, base.border);
  var client = createBox({
    borderBox,
    margin: base.margin,
    border: base.border,
    padding: base.padding
  });
  return client;
};
var getDimension = function(_ref) {
  var ref2 = _ref.ref, descriptor = _ref.descriptor, env = _ref.env, windowScroll = _ref.windowScroll, direction = _ref.direction, isDropDisabled = _ref.isDropDisabled, isCombineEnabled = _ref.isCombineEnabled, shouldClipSubject = _ref.shouldClipSubject;
  var closestScrollable = env.closestScrollable;
  var client = getClient(ref2, closestScrollable);
  var page = withScroll(client, windowScroll);
  var closest3 = function() {
    if (!closestScrollable) {
      return null;
    }
    var frameClient = getBox(closestScrollable);
    var scrollSize = {
      scrollHeight: closestScrollable.scrollHeight,
      scrollWidth: closestScrollable.scrollWidth
    };
    return {
      client: frameClient,
      page: withScroll(frameClient, windowScroll),
      scroll: getScroll$1(closestScrollable),
      scrollSize,
      shouldClipSubject
    };
  }();
  var dimension = getDroppableDimension({
    descriptor,
    isEnabled: !isDropDisabled,
    isCombineEnabled,
    isFixedOnPage: env.isFixedOnPage,
    direction,
    client,
    page,
    closest: closest3
  });
  return dimension;
};
var immediate = {
  passive: false
};
var delayed = {
  passive: true
};
var getListenerOptions = function(options) {
  return options.shouldPublishImmediately ? immediate : delayed;
};
function useRequiredContext(Context) {
  var result = (0, import_react126.useContext)(Context);
  !result ? true ? invariant2(false, "Could not find required context") : invariant2(false) : void 0;
  return result;
}
var getClosestScrollableFromDrag = function getClosestScrollableFromDrag2(dragging) {
  return dragging && dragging.env.closestScrollable || null;
};
function useDroppablePublisher(args) {
  var whileDraggingRef = (0, import_react126.useRef)(null);
  var appContext = useRequiredContext(AppContext);
  var uniqueId = useUniqueId("droppable");
  var registry = appContext.registry, marshal = appContext.marshal;
  var previousRef = usePrevious(args);
  var descriptor = useMemo6(function() {
    return {
      id: args.droppableId,
      type: args.type,
      mode: args.mode
    };
  }, [args.droppableId, args.mode, args.type]);
  var publishedDescriptorRef = (0, import_react126.useRef)(descriptor);
  var memoizedUpdateScroll = useMemo6(function() {
    return memoize_one_esm_default(function(x, y) {
      !whileDraggingRef.current ? true ? invariant2(false, "Can only update scroll when dragging") : invariant2(false) : void 0;
      var scroll4 = {
        x,
        y
      };
      marshal.updateDroppableScroll(descriptor.id, scroll4);
    });
  }, [descriptor.id, marshal]);
  var getClosestScroll = useCallback3(function() {
    var dragging = whileDraggingRef.current;
    if (!dragging || !dragging.env.closestScrollable) {
      return origin;
    }
    return getScroll$1(dragging.env.closestScrollable);
  }, []);
  var updateScroll = useCallback3(function() {
    var scroll4 = getClosestScroll();
    memoizedUpdateScroll(scroll4.x, scroll4.y);
  }, [getClosestScroll, memoizedUpdateScroll]);
  var scheduleScrollUpdate = useMemo6(function() {
    return raf_schd_esm_default(updateScroll);
  }, [updateScroll]);
  var onClosestScroll = useCallback3(function() {
    var dragging = whileDraggingRef.current;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !(dragging && closest3) ? true ? invariant2(false, "Could not find scroll options while scrolling") : invariant2(false) : void 0;
    var options = dragging.scrollOptions;
    if (options.shouldPublishImmediately) {
      updateScroll();
      return;
    }
    scheduleScrollUpdate();
  }, [scheduleScrollUpdate, updateScroll]);
  var getDimensionAndWatchScroll = useCallback3(function(windowScroll, options) {
    !!whileDraggingRef.current ? true ? invariant2(false, "Cannot collect a droppable while a drag is occurring") : invariant2(false) : void 0;
    var previous = previousRef.current;
    var ref2 = previous.getDroppableRef();
    !ref2 ? true ? invariant2(false, "Cannot collect without a droppable ref") : invariant2(false) : void 0;
    var env = getEnv(ref2);
    var dragging = {
      ref: ref2,
      descriptor,
      env,
      scrollOptions: options
    };
    whileDraggingRef.current = dragging;
    var dimension = getDimension({
      ref: ref2,
      descriptor,
      env,
      windowScroll,
      direction: previous.direction,
      isDropDisabled: previous.isDropDisabled,
      isCombineEnabled: previous.isCombineEnabled,
      shouldClipSubject: !previous.ignoreContainerClipping
    });
    var scrollable = env.closestScrollable;
    if (scrollable) {
      scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);
      scrollable.addEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
      if (true) {
        checkForNestedScrollContainers(scrollable);
      }
    }
    return dimension;
  }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
  var getScrollWhileDragging = useCallback3(function() {
    var dragging = whileDraggingRef.current;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !(dragging && closest3) ? true ? invariant2(false, "Can only recollect Droppable client for Droppables that have a scroll container") : invariant2(false) : void 0;
    return getScroll$1(closest3);
  }, []);
  var dragStopped = useCallback3(function() {
    var dragging = whileDraggingRef.current;
    !dragging ? true ? invariant2(false, "Cannot stop drag when no active drag") : invariant2(false) : void 0;
    var closest3 = getClosestScrollableFromDrag(dragging);
    whileDraggingRef.current = null;
    if (!closest3) {
      return;
    }
    scheduleScrollUpdate.cancel();
    closest3.removeAttribute(scrollContainer.contextId);
    closest3.removeEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
  }, [onClosestScroll, scheduleScrollUpdate]);
  var scroll3 = useCallback3(function(change) {
    var dragging = whileDraggingRef.current;
    !dragging ? true ? invariant2(false, "Cannot scroll when there is no drag") : invariant2(false) : void 0;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !closest3 ? true ? invariant2(false, "Cannot scroll a droppable with no closest scrollable") : invariant2(false) : void 0;
    closest3.scrollTop += change.y;
    closest3.scrollLeft += change.x;
  }, []);
  var callbacks = useMemo6(function() {
    return {
      getDimensionAndWatchScroll,
      getScrollWhileDragging,
      dragStopped,
      scroll: scroll3
    };
  }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll3]);
  var entry = useMemo6(function() {
    return {
      uniqueId,
      descriptor,
      callbacks
    };
  }, [callbacks, descriptor, uniqueId]);
  useIsomorphicLayoutEffect3(function() {
    publishedDescriptorRef.current = entry.descriptor;
    registry.droppable.register(entry);
    return function() {
      if (whileDraggingRef.current) {
        true ? warning3("Unsupported: changing the droppableId or type of a Droppable during a drag") : void 0;
        dragStopped();
      }
      registry.droppable.unregister(entry);
    };
  }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);
  useIsomorphicLayoutEffect3(function() {
    if (!whileDraggingRef.current) {
      return;
    }
    marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
  }, [args.isDropDisabled, marshal]);
  useIsomorphicLayoutEffect3(function() {
    if (!whileDraggingRef.current) {
      return;
    }
    marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
  }, [args.isCombineEnabled, marshal]);
}
function noop$2() {
}
var empty = {
  width: 0,
  height: 0,
  margin: noSpacing2
};
var getSize = function getSize2(_ref) {
  var isAnimatingOpenOnMount = _ref.isAnimatingOpenOnMount, placeholder2 = _ref.placeholder, animate = _ref.animate;
  if (isAnimatingOpenOnMount) {
    return empty;
  }
  if (animate === "close") {
    return empty;
  }
  return {
    height: placeholder2.client.borderBox.height,
    width: placeholder2.client.borderBox.width,
    margin: placeholder2.client.margin
  };
};
var getStyle = function getStyle2(_ref2) {
  var isAnimatingOpenOnMount = _ref2.isAnimatingOpenOnMount, placeholder2 = _ref2.placeholder, animate = _ref2.animate;
  var size2 = getSize({
    isAnimatingOpenOnMount,
    placeholder: placeholder2,
    animate
  });
  return {
    display: placeholder2.display,
    boxSizing: "border-box",
    width: size2.width,
    height: size2.height,
    marginTop: size2.margin.top,
    marginRight: size2.margin.right,
    marginBottom: size2.margin.bottom,
    marginLeft: size2.margin.left,
    flexShrink: "0",
    flexGrow: "0",
    pointerEvents: "none",
    transition: animate !== "none" ? transitions.placeholder : null
  };
};
function Placeholder(props) {
  var animateOpenTimerRef = (0, import_react126.useRef)(null);
  var tryClearAnimateOpenTimer = useCallback3(function() {
    if (!animateOpenTimerRef.current) {
      return;
    }
    clearTimeout(animateOpenTimerRef.current);
    animateOpenTimerRef.current = null;
  }, []);
  var animate = props.animate, onTransitionEnd = props.onTransitionEnd, onClose = props.onClose, contextId = props.contextId;
  var _useState = (0, import_react126.useState)(props.animate === "open"), isAnimatingOpenOnMount = _useState[0], setIsAnimatingOpenOnMount = _useState[1];
  (0, import_react126.useEffect)(function() {
    if (!isAnimatingOpenOnMount) {
      return noop$2;
    }
    if (animate !== "open") {
      tryClearAnimateOpenTimer();
      setIsAnimatingOpenOnMount(false);
      return noop$2;
    }
    if (animateOpenTimerRef.current) {
      return noop$2;
    }
    animateOpenTimerRef.current = setTimeout(function() {
      animateOpenTimerRef.current = null;
      setIsAnimatingOpenOnMount(false);
    });
    return tryClearAnimateOpenTimer;
  }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
  var onSizeChangeEnd = useCallback3(function(event) {
    if (event.propertyName !== "height") {
      return;
    }
    onTransitionEnd();
    if (animate === "close") {
      onClose();
    }
  }, [animate, onClose, onTransitionEnd]);
  var style3 = getStyle({
    isAnimatingOpenOnMount,
    animate: props.animate,
    placeholder: props.placeholder
  });
  return import_react126.default.createElement(props.placeholder.tagName, {
    style: style3,
    "data-rbd-placeholder-context-id": contextId,
    onTransitionEnd: onSizeChangeEnd,
    ref: props.innerRef
  });
}
var Placeholder$1 = import_react126.default.memo(Placeholder);
var DroppableContext = import_react126.default.createContext(null);
function checkIsValidInnerRef(el) {
  !(el && isHtmlElement(el)) ? true ? invariant2(false, "\n    provided.innerRef has not been provided with a HTMLElement.\n\n    You can find a guide on using the innerRef callback functions at:\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\n  ") : invariant2(false) : void 0;
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function runChecks(args, checks) {
  checks.forEach(function(check) {
    return check(args);
  });
}
var shared = [function required(_ref) {
  var props = _ref.props;
  !props.droppableId ? true ? invariant2(false, "A Droppable requires a droppableId prop") : invariant2(false) : void 0;
  !(typeof props.droppableId === "string") ? true ? invariant2(false, "A Droppable requires a [string] droppableId. Provided: [" + typeof props.droppableId + "]") : invariant2(false) : void 0;
}, function _boolean(_ref2) {
  var props = _ref2.props;
  !isBoolean(props.isDropDisabled) ? true ? invariant2(false, "isDropDisabled must be a boolean") : invariant2(false) : void 0;
  !isBoolean(props.isCombineEnabled) ? true ? invariant2(false, "isCombineEnabled must be a boolean") : invariant2(false) : void 0;
  !isBoolean(props.ignoreContainerClipping) ? true ? invariant2(false, "ignoreContainerClipping must be a boolean") : invariant2(false) : void 0;
}, function ref(_ref3) {
  var getDroppableRef = _ref3.getDroppableRef;
  checkIsValidInnerRef(getDroppableRef());
}];
var standard = [function placeholder(_ref4) {
  var props = _ref4.props, getPlaceholderRef = _ref4.getPlaceholderRef;
  if (!props.placeholder) {
    return;
  }
  var ref2 = getPlaceholderRef();
  if (ref2) {
    return;
  }
  true ? warning3('\n      Droppable setup issue [droppableId: "' + props.droppableId + '"]:\n      DroppableProvided > placeholder could not be found.\n\n      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.\n      More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n    ') : void 0;
}];
var virtual = [function hasClone(_ref5) {
  var props = _ref5.props;
  !props.renderClone ? true ? invariant2(false, "Must provide a clone render function (renderClone) for virtual lists") : invariant2(false) : void 0;
}, function hasNoPlaceholder(_ref6) {
  var getPlaceholderRef = _ref6.getPlaceholderRef;
  !!getPlaceholderRef() ? true ? invariant2(false, "Expected virtual list to not have a placeholder") : invariant2(false) : void 0;
}];
function useValidation(args) {
  useDevSetupWarning(function() {
    runChecks(args, shared);
    if (args.props.mode === "standard") {
      runChecks(args, standard);
    }
    if (args.props.mode === "virtual") {
      runChecks(args, virtual);
    }
  });
}
var AnimateInOut = function(_React$PureComponent) {
  _inheritsLoose(AnimateInOut2, _React$PureComponent);
  function AnimateInOut2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this.state = {
      isVisible: Boolean(_this.props.on),
      data: _this.props.on,
      animate: _this.props.shouldAnimate && _this.props.on ? "open" : "none"
    };
    _this.onClose = function() {
      if (_this.state.animate !== "close") {
        return;
      }
      _this.setState({
        isVisible: false
      });
    };
    return _this;
  }
  AnimateInOut2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (!props.shouldAnimate) {
      return {
        isVisible: Boolean(props.on),
        data: props.on,
        animate: "none"
      };
    }
    if (props.on) {
      return {
        isVisible: true,
        data: props.on,
        animate: "open"
      };
    }
    if (state.isVisible) {
      return {
        isVisible: true,
        data: state.data,
        animate: "close"
      };
    }
    return {
      isVisible: false,
      animate: "close",
      data: null
    };
  };
  var _proto = AnimateInOut2.prototype;
  _proto.render = function render() {
    if (!this.state.isVisible) {
      return null;
    }
    var provided = {
      onClose: this.onClose,
      data: this.state.data,
      animate: this.state.animate
    };
    return this.props.children(provided);
  };
  return AnimateInOut2;
}(import_react126.default.PureComponent);
var zIndexOptions = {
  dragging: 5e3,
  dropAnimating: 4500
};
var getDraggingTransition = function getDraggingTransition2(shouldAnimateDragMovement, dropping) {
  if (dropping) {
    return transitions.drop(dropping.duration);
  }
  if (shouldAnimateDragMovement) {
    return transitions.snap;
  }
  return transitions.fluid;
};
var getDraggingOpacity = function getDraggingOpacity2(isCombining, isDropAnimating) {
  if (!isCombining) {
    return null;
  }
  return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
};
var getShouldDraggingAnimate = function getShouldDraggingAnimate2(dragging) {
  if (dragging.forceShouldAnimate != null) {
    return dragging.forceShouldAnimate;
  }
  return dragging.mode === "SNAP";
};
function getDraggingStyle(dragging) {
  var dimension = dragging.dimension;
  var box = dimension.client;
  var offset4 = dragging.offset, combineWith = dragging.combineWith, dropping = dragging.dropping;
  var isCombining = Boolean(combineWith);
  var shouldAnimate = getShouldDraggingAnimate(dragging);
  var isDropAnimating = Boolean(dropping);
  var transform = isDropAnimating ? transforms.drop(offset4, isCombining) : transforms.moveTo(offset4);
  var style3 = {
    position: "fixed",
    top: box.marginBox.top,
    left: box.marginBox.left,
    boxSizing: "border-box",
    width: box.borderBox.width,
    height: box.borderBox.height,
    transition: getDraggingTransition(shouldAnimate, dropping),
    transform,
    opacity: getDraggingOpacity(isCombining, isDropAnimating),
    zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
    pointerEvents: "none"
  };
  return style3;
}
function getSecondaryStyle(secondary) {
  return {
    transform: transforms.moveTo(secondary.offset),
    transition: secondary.shouldAnimateDisplacement ? null : "none"
  };
}
function getStyle$1(mapped) {
  return mapped.type === "DRAGGING" ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
}
function getDimension$1(descriptor, el, windowScroll) {
  if (windowScroll === void 0) {
    windowScroll = origin;
  }
  var computedStyles = window.getComputedStyle(el);
  var borderBox = el.getBoundingClientRect();
  var client = calculateBox(borderBox, computedStyles);
  var page = withScroll(client, windowScroll);
  var placeholder2 = {
    client,
    tagName: el.tagName.toLowerCase(),
    display: computedStyles.display
  };
  var displaceBy = {
    x: client.marginBox.width,
    y: client.marginBox.height
  };
  var dimension = {
    descriptor,
    placeholder: placeholder2,
    displaceBy,
    client,
    page
  };
  return dimension;
}
function useDraggablePublisher(args) {
  var uniqueId = useUniqueId("draggable");
  var descriptor = args.descriptor, registry = args.registry, getDraggableRef = args.getDraggableRef, canDragInteractiveElements = args.canDragInteractiveElements, shouldRespectForcePress = args.shouldRespectForcePress, isEnabled = args.isEnabled;
  var options = useMemo6(function() {
    return {
      canDragInteractiveElements,
      shouldRespectForcePress,
      isEnabled
    };
  }, [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
  var getDimension2 = useCallback3(function(windowScroll) {
    var el = getDraggableRef();
    !el ? true ? invariant2(false, "Cannot get dimension when no ref is set") : invariant2(false) : void 0;
    return getDimension$1(descriptor, el, windowScroll);
  }, [descriptor, getDraggableRef]);
  var entry = useMemo6(function() {
    return {
      uniqueId,
      descriptor,
      options,
      getDimension: getDimension2
    };
  }, [descriptor, getDimension2, options, uniqueId]);
  var publishedRef = (0, import_react126.useRef)(entry);
  var isFirstPublishRef = (0, import_react126.useRef)(true);
  useIsomorphicLayoutEffect3(function() {
    registry.draggable.register(publishedRef.current);
    return function() {
      return registry.draggable.unregister(publishedRef.current);
    };
  }, [registry.draggable]);
  useIsomorphicLayoutEffect3(function() {
    if (isFirstPublishRef.current) {
      isFirstPublishRef.current = false;
      return;
    }
    var last = publishedRef.current;
    publishedRef.current = entry;
    registry.draggable.update(entry, last);
  }, [entry, registry.draggable]);
}
function useValidation$1(props, contextId, getRef) {
  useDevSetupWarning(function() {
    function prefix2(id2) {
      return "Draggable[id: " + id2 + "]: ";
    }
    var id = props.draggableId;
    !id ? true ? invariant2(false, "Draggable requires a draggableId") : invariant2(false) : void 0;
    !(typeof id === "string") ? true ? invariant2(false, "Draggable requires a [string] draggableId.\n      Provided: [type: " + typeof id + "] (value: " + id + ")") : invariant2(false) : void 0;
    !isInteger(props.index) ? true ? invariant2(false, prefix2(id) + " requires an integer index prop") : invariant2(false) : void 0;
    if (props.mapped.type === "DRAGGING") {
      return;
    }
    checkIsValidInnerRef(getRef());
    if (props.isEnabled) {
      !findDragHandle(contextId, id) ? true ? invariant2(false, prefix2(id) + " Unable to find drag handle") : invariant2(false) : void 0;
    }
  });
}
function useClonePropValidation(isClone) {
  useDev(function() {
    var initialRef = (0, import_react126.useRef)(isClone);
    useDevSetupWarning(function() {
      !(isClone === initialRef.current) ? true ? invariant2(false, "Draggable isClone prop value changed during component life") : invariant2(false) : void 0;
    }, [isClone]);
  });
}
function preventHtml5Dnd(event) {
  event.preventDefault();
}
function Draggable(props) {
  var ref2 = (0, import_react126.useRef)(null);
  var setRef3 = useCallback3(function(el) {
    ref2.current = el;
  }, []);
  var getRef = useCallback3(function() {
    return ref2.current;
  }, []);
  var _useRequiredContext = useRequiredContext(AppContext), contextId = _useRequiredContext.contextId, dragHandleUsageInstructionsId = _useRequiredContext.dragHandleUsageInstructionsId, registry = _useRequiredContext.registry;
  var _useRequiredContext2 = useRequiredContext(DroppableContext), type = _useRequiredContext2.type, droppableId = _useRequiredContext2.droppableId;
  var descriptor = useMemo6(function() {
    return {
      id: props.draggableId,
      index: props.index,
      type,
      droppableId
    };
  }, [props.draggableId, props.index, type, droppableId]);
  var children2 = props.children, draggableId = props.draggableId, isEnabled = props.isEnabled, shouldRespectForcePress = props.shouldRespectForcePress, canDragInteractiveElements = props.canDragInteractiveElements, isClone = props.isClone, mapped = props.mapped, dropAnimationFinishedAction = props.dropAnimationFinished;
  useValidation$1(props, contextId, getRef);
  useClonePropValidation(isClone);
  if (!isClone) {
    var forPublisher = useMemo6(function() {
      return {
        descriptor,
        registry,
        getDraggableRef: getRef,
        canDragInteractiveElements,
        shouldRespectForcePress,
        isEnabled
      };
    }, [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
    useDraggablePublisher(forPublisher);
  }
  var dragHandleProps = useMemo6(function() {
    return isEnabled ? {
      tabIndex: 0,
      role: "button",
      "aria-describedby": dragHandleUsageInstructionsId,
      "data-rbd-drag-handle-draggable-id": draggableId,
      "data-rbd-drag-handle-context-id": contextId,
      draggable: false,
      onDragStart: preventHtml5Dnd
    } : null;
  }, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
  var onMoveEnd = useCallback3(function(event) {
    if (mapped.type !== "DRAGGING") {
      return;
    }
    if (!mapped.dropping) {
      return;
    }
    if (event.propertyName !== "transform") {
      return;
    }
    dropAnimationFinishedAction();
  }, [dropAnimationFinishedAction, mapped]);
  var provided = useMemo6(function() {
    var style3 = getStyle$1(mapped);
    var onTransitionEnd = mapped.type === "DRAGGING" && mapped.dropping ? onMoveEnd : null;
    var result = {
      innerRef: setRef3,
      draggableProps: {
        "data-rbd-draggable-context-id": contextId,
        "data-rbd-draggable-id": draggableId,
        style: style3,
        onTransitionEnd
      },
      dragHandleProps
    };
    return result;
  }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef3]);
  var rubric = useMemo6(function() {
    return {
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    };
  }, [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
  return children2(provided, mapped.snapshot, rubric);
}
var isStrictEqual = function(a, b84) {
  return a === b84;
};
var whatIsDraggedOverFromResult = function(result) {
  var combine2 = result.combine, destination = result.destination;
  if (destination) {
    return destination.droppableId;
  }
  if (combine2) {
    return combine2.droppableId;
  }
  return null;
};
var getCombineWithFromResult = function getCombineWithFromResult2(result) {
  return result.combine ? result.combine.draggableId : null;
};
var getCombineWithFromImpact = function getCombineWithFromImpact2(impact) {
  return impact.at && impact.at.type === "COMBINE" ? impact.at.combine.draggableId : null;
};
function getDraggableSelector() {
  var memoizedOffset = memoize_one_esm_default(function(x, y) {
    return {
      x,
      y
    };
  });
  var getMemoizedSnapshot = memoize_one_esm_default(function(mode, isClone, draggingOver, combineWith, dropping) {
    return {
      isDragging: true,
      isClone,
      isDropAnimating: Boolean(dropping),
      dropAnimation: dropping,
      mode,
      draggingOver,
      combineWith,
      combineTargetFor: null
    };
  });
  var getMemoizedProps = memoize_one_esm_default(function(offset4, mode, dimension, isClone, draggingOver, combineWith, forceShouldAnimate) {
    return {
      mapped: {
        type: "DRAGGING",
        dropping: null,
        draggingOver,
        combineWith,
        mode,
        offset: offset4,
        dimension,
        forceShouldAnimate,
        snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
      }
    };
  });
  var selector = function selector2(state, ownProps) {
    if (state.isDragging) {
      if (state.critical.draggable.id !== ownProps.draggableId) {
        return null;
      }
      var offset4 = state.current.client.offset;
      var dimension = state.dimensions.draggables[ownProps.draggableId];
      var draggingOver = whatIsDraggedOver(state.impact);
      var combineWith = getCombineWithFromImpact(state.impact);
      var forceShouldAnimate = state.forceShouldAnimate;
      return getMemoizedProps(memoizedOffset(offset4.x, offset4.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (completed.result.draggableId !== ownProps.draggableId) {
        return null;
      }
      var isClone = ownProps.isClone;
      var _dimension = state.dimensions.draggables[ownProps.draggableId];
      var result = completed.result;
      var mode = result.mode;
      var _draggingOver = whatIsDraggedOverFromResult(result);
      var _combineWith = getCombineWithFromResult(result);
      var duration = state.dropDuration;
      var dropping = {
        duration,
        curve: curves.drop,
        moveTo: state.newHomeClientOffset,
        opacity: _combineWith ? combine.opacity.drop : null,
        scale: _combineWith ? combine.scale.drop : null
      };
      return {
        mapped: {
          type: "DRAGGING",
          offset: state.newHomeClientOffset,
          dimension: _dimension,
          dropping,
          draggingOver: _draggingOver,
          combineWith: _combineWith,
          mode,
          forceShouldAnimate: null,
          snapshot: getMemoizedSnapshot(mode, isClone, _draggingOver, _combineWith, dropping)
        }
      };
    }
    return null;
  };
  return selector;
}
function getSecondarySnapshot(combineTargetFor) {
  return {
    isDragging: false,
    isDropAnimating: false,
    isClone: false,
    dropAnimation: null,
    mode: null,
    draggingOver: null,
    combineTargetFor,
    combineWith: null
  };
}
var atRest = {
  mapped: {
    type: "SECONDARY",
    offset: origin,
    combineTargetFor: null,
    shouldAnimateDisplacement: true,
    snapshot: getSecondarySnapshot(null)
  }
};
function getSecondarySelector() {
  var memoizedOffset = memoize_one_esm_default(function(x, y) {
    return {
      x,
      y
    };
  });
  var getMemoizedSnapshot = memoize_one_esm_default(getSecondarySnapshot);
  var getMemoizedProps = memoize_one_esm_default(function(offset4, combineTargetFor, shouldAnimateDisplacement) {
    if (combineTargetFor === void 0) {
      combineTargetFor = null;
    }
    return {
      mapped: {
        type: "SECONDARY",
        offset: offset4,
        combineTargetFor,
        shouldAnimateDisplacement,
        snapshot: getMemoizedSnapshot(combineTargetFor)
      }
    };
  });
  var getFallback = function getFallback2(combineTargetFor) {
    return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
  };
  var getProps = function getProps2(ownId, draggingId, impact, afterCritical) {
    var visualDisplacement = impact.displaced.visible[ownId];
    var isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
    var combine2 = tryGetCombine(impact);
    var combineTargetFor = combine2 && combine2.draggableId === ownId ? draggingId : null;
    if (!visualDisplacement) {
      if (!isAfterCriticalInVirtualList) {
        return getFallback(combineTargetFor);
      }
      if (impact.displaced.invisible[ownId]) {
        return null;
      }
      var change = negate(afterCritical.displacedBy.point);
      var _offset = memoizedOffset(change.x, change.y);
      return getMemoizedProps(_offset, combineTargetFor, true);
    }
    if (isAfterCriticalInVirtualList) {
      return getFallback(combineTargetFor);
    }
    var displaceBy = impact.displacedBy.point;
    var offset4 = memoizedOffset(displaceBy.x, displaceBy.y);
    return getMemoizedProps(offset4, combineTargetFor, visualDisplacement.shouldAnimate);
  };
  var selector = function selector2(state, ownProps) {
    if (state.isDragging) {
      if (state.critical.draggable.id === ownProps.draggableId) {
        return null;
      }
      return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (completed.result.draggableId === ownProps.draggableId) {
        return null;
      }
      return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
    }
    return null;
  };
  return selector;
}
var makeMapStateToProps = function makeMapStateToProps2() {
  var draggingSelector = getDraggableSelector();
  var secondarySelector = getSecondarySelector();
  var selector = function selector2(state, ownProps) {
    return draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
  };
  return selector;
};
var mapDispatchToProps = {
  dropAnimationFinished
};
var ConnectedDraggable = connect_default(makeMapStateToProps, mapDispatchToProps, null, {
  context: StoreContext,
  pure: true,
  areStatePropsEqual: isStrictEqual
})(Draggable);
function PrivateDraggable(props) {
  var droppableContext = useRequiredContext(DroppableContext);
  var isUsingCloneFor = droppableContext.isUsingCloneFor;
  if (isUsingCloneFor === props.draggableId && !props.isClone) {
    return null;
  }
  return import_react126.default.createElement(ConnectedDraggable, props);
}
function PublicDraggable(props) {
  var isEnabled = typeof props.isDragDisabled === "boolean" ? !props.isDragDisabled : true;
  var canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
  var shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
  return import_react126.default.createElement(PrivateDraggable, _extends({}, props, {
    isClone: false,
    isEnabled,
    canDragInteractiveElements,
    shouldRespectForcePress
  }));
}
function Droppable(props) {
  var appContext = (0, import_react126.useContext)(AppContext);
  !appContext ? true ? invariant2(false, "Could not find app context") : invariant2(false) : void 0;
  var contextId = appContext.contextId, isMovementAllowed2 = appContext.isMovementAllowed;
  var droppableRef = (0, import_react126.useRef)(null);
  var placeholderRef = (0, import_react126.useRef)(null);
  var children2 = props.children, droppableId = props.droppableId, type = props.type, mode = props.mode, direction = props.direction, ignoreContainerClipping = props.ignoreContainerClipping, isDropDisabled = props.isDropDisabled, isCombineEnabled = props.isCombineEnabled, snapshot = props.snapshot, useClone = props.useClone, updateViewportMaxScroll3 = props.updateViewportMaxScroll, getContainerForClone = props.getContainerForClone;
  var getDroppableRef = useCallback3(function() {
    return droppableRef.current;
  }, []);
  var setDroppableRef = useCallback3(function(value) {
    droppableRef.current = value;
  }, []);
  var getPlaceholderRef = useCallback3(function() {
    return placeholderRef.current;
  }, []);
  var setPlaceholderRef = useCallback3(function(value) {
    placeholderRef.current = value;
  }, []);
  useValidation({
    props,
    getDroppableRef,
    getPlaceholderRef
  });
  var onPlaceholderTransitionEnd = useCallback3(function() {
    if (isMovementAllowed2()) {
      updateViewportMaxScroll3({
        maxScroll: getMaxWindowScroll()
      });
    }
  }, [isMovementAllowed2, updateViewportMaxScroll3]);
  useDroppablePublisher({
    droppableId,
    type,
    mode,
    direction,
    isDropDisabled,
    isCombineEnabled,
    ignoreContainerClipping,
    getDroppableRef
  });
  var placeholder2 = import_react126.default.createElement(AnimateInOut, {
    on: props.placeholder,
    shouldAnimate: props.shouldAnimatePlaceholder
  }, function(_ref) {
    var onClose = _ref.onClose, data = _ref.data, animate = _ref.animate;
    return import_react126.default.createElement(Placeholder$1, {
      placeholder: data,
      onClose,
      innerRef: setPlaceholderRef,
      animate,
      contextId,
      onTransitionEnd: onPlaceholderTransitionEnd
    });
  });
  var provided = useMemo6(function() {
    return {
      innerRef: setDroppableRef,
      placeholder: placeholder2,
      droppableProps: {
        "data-rbd-droppable-id": droppableId,
        "data-rbd-droppable-context-id": contextId
      }
    };
  }, [contextId, droppableId, placeholder2, setDroppableRef]);
  var isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
  var droppableContext = useMemo6(function() {
    return {
      droppableId,
      type,
      isUsingCloneFor
    };
  }, [droppableId, isUsingCloneFor, type]);
  function getClone() {
    if (!useClone) {
      return null;
    }
    var dragging = useClone.dragging, render = useClone.render;
    var node = import_react126.default.createElement(PrivateDraggable, {
      draggableId: dragging.draggableId,
      index: dragging.source.index,
      isClone: true,
      isEnabled: true,
      shouldRespectForcePress: false,
      canDragInteractiveElements: true
    }, function(draggableProvided, draggableSnapshot) {
      return render(draggableProvided, draggableSnapshot, dragging);
    });
    return import_react_dom5.default.createPortal(node, getContainerForClone());
  }
  return import_react126.default.createElement(DroppableContext.Provider, {
    value: droppableContext
  }, children2(provided, snapshot), getClone());
}
var isMatchingType = function isMatchingType2(type, critical) {
  return type === critical.droppable.type;
};
var getDraggable = function getDraggable2(critical, dimensions) {
  return dimensions.draggables[critical.draggable.id];
};
var makeMapStateToProps$1 = function makeMapStateToProps3() {
  var idleWithAnimation = {
    placeholder: null,
    shouldAnimatePlaceholder: true,
    snapshot: {
      isDraggingOver: false,
      draggingOverWith: null,
      draggingFromThisWith: null,
      isUsingPlaceholder: false
    },
    useClone: null
  };
  var idleWithoutAnimation = _extends({}, idleWithAnimation, {
    shouldAnimatePlaceholder: false
  });
  var getDraggableRubric = memoize_one_esm_default(function(descriptor) {
    return {
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    };
  });
  var getMapProps = memoize_one_esm_default(function(id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) {
    var draggableId = dragging.descriptor.id;
    var isHome = dragging.descriptor.droppableId === id;
    if (isHome) {
      var useClone = renderClone ? {
        render: renderClone,
        dragging: getDraggableRubric(dragging.descriptor)
      } : null;
      var _snapshot = {
        isDraggingOver: isDraggingOverForConsumer,
        draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
        draggingFromThisWith: draggableId,
        isUsingPlaceholder: true
      };
      return {
        placeholder: dragging.placeholder,
        shouldAnimatePlaceholder: false,
        snapshot: _snapshot,
        useClone
      };
    }
    if (!isEnabled) {
      return idleWithoutAnimation;
    }
    if (!isDraggingOverForImpact) {
      return idleWithAnimation;
    }
    var snapshot = {
      isDraggingOver: isDraggingOverForConsumer,
      draggingOverWith: draggableId,
      draggingFromThisWith: null,
      isUsingPlaceholder: true
    };
    return {
      placeholder: dragging.placeholder,
      shouldAnimatePlaceholder: true,
      snapshot,
      useClone: null
    };
  });
  var selector = function selector2(state, ownProps) {
    var id = ownProps.droppableId;
    var type = ownProps.type;
    var isEnabled = !ownProps.isDropDisabled;
    var renderClone = ownProps.renderClone;
    if (state.isDragging) {
      var critical = state.critical;
      if (!isMatchingType(type, critical)) {
        return idleWithoutAnimation;
      }
      var dragging = getDraggable(critical, state.dimensions);
      var isDraggingOver = whatIsDraggedOver(state.impact) === id;
      return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (!isMatchingType(type, completed.critical)) {
        return idleWithoutAnimation;
      }
      var _dragging = getDraggable(completed.critical, state.dimensions);
      return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, _dragging, renderClone);
    }
    if (state.phase === "IDLE" && state.completed && !state.shouldFlush) {
      var _completed = state.completed;
      if (!isMatchingType(type, _completed.critical)) {
        return idleWithoutAnimation;
      }
      var wasOver = whatIsDraggedOver(_completed.impact) === id;
      var wasCombining = Boolean(_completed.impact.at && _completed.impact.at.type === "COMBINE");
      var isHome = _completed.critical.droppable.id === id;
      if (wasOver) {
        return wasCombining ? idleWithAnimation : idleWithoutAnimation;
      }
      if (isHome) {
        return idleWithAnimation;
      }
      return idleWithoutAnimation;
    }
    return idleWithoutAnimation;
  };
  return selector;
};
var mapDispatchToProps$1 = {
  updateViewportMaxScroll
};
function getBody() {
  !document.body ? true ? invariant2(false, "document.body is not ready") : invariant2(false) : void 0;
  return document.body;
}
var defaultProps2 = {
  mode: "standard",
  type: "DEFAULT",
  direction: "vertical",
  isDropDisabled: false,
  isCombineEnabled: false,
  ignoreContainerClipping: false,
  renderClone: null,
  getContainerForClone: getBody
};
var ConnectedDroppable = connect_default(makeMapStateToProps$1, mapDispatchToProps$1, null, {
  context: StoreContext,
  pure: true,
  areStatePropsEqual: isStrictEqual
})(Droppable);
ConnectedDroppable.defaultProps = defaultProps2;

// node_modules/react-virtualized-auto-sizer/dist/react-virtualized-auto-sizer.esm.js
var import_react127 = __toESM(require_react());
var windowObject;
if (typeof window !== "undefined") {
  windowObject = window;
} else if (typeof self !== "undefined") {
  windowObject = self;
} else {
  windowObject = global;
}
var cancelFrame = null;
var requestFrame = null;
var TIMEOUT_DURATION = 20;
var clearTimeoutFn = windowObject.clearTimeout;
var setTimeoutFn = windowObject.setTimeout;
var cancelAnimationFrameFn = windowObject.cancelAnimationFrame || windowObject.mozCancelAnimationFrame || windowObject.webkitCancelAnimationFrame;
var requestAnimationFrameFn = windowObject.requestAnimationFrame || windowObject.mozRequestAnimationFrame || windowObject.webkitRequestAnimationFrame;
if (cancelAnimationFrameFn == null || requestAnimationFrameFn == null) {
  cancelFrame = clearTimeoutFn;
  requestFrame = function requestAnimationFrameViaSetTimeout(callback) {
    return setTimeoutFn(callback, TIMEOUT_DURATION);
  };
} else {
  cancelFrame = function cancelFrame2([animationFrameID, timeoutID]) {
    cancelAnimationFrameFn(animationFrameID);
    clearTimeoutFn(timeoutID);
  };
  requestFrame = function requestAnimationFrameWithSetTimeoutFallback(callback) {
    const animationFrameID = requestAnimationFrameFn(function animationFrameCallback() {
      clearTimeoutFn(timeoutID);
      callback();
    });
    const timeoutID = setTimeoutFn(function timeoutCallback() {
      cancelAnimationFrameFn(animationFrameID);
      callback();
    }, TIMEOUT_DURATION);
    return [animationFrameID, timeoutID];
  };
}
function createDetectElementResize(nonce) {
  let animationKeyframes;
  let animationName;
  let animationStartEvent;
  let animationStyle;
  let checkTriggers;
  let resetTriggers;
  let scrollListener2;
  const attachEvent = typeof document !== "undefined" && document.attachEvent;
  if (!attachEvent) {
    resetTriggers = function(element) {
      const triggers = element.__resizeTriggers__, expand3 = triggers.firstElementChild, contract = triggers.lastElementChild, expandChild = expand3.firstElementChild;
      contract.scrollLeft = contract.scrollWidth;
      contract.scrollTop = contract.scrollHeight;
      expandChild.style.width = expand3.offsetWidth + 1 + "px";
      expandChild.style.height = expand3.offsetHeight + 1 + "px";
      expand3.scrollLeft = expand3.scrollWidth;
      expand3.scrollTop = expand3.scrollHeight;
    };
    checkTriggers = function(element) {
      return element.offsetWidth !== element.__resizeLast__.width || element.offsetHeight !== element.__resizeLast__.height;
    };
    scrollListener2 = function(e) {
      if (e.target.className && typeof e.target.className.indexOf === "function" && e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0) {
        return;
      }
      const element = this;
      resetTriggers(this);
      if (this.__resizeRAF__) {
        cancelFrame(this.__resizeRAF__);
      }
      this.__resizeRAF__ = requestFrame(function animationFrame() {
        if (checkTriggers(element)) {
          element.__resizeLast__.width = element.offsetWidth;
          element.__resizeLast__.height = element.offsetHeight;
          element.__resizeListeners__.forEach(function forEachResizeListener(fn2) {
            fn2.call(element, e);
          });
        }
      });
    };
    let animation = false;
    let keyframeprefix = "";
    animationStartEvent = "animationstart";
    const domPrefixes = "Webkit Moz O ms".split(" ");
    let startEvents = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" ");
    let pfx = "";
    {
      const elm = document.createElement("fakeelement");
      if (elm.style.animationName !== void 0) {
        animation = true;
      }
      if (animation === false) {
        for (let i = 0; i < domPrefixes.length; i++) {
          if (elm.style[domPrefixes[i] + "AnimationName"] !== void 0) {
            pfx = domPrefixes[i];
            keyframeprefix = "-" + pfx.toLowerCase() + "-";
            animationStartEvent = startEvents[i];
            animation = true;
            break;
          }
        }
      }
    }
    animationName = "resizeanim";
    animationKeyframes = "@" + keyframeprefix + "keyframes " + animationName + " { from { opacity: 0; } to { opacity: 0; } } ";
    animationStyle = keyframeprefix + "animation: 1ms " + animationName + "; ";
  }
  const createStyles = function(doc) {
    if (!doc.getElementById("detectElementResize")) {
      const css = (animationKeyframes ? animationKeyframes : "") + ".resize-triggers { " + (animationStyle ? animationStyle : "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }', head = doc.head || doc.getElementsByTagName("head")[0], style3 = doc.createElement("style");
      style3.id = "detectElementResize";
      style3.type = "text/css";
      if (nonce != null) {
        style3.setAttribute("nonce", nonce);
      }
      if (style3.styleSheet) {
        style3.styleSheet.cssText = css;
      } else {
        style3.appendChild(doc.createTextNode(css));
      }
      head.appendChild(style3);
    }
  };
  const addResizeListener = function(element, fn2) {
    if (attachEvent) {
      element.attachEvent("onresize", fn2);
    } else {
      if (!element.__resizeTriggers__) {
        const doc = element.ownerDocument;
        const elementStyle = windowObject.getComputedStyle(element);
        if (elementStyle && elementStyle.position === "static") {
          element.style.position = "relative";
        }
        createStyles(doc);
        element.__resizeLast__ = {};
        element.__resizeListeners__ = [];
        (element.__resizeTriggers__ = doc.createElement("div")).className = "resize-triggers";
        const expandTrigger = doc.createElement("div");
        expandTrigger.className = "expand-trigger";
        expandTrigger.appendChild(doc.createElement("div"));
        const contractTrigger = doc.createElement("div");
        contractTrigger.className = "contract-trigger";
        element.__resizeTriggers__.appendChild(expandTrigger);
        element.__resizeTriggers__.appendChild(contractTrigger);
        element.appendChild(element.__resizeTriggers__);
        resetTriggers(element);
        element.addEventListener("scroll", scrollListener2, true);
        if (animationStartEvent) {
          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
            if (e.animationName === animationName) {
              resetTriggers(element);
            }
          };
          element.__resizeTriggers__.addEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
        }
      }
      element.__resizeListeners__.push(fn2);
    }
  };
  const removeResizeListener = function(element, fn2) {
    if (attachEvent) {
      element.detachEvent("onresize", fn2);
    } else {
      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn2), 1);
      if (!element.__resizeListeners__.length) {
        element.removeEventListener("scroll", scrollListener2, true);
        if (element.__resizeTriggers__.__animationListener__) {
          element.__resizeTriggers__.removeEventListener(animationStartEvent, element.__resizeTriggers__.__animationListener__);
          element.__resizeTriggers__.__animationListener__ = null;
        }
        try {
          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
        } catch (e) {
        }
      }
    }
  };
  return {
    addResizeListener,
    removeResizeListener
  };
}
var AutoSizer = class extends import_react127.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      height: this.props.defaultHeight || 0,
      width: this.props.defaultWidth || 0
    };
    this._autoSizer = null;
    this._detectElementResize = null;
    this._didLogDeprecationWarning = false;
    this._parentNode = null;
    this._resizeObserver = null;
    this._timeoutId = null;
    this._onResize = () => {
      this._timeoutId = null;
      const {
        disableHeight,
        disableWidth,
        onResize
      } = this.props;
      if (this._parentNode) {
        const style3 = window.getComputedStyle(this._parentNode) || {};
        const paddingLeft = parseFloat(style3.paddingLeft || "0");
        const paddingRight = parseFloat(style3.paddingRight || "0");
        const paddingTop = parseFloat(style3.paddingTop || "0");
        const paddingBottom = parseFloat(style3.paddingBottom || "0");
        const rect = this._parentNode.getBoundingClientRect();
        const height = rect.height - paddingTop - paddingBottom;
        const width = rect.width - paddingLeft - paddingRight;
        if (!disableHeight && this.state.height !== height || !disableWidth && this.state.width !== width) {
          this.setState({
            height,
            width
          });
          const maybeLogDeprecationWarning = () => {
            if (!this._didLogDeprecationWarning) {
              this._didLogDeprecationWarning = true;
              console.warn("scaledWidth and scaledHeight parameters have been deprecated; use width and height instead");
            }
          };
          if (typeof onResize === "function") {
            onResize({
              height,
              width,
              // TODO Remove these params in the next major release
              get scaledHeight() {
                maybeLogDeprecationWarning();
                return height;
              },
              get scaledWidth() {
                maybeLogDeprecationWarning();
                return width;
              }
            });
          }
        }
      }
    };
    this._setRef = (autoSizer) => {
      this._autoSizer = autoSizer;
    };
  }
  componentDidMount() {
    const {
      nonce
    } = this.props;
    const parentNode = this._autoSizer ? this._autoSizer.parentNode : null;
    if (parentNode != null && parentNode.ownerDocument && parentNode.ownerDocument.defaultView && parentNode instanceof parentNode.ownerDocument.defaultView.HTMLElement) {
      this._parentNode = parentNode;
      const ResizeObserverInstance = parentNode.ownerDocument.defaultView.ResizeObserver;
      if (ResizeObserverInstance != null) {
        this._resizeObserver = new ResizeObserverInstance(() => {
          this._timeoutId = setTimeout(this._onResize, 0);
        });
        this._resizeObserver.observe(parentNode);
      } else {
        this._detectElementResize = createDetectElementResize(nonce);
        this._detectElementResize.addResizeListener(parentNode, this._onResize);
      }
      this._onResize();
    }
  }
  componentWillUnmount() {
    if (this._parentNode) {
      if (this._detectElementResize) {
        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
      }
      if (this._timeoutId !== null) {
        clearTimeout(this._timeoutId);
      }
      if (this._resizeObserver) {
        this._resizeObserver.disconnect();
      }
    }
  }
  render() {
    const {
      children: children2,
      defaultHeight,
      defaultWidth,
      disableHeight = false,
      disableWidth = false,
      doNotBailOutOnEmptyChildren = false,
      nonce,
      onResize,
      style: style3 = {},
      tagName = "div",
      ...rest
    } = this.props;
    const {
      height,
      width
    } = this.state;
    const outerStyle = {
      overflow: "visible"
    };
    const childParams = {};
    let bailoutOnChildren = false;
    if (!disableHeight) {
      if (height === 0) {
        bailoutOnChildren = true;
      }
      outerStyle.height = 0;
      childParams.height = height;
      childParams.scaledHeight = height;
    }
    if (!disableWidth) {
      if (width === 0) {
        bailoutOnChildren = true;
      }
      outerStyle.width = 0;
      childParams.width = width;
      childParams.scaledWidth = width;
    }
    if (doNotBailOutOnEmptyChildren) {
      bailoutOnChildren = false;
    }
    return (0, import_react127.createElement)(tagName, {
      ref: this._setRef,
      style: {
        ...outerStyle,
        ...style3
      },
      ...rest
    }, !bailoutOnChildren && children2(childParams));
  }
};

// node_modules/react-window/dist/index.esm.js
var import_react128 = __toESM(require_react());
var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
var now = hasNativePerformanceNow ? function() {
  return performance.now();
} : function() {
  return Date.now();
};
function cancelTimeout(timeoutID) {
  cancelAnimationFrame(timeoutID.id);
}
function requestTimeout(callback, delay3) {
  var start4 = now();
  function tick() {
    if (now() - start4 >= delay3) {
      callback.call(null);
    } else {
      timeoutID.id = requestAnimationFrame(tick);
    }
  }
  var timeoutID = {
    id: requestAnimationFrame(tick)
  };
  return timeoutID;
}
var size = -1;
function getScrollbarSize(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (size === -1 || recalculate) {
    var div = document.createElement("div");
    var style3 = div.style;
    style3.width = "50px";
    style3.height = "50px";
    style3.overflow = "scroll";
    document.body.appendChild(div);
    size = div.offsetWidth - div.clientWidth;
    document.body.removeChild(div);
  }
  return size;
}
var cachedRTLResult = null;
function getRTLOffsetType(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (cachedRTLResult === null || recalculate) {
    var outerDiv = document.createElement("div");
    var outerStyle = outerDiv.style;
    outerStyle.width = "50px";
    outerStyle.height = "50px";
    outerStyle.overflow = "scroll";
    outerStyle.direction = "rtl";
    var innerDiv = document.createElement("div");
    var innerStyle = innerDiv.style;
    innerStyle.width = "100px";
    innerStyle.height = "100px";
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);
    if (outerDiv.scrollLeft > 0) {
      cachedRTLResult = "positive-descending";
    } else {
      outerDiv.scrollLeft = 1;
      if (outerDiv.scrollLeft === 0) {
        cachedRTLResult = "negative";
      } else {
        cachedRTLResult = "positive-ascending";
      }
    }
    document.body.removeChild(outerDiv);
    return cachedRTLResult;
  }
  return cachedRTLResult;
}
var IS_SCROLLING_DEBOUNCE_INTERVAL = 150;
var defaultItemKey = function defaultItemKey2(_ref) {
  var columnIndex = _ref.columnIndex, data = _ref.data, rowIndex = _ref.rowIndex;
  return rowIndex + ":" + columnIndex;
};
var devWarningsOverscanCount = null;
var devWarningsOverscanRowsColumnsCount = null;
var devWarningsTagName = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsOverscanCount = /* @__PURE__ */ new WeakSet();
    devWarningsOverscanRowsColumnsCount = /* @__PURE__ */ new WeakSet();
    devWarningsTagName = /* @__PURE__ */ new WeakSet();
  }
}
function createGridComponent(_ref2) {
  var _class;
  var getColumnOffset3 = _ref2.getColumnOffset, getColumnStartIndexForOffset3 = _ref2.getColumnStartIndexForOffset, getColumnStopIndexForStartIndex3 = _ref2.getColumnStopIndexForStartIndex, getColumnWidth3 = _ref2.getColumnWidth, getEstimatedTotalHeight4 = _ref2.getEstimatedTotalHeight, getEstimatedTotalWidth4 = _ref2.getEstimatedTotalWidth, getOffsetForColumnAndAlignment3 = _ref2.getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment3 = _ref2.getOffsetForRowAndAlignment, getRowHeight3 = _ref2.getRowHeight, getRowOffset3 = _ref2.getRowOffset, getRowStartIndexForOffset3 = _ref2.getRowStartIndexForOffset, getRowStopIndexForStartIndex3 = _ref2.getRowStopIndexForStartIndex, initInstanceProps5 = _ref2.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref2.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(Grid, _PureComponent);
    function Grid(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._resetIsScrollingTimeoutId = null;
      _this._outerRef = void 0;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        horizontalScrollDirection: "forward",
        scrollLeft: typeof _this.props.initialScrollLeft === "number" ? _this.props.initialScrollLeft : 0,
        scrollTop: typeof _this.props.initialScrollTop === "number" ? _this.props.initialScrollTop : 0,
        scrollUpdateWasRequested: false,
        verticalScrollDirection: "forward"
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {
        return _this.props.onItemsRendered({
          overscanColumnStartIndex,
          overscanColumnStopIndex,
          overscanRowStartIndex,
          overscanRowStopIndex,
          visibleColumnStartIndex,
          visibleColumnStopIndex,
          visibleRowStartIndex,
          visibleRowStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          horizontalScrollDirection,
          scrollLeft,
          scrollTop,
          verticalScrollDirection,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(rowIndex, columnIndex) {
        var _this$props = _this.props, columnWidth = _this$props.columnWidth, direction = _this$props.direction, rowHeight = _this$props.rowHeight;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);
        var key = rowIndex + ":" + columnIndex;
        var style3;
        if (itemStyleCache.hasOwnProperty(key)) {
          style3 = itemStyleCache[key];
        } else {
          var _offset = getColumnOffset3(_this.props, columnIndex, _this._instanceProps);
          var isRtl = direction === "rtl";
          itemStyleCache[key] = style3 = {
            position: "absolute",
            left: isRtl ? void 0 : _offset,
            right: isRtl ? _offset : void 0,
            top: getRowOffset3(_this.props, rowIndex, _this._instanceProps),
            height: getRowHeight3(_this.props, rowIndex, _this._instanceProps),
            width: getColumnWidth3(_this.props, columnIndex, _this._instanceProps)
          };
        }
        return style3;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
        return {};
      });
      _this._onScroll = function(event) {
        var _event$currentTarget = event.currentTarget, clientHeight = _event$currentTarget.clientHeight, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop, scrollHeight = _event$currentTarget.scrollHeight, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
            return null;
          }
          var direction = _this.props.direction;
          var calculatedScrollLeft = scrollLeft;
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                calculatedScrollLeft = -scrollLeft;
                break;
              case "positive-descending":
                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));
          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
            scrollLeft: calculatedScrollLeft,
            scrollTop: calculatedScrollTop,
            verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward",
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref2) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref2;
        if (typeof outerRef === "function") {
          outerRef(ref2);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref2;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1);
        });
      };
      return _this;
    }
    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = Grid.prototype;
    _proto.scrollTo = function scrollTo(_ref3) {
      var scrollLeft = _ref3.scrollLeft, scrollTop = _ref3.scrollTop;
      if (scrollLeft !== void 0) {
        scrollLeft = Math.max(0, scrollLeft);
      }
      if (scrollTop !== void 0) {
        scrollTop = Math.max(0, scrollTop);
      }
      this.setState(function(prevState) {
        if (scrollLeft === void 0) {
          scrollLeft = prevState.scrollLeft;
        }
        if (scrollTop === void 0) {
          scrollTop = prevState.scrollTop;
        }
        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
          return null;
        }
        return {
          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
          scrollLeft,
          scrollTop,
          scrollUpdateWasRequested: true,
          verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward"
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem(_ref4) {
      var _ref4$align = _ref4.align, align = _ref4$align === void 0 ? "auto" : _ref4$align, columnIndex = _ref4.columnIndex, rowIndex = _ref4.rowIndex;
      var _this$props2 = this.props, columnCount = _this$props2.columnCount, height = _this$props2.height, rowCount = _this$props2.rowCount, width = _this$props2.width;
      var _this$state = this.state, scrollLeft = _this$state.scrollLeft, scrollTop = _this$state.scrollTop;
      var scrollbarSize = getScrollbarSize();
      if (columnIndex !== void 0) {
        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));
      }
      if (rowIndex !== void 0) {
        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;
      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;
      this.scrollTo({
        scrollLeft: columnIndex !== void 0 ? getOffsetForColumnAndAlignment3(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,
        scrollTop: rowIndex !== void 0 ? getOffsetForRowAndAlignment3(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop
      });
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, initialScrollLeft = _this$props3.initialScrollLeft, initialScrollTop = _this$props3.initialScrollTop;
      if (this._outerRef != null) {
        var outerRef = this._outerRef;
        if (typeof initialScrollLeft === "number") {
          outerRef.scrollLeft = initialScrollLeft;
        }
        if (typeof initialScrollTop === "number") {
          outerRef.scrollTop = initialScrollTop;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var direction = this.props.direction;
      var _this$state2 = this.state, scrollLeft = _this$state2.scrollLeft, scrollTop = _this$state2.scrollTop, scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "rtl") {
          switch (getRTLOffsetType()) {
            case "negative":
              outerRef.scrollLeft = -scrollLeft;
              break;
            case "positive-ascending":
              outerRef.scrollLeft = scrollLeft;
              break;
            default:
              var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;
              break;
          }
        } else {
          outerRef.scrollLeft = Math.max(0, scrollLeft);
        }
        outerRef.scrollTop = Math.max(0, scrollTop);
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props4 = this.props, children2 = _this$props4.children, className = _this$props4.className, columnCount = _this$props4.columnCount, direction = _this$props4.direction, height = _this$props4.height, innerRef = _this$props4.innerRef, innerElementType = _this$props4.innerElementType, innerTagName = _this$props4.innerTagName, itemData = _this$props4.itemData, _this$props4$itemKey = _this$props4.itemKey, itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey, outerElementType = _this$props4.outerElementType, outerTagName = _this$props4.outerTagName, rowCount = _this$props4.rowCount, style3 = _this$props4.style, useIsScrolling = _this$props4.useIsScrolling, width = _this$props4.width;
      var isScrolling = this.state.isScrolling;
      var _this$_getHorizontalR = this._getHorizontalRangeToRender(), columnStartIndex = _this$_getHorizontalR[0], columnStopIndex = _this$_getHorizontalR[1];
      var _this$_getVerticalRan = this._getVerticalRangeToRender(), rowStartIndex = _this$_getVerticalRan[0], rowStopIndex = _this$_getVerticalRan[1];
      var items = [];
      if (columnCount > 0 && rowCount) {
        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {
          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {
            items.push((0, import_react128.createElement)(children2, {
              columnIndex: _columnIndex,
              data: itemData,
              isScrolling: useIsScrolling ? isScrolling : void 0,
              key: itemKey({
                columnIndex: _columnIndex,
                data: itemData,
                rowIndex: _rowIndex
              }),
              rowIndex: _rowIndex,
              style: this._getItemStyle(_rowIndex, _columnIndex)
            }));
          }
        }
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      return (0, import_react128.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll: this._onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction
        }, style3)
      }, (0, import_react128.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: estimatedTotalHeight,
          pointerEvents: isScrolling ? "none" : void 0,
          width: estimatedTotalWidth
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      var _this$props5 = this.props, columnCount = _this$props5.columnCount, onItemsRendered = _this$props5.onItemsRendered, onScroll = _this$props5.onScroll, rowCount = _this$props5.rowCount;
      if (typeof onItemsRendered === "function") {
        if (columnCount > 0 && rowCount > 0) {
          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(), _overscanColumnStartIndex = _this$_getHorizontalR2[0], _overscanColumnStopIndex = _this$_getHorizontalR2[1], _visibleColumnStartIndex = _this$_getHorizontalR2[2], _visibleColumnStopIndex = _this$_getHorizontalR2[3];
          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(), _overscanRowStartIndex = _this$_getVerticalRan2[0], _overscanRowStopIndex = _this$_getVerticalRan2[1], _visibleRowStartIndex = _this$_getVerticalRan2[2], _visibleRowStopIndex = _this$_getVerticalRan2[3];
          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);
        }
      }
      if (typeof onScroll === "function") {
        var _this$state3 = this.state, _horizontalScrollDirection = _this$state3.horizontalScrollDirection, _scrollLeft = _this$state3.scrollLeft, _scrollTop = _this$state3.scrollTop, _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested, _verticalScrollDirection = _this$state3.verticalScrollDirection;
        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);
      }
    };
    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {
      var _this$props6 = this.props, columnCount = _this$props6.columnCount, overscanColumnCount = _this$props6.overscanColumnCount, overscanColumnsCount = _this$props6.overscanColumnsCount, overscanCount = _this$props6.overscanCount, rowCount = _this$props6.rowCount;
      var _this$state4 = this.state, horizontalScrollDirection = _this$state4.horizontalScrollDirection, isScrolling = _this$state4.isScrolling, scrollLeft = _this$state4.scrollLeft;
      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getColumnStartIndexForOffset3(this.props, scrollLeft, this._instanceProps);
      var stopIndex = getColumnStopIndexForStartIndex3(this.props, startIndex, scrollLeft, this._instanceProps);
      var overscanBackward = !isScrolling || horizontalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || horizontalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {
      var _this$props7 = this.props, columnCount = _this$props7.columnCount, overscanCount = _this$props7.overscanCount, overscanRowCount = _this$props7.overscanRowCount, overscanRowsCount = _this$props7.overscanRowsCount, rowCount = _this$props7.rowCount;
      var _this$state5 = this.state, isScrolling = _this$state5.isScrolling, verticalScrollDirection = _this$state5.verticalScrollDirection, scrollTop = _this$state5.scrollTop;
      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getRowStartIndexForOffset3(this.props, scrollTop, this._instanceProps);
      var stopIndex = getRowStopIndexForStartIndex3(this.props, startIndex, scrollTop, this._instanceProps);
      var overscanBackward = !isScrolling || verticalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || verticalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return Grid;
  }(import_react128.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps = function validateSharedProps2(_ref5, _ref6) {
  var children2 = _ref5.children, direction = _ref5.direction, height = _ref5.height, innerTagName = _ref5.innerTagName, outerTagName = _ref5.outerTagName, overscanColumnsCount = _ref5.overscanColumnsCount, overscanCount = _ref5.overscanCount, overscanRowsCount = _ref5.overscanRowsCount, width = _ref5.width;
  var instance = _ref6.instance;
  if (true) {
    if (typeof overscanCount === "number") {
      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {
        devWarningsOverscanCount.add(instance);
        console.warn("The overscanCount prop has been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (typeof overscanColumnsCount === "number" || typeof overscanRowsCount === "number") {
      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {
        devWarningsOverscanRowsColumnsCount.add(instance);
        console.warn("The overscanColumnsCount and overscanRowsCount props have been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName && !devWarningsTagName.has(instance)) {
        devWarningsTagName.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    if (children2 == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children2 === null ? "null" : typeof children2) + '" was specified.'));
    }
    switch (direction) {
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
    }
    if (typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Grids must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    }
    if (typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Grids must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE = 50;
var getEstimatedTotalHeight = function getEstimatedTotalHeight2(_ref, _ref2) {
  var rowCount = _ref.rowCount;
  var rowMetadataMap = _ref2.rowMetadataMap, estimatedRowHeight = _ref2.estimatedRowHeight, lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredRowIndex >= rowCount) {
    lastMeasuredRowIndex = rowCount - 1;
  }
  if (lastMeasuredRowIndex >= 0) {
    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getEstimatedTotalWidth = function getEstimatedTotalWidth2(_ref3, _ref4) {
  var columnCount = _ref3.columnCount;
  var columnMetadataMap = _ref4.columnMetadataMap, estimatedColumnWidth = _ref4.estimatedColumnWidth, lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredColumnIndex >= columnCount) {
    lastMeasuredColumnIndex = columnCount - 1;
  }
  if (lastMeasuredColumnIndex >= 0) {
    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getItemMetadata = function getItemMetadata2(itemType, props, index, instanceProps) {
  var itemMetadataMap, itemSize, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    itemSize = props.columnWidth;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    itemSize = props.rowHeight;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  if (index > lastMeasuredIndex) {
    var offset4 = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset4 = itemMetadata.offset + itemMetadata.size;
    }
    for (var i = lastMeasuredIndex + 1; i <= index; i++) {
      var size2 = itemSize(i);
      itemMetadataMap[i] = {
        offset: offset4,
        size: size2
      };
      offset4 += size2;
    }
    if (itemType === "column") {
      instanceProps.lastMeasuredColumnIndex = index;
    } else {
      instanceProps.lastMeasuredRowIndex = index;
    }
  }
  return itemMetadataMap[index];
};
var findNearestItem = function findNearestItem2(itemType, props, instanceProps, offset4) {
  var itemMetadataMap, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset4) {
    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset4);
  } else {
    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset4);
  }
};
var findNearestItemBinarySearch = function findNearestItemBinarySearch2(itemType, props, instanceProps, high, low, offset4) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;
    if (currentOffset === offset4) {
      return middle;
    } else if (currentOffset < offset4) {
      low = middle + 1;
    } else if (currentOffset > offset4) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch = function findNearestItemExponentialSearch2(itemType, props, instanceProps, index, offset4) {
  var itemCount = itemType === "column" ? props.columnCount : props.rowCount;
  var interval = 1;
  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset4) {
    index += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset4);
};
var getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment2(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {
  var size2 = itemType === "column" ? props.width : props.height;
  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps);
  var estimatedTotalSize = itemType === "column" ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);
  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, itemMetadata.offset));
  var minOffset = Math.max(0, itemMetadata.offset - size2 + scrollbarSize + itemMetadata.size);
  if (align === "smart") {
    if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
      align = "auto";
    } else {
      align = "center";
    }
  }
  switch (align) {
    case "start":
      return maxOffset;
    case "end":
      return minOffset;
    case "center":
      return Math.round(minOffset + (maxOffset - minOffset) / 2);
    case "auto":
    default:
      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
        return scrollOffset;
      } else if (minOffset > maxOffset) {
        return minOffset;
      } else if (scrollOffset < minOffset) {
        return minOffset;
      } else {
        return maxOffset;
      }
  }
};
var VariableSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset(props, index, instanceProps) {
    return getItemMetadata("column", props, index, instanceProps).offset;
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {
    return findNearestItem("column", props, instanceProps, scrollLeft);
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {
    var columnCount = props.columnCount, width = props.width;
    var itemMetadata = getItemMetadata("column", props, startIndex, instanceProps);
    var maxOffset = scrollLeft + width;
    var offset4 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < columnCount - 1 && offset4 < maxOffset) {
      stopIndex++;
      offset4 += getItemMetadata("column", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  getColumnWidth: function getColumnWidth(props, index, instanceProps) {
    return instanceProps.columnMetadataMap[index].size;
  },
  getEstimatedTotalHeight,
  getEstimatedTotalWidth,
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("column", props, index, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("row", props, index, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getRowOffset: function getRowOffset(props, index, instanceProps) {
    return getItemMetadata("row", props, index, instanceProps).offset;
  },
  getRowHeight: function getRowHeight(props, index, instanceProps) {
    return instanceProps.rowMetadataMap[index].size;
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {
    return findNearestItem("row", props, instanceProps, scrollTop);
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {
    var rowCount = props.rowCount, height = props.height;
    var itemMetadata = getItemMetadata("row", props, startIndex, instanceProps);
    var maxOffset = scrollTop + height;
    var offset4 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < rowCount - 1 && offset4 < maxOffset) {
      stopIndex++;
      offset4 += getItemMetadata("row", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps(props, instance) {
    var _ref5 = props, estimatedColumnWidth = _ref5.estimatedColumnWidth, estimatedRowHeight = _ref5.estimatedRowHeight;
    var instanceProps = {
      columnMetadataMap: {},
      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,
      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,
      lastMeasuredColumnIndex: -1,
      lastMeasuredRowIndex: -1,
      rowMetadataMap: {}
    };
    instance.resetAfterColumnIndex = function(columnIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        columnIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterRowIndex = function(rowIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        rowIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterIndices = function(_ref6) {
      var columnIndex = _ref6.columnIndex, rowIndex = _ref6.rowIndex, _ref6$shouldForceUpda = _ref6.shouldForceUpdate, shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;
      if (typeof columnIndex === "number") {
        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);
      }
      if (typeof rowIndex === "number") {
        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);
      }
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps(_ref7) {
    var columnWidth = _ref7.columnWidth, rowHeight = _ref7.rowHeight;
    if (true) {
      if (typeof columnWidth !== "function") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a function. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      } else if (typeof rowHeight !== "function") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a function. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;
var defaultItemKey$1 = function defaultItemKey3(index, data) {
  return index;
};
var devWarningsDirection = null;
var devWarningsTagName$1 = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsDirection = /* @__PURE__ */ new WeakSet();
    devWarningsTagName$1 = /* @__PURE__ */ new WeakSet();
  }
}
function createListComponent(_ref) {
  var _class;
  var getItemOffset3 = _ref.getItemOffset, getEstimatedTotalSize4 = _ref.getEstimatedTotalSize, getItemSize3 = _ref.getItemSize, getOffsetForIndexAndAlignment5 = _ref.getOffsetForIndexAndAlignment, getStartIndexForOffset3 = _ref.getStartIndexForOffset, getStopIndexForStartIndex3 = _ref.getStopIndexForStartIndex, initInstanceProps5 = _ref.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(List2, _PureComponent);
    function List2(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._outerRef = void 0;
      _this._resetIsScrollingTimeoutId = null;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        scrollDirection: "forward",
        scrollOffset: typeof _this.props.initialScrollOffset === "number" ? _this.props.initialScrollOffset : 0,
        scrollUpdateWasRequested: false
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
        return _this.props.onItemsRendered({
          overscanStartIndex,
          overscanStopIndex,
          visibleStartIndex,
          visibleStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          scrollDirection,
          scrollOffset,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(index) {
        var _this$props = _this.props, direction = _this$props.direction, itemSize = _this$props.itemSize, layout = _this$props.layout;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);
        var style3;
        if (itemStyleCache.hasOwnProperty(index)) {
          style3 = itemStyleCache[index];
        } else {
          var _offset = getItemOffset3(_this.props, index, _this._instanceProps);
          var size2 = getItemSize3(_this.props, index, _this._instanceProps);
          var isHorizontal = direction === "horizontal" || layout === "horizontal";
          var isRtl = direction === "rtl";
          var offsetHorizontal = isHorizontal ? _offset : 0;
          itemStyleCache[index] = style3 = {
            position: "absolute",
            left: isRtl ? void 0 : offsetHorizontal,
            right: isRtl ? offsetHorizontal : void 0,
            top: !isHorizontal ? _offset : 0,
            height: !isHorizontal ? size2 : "100%",
            width: isHorizontal ? size2 : "100%"
          };
        }
        return style3;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
        return {};
      });
      _this._onScrollHorizontal = function(event) {
        var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollLeft) {
            return null;
          }
          var direction = _this.props.direction;
          var scrollOffset = scrollLeft;
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                scrollOffset = -scrollLeft;
                break;
              case "positive-descending":
                scrollOffset = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._onScrollVertical = function(event) {
        var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollTop) {
            return null;
          }
          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref2) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref2;
        if (typeof outerRef === "function") {
          outerRef(ref2);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref2;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1, null);
        });
      };
      return _this;
    }
    List2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps$1(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = List2.prototype;
    _proto.scrollTo = function scrollTo(scrollOffset) {
      scrollOffset = Math.max(0, scrollOffset);
      this.setState(function(prevState) {
        if (prevState.scrollOffset === scrollOffset) {
          return null;
        }
        return {
          scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
          scrollOffset,
          scrollUpdateWasRequested: true
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem(index, align) {
      if (align === void 0) {
        align = "auto";
      }
      var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout = _this$props2.layout;
      var scrollOffset = this.state.scrollOffset;
      index = Math.max(0, Math.min(index, itemCount - 1));
      var scrollbarSize = 0;
      if (this._outerRef) {
        var outerRef = this._outerRef;
        if (layout === "vertical") {
          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;
        } else {
          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;
        }
      }
      this.scrollTo(getOffsetForIndexAndAlignment5(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, direction = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout = _this$props3.layout;
      if (typeof initialScrollOffset === "number" && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "horizontal" || layout === "horizontal") {
          outerRef.scrollLeft = initialScrollOffset;
        } else {
          outerRef.scrollTop = initialScrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var _this$props4 = this.props, direction = _this$props4.direction, layout = _this$props4.layout;
      var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "horizontal" || layout === "horizontal") {
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                outerRef.scrollLeft = -scrollOffset;
                break;
              case "positive-ascending":
                outerRef.scrollLeft = scrollOffset;
                break;
              default:
                var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                break;
            }
          } else {
            outerRef.scrollLeft = scrollOffset;
          }
        } else {
          outerRef.scrollTop = scrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props5 = this.props, children2 = _this$props5.children, className = _this$props5.className, direction = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style3 = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;
      var isScrolling = this.state.isScrolling;
      var isHorizontal = direction === "horizontal" || layout === "horizontal";
      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;
      var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];
      var items = [];
      if (itemCount > 0) {
        for (var _index = startIndex; _index <= stopIndex; _index++) {
          items.push((0, import_react128.createElement)(children2, {
            data: itemData,
            key: itemKey(_index, itemData),
            index: _index,
            isScrolling: useIsScrolling ? isScrolling : void 0,
            style: this._getItemStyle(_index)
          }));
        }
      }
      var estimatedTotalSize = getEstimatedTotalSize4(this.props, this._instanceProps);
      return (0, import_react128.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction
        }, style3)
      }, (0, import_react128.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: isHorizontal ? "100%" : estimatedTotalSize,
          pointerEvents: isScrolling ? "none" : void 0,
          width: isHorizontal ? estimatedTotalSize : "100%"
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      if (typeof this.props.onItemsRendered === "function") {
        var itemCount = this.props.itemCount;
        if (itemCount > 0) {
          var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];
          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
        }
      }
      if (typeof this.props.onScroll === "function") {
        var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
      }
    };
    _proto._getRangeToRender = function _getRangeToRender() {
      var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;
      var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;
      if (itemCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getStartIndexForOffset3(this.props, scrollOffset, this._instanceProps);
      var stopIndex = getStopIndexForStartIndex3(this.props, startIndex, scrollOffset, this._instanceProps);
      var overscanBackward = !isScrolling || scrollDirection === "backward" ? Math.max(1, overscanCount) : 1;
      var overscanForward = !isScrolling || scrollDirection === "forward" ? Math.max(1, overscanCount) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return List2;
  }(import_react128.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    layout: "vertical",
    overscanCount: 2,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps$1 = function validateSharedProps3(_ref2, _ref3) {
  var children2 = _ref2.children, direction = _ref2.direction, height = _ref2.height, layout = _ref2.layout, innerTagName = _ref2.innerTagName, outerTagName = _ref2.outerTagName, width = _ref2.width;
  var instance = _ref3.instance;
  if (true) {
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {
        devWarningsTagName$1.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    switch (direction) {
      case "horizontal":
      case "vertical":
        if (devWarningsDirection && !devWarningsDirection.has(instance)) {
          devWarningsDirection.add(instance);
          console.warn('The direction prop should be either "ltr" (default) or "rtl". Please use the layout prop to specify "vertical" (default) or "horizontal" orientation.');
        }
        break;
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
    }
    switch (layout) {
      case "horizontal":
      case "vertical":
        break;
      default:
        throw Error('An invalid "layout" prop has been specified. Value should be either "horizontal" or "vertical". ' + ('"' + layout + '" was specified.'));
    }
    if (children2 == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children2 === null ? "null" : typeof children2) + '" was specified.'));
    }
    if (isHorizontal && typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Horizontal lists must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    } else if (!isHorizontal && typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Vertical lists must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;
var getItemMetadata$1 = function getItemMetadata3(props, index, instanceProps) {
  var _ref = props, itemSize = _ref.itemSize;
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  if (index > lastMeasuredIndex) {
    var offset4 = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset4 = itemMetadata.offset + itemMetadata.size;
    }
    for (var i = lastMeasuredIndex + 1; i <= index; i++) {
      var size2 = itemSize(i);
      itemMetadataMap[i] = {
        offset: offset4,
        size: size2
      };
      offset4 += size2;
    }
    instanceProps.lastMeasuredIndex = index;
  }
  return itemMetadataMap[index];
};
var findNearestItem$1 = function findNearestItem3(props, instanceProps, offset4) {
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset4) {
    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset4);
  } else {
    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset4);
  }
};
var findNearestItemBinarySearch$1 = function findNearestItemBinarySearch3(props, instanceProps, high, low, offset4) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;
    if (currentOffset === offset4) {
      return middle;
    } else if (currentOffset < offset4) {
      low = middle + 1;
    } else if (currentOffset > offset4) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch3(props, instanceProps, index, offset4) {
  var itemCount = props.itemCount;
  var interval = 1;
  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset4) {
    index += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset4);
};
var getEstimatedTotalSize = function getEstimatedTotalSize2(_ref2, _ref3) {
  var itemCount = _ref2.itemCount;
  var itemMetadataMap = _ref3.itemMetadataMap, estimatedItemSize = _ref3.estimatedItemSize, lastMeasuredIndex = _ref3.lastMeasuredIndex;
  var totalSizeOfMeasuredItems = 0;
  if (lastMeasuredIndex >= itemCount) {
    lastMeasuredIndex = itemCount - 1;
  }
  if (lastMeasuredIndex >= 0) {
    var itemMetadata = itemMetadataMap[lastMeasuredIndex];
    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
};
var VariableSizeList = createListComponent({
  getItemOffset: function getItemOffset(props, index, instanceProps) {
    return getItemMetadata$1(props, index, instanceProps).offset;
  },
  getItemSize: function getItemSize(props, index, instanceProps) {
    return instanceProps.itemMetadataMap[index].size;
  },
  getEstimatedTotalSize,
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment3(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction = props.direction, height = props.height, layout = props.layout, width = props.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size2 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, index, instanceProps);
    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);
    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, itemMetadata.offset));
    var minOffset = Math.max(0, itemMetadata.offset - size2 + itemMetadata.size + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        return Math.round(minOffset + (maxOffset - minOffset) / 2);
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset(props, offset4, instanceProps) {
    return findNearestItem$1(props, instanceProps, offset4);
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {
    var direction = props.direction, height = props.height, itemCount = props.itemCount, layout = props.layout, width = props.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size2 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);
    var maxOffset = scrollOffset + size2;
    var offset4 = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < itemCount - 1 && offset4 < maxOffset) {
      stopIndex++;
      offset4 += getItemMetadata$1(props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps2(props, instance) {
    var _ref4 = props, estimatedItemSize = _ref4.estimatedItemSize;
    var instanceProps = {
      itemMetadataMap: {},
      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,
      lastMeasuredIndex: -1
    };
    instance.resetAfterIndex = function(index, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1);
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps2(_ref5) {
    var itemSize = _ref5.itemSize;
    if (true) {
      if (typeof itemSize !== "function") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a function. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});
var FixedSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset2(_ref, index) {
    var columnWidth = _ref.columnWidth;
    return index * columnWidth;
  },
  getColumnWidth: function getColumnWidth2(_ref2, index) {
    var columnWidth = _ref2.columnWidth;
    return columnWidth;
  },
  getRowOffset: function getRowOffset2(_ref3, index) {
    var rowHeight = _ref3.rowHeight;
    return index * rowHeight;
  },
  getRowHeight: function getRowHeight2(_ref4, index) {
    var rowHeight = _ref4.rowHeight;
    return rowHeight;
  },
  getEstimatedTotalHeight: function getEstimatedTotalHeight3(_ref5) {
    var rowCount = _ref5.rowCount, rowHeight = _ref5.rowHeight;
    return rowHeight * rowCount;
  },
  getEstimatedTotalWidth: function getEstimatedTotalWidth3(_ref6) {
    var columnCount = _ref6.columnCount, columnWidth = _ref6.columnWidth;
    return columnWidth * columnCount;
  },
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment2(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {
    var columnCount = _ref7.columnCount, columnWidth = _ref7.columnWidth, width = _ref7.width;
    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);
    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);
    if (align === "smart") {
      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(width / 2)) {
          return 0;
        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
          return lastColumnOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
          return scrollLeft;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollLeft < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment2(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {
    var rowHeight = _ref8.rowHeight, height = _ref8.height, rowCount = _ref8.rowCount;
    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);
    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);
    if (align === "smart") {
      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(height / 2)) {
          return 0;
        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
          return lastRowOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollTop >= minOffset && scrollTop <= maxOffset) {
          return scrollTop;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollTop < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset2(_ref9, scrollLeft) {
    var columnWidth = _ref9.columnWidth, columnCount = _ref9.columnCount;
    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex2(_ref10, startIndex, scrollLeft) {
    var columnWidth = _ref10.columnWidth, columnCount = _ref10.columnCount, width = _ref10.width;
    var left2 = startIndex * columnWidth;
    var numVisibleColumns = Math.ceil((width + scrollLeft - left2) / columnWidth);
    return Math.max(0, Math.min(
      columnCount - 1,
      startIndex + numVisibleColumns - 1
      // -1 is because stop index is inclusive
    ));
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset2(_ref11, scrollTop) {
    var rowHeight = _ref11.rowHeight, rowCount = _ref11.rowCount;
    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex2(_ref12, startIndex, scrollTop) {
    var rowHeight = _ref12.rowHeight, rowCount = _ref12.rowCount, height = _ref12.height;
    var top2 = startIndex * rowHeight;
    var numVisibleRows = Math.ceil((height + scrollTop - top2) / rowHeight);
    return Math.max(0, Math.min(
      rowCount - 1,
      startIndex + numVisibleRows - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps3(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps3(_ref13) {
    var columnWidth = _ref13.columnWidth, rowHeight = _ref13.rowHeight;
    if (true) {
      if (typeof columnWidth !== "number") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a number. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      }
      if (typeof rowHeight !== "number") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a number. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var FixedSizeList = createListComponent({
  getItemOffset: function getItemOffset2(_ref, index) {
    var itemSize = _ref.itemSize;
    return index * itemSize;
  },
  getItemSize: function getItemSize2(_ref2, index) {
    var itemSize = _ref2.itemSize;
    return itemSize;
  },
  getEstimatedTotalSize: function getEstimatedTotalSize3(_ref3) {
    var itemCount = _ref3.itemCount, itemSize = _ref3.itemSize;
    return itemSize * itemCount;
  },
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment4(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout = _ref4.layout, width = _ref4.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size2 = isHorizontal ? width : height;
    var lastItemOffset = Math.max(0, itemCount * itemSize - size2);
    var maxOffset = Math.min(lastItemOffset, index * itemSize);
    var minOffset = Math.max(0, index * itemSize - size2 + itemSize + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center": {
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(size2 / 2)) {
          return 0;
        } else if (middleOffset > lastItemOffset + Math.floor(size2 / 2)) {
          return lastItemOffset;
        } else {
          return middleOffset;
        }
      }
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset2(_ref5, offset4) {
    var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;
    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset4 / itemSize)));
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex2(_ref6, startIndex, scrollOffset) {
    var direction = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout = _ref6.layout, width = _ref6.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var offset4 = startIndex * itemSize;
    var size2 = isHorizontal ? width : height;
    var numVisibleItems = Math.ceil((size2 + scrollOffset - offset4) / itemSize);
    return Math.max(0, Math.min(
      itemCount - 1,
      startIndex + numVisibleItems - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps4(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps4(_ref7) {
    var itemSize = _ref7.itemSize;
    if (true) {
      if (typeof itemSize !== "number") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a number. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectLoadingIndicator.js
var import_react130 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Loader/Loader.js
var import_react129 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Loader/Loader.css";
var b41 = block("loader");
function Loader({ size: size2 = "s", className, qa }) {
  return import_react129.default.createElement(
    "div",
    { className: b41({ size: size2 }, className), "data-qa": qa },
    import_react129.default.createElement("div", { className: b41("left") }),
    import_react129.default.createElement("div", { className: b41("center") }),
    import_react129.default.createElement("div", { className: b41("right") })
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Select/constants.js
var selectBlock = blockNew("select");
var selectControlBlock = blockNew("select-control");
var selectControlButtonBlock = blockNew("select-control__button");
var selectListBlock = blockNew("select-list");
var selectClearBlock = blockNew("select-clear");
var SIZE_TO_ITEM_HEIGHT = {
  s: 28,
  m: 28,
  l: 32,
  xl: 36
};
var MOBILE_ITEM_HEIGHT = 32;
var GROUP_ITEM_MARGIN_TOP = 5;
var BORDER_WIDTH = 1;
var POPUP_MIN_WIDTH_IN_VIRTUALIZE_CASE = 100;
var QUICK_SEARCH_TIMEOUT = 2e3;
var DEFAULT_VIRTUALIZATION_THRESHOLD = 50;
var SelectQa = {
  LIST: "select-list",
  POPUP: "select-popup",
  SHEET: "select-sheet",
  CLEAR: "select-clear",
  FILTER_INPUT: "select-filter-input"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectLoadingIndicator.js
var SelectLoadingIndicator = (props) => {
  const ref2 = import_react130.default.useRef(null);
  useIntersection({ element: ref2.current, onIntersect: props === null || props === void 0 ? void 0 : props.onIntersect });
  return import_react130.default.createElement(
    "div",
    { ref: ref2, className: selectListBlock("loading-indicator") },
    import_react130.default.createElement(Loader, null)
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextArea.js
var import_react134 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/ClearButton.js
var import_react131 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/i18n/en.json
var en_default5 = {
  "label_clear-button": "Clear"
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/i18n/ru.json
var ru_default5 = {
  "label_clear-button": "Очистить"
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/i18n/index.js
var i18n_default4 = addComponentKeysets({ en: en_default5, ru: ru_default5 }, `${NAMESPACE_NEW}clear-button`);

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/ClearButton.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/common/ClearButton/ClearButton.css";
var b42 = blockNew("clear-button");
var ICON_SIZE = 16;
var mapTextInputSizeToButtonSize = (textInputSize) => {
  switch (textInputSize) {
    case "s": {
      return "xs";
    }
    case "m": {
      return "s";
    }
    case "l": {
      return "m";
    }
    case "xl": {
      return "l";
    }
    default: {
      throw new Error(`Unknown text input size "${textInputSize}"`);
    }
  }
};
var ClearButton = (props) => {
  const { size: size2, className, onClick } = props;
  return import_react131.default.createElement(
    Button2,
    { size: size2, className: b42(null, className), onClick, extraProps: { "aria-label": i18n_default4("label_clear-button") } },
    import_react131.default.createElement(Icon, { data: Xmark_default, size: ICON_SIZE })
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/OuterAdditionalContent/OuterAdditionalContent.js
var import_react132 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/controls/utils.js
var CONTROL_ERROR_MESSAGE_QA = "control-error-message-qa";
var CONTROL_ERROR_ICON_QA = "control-error-icon-qa";
var prepareAutoComplete = (autoComplete) => {
  if (typeof autoComplete === "boolean") {
    return autoComplete ? "on" : "off";
  } else {
    return autoComplete;
  }
};
var getInputControlState = (validationStateProp) => {
  return validationStateProp === "invalid" ? "error" : void 0;
};
var errorPropsMapper = (errorProps) => {
  const { error: errorProp, errorMessage: errorMessageProp, errorPlacement, validationState: validationStateProp } = errorProps;
  let errorMessage;
  if (typeof errorProp === "string") {
    errorMessage = errorProp;
  }
  if (errorMessageProp) {
    errorMessage = errorMessageProp;
  }
  let validationState;
  if (validationStateProp === "invalid" || Boolean(errorProp)) {
    validationState = "invalid";
  }
  return { errorMessage, errorPlacement, validationState };
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/common/OuterAdditionalContent/OuterAdditionalContent.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/common/OuterAdditionalContent/OuterAdditionalContent.css";
var b43 = block("outer-additional-content");
var OuterAdditionalContent = ({ errorMessage, note, noteId, errorMessageId }) => {
  return errorMessage || note ? import_react132.default.createElement(
    "div",
    { className: b43() },
    errorMessage && import_react132.default.createElement("div", { className: b43("error"), id: errorMessageId, "data-qa": CONTROL_ERROR_MESSAGE_QA }, errorMessage),
    note && import_react132.default.createElement("div", { className: b43("note"), id: noteId }, note)
  ) : null;
};

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextAreaControl.js
var import_react133 = __toESM(require_react());
var b44 = blockNew("text-area");
var calculateLinesByScrollHeight = (args) => {
  const { height, lineHeight } = args;
  const paddingTop = Number.isNaN(args.paddingTop) ? 0 : args.paddingTop;
  const paddingBottom = Number.isNaN(args.paddingBottom) ? 0 : args.paddingBottom;
  return (height - paddingTop - paddingBottom) / lineHeight;
};
function TextAreaControl(props) {
  var _a;
  const { name, id, tabIndex, autoComplete, placeholder: placeholder2, value, defaultValue, controlRef, controlProps, size: size2, rows, minRows = 1, maxRows, autoFocus, disabled, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress } = props;
  const innerControlRef = import_react133.default.useRef(null);
  const handleRef = useForkRef(controlRef, innerControlRef);
  const textareaRows = rows || minRows;
  const innerValue = value || ((_a = innerControlRef === null || innerControlRef === void 0 ? void 0 : innerControlRef.current) === null || _a === void 0 ? void 0 : _a.value);
  const resizeHeight = import_react133.default.useCallback(() => {
    const control = innerControlRef === null || innerControlRef === void 0 ? void 0 : innerControlRef.current;
    if (control && !rows) {
      const controlStyles = getComputedStyle(control);
      const lineHeight = parseInt(controlStyles.getPropertyValue("line-height"), 10);
      const paddingTop = parseInt(controlStyles.getPropertyValue("padding-top"), 10);
      const paddingBottom = parseInt(controlStyles.getPropertyValue("padding-bottom"), 10);
      const linesWithCarriageReturn = ((innerValue === null || innerValue === void 0 ? void 0 : innerValue.match(/\n/g)) || []).length + 1;
      const linesByScrollHeight = calculateLinesByScrollHeight({
        height: control.scrollHeight,
        paddingTop,
        paddingBottom,
        lineHeight
      });
      control.style.height = "auto";
      if (maxRows && maxRows < Math.max(linesByScrollHeight, linesWithCarriageReturn)) {
        control.style.height = `${maxRows * lineHeight + 2 * paddingTop}px`;
      } else if (linesWithCarriageReturn > 1 || linesByScrollHeight > 1) {
        control.style.height = `${control.scrollHeight}px`;
      }
    }
  }, [rows, maxRows, innerValue]);
  import_react133.default.useEffect(() => {
    resizeHeight();
  }, [resizeHeight, size2, value]);
  return import_react133.default.createElement("textarea", Object.assign({}, controlProps, { ref: handleRef, style: Object.assign(Object.assign({}, controlProps === null || controlProps === void 0 ? void 0 : controlProps.style), { height: rows ? "auto" : void 0 }), className: b44("control", controlProps === null || controlProps === void 0 ? void 0 : controlProps.className), name, id, tabIndex, placeholder: placeholder2, value, defaultValue, rows: textareaRows, autoFocus, autoComplete, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress, disabled }));
}

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextArea.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/TextArea/TextArea.css";
var b45 = blockNew("text-area");
var TextArea = import_react134.default.forwardRef(function TextArea2(props, ref2) {
  const { view = "normal", size: size2 = "m", pin = "round-round", name, value, defaultValue, disabled = false, hasClear = false, error: error2, errorMessage: errorMessageProp, validationState: validationStateProp, autoComplete, id: originalId, tabIndex, style: style3, className, qa, controlProps, note, onUpdate, onChange } = props;
  const { errorMessage, validationState } = errorPropsMapper({
    error: error2,
    errorMessage: errorMessageProp,
    validationState: validationStateProp
  });
  const [uncontrolledValue, setUncontrolledValue] = import_react134.default.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : "");
  const innerControlRef = import_react134.default.useRef(null);
  const [hasVerticalScrollbar, setHasVerticalScrollbar] = import_react134.default.useState(false);
  const state = getInputControlState(validationState);
  const handleRef = useForkRef(props.controlRef, innerControlRef);
  const innerId = useUniqId();
  const isControlled = value !== void 0;
  const inputValue = isControlled ? value : uncontrolledValue;
  const isErrorMsgVisible = validationState === "invalid" && Boolean(errorMessage);
  const isClearControlVisible = Boolean(hasClear && !disabled && inputValue);
  const id = originalId || innerId;
  const errorMessageId = useUniqId();
  const noteId = useUniqId();
  const ariaDescribedBy = [
    controlProps === null || controlProps === void 0 ? void 0 : controlProps["aria-describedby"],
    note ? noteId : void 0,
    isErrorMsgVisible ? errorMessageId : void 0
  ].filter(Boolean).join(" ");
  const commonProps = {
    id,
    tabIndex,
    name,
    onChange(event) {
      const newValue = event.target.value;
      if (!isControlled) {
        setUncontrolledValue(newValue);
      }
      if (onChange) {
        onChange(event);
      }
      if (onUpdate) {
        onUpdate(newValue);
      }
    },
    autoComplete: prepareAutoComplete(autoComplete),
    controlProps: Object.assign(Object.assign({}, controlProps), { "aria-describedby": ariaDescribedBy || void 0, "aria-invalid": validationState === "invalid" || void 0 })
  };
  const handleClear = (event) => {
    const control = innerControlRef.current;
    if (control) {
      control.focus();
      const syntheticEvent = Object.create(event);
      syntheticEvent.target = control;
      syntheticEvent.currentTarget = control;
      control.value = "";
      if (onChange) {
        onChange(syntheticEvent);
      }
      if (onUpdate) {
        onUpdate("");
      }
    }
    if (!isControlled) {
      setUncontrolledValue("");
    }
  };
  import_react134.default.useEffect(() => {
    const control = innerControlRef.current;
    if (control) {
      const currHasVerticalScrollbar = control.scrollHeight > control.clientHeight;
      if (hasVerticalScrollbar !== currHasVerticalScrollbar) {
        setHasVerticalScrollbar(currHasVerticalScrollbar);
      }
    }
  }, [inputValue, hasVerticalScrollbar]);
  return import_react134.default.createElement(
    "span",
    { ref: ref2, style: style3, className: b45({
      view,
      size: size2,
      disabled,
      state,
      pin: view === "clear" ? void 0 : pin,
      "has-clear": isClearControlVisible,
      "has-scrollbar": hasVerticalScrollbar
    }, className), "data-qa": qa },
    import_react134.default.createElement(
      "span",
      { className: b45("content") },
      import_react134.default.createElement(TextAreaControl, Object.assign({}, props, commonProps, { controlRef: handleRef })),
      isClearControlVisible && import_react134.default.createElement(ClearButton, { className: b45("clear", { size: size2 }), size: mapTextInputSizeToButtonSize(size2), onClick: handleClear })
    ),
    import_react134.default.createElement(OuterAdditionalContent, { errorMessage: isErrorMsgVisible ? errorMessage : null, errorMessageId, note, noteId })
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInput.js
var import_react143 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/Popover.js
var import_react140 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/Popover.classname.js
var cnPopover = block("popover");

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/components/Buttons/Buttons.js
var import_react135 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/components/Buttons/helpers/getButtonView.js
var getButtonView2 = (theme, isAction = false) => {
  switch (theme) {
    case "special":
      return isAction ? "normal-contrast" : "flat-contrast";
    case "announcement":
      return isAction ? "normal-contrast" : "outlined";
    default:
      return isAction ? "normal" : "flat";
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/components/Buttons/Buttons.js
var Buttons = ({ theme, tooltipActionButton, tooltipCancelButton }) => {
  if (!tooltipActionButton && !tooltipCancelButton) {
    return null;
  }
  return import_react135.default.createElement(
    "div",
    { className: cnPopover("tooltip-buttons") },
    tooltipActionButton && import_react135.default.createElement(Button2, { view: getButtonView2(theme, true), width: "max", onClick: tooltipActionButton.onClick, className: cnPopover("tooltip-button") }, tooltipActionButton.text),
    tooltipCancelButton && import_react135.default.createElement(Button2, { view: getButtonView2(theme, false), width: "max", onClick: tooltipCancelButton.onClick, className: cnPopover("tooltip-button") }, tooltipCancelButton.text)
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/components/Content/Content.js
var import_react136 = __toESM(require_react());
var Content = ({ secondary, htmlContent, content, className }) => {
  if (!htmlContent && !content) {
    return null;
  }
  if (htmlContent) {
    return import_react136.default.createElement("div", { className: cnPopover("tooltip-content", { secondary }, className), dangerouslySetInnerHTML: {
      __html: htmlContent
    } });
  }
  if (content) {
    return import_react136.default.createElement("div", { className: cnPopover("tooltip-content", { secondary }, className) }, content);
  }
  return null;
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/components/Links/Links.js
var import_react137 = __toESM(require_react());
var Links = ({ links }) => {
  if (links.length === 0) {
    return null;
  }
  return import_react137.default.createElement("div", { className: cnPopover("tooltip-links") }, links.map((link, index) => {
    const { text: text2, href, target = "_blank", onClick } = link;
    return import_react137.default.createElement(
      import_react137.default.Fragment,
      { key: `link-${index}` },
      import_react137.default.createElement(Link, { href, target, onClick, className: cnPopover("tooltip-link") }, text2),
      import_react137.default.createElement("br", null)
    );
  }));
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/components/Trigger/Trigger.js
var import_react138 = __toESM(require_react());
var Trigger = ({ open, openOnHover, disabled, className, openTooltip, closeTooltip, closedManually, onClick, children: children2 }) => {
  const handleClick = async (event) => {
    const shouldPreventClosingByClick = open && openOnHover;
    if (disabled || shouldPreventClosingByClick) {
      return;
    }
    const shouldToggleTooltip = !onClick || await onClick(event);
    if (!shouldToggleTooltip) {
      return;
    }
    const toggleTooltip = () => {
      const nextOpen = !open;
      if (nextOpen) {
        openTooltip();
        closedManually.current = false;
      } else {
        closeTooltip();
        closedManually.current = true;
      }
    };
    toggleTooltip();
  };
  const { onKeyDown } = useActionHandlers(handleClick);
  return typeof children2 === "function" ? import_react138.default.createElement(import_react138.default.Fragment, null, children2({ onClick: handleClick, onKeyDown })) : (
    // The event handler should only be used to capture bubbled events
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    import_react138.default.createElement("div", { className, onClick: handleClick, onKeyDown: onClick ? onKeyDown : void 0 }, children2)
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/config.js
var PopoverBehavior;
(function(PopoverBehavior2) {
  PopoverBehavior2["Immediate"] = "immediate";
  PopoverBehavior2["Delayed"] = "delayed";
  PopoverBehavior2["DelayedClosing"] = "delayedClosing";
})(PopoverBehavior || (PopoverBehavior = {}));
var delayByBehavior = {
  [PopoverBehavior.Immediate]: [0, 0],
  [PopoverBehavior.Delayed]: [300, 300],
  [PopoverBehavior.DelayedClosing]: [0, 300]
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/hooks/useOpen.js
var import_react139 = __toESM(require_react());
var useOpen = ({ initialOpen, disabled, autoclosable, onOpenChange, delayOpening, delayClosing, behavior, shouldBeOpen }) => {
  const openingTimeout = import_react139.default.useRef(null);
  const closingTimeout = import_react139.default.useRef(null);
  const [isOpen, setIsOpen] = import_react139.default.useState(initialOpen);
  const unsetOpeningTimeout = import_react139.default.useCallback(() => {
    if (openingTimeout.current) {
      clearTimeout(openingTimeout.current);
      openingTimeout.current = null;
    }
  }, []);
  const unsetClosingTimeout = import_react139.default.useCallback(() => {
    if (closingTimeout.current) {
      clearTimeout(closingTimeout.current);
      closingTimeout.current = null;
    }
  }, []);
  import_react139.default.useEffect(() => {
    return () => {
      unsetOpeningTimeout();
      unsetClosingTimeout();
    };
  }, [unsetClosingTimeout, unsetOpeningTimeout]);
  const setTooltipOpen = import_react139.default.useCallback((open) => {
    setIsOpen(open);
    shouldBeOpen.current = open;
    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(open);
  }, [onOpenChange, shouldBeOpen]);
  const openTooltip = import_react139.default.useCallback(() => {
    unsetOpeningTimeout();
    setTooltipOpen(true);
  }, [setTooltipOpen, unsetOpeningTimeout]);
  const closeTooltip = import_react139.default.useCallback(() => {
    unsetClosingTimeout();
    setTooltipOpen(false);
  }, [setTooltipOpen, unsetClosingTimeout]);
  import_react139.default.useEffect(() => {
    if (disabled) {
      closeTooltip();
    }
  }, [disabled, closeTooltip]);
  useUpdateEffect(() => {
    if (autoclosable && !shouldBeOpen.current) {
      closeTooltip();
    }
  }, [autoclosable, closeTooltip, shouldBeOpen]);
  const [defaultDelayOpening, defaultDelayClosing] = delayByBehavior[behavior];
  const openTooltipDelayed = import_react139.default.useCallback(() => {
    openingTimeout.current = setTimeout(() => {
      openingTimeout.current = null;
      openTooltip();
    }, delayOpening !== null && delayOpening !== void 0 ? delayOpening : defaultDelayOpening);
  }, [defaultDelayOpening, delayOpening, openTooltip]);
  const closeTooltipDelayed = import_react139.default.useCallback(() => {
    closingTimeout.current = setTimeout(() => {
      closingTimeout.current = null;
      closeTooltip();
    }, delayClosing !== null && delayClosing !== void 0 ? delayClosing : defaultDelayClosing);
  }, [closeTooltip, defaultDelayClosing, delayClosing]);
  return {
    isOpen,
    closingTimeout,
    openTooltip,
    openTooltipDelayed,
    unsetOpeningTimeout,
    closeTooltip,
    closeTooltipDelayed,
    unsetClosingTimeout
  };
};

// node_modules/@gravity-ui/uikit/build/esm/components/Popover/Popover.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Popover/Popover.css";
var Popover = import_react140.default.forwardRef(function({ initialOpen = false, disabled = false, autoclosable = true, openOnHover = true, delayOpening, delayClosing, behavior = PopoverBehavior.Delayed, placement = ["right", "bottom"], offset: offset4 = {}, tooltipOffset, tooltipClassName, tooltipContentClassName, theme = "info", size: size2 = "s", hasArrow = true, hasClose = false, className, children: children2, title, content, htmlContent, contentClassName, links, forceLinksAppearance = false, tooltipActionButton, tooltipCancelButton, onOpenChange, onCloseClick, onClick, anchorRef, strategy, qa, disablePortal = false, tooltipId, focusTrap, autoFocus, restoreFocusRef, modifiers }, ref2) {
  const controlRef = import_react140.default.useRef(null);
  const closedManually = import_react140.default.useRef(false);
  const shouldBeOpen = import_react140.default.useRef(initialOpen);
  const { isOpen, closingTimeout, openTooltip, openTooltipDelayed, unsetOpeningTimeout, closeTooltip, closeTooltipDelayed, unsetClosingTimeout } = useOpen({
    initialOpen,
    disabled,
    autoclosable,
    onOpenChange,
    delayOpening,
    delayClosing,
    behavior,
    shouldBeOpen
  });
  import_react140.default.useImperativeHandle(ref2, () => ({
    openTooltip,
    closeTooltip
  }), [openTooltip, closeTooltip]);
  const handleCloseClick = async (event) => {
    closeTooltip();
    onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick(event);
  };
  const hasTitle = Boolean(title);
  const tooltip = import_react140.default.createElement(
    Popup,
    { id: tooltipId, role: openOnHover ? "tooltip" : "dialog", strategy, anchorRef: anchorRef || controlRef, className: cnPopover("tooltip", {
      theme,
      size: size2,
      ["with-close"]: hasClose,
      "force-links-appearance": forceLinksAppearance
    }, tooltipClassName), contentClassName: cnPopover("tooltip-popup-content", tooltipContentClassName), open: isOpen, placement, hasArrow, offset: tooltipOffset, onClose: anchorRef ? void 0 : closeTooltip, qa: qa ? `${qa}-tooltip` : "", disablePortal, focusTrap, autoFocus, restoreFocus: true, restoreFocusRef: restoreFocusRef || controlRef, modifiers },
    import_react140.default.createElement(
      import_react140.default.Fragment,
      null,
      title && import_react140.default.createElement("h3", { className: cnPopover("tooltip-title") }, title),
      import_react140.default.createElement(Content, { secondary: hasTitle ? theme !== "announcement" : false, content, htmlContent, className: contentClassName }),
      links && import_react140.default.createElement(Links, { links }),
      import_react140.default.createElement(Buttons, { theme, tooltipActionButton, tooltipCancelButton }),
      hasClose && import_react140.default.createElement(
        "div",
        { className: cnPopover("tooltip-close") },
        import_react140.default.createElement(
          Button2,
          { size: "s", view: "flat-secondary", onClick: handleCloseClick, extraProps: {
            "aria-label": "Close"
          } },
          import_react140.default.createElement(Icon, { data: Xmark_default, size: 16 })
        )
      )
    )
  );
  if (anchorRef) {
    return tooltip;
  }
  const onMouseEnter = () => {
    unsetClosingTimeout();
    if (!isOpen && !disabled && !closedManually.current) {
      openTooltipDelayed();
    } else {
      shouldBeOpen.current = true;
    }
  };
  const onMouseLeave = () => {
    if (autoclosable && !closedManually.current && !closingTimeout.current) {
      unsetOpeningTimeout();
      closeTooltipDelayed();
    } else {
      shouldBeOpen.current = false;
    }
    closedManually.current = false;
  };
  return import_react140.default.createElement(
    "div",
    { ref: controlRef, className: cnPopover({ disabled }, className), onMouseEnter: openOnHover ? onMouseEnter : void 0, onMouseLeave: openOnHover ? onMouseLeave : void 0, onFocus: openOnHover ? onMouseEnter : void 0, onBlur: openOnHover ? onMouseLeave : void 0, style: {
      top: offset4.top,
      left: offset4.left
    }, "data-qa": qa },
    import_react140.default.createElement(Trigger, { closeTooltip, openTooltip, open: isOpen, openOnHover, className: cnPopover("handler"), disabled, onClick, closedManually }, children2),
    tooltip
  );
});
Popover.displayName = "Popover";

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/AdditionalContent.js
var import_react141 = __toESM(require_react());
var b46 = block("text-input");
var AdditionalContent = import_react141.default.forwardRef(function AdditionalContent2({ placement, children: children2, onClick }, ref2) {
  if (!children2) {
    return null;
  }
  return (
    // It is used to focus the control input if non-interaction element is provided.
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    import_react141.default.createElement("div", { ref: ref2, className: b46("additional-content", { placement }), onClick }, children2)
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInputControl.js
var import_react142 = __toESM(require_react());
var b47 = block("text-input");
function TextInputControl(props) {
  const { controlProps, controlRef, type, name, id, tabIndex, autoComplete, placeholder: placeholder2, value, defaultValue, autoFocus, disabled, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress } = props;
  return import_react142.default.createElement("input", Object.assign({}, controlProps, { ref: controlRef, className: b47("control", { type: "input" }, controlProps === null || controlProps === void 0 ? void 0 : controlProps.className), type, name, id, tabIndex, placeholder: placeholder2, value, defaultValue, autoFocus, autoComplete, onChange, onFocus, onBlur, onKeyDown, onKeyUp, onKeyPress, disabled }));
}

// node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInput.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/controls/TextInput/TextInput.css";
var b48 = block("text-input");
var TextInput = import_react143.default.forwardRef(function TextInput2(props, ref2) {
  const { view = "normal", size: size2 = "m", pin = "round-round", name, value, defaultValue, label, disabled = false, hasClear = false, error: error2, errorMessage: errorMessageProp, errorPlacement: errorPlacementProp = "outside", validationState: validationStateProp, autoComplete, id: originalId, tabIndex, style: style3, className, qa, controlProps: originalControlProps, leftContent, rightContent, note, onUpdate, onChange } = props;
  const { errorMessage, errorPlacement, validationState } = errorPropsMapper({
    error: error2,
    errorMessage: errorMessageProp,
    errorPlacement: errorPlacementProp,
    validationState: validationStateProp
  });
  const [uncontrolledValue, setUncontrolledValue] = import_react143.default.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : "");
  const innerControlRef = import_react143.default.useRef(null);
  const handleRef = useForkRef(props.controlRef, innerControlRef);
  const labelRef = import_react143.default.useRef(null);
  const leftContentRef = import_react143.default.useRef(null);
  const state = getInputControlState(validationState);
  const isControlled = value !== void 0;
  const inputValue = isControlled ? value : uncontrolledValue;
  const isLabelVisible = Boolean(label);
  const isErrorMsgVisible = validationState === "invalid" && Boolean(errorMessage) && errorPlacement === "outside";
  const isErrorIconVisible = validationState === "invalid" && Boolean(errorMessage) && errorPlacement === "inside";
  const isClearControlVisible = Boolean(hasClear && !disabled && inputValue);
  const isLeftContentVisible = Boolean(leftContent);
  const isRightContentVisible = Boolean(rightContent);
  const isAutoCompleteOff = isLabelVisible && !originalId && !name && typeof autoComplete === "undefined";
  const innerId = useUniqId();
  const id = isLabelVisible ? originalId || innerId : originalId;
  const labelSize = useElementSize(isLabelVisible ? labelRef : null, size2);
  const leftContentSize = useElementSize(isLeftContentVisible ? leftContentRef : null, size2);
  const errorMessageId = useUniqId();
  const noteId = useUniqId();
  const ariaDescribedBy = [
    originalControlProps === null || originalControlProps === void 0 ? void 0 : originalControlProps["aria-describedby"],
    note ? noteId : void 0,
    isErrorMsgVisible ? errorMessageId : void 0
  ].filter(Boolean).join(" ");
  const controlProps = Object.assign(Object.assign({}, originalControlProps), { style: Object.assign(Object.assign({}, originalControlProps === null || originalControlProps === void 0 ? void 0 : originalControlProps.style), isLabelVisible && labelSize.width ? { paddingLeft: `${labelSize.width}px` } : {}), "aria-invalid": validationState === "invalid" || void 0, "aria-describedby": ariaDescribedBy || void 0 });
  const commonProps = {
    id,
    tabIndex,
    name,
    onChange(event) {
      const newValue = event.target.value;
      if (!isControlled) {
        setUncontrolledValue(newValue);
      }
      if (onChange) {
        onChange(event);
      }
      if (onUpdate) {
        onUpdate(newValue);
      }
    },
    autoComplete: isAutoCompleteOff ? "off" : prepareAutoComplete(autoComplete),
    controlProps
  };
  const handleClear = (event) => {
    const control = innerControlRef.current;
    if (control) {
      control.focus();
      const syntheticEvent = Object.create(event);
      syntheticEvent.target = control;
      syntheticEvent.currentTarget = control;
      control.value = "";
      if (onChange) {
        onChange(syntheticEvent);
      }
      if (onUpdate) {
        onUpdate("");
      }
    }
    if (!isControlled) {
      setUncontrolledValue("");
    }
  };
  const handleAdditionalContentClick = (event) => {
    var _a, _b;
    const hasActiveElement = event.currentTarget.contains(document.activeElement);
    const hasSelection = Boolean((_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.toString());
    if (!hasActiveElement && !hasSelection) {
      (_b = innerControlRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
  };
  return import_react143.default.createElement(
    "span",
    { ref: ref2, style: style3, className: b48({
      view,
      size: size2,
      disabled,
      state,
      pin: view === "clear" ? void 0 : pin,
      "has-clear": isClearControlVisible,
      "has-left-content": isLeftContentVisible,
      "has-right-content": isClearControlVisible || isRightContentVisible
    }, className), "data-qa": qa },
    import_react143.default.createElement(
      "span",
      { className: b48("content") },
      isLeftContentVisible && import_react143.default.createElement(AdditionalContent, { ref: leftContentRef, placement: "left", onClick: handleAdditionalContentClick }, leftContent),
      isLabelVisible && import_react143.default.createElement("label", { ref: labelRef, style: {
        left: isLeftContentVisible ? leftContentSize.width : void 0,
        maxWidth: `calc(50% - ${leftContentSize.width}px)`
      }, className: b48("label"), title: label, htmlFor: id }, `${label}`),
      import_react143.default.createElement(TextInputControl, Object.assign({}, props, commonProps, { controlRef: handleRef })),
      isClearControlVisible && import_react143.default.createElement(ClearButton, { size: mapTextInputSizeToButtonSize(size2), onClick: handleClear, className: b48("clear") }),
      isRightContentVisible && import_react143.default.createElement(AdditionalContent, { placement: "right", onClick: handleAdditionalContentClick }, rightContent),
      isErrorIconVisible && import_react143.default.createElement(
        Popover,
        { content: errorMessage },
        import_react143.default.createElement(
          "span",
          { "data-qa": CONTROL_ERROR_ICON_QA },
          import_react143.default.createElement(Icon, { data: TriangleExclamation_default, className: b48("error-icon"), size: size2 === "s" ? 12 : 16 })
        )
      )
    ),
    import_react143.default.createElement(OuterAdditionalContent, { note, errorMessage: isErrorMsgVisible ? errorMessage : null, noteId, errorMessageId })
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/List/components/ListItem.js
var import_react144 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/List/constants.js
var ListQa = {
  ACTIVE_ITEM: "list-active-item"
};
var listNavigationIgnoredKeys = [
  // Tab key should focus the next element
  KeyCode.TAB
];

// node_modules/@gravity-ui/uikit/build/esm/components/List/components/ListItem.js
var b49 = block("list");
var defaultRenderItem = (item) => String(item);
function getStyle3(provided, style3) {
  if (!style3) {
    return provided === null || provided === void 0 ? void 0 : provided.draggableProps.style;
  }
  return Object.assign(Object.assign({}, provided === null || provided === void 0 ? void 0 : provided.draggableProps.style), style3);
}
var ListItem = class _ListItem extends import_react144.default.Component {
  constructor() {
    super(...arguments);
    this.node = null;
    this.getNode = () => this.node;
    this.setRef = (node) => {
      var _a;
      this.node = node;
      (_a = this.props.provided) === null || _a === void 0 ? void 0 : _a.innerRef(node);
    };
    this.onClick = () => {
      var _a, _b;
      return (_b = (_a = this.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, this.props.item, this.props.itemIndex);
    };
    this.onClickCapture = (event) => {
      _ListItem.publishEvent({
        domEvent: event,
        eventId: "click"
      });
    };
    this.onMouseEnter = () => !this.props.item.disabled && this.props.onActivate(this.props.itemIndex);
    this.onMouseLeave = () => this.props.onActivate(void 0);
  }
  render() {
    var _a, _b;
    const { item, style: style3, sortable, sortHandleAlign, itemClassName, selected, active, role = "listitem", isDragging = false } = this.props;
    return (
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events
      import_react144.default.createElement(
        "div",
        Object.assign({ role, "aria-selected": selected, "data-qa": active ? ListQa.ACTIVE_ITEM : void 0, className: b49("item", {
          sortable,
          active,
          selected,
          inactive: item.disabled,
          "sort-handle-align": sortHandleAlign,
          dragging: isDragging
        }, itemClassName) }, (_a = this.props.provided) === null || _a === void 0 ? void 0 : _a.draggableProps, (_b = this.props.provided) === null || _b === void 0 ? void 0 : _b.dragHandleProps, { style: getStyle3(this.props.provided, style3), onClick: item.disabled ? void 0 : this.onClick, onClickCapture: item.disabled ? void 0 : this.onClickCapture, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, ref: this.setRef, id: `${this.props.listId}-item-${this.props.itemIndex}` }),
        this.renderSortIcon(),
        this.renderContent()
      )
    );
  }
  renderSortIcon() {
    const { sortable } = this.props;
    return sortable ? import_react144.default.createElement(
      "div",
      { className: b49("item-sort-icon") },
      import_react144.default.createElement(Icon, { data: Grip_default, size: 12 })
    ) : null;
  }
  renderContent() {
    const { renderItem = defaultRenderItem, item, active, itemIndex } = this.props;
    return import_react144.default.createElement("div", { className: b49("item-content") }, renderItem(item, active, itemIndex));
  }
};
ListItem.publishEvent = eventBroker.withEventPublisher("List");

// node_modules/@gravity-ui/uikit/build/esm/components/List/components/SimpleContainer.js
var import_react145 = __toESM(require_react());
var import_range = __toESM(require_range());
function getRefs(count2) {
  return (0, import_range.default)(count2).reduce((acc, index) => {
    acc[index] = import_react145.default.createRef();
    return acc;
  }, {});
}
var SimpleContainer = class extends import_react145.default.Component {
  static getDerivedStateFromProps({ itemCount }, prevState) {
    const refsCount = Object.keys(prevState.refsList).length;
    if (itemCount === refsCount) {
      return prevState;
    } else {
      return {
        refsList: getRefs(itemCount)
      };
    }
  }
  constructor(props) {
    super(props);
    this.node = null;
    this.setRef = (node) => {
      var _a;
      this.node = node;
      (_a = this.props.provided) === null || _a === void 0 ? void 0 : _a.innerRef(node);
    };
    this.state = {
      refsList: getRefs(props.itemCount)
    };
  }
  componentDidMount() {
    if (this.node && this.props.sortable) {
      const { width, height } = this.node.getBoundingClientRect();
      this.setState({ minWidth: width, minHeight: height });
    }
  }
  render() {
    const { minWidth, minHeight } = this.state;
    const children2 = import_react145.default.Children.map(this.props.children, (child, index) => import_react145.default.cloneElement(child, { ref: this.state.refsList[index] }));
    return import_react145.default.createElement("div", { ref: this.setRef, style: { minWidth, minHeight } }, children2);
  }
  scrollToItem(index) {
    var _a, _b;
    const listItem = (_a = this.state.refsList[index]) === null || _a === void 0 ? void 0 : _a.current;
    if (listItem && typeof listItem.getNode === "function") {
      const node = listItem.getNode();
      if (node) {
        (_b = node.scrollIntoView) === null || _b === void 0 ? void 0 : _b.call(node, { block: "nearest" });
      }
    }
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/List/List.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/List/List.css";
var b50 = block("list");
var DEFAULT_ITEM_HEIGHT = 28;
var listDefaultProps = {
  items: [],
  itemClassName: "",
  filterable: true,
  sortable: false,
  virtualized: true,
  deactivateOnLeave: true
};
var reorder = (list, startIndex, endIndex) => {
  const result = Array.from(list);
  const [removed] = result.splice(startIndex, 1);
  result.splice(endIndex, 0, removed);
  return result;
};
var List = class _List extends import_react146.default.Component {
  constructor() {
    super(...arguments);
    this.state = {
      items: this.props.items,
      filter: ""
    };
    this.refFilter = import_react146.default.createRef();
    this.refContainer = import_react146.default.createRef();
    this.blurTimer = null;
    this.loadingItem = { value: "__LIST_ITEM_LOADING__", disabled: false };
    this.uniqId = getUniqId();
    this.onKeyDown = (event) => {
      const { activeItem, pageSize } = this.state;
      if (listNavigationIgnoredKeys.includes(event.key)) {
        return;
      }
      switch (event.key) {
        case "ArrowDown": {
          this.handleKeyMove(event, 1, -1);
          break;
        }
        case "ArrowUp": {
          this.handleKeyMove(event, -1);
          break;
        }
        case "PageDown": {
          this.handleKeyMove(event, pageSize);
          break;
        }
        case "PageUp": {
          this.handleKeyMove(event, -pageSize);
          break;
        }
        case "Home": {
          this.handleKeyMove(event, this.state.items.length - (activeItem || 0));
          break;
        }
        case "End": {
          this.handleKeyMove(event, -(activeItem || 0) - 1);
          break;
        }
        case "Enter": {
          if (typeof activeItem === "number" && this.props.onItemClick) {
            this.props.onItemClick(this.state.items[activeItem], activeItem, true);
          }
          break;
        }
        default: {
          if (this.refFilter.current) {
            this.refFilter.current.focus();
          }
        }
      }
    };
    this.renderItemContent = (item, isItemActive, itemIndex) => {
      const { onLoadMore } = this.props;
      if ((0, import_isObject.default)(item) && "value" in item && item.value === this.loadingItem.value) {
        return import_react146.default.createElement(SelectLoadingIndicator, { onIntersect: itemIndex === 0 ? void 0 : onLoadMore });
      }
      return this.props.renderItem ? this.props.renderItem(item, isItemActive, itemIndex) : defaultRenderItem(item);
    };
    this.renderItem = ({ index, style: style3, provided, isDragging }) => {
      var _a;
      const { sortHandleAlign, role } = this.props;
      const { items, activeItem } = this.state;
      const item = this.getItemsWithLoading()[index];
      const sortable = this.props.sortable && items.length > 1 && !this.getFilter();
      const active = index === activeItem || index === this.props.activeItemIndex;
      const selected = Array.isArray(this.props.selectedItemIndex) ? this.props.selectedItemIndex.includes(index) : index === this.props.selectedItemIndex;
      return import_react146.default.createElement(ListItem, { key: index, style: style3, itemIndex: index, item, sortable, sortHandleAlign, renderItem: this.renderItemContent, itemClassName: this.props.itemClassName, active, selected, onActivate: this.onItemActivate, onClick: this.props.onItemClick, role: role === "listbox" ? "option" : "listitem", listId: (_a = this.props.id) !== null && _a !== void 0 ? _a : this.uniqId, provided, isDragging });
    };
    this.renderVirtualizedItem = ({ index, style: style3 }) => {
      return import_react146.default.createElement(PublicDraggable, { draggableId: String(index), index, key: `item-key-${index}` }, (provided) => this.renderItem({ index, style: style3, provided }));
    };
    this.filterItem = (filter) => (item) => {
      return String(item).includes(filter);
    };
    this.scrollToIndex = (index) => {
      const container = this.refContainer.current;
      if (container) {
        container.scrollToItem(index);
      }
    };
    this.deactivate = () => {
      if (!this.blurTimer) {
        return;
      }
      if (this.props.deactivateOnLeave) {
        this.setState({ activeItem: void 0 });
      }
    };
    this.handleFocus = () => {
      if (this.blurTimer) {
        clearTimeout(this.blurTimer);
        this.blurTimer = null;
      }
    };
    this.handleBlur = () => {
      if (!this.blurTimer) {
        this.blurTimer = setTimeout(this.deactivate, 50);
      }
    };
    this.onUpdateFilterInternal = (value) => {
      const { items, filterItem = this.filterItem, onFilterEnd } = this.props;
      this.setState({
        filter: value,
        items: value ? items.filter(filterItem(value)) : items
      }, () => {
        if (onFilterEnd) {
          onFilterEnd({ items: this.state.items });
        }
      });
    };
    this.onFilterUpdate = (value) => {
      if (this.props.onFilterUpdate) {
        this.props.onFilterUpdate(value);
      } else {
        this.onUpdateFilterInternal(value);
      }
    };
    this.onItemsRendered = ({ visibleStartIndex, visibleStopIndex }) => {
      this.setState({
        pageSize: visibleStopIndex - visibleStartIndex
      });
    };
    this.onItemActivate = (index) => {
      if (!this.state.sorting) {
        this.activateItem(index, false);
      }
    };
    this.onMouseLeave = () => {
      this.deactivate();
    };
    this.onSortStart = () => {
      this.setState({ sorting: true });
    };
    this.onSortEnd = (result) => {
      if (!result.destination) {
        return;
      }
      if (result.source.index === result.destination.index) {
        return;
      }
      const oldIndex = result.source.index;
      const newIndex = result.destination.index;
      if (this.props.onSortEnd) {
        this.props.onSortEnd({ oldIndex, newIndex });
      }
      const nextItems = reorder(this.getItems(), oldIndex, newIndex);
      this.setState({
        activeItem: newIndex,
        items: nextItems,
        sorting: false
      });
    };
    this.getItemHeight = (index) => {
      const { itemHeight } = this.props;
      if (typeof itemHeight === "function") {
        const { items } = this.state;
        return itemHeight(items[index], index);
      }
      return itemHeight;
    };
    this.getVirtualizedItemHeight = (index) => {
      return this.getItemHeight(index) || DEFAULT_ITEM_HEIGHT;
    };
  }
  static moveListElement(list, oldIndex, newIndex) {
    if (oldIndex !== newIndex) {
      const [item] = list.splice(oldIndex, 1);
      list.splice(newIndex, 0, item);
    }
    return list;
  }
  static findNextIndex(list, index, step) {
    const dataLength = list.length;
    let currentIndex = (index + dataLength) % dataLength;
    for (let i = 0; i < dataLength; i += 1) {
      if (list[currentIndex] && !list[currentIndex].disabled) {
        return currentIndex;
      }
      currentIndex = (currentIndex + dataLength + step) % dataLength;
    }
    return void 0;
  }
  componentDidUpdate(prevProps, prevState) {
    if (!(0, import_isEqual.default)(this.props.items, prevProps.items)) {
      const filter = this.getFilter();
      const internalFiltering = filter && !this.props.onFilterUpdate;
      if (internalFiltering) {
        this.onUpdateFilterInternal(filter);
      } else {
        this.setState({ items: this.props.items });
      }
    }
    if (this.props.activeItemIndex !== prevProps.activeItemIndex) {
      this.activateItem(this.props.activeItemIndex);
    }
    if (this.props.onChangeActive && this.state.activeItem !== prevState.activeItem) {
      this.props.onChangeActive(this.state.activeItem);
    }
  }
  componentWillUnmount() {
    this.blurTimer = null;
  }
  render() {
    const { emptyPlaceholder, virtualized, className, itemsClassName, qa, role = "list" } = this.props;
    const { items } = this.state;
    return import_react146.default.createElement(MobileContext.Consumer, null, ({ mobile }) => (
      // The event handler should only be used to capture bubbled events
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      import_react146.default.createElement(
        "div",
        { className: b50({ mobile }, className), "data-qa": qa, tabIndex: -1, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.onKeyDown },
        this.renderFilter(),
        import_react146.default.createElement(
          "div",
          { className: b50("items", { virtualized }, itemsClassName), style: this.getItemsStyle(), onMouseLeave: this.onMouseLeave, role },
          this.renderItems(),
          items.length === 0 && Boolean(emptyPlaceholder) && import_react146.default.createElement("div", { className: b50("empty-placeholder") }, emptyPlaceholder)
        )
      )
    ));
  }
  getItems() {
    return this.state.items;
  }
  getItemsWithLoading() {
    if (this.props.sortable) {
      return this.getItems();
    }
    return this.props.loading ? [...this.state.items, this.loadingItem] : this.getItems();
  }
  getActiveItem() {
    return typeof this.state.activeItem === "number" ? this.state.activeItem : null;
  }
  activateItem(index, scrollTo = true) {
    if (typeof index === "number" && scrollTo) {
      this.scrollToIndex(index);
    }
    this.setState({ activeItem: index });
  }
  renderFilter() {
    const { size: size2, filterable, filter = this.state.filter, filterPlaceholder, filterClassName = "", autoFocus } = this.props;
    if (!filterable) {
      return null;
    }
    return import_react146.default.createElement(
      "div",
      { className: b50("filter", filterClassName) },
      import_react146.default.createElement(TextInput, { controlRef: this.refFilter, size: size2, placeholder: filterPlaceholder, value: filter, hasClear: true, onUpdate: this.onFilterUpdate, autoFocus })
    );
  }
  renderSimpleContainer() {
    const { sortable } = this.props;
    const items = this.getItemsWithLoading();
    if (sortable) {
      return import_react146.default.createElement(
        DragDropContext,
        { onDragStart: this.onSortStart, onDragEnd: this.onSortEnd },
        import_react146.default.createElement(ConnectedDroppable, { droppableId: "droppable", renderClone: (provided, snapshot, rubric) => {
          return this.renderItem({
            index: rubric.source.index,
            provided,
            isDragging: snapshot.isDragging
          });
        } }, (droppableProvided) => import_react146.default.createElement(SimpleContainer, { ref: this.refContainer, itemCount: items.length, provided: droppableProvided, sortable }, items.map((_item, index) => {
          return import_react146.default.createElement(PublicDraggable, { draggableId: String(index), index, key: `item-key-${index}` }, (provided, snapshot) => {
            return this.renderItem({
              index,
              isDragging: snapshot.isDragging,
              provided,
              style: { height: this.getItemHeight(index) }
            });
          });
        })))
      );
    }
    return import_react146.default.createElement(SimpleContainer, { itemCount: items.length, ref: this.refContainer }, items.map((_item, index) => this.renderItem({ index, style: { height: this.getItemHeight(index) } })));
  }
  renderVirtualizedContainer() {
    const items = [...this.getItems()];
    if (this.props.sortable) {
      return import_react146.default.createElement(
        DragDropContext,
        { onDragStart: this.onSortStart, onDragEnd: this.onSortEnd },
        import_react146.default.createElement(ConnectedDroppable, { droppableId: "droppable", mode: "virtual", renderClone: (provided, snapshot, rubric) => {
          return this.renderItem({
            index: rubric.source.index,
            provided,
            isDragging: snapshot.isDragging
          });
        } }, (droppableProvided) => import_react146.default.createElement(AutoSizer, null, ({ width, height }) => import_react146.default.createElement(VariableSizeList, {
          ref: this.refContainer,
          outerRef: droppableProvided.innerRef,
          width,
          height,
          itemSize: this.getVirtualizedItemHeight,
          itemData: items,
          itemCount: items.length,
          overscanCount: 10,
          onItemsRendered: this.onItemsRendered,
          // this property used to rerender items in viewport
          // must be last, typescript skips checks for all props behind ts-ignore/ts-expect-error
          // @ts-expect-error
          activeItem: this.state.activeItem
        }, this.renderVirtualizedItem)))
      );
    }
    return import_react146.default.createElement(AutoSizer, null, ({ width, height }) => import_react146.default.createElement(VariableSizeList, {
      ref: this.refContainer,
      width,
      height,
      itemSize: this.getVirtualizedItemHeight,
      itemData: items,
      itemCount: items.length,
      overscanCount: 10,
      onItemsRendered: this.onItemsRendered,
      // this property used to rerender items in viewport
      // must be last, typescript skips checks for all props behind ts-ignore/ts-expect-error
      // @ts-expect-error
      activeItem: this.state.activeItem
    }, this.renderItem));
  }
  renderItems() {
    if (this.props.virtualized) {
      return this.renderVirtualizedContainer();
    } else {
      return this.renderSimpleContainer();
    }
  }
  getFilter() {
    const { filter = this.state.filter } = this.props;
    return filter;
  }
  getItemsStyle() {
    let { itemsHeight } = this.props;
    if (typeof itemsHeight === "function") {
      itemsHeight = itemsHeight(this.state.items);
    }
    return itemsHeight ? { height: itemsHeight } : void 0;
  }
  handleKeyMove(event, step, defaultItemIndex = 0) {
    const { activeItem = defaultItemIndex } = this.state;
    event.preventDefault();
    const items = this.getItemsWithLoading();
    this.activateItem(_List.findNextIndex(items, activeItem + step, Math.sign(step)));
  }
};
List.defaultProps = listDefaultProps;

// node_modules/@gravity-ui/uikit/build/esm/components/List/index.js
var ListWrapper = (props) => import_react147.default.createElement(List, Object.assign({}, props));
ListWrapper.defaultProps = listDefaultProps;

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/Pagination.js
var import_react167 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationEllipsis/PaginationEllipsis.js
var import_react148 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationEllipsis/PaginationEllipsis.css";
var b51 = blockNew("pagination-ellipsis");
var PaginationEllipsis = ({ size: size2, className }) => {
  return import_react148.default.createElement("div", { className: b51({ size: size2 }, className) }, "...");
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPage/PaginationPage.js
var import_react149 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPage/PaginationPage.css";
var b52 = blockNew("pagination-page");
var PaginationPage = ({ item, size: size2, pageSize, className, onUpdate }) => {
  if (item.simple) {
    return import_react149.default.createElement("div", { className: b52("simple", { size: size2 }, className) }, item.page);
  }
  const view = item.current ? "normal" : "flat";
  return import_react149.default.createElement(Button2, { size: size2, key: view, view, selected: item.current, className, onClick: () => onUpdate(item.page, pageSize) }, item.page);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageOf/PaginationPageOf.js
var import_react150 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/i18n/en.json
var en_default6 = {
  button_previous: "Previous",
  button_next: "Next",
  button_first: "First",
  "label_input-placeholder": "Page #",
  "label_page-of": "of"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/i18n/ru.json
var ru_default6 = {
  button_previous: "Предыдущая",
  button_next: "Следующая",
  button_first: "Первая",
  "label_input-placeholder": "Стр.",
  "label_page-of": "из"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/i18n/index.js
var COMPONENT4 = "Pagination";
var i18n_default5 = addComponentKeysets({ en: en_default6, ru: ru_default6 }, COMPONENT4);

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageOf/PaginationPageOf.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageOf/PaginationPageOf.css";
var b53 = blockNew("pagination-page-of");
var PaginationPageOf = ({ size: size2, className }) => {
  return import_react150.default.createElement("div", { className: b53({ size: size2 }, className) }, i18n_default5("label_page-of"));
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationButton/PaginationButton.js
var import_react151 = __toESM(require_react());
var PaginationButton = ({ item, size: size2, className, page, pageSize, onUpdate, compact }) => {
  let button = null;
  const { disabled } = item;
  switch (item.action) {
    case "first":
      button = import_react151.default.createElement(
        Button2,
        { size: size2, view: "outlined", className, onClick: () => onUpdate(1, pageSize), title: compact ? i18n_default5("button_first") : void 0, disabled },
        import_react151.default.createElement(Icon, { data: ChevronsLeft_default, size: "16" }),
        compact ? void 0 : i18n_default5("button_first")
      );
      break;
    case "previous":
      button = import_react151.default.createElement(
        Button2,
        { size: size2, view: "outlined", className, onClick: () => onUpdate(page - 1, pageSize), title: compact ? i18n_default5("button_previous") : void 0, disabled },
        import_react151.default.createElement(Icon, { data: ChevronLeft_default, size: "16" }),
        compact ? void 0 : i18n_default5("button_previous")
      );
      break;
    case "next":
      button = import_react151.default.createElement(
        Button2,
        { size: size2, view: "outlined", className, onClick: () => onUpdate(page + 1, pageSize), title: compact ? i18n_default5("button_next") : void 0, disabled },
        import_react151.default.createElement(Icon, { data: ChevronRight_default, size: "16" }),
        compact ? void 0 : i18n_default5("button_next")
      );
      break;
  }
  return button;
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationInput/PaginationInput.js
var import_react152 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationInput/PaginationInput.css";
var b54 = blockNew("pagination-input");
var PaginationInput = ({ numberOfPages, size: size2, pageSize, onUpdate, className }) => {
  const [value, setValue] = import_react152.default.useState("");
  const handleUpdateValue = (inputValue) => {
    if (inputValue === "" || /^[1-9][0-9]*$/.test(inputValue)) {
      setValue(inputValue);
    }
  };
  const handleUpdate = (inputValue) => {
    if (!inputValue) {
      return;
    }
    let numValue = Number(inputValue);
    if (!Number.isInteger(numValue)) {
      setValue("");
      return;
    }
    const hasUpperLimit = numberOfPages > 0;
    if (numValue > numberOfPages) {
      numValue = hasUpperLimit ? numberOfPages : numValue;
    } else if (numValue < 1) {
      numValue = 1;
    }
    setValue("");
    onUpdate(numValue, pageSize);
  };
  const handleBlur = (event) => handleUpdate(event.currentTarget.value);
  const handleKeyUp = (event) => {
    if (event.key === KeyCode.ENTER) {
      handleUpdate(event.currentTarget.value);
    }
  };
  return import_react152.default.createElement(TextInput, { className: b54({ size: size2 }, className), placeholder: i18n_default5("label_input-placeholder"), size: size2, value, onUpdate: handleUpdateValue, onBlur: handleBlur, onKeyUp: handleKeyUp });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageSizer/PaginationPageSizer.js
var import_react166 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Select/Select.js
var import_react165 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/EmptyOptions/EmptyOptions.js
var import_react153 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/EmptyOptions/EmptyOptions.css";
var b55 = blockNew("select-empty-placeholder");
var EmptyOptions = ({ renderEmptyOptions, filter }) => {
  return import_react153.default.createElement("div", { className: b55({ empty: !renderEmptyOptions }) }, renderEmptyOptions === null || renderEmptyOptions === void 0 ? void 0 : renderEmptyOptions({ filter }));
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectControl/SelectControl.js
var import_react155 = __toESM(require_react());
var import_isEmpty = __toESM(require_isEmpty());

// node_modules/@gravity-ui/uikit/build/esm/components/Select/i18n/en.json
var en_default7 = {
  label_clear: "Clear",
  "label_show-error-info": "Show popup with error info"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/i18n/ru.json
var ru_default7 = {
  label_clear: "Очистить",
  "label_show-error-info": "Показать попап с информацей об ошибке"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/i18n/index.js
var COMPONENT5 = "Select";
var i18n_default6 = addComponentKeysets({ en: en_default7, ru: ru_default7 }, COMPONENT5);

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectClear/SelectClear.js
var import_react154 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectClear/SelectClear.css";
var SelectClear = (props) => {
  const { size: size2, onClick, onMouseEnter, onMouseLeave, renderIcon } = props;
  const icon = renderIcon ? renderIcon() : import_react154.default.createElement(Icon, { className: selectClearBlock("clear"), data: Xmark_default });
  return import_react154.default.createElement("button", { className: selectClearBlock({ size: size2 }), "aria-label": i18n_default6("label_clear"), onClick, onMouseEnter, onMouseLeave, "data-qa": SelectQa.CLEAR, type: "button" }, icon);
};
SelectClear.displayName = "SelectClear";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectControl/SelectControl.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectControl/SelectControl.css";
var SelectControl = import_react155.default.forwardRef((props, ref2) => {
  const { toggleOpen, clearValue, onKeyDown, renderControl, view, size: size2, pin, selectedOptionsContent, className, qa, name, label, placeholder: placeholder2, isErrorVisible, errorMessage, open, disabled, value, hasClear, popupId, selectId, activeIndex } = props;
  const showOptionsText = Boolean(selectedOptionsContent);
  const showPlaceholder = Boolean(placeholder2 && !showOptionsText);
  const hasValue = Array.isArray(value) && !(0, import_isEmpty.default)(value.filter(Boolean));
  const [isDisabledButtonAnimation, setIsDisabledButtonAnimation] = import_react155.default.useState(false);
  const controlMods = {
    open,
    size: size2,
    pin,
    disabled,
    error: isErrorVisible,
    "has-clear": hasClear,
    "no-active": isDisabledButtonAnimation,
    "has-value": hasValue
  };
  const buttonMods = {
    open,
    size: size2,
    view,
    pin,
    disabled,
    error: isErrorVisible
  };
  const disableButtonAnimation = import_react155.default.useCallback(() => {
    setIsDisabledButtonAnimation(true);
  }, []);
  const enableButtonAnimation = import_react155.default.useCallback(() => {
    setIsDisabledButtonAnimation(false);
  }, []);
  const handleOnClearIconClick = import_react155.default.useCallback(() => {
    setIsDisabledButtonAnimation(false);
    clearValue();
  }, [clearValue]);
  const renderClearIcon = (args) => {
    const hideOnEmpty = !(value === null || value === void 0 ? void 0 : value[0]);
    if (!hasClear || !clearValue || hideOnEmpty || disabled) {
      return null;
    }
    return import_react155.default.createElement(SelectClear, { size: size2, onClick: handleOnClearIconClick, onMouseEnter: disableButtonAnimation, onMouseLeave: enableButtonAnimation, renderIcon: args.renderIcon });
  };
  if (renderControl) {
    return renderControl({
      onKeyDown,
      onClear: clearValue,
      onClick: toggleOpen,
      renderClear: (arg) => renderClearIcon(arg),
      ref: ref2,
      open: Boolean(open),
      popupId,
      selectId,
      activeIndex
    }, { value });
  }
  return import_react155.default.createElement(
    import_react155.default.Fragment,
    null,
    import_react155.default.createElement(
      "div",
      { className: selectControlBlock(controlMods), role: "group" },
      import_react155.default.createElement(
        "button",
        { ref: ref2, role: "combobox", "aria-controls": popupId, className: selectControlButtonBlock(buttonMods, className), "aria-haspopup": "listbox", "aria-expanded": open, "aria-activedescendant": activeIndex === void 0 ? void 0 : `${selectId}-list-item-${activeIndex}`, name, disabled, onClick: toggleOpen, onKeyDown, type: "button", "data-qa": qa },
        label && import_react155.default.createElement("span", { className: selectControlBlock("label") }, label),
        showPlaceholder && import_react155.default.createElement("span", { className: selectControlBlock("placeholder") }, placeholder2),
        showOptionsText && import_react155.default.createElement("span", { className: selectControlBlock("option-text") }, selectedOptionsContent)
      ),
      renderClearIcon({}),
      errorMessage && import_react155.default.createElement(
        Popover,
        { content: errorMessage },
        import_react155.default.createElement(
          "span",
          { "aria-label": i18n_default6("label_show-error-info") },
          import_react155.default.createElement(Icon, { data: TriangleExclamation_default, className: selectControlBlock("error-icon"), size: size2 === "s" ? 12 : 16 })
        )
      ),
      import_react155.default.createElement(Icon, { className: selectControlBlock("chevron-icon", { disabled }), data: ChevronDown_default, "aria-hidden": "true" })
    )
  );
});
SelectControl.displayName = "SelectControl";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectFilter/SelectFilter.js
var import_react156 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectFilter/SelectFilter.css";
var b56 = blockNew("select-filter");
var style2 = {
  padding: "4px 4px 0"
};
var SelectFilter = import_react156.default.forwardRef((props, ref2) => {
  const { onChange, onKeyDown, renderFilter, size: size2, value, placeholder: placeholder2 } = props;
  const inputRef = import_react156.default.useRef(null);
  import_react156.default.useImperativeHandle(ref2, () => ({
    focus: () => {
      var _a;
      return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });
    }
  }), []);
  return renderFilter ? renderFilter({ onChange, onKeyDown, value, ref: inputRef, style: style2 }) : import_react156.default.createElement(
    "div",
    { className: b56(), style: style2 },
    import_react156.default.createElement(TextInput, { controlRef: inputRef, controlProps: { className: b56("input"), size: 1 }, size: size2, value, placeholder: placeholder2, onUpdate: onChange, onKeyDown, qa: SelectQa.FILTER_INPUT })
  );
});
SelectFilter.displayName = "SelectFilter";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectList.js
var import_react160 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Select/utils.js
var import_react157 = __toESM(require_react());
var getFlattenOptions = (options) => {
  return options.reduce((acc, option) => {
    if ("label" in option) {
      acc.push({ label: option.label, disabled: true });
      acc.push(...option.options || []);
    } else {
      acc.push(option);
    }
    return acc;
  }, []);
};
var getPopupItemHeight = (args) => {
  const { getOptionHeight, getOptionGroupHeight, size: size2, option, index, mobile } = args;
  let itemHeight = mobile ? MOBILE_ITEM_HEIGHT : SIZE_TO_ITEM_HEIGHT[size2];
  if ("label" in option) {
    const marginTop = index === 0 ? 0 : GROUP_ITEM_MARGIN_TOP;
    itemHeight = option.label === "" ? 0 : itemHeight;
    return getOptionGroupHeight ? getOptionGroupHeight(option, index) : itemHeight + marginTop;
  }
  return getOptionHeight ? getOptionHeight(option, index) : itemHeight;
};
var getOptionsHeight = (args) => {
  const { getOptionHeight, getOptionGroupHeight, size: size2, options, mobile } = args;
  return options.reduce((height, option, index) => {
    return height + getPopupItemHeight({ getOptionHeight, getOptionGroupHeight, size: size2, option, index, mobile });
  }, 0);
};
var getOptionText = (option) => {
  if (typeof option.content === "string") {
    return option.content;
  }
  if (typeof option.children === "string") {
    return option.children;
  }
  if (option.text) {
    return option.text;
  }
  return option.value;
};
var getSelectedOptionsContent = (flattenOptions, value, renderSelectedOption) => {
  if (value.length === 0) {
    return null;
  }
  const flattenSimpleOptions = flattenOptions.filter((opt) => !("label" in opt));
  const selectedOptions = value.reduce((acc, val) => {
    const selectedOption = flattenSimpleOptions.find((opt) => opt.value === val);
    acc.push(selectedOption || { value: val });
    return acc;
  }, []);
  if (renderSelectedOption) {
    return selectedOptions.map((option, index) => {
      return import_react157.default.createElement(import_react157.default.Fragment, { key: option.value }, renderSelectedOption(option, index));
    });
  } else {
    return selectedOptions.map((option) => {
      return getOptionText(option);
    }).join(", ");
  }
};
var getTypedChildrenArray = (children2) => {
  return import_react157.default.Children.toArray(children2);
};
var getOptionsFromOptgroupChildren = (children2) => {
  return import_react157.default.Children.toArray(children2).reduce((acc, { props }) => {
    if ("value" in props) {
      acc.push(props);
    }
    return acc;
  }, []);
};
var getOptionsFromChildren = (children2) => {
  return getTypedChildrenArray(children2).reduce((acc, { props }) => {
    if ("label" in props) {
      const options = props.options || getOptionsFromOptgroupChildren(props.children);
      acc.push({
        options,
        label: props.label
      });
    }
    if ("value" in props) {
      acc.push(Object.assign({}, props));
    }
    return acc;
  }, []);
};
var getNextQuickSearch = (keyCode, quickSearch) => {
  const writingSystemKeyPressed = keyCode.length === 1;
  const backspacePressed = keyCode === KeyCode.BACKSPACE;
  let nextQuickSearch = "";
  if (backspacePressed && quickSearch.length) {
    nextQuickSearch = quickSearch.slice(0, quickSearch.length - 1);
  } else if (writingSystemKeyPressed) {
    nextQuickSearch = (quickSearch + keyCode).trim();
  }
  return nextQuickSearch;
};
var getEscapedRegExp = (string) => {
  return new RegExp(string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "i");
};
var findItemIndexByQuickSearch = (quickSearch, items) => {
  if (!items) {
    return -1;
  }
  return items.findIndex((item) => {
    if ("label" in item) {
      return false;
    }
    if (item.disabled) {
      return false;
    }
    const optionText = getOptionText(item);
    return getEscapedRegExp(quickSearch).test(optionText);
  });
};
var getListItems = (listRef) => {
  var _a;
  return ((_a = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a === void 0 ? void 0 : _a.getItems()) || [];
};
var getActiveItem = (listRef) => {
  var _a;
  const items = getListItems(listRef);
  const activeItemIndex = (_a = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a === void 0 ? void 0 : _a.getActiveItem();
  return typeof activeItemIndex === "number" ? items[activeItemIndex] : void 0;
};
var activateFirstClickableItem = (listRef) => {
  var _a;
  const items = getListItems(listRef);
  (_a = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a === void 0 ? void 0 : _a.activateItem(List.findNextIndex(items, 0, 1), false);
};
var isOptionMatchedByFilter = (option, filter) => {
  const lowerOptionText = getOptionText(option).toLocaleLowerCase();
  const lowerFilter = filter.toLocaleLowerCase();
  return lowerOptionText.indexOf(lowerFilter) !== -1;
};
var isGroupTitle = (option) => {
  return Boolean(option && "label" in option);
};
var getFilteredFlattenOptions = (args) => {
  const { options, filter, filterOption } = args;
  const filteredOptions = options.filter((option) => {
    if (isGroupTitle(option)) {
      return true;
    }
    return filterOption ? filterOption(option, filter) : isOptionMatchedByFilter(option, filter);
  });
  return filteredOptions.reduce((acc, option, index) => {
    const groupTitle = isGroupTitle(option);
    const previousGroupTitle = isGroupTitle(acc[acc.length - 1]);
    const isLastOption = index === filteredOptions.length - 1;
    if (groupTitle && previousGroupTitle) {
      acc.pop();
    }
    if (!groupTitle || groupTitle && !isLastOption) {
      acc.push(option);
    }
    return acc;
  }, []);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/GroupLabel.js
var import_react158 = __toESM(require_react());
var b57 = blockNew("select-list");
var GroupLabel = ({ option, renderOptionGroup }) => {
  if (renderOptionGroup) {
    return import_react158.default.createElement("div", { className: b57("group-label-custom") }, renderOptionGroup(option));
  } else {
    return import_react158.default.createElement(
      "div",
      { className: b57("group-label", { empty: option.label === "" }) },
      import_react158.default.createElement("div", { className: b57("group-label-content") }, option.label)
    );
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/OptionWrap.js
var import_react159 = __toESM(require_react());
var b58 = blockNew("select-list");
var DefaultOption = ({ option }) => {
  const { content, children: children2, disabled } = option;
  return import_react159.default.createElement("span", { className: b58("option-default-label", { disabled }) }, content || children2);
};
var OptionWrap = (props) => {
  const { renderOption, value, option, multiple } = props;
  const selected = value.indexOf(option.value) !== -1;
  const optionContent = renderOption ? renderOption(option) : import_react159.default.createElement(DefaultOption, { option });
  return import_react159.default.createElement(
    "div",
    { "data-qa": option.qa, className: b58("option", { colored: selected && !multiple, disabled: option.disabled }) },
    multiple && import_react159.default.createElement(Icon, { className: b58("tick-icon", { shown: selected && multiple }), data: Check_default }),
    optionContent
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectList.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectList/SelectList.css";
var loadingOption = { value: "__SELECT_LIST_ITEM_LOADING__", disabled: true };
var SelectList = import_react160.default.forwardRef((props, ref2) => {
  const { onOptionClick, renderOption, renderOptionGroup, getOptionHeight, getOptionGroupHeight, size: size2, flattenOptions, value, multiple, virtualized, mobile, loading, onLoadMore, selectId, onChangeActive } = props;
  const items = import_react160.default.useMemo(() => loading ? [...flattenOptions, loadingOption] : flattenOptions, [flattenOptions, loading]);
  const selectedIndexes = import_react160.default.useMemo(() => flattenOptions.reduce((acc, option, index) => {
    if ("value" in option && value.includes(option.value)) {
      acc.push(index);
    }
    return acc;
  }, []), [flattenOptions, value]);
  const optionsHeight = getOptionsHeight({
    options: items,
    getOptionHeight,
    getOptionGroupHeight,
    size: size2,
    mobile
  });
  const getItemHeight = import_react160.default.useCallback((option, index) => {
    return getPopupItemHeight({
      getOptionHeight,
      getOptionGroupHeight,
      size: size2,
      option,
      index,
      mobile
    });
  }, [getOptionHeight, getOptionGroupHeight, mobile, size2]);
  const renderItem = import_react160.default.useCallback((option, _isItemActive, itemIndex) => {
    if ("label" in option) {
      const wrappedRenderOptionGroup = renderOptionGroup ? (optionLocal) => {
        return renderOptionGroup(optionLocal, {
          itemHeight: getItemHeight(optionLocal, itemIndex)
        });
      } : void 0;
      return import_react160.default.createElement(GroupLabel, { option, renderOptionGroup: wrappedRenderOptionGroup });
    }
    if (option.value === loadingOption.value) {
      return import_react160.default.createElement(SelectLoadingIndicator, { onIntersect: itemIndex === 0 ? void 0 : onLoadMore });
    }
    const wrappedRenderOption = renderOption ? (optionLocal) => {
      return renderOption(optionLocal, {
        itemHeight: getItemHeight(optionLocal, itemIndex)
      });
    } : void 0;
    return import_react160.default.createElement(OptionWrap, { option, value, multiple, renderOption: wrappedRenderOption });
  }, [renderOption, renderOptionGroup, value, multiple, getItemHeight, onLoadMore]);
  return import_react160.default.createElement(List, { ref: ref2, className: selectListBlock({ size: size2, virtualized, mobile }), qa: SelectQa.LIST, itemClassName: selectListBlock("item"), itemHeight: getItemHeight, itemsHeight: virtualized ? optionsHeight : void 0, items, filterable: false, virtualized, renderItem, onItemClick: onOptionClick, selectedItemIndex: selectedIndexes, id: `${selectId}-list`, role: "listbox", onChangeActive });
});
SelectList.displayName = "SelectList";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/SelectPopup.js
var import_react163 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.js
var import_react162 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/SheetContent.js
var import_react161 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/constants.js
var sheetBlock = block("sheet");

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/utils.js
var Point = class {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.timeStamp = Date.now();
  }
};
var VelocityTracker = class {
  constructor(len = 5) {
    this.points = [];
    this.pointsLen = len;
    this.clear();
  }
  clear() {
    this.points = new Array(this.pointsLen);
  }
  addMovement({ x, y }) {
    this.points.pop();
    this.points.unshift(new Point(x, y));
  }
  getYAcceleration(lastPointCount = 1) {
    const endPoint = this.points[0];
    const startPoint = this.points[lastPointCount];
    if (!endPoint || !startPoint) {
      return 0;
    }
    return (endPoint.y - startPoint.y) / Math.pow(endPoint.timeStamp - startPoint.timeStamp, 2);
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/SheetContent.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.css";
var DEFAULT_TRANSITION_DURATION = "0.3s";
var HIDE_THRESHOLD = 50;
var ACCELERATION_Y_MAX = 0.08;
var ACCELERATION_Y_MIN = -0.02;
var MAX_CONTENT_HEIGHT_FROM_VIEWPORT_COEFFICIENT = 0.9;
var hashHistory = [];
var SheetContent = class extends import_react161.default.Component {
  constructor() {
    super(...arguments);
    this.veilRef = import_react161.default.createRef();
    this.sheetRef = import_react161.default.createRef();
    this.sheetTopRef = import_react161.default.createRef();
    this.sheetContentRef = import_react161.default.createRef();
    this.sheetInnerContentRef = import_react161.default.createRef();
    this.sheetTitleRef = import_react161.default.createRef();
    this.velocityTracker = new VelocityTracker();
    this.observer = null;
    this.transitionDuration = DEFAULT_TRANSITION_DURATION;
    this.state = {
      startScrollTop: 0,
      startY: 0,
      deltaY: 0,
      prevSheetHeight: 0,
      swipeAreaTouched: false,
      contentTouched: false,
      veilTouched: false,
      isAnimating: false,
      inWindowResizeScope: false
    };
    this.setStyles = ({ status, deltaHeight = 0 }) => {
      if (!this.sheetRef.current || !this.veilRef.current) {
        return;
      }
      const visibleHeight = this.sheetHeight - deltaHeight;
      const translate = status === "showing" ? `translate3d(0, -${visibleHeight}px, 0)` : "translate3d(0, 0, 0)";
      let opacity = 0;
      if (status === "showing") {
        opacity = deltaHeight === 0 ? 1 : visibleHeight / this.sheetHeight;
      }
      this.veilRef.current.style.opacity = String(opacity);
      this.sheetRef.current.style.transform = translate;
    };
    this.show = () => {
      this.setState({ isAnimating: true }, () => {
        this.setStyles({ status: "showing" });
        this.setHash();
      });
    };
    this.hide = () => {
      this.setState({ isAnimating: true }, () => {
        this.setStyles({ status: "hiding" });
        this.removeHash();
      });
    };
    this.onSwipeAreaTouchStart = (e) => {
      this.velocityTracker.clear();
      this.setState({
        startY: e.nativeEvent.touches[0].clientY,
        swipeAreaTouched: true
      });
    };
    this.onContentTouchStart = (e) => {
      if (!this.props.allowHideOnContentScroll || this.state.swipeAreaTouched) {
        return;
      }
      this.velocityTracker.clear();
      this.setState({
        startY: e.nativeEvent.touches[0].clientY,
        startScrollTop: this.sheetScrollTop,
        contentTouched: true
      });
    };
    this.onSwipeAriaTouchMove = (e) => {
      const delta = e.nativeEvent.touches[0].clientY - this.state.startY;
      this.velocityTracker.addMovement({
        x: e.nativeEvent.touches[0].clientX,
        y: e.nativeEvent.touches[0].clientY
      });
      this.setState({ deltaY: delta });
      if (delta <= 0) {
        return;
      }
      this.setStyles({ status: "showing", deltaHeight: delta });
    };
    this.onContentTouchMove = (e) => {
      if (!this.props.allowHideOnContentScroll) {
        return;
      }
      const { startScrollTop, swipeAreaTouched } = this.state;
      if (swipeAreaTouched || this.sheetScrollTop > 0 || startScrollTop > 0 && startScrollTop !== this.sheetScrollTop) {
        return;
      }
      const delta = e.nativeEvent.touches[0].clientY - this.state.startY;
      this.velocityTracker.addMovement({
        x: e.nativeEvent.touches[0].clientX,
        y: e.nativeEvent.touches[0].clientY
      });
      this.setState({ deltaY: delta });
      if (delta <= 0) {
        return;
      }
      this.setStyles({ status: "showing", deltaHeight: delta });
    };
    this.onTouchEndAction = (deltaY) => {
      const accelerationY = this.velocityTracker.getYAcceleration();
      if (this.sheetHeight <= deltaY) {
        this.props.hideSheet();
      } else if (deltaY > HIDE_THRESHOLD && accelerationY <= ACCELERATION_Y_MAX && accelerationY >= ACCELERATION_Y_MIN || accelerationY > ACCELERATION_Y_MAX) {
        this.hide();
      } else if (deltaY !== 0) {
        this.show();
      }
    };
    this.onSwipeAriaTouchEnd = () => {
      const { deltaY } = this.state;
      this.onTouchEndAction(deltaY);
      this.setState({
        startY: 0,
        deltaY: 0,
        swipeAreaTouched: false
      });
    };
    this.onContentTouchEnd = () => {
      const { deltaY, swipeAreaTouched } = this.state;
      if (!this.props.allowHideOnContentScroll || swipeAreaTouched) {
        return;
      }
      this.onTouchEndAction(deltaY);
      this.setState({
        startY: 0,
        deltaY: 0,
        contentTouched: false
      });
    };
    this.onVeilClick = () => {
      this.setState({ veilTouched: true });
      this.hide();
    };
    this.onVeilTransitionEnd = () => {
      this.setState({ isAnimating: false });
      if (this.veilOpacity === "0") {
        this.props.hideSheet();
      }
    };
    this.onContentTransitionEnd = (e) => {
      if (e.propertyName === "height") {
        if (this.sheetContentRef.current) {
          this.sheetContentRef.current.style.transition = "none";
        }
      }
    };
    this.onResizeWindow = () => {
      this.setState({ inWindowResizeScope: true });
      this.onResize();
      setTimeout(() => this.setState({ inWindowResizeScope: false }), 0);
    };
    this.onResize = () => {
      if (!this.sheetRef.current || !this.sheetContentRef.current) {
        return;
      }
      const sheetHeight = this.sheetTitleHeight + this.innerContentHeight + this.sheetTopHeight;
      const availableViewportHeight = window.innerHeight * MAX_CONTENT_HEIGHT_FROM_VIEWPORT_COEFFICIENT;
      const resultHeight = sheetHeight >= availableViewportHeight ? availableViewportHeight : sheetHeight;
      this.sheetContentRef.current.style.transition = this.state.prevSheetHeight > sheetHeight ? `height 0s ease ${this.transitionDuration}` : "none";
      this.sheetContentRef.current.style.height = `${resultHeight - this.sheetTopHeight}px`;
      this.sheetRef.current.style.transform = `translate3d(0, -${resultHeight}px, 0)`;
      this.setState({ prevSheetHeight: sheetHeight });
    };
  }
  componentDidMount() {
    this.addListeners();
    this.show();
    this.setInitialStyles();
    this.setState({
      prevSheetHeight: this.sheetTitleHeight + this.innerContentHeight + this.sheetTopHeight
    });
  }
  componentDidUpdate(prevProps) {
    const { visible, location } = this.props;
    if (!prevProps.visible && visible) {
      this.show();
    }
    if (prevProps.visible && !visible || this.shouldClose(prevProps)) {
      this.hide();
    }
    if (prevProps.location.pathname !== location.pathname) {
      hashHistory = [];
    }
  }
  componentWillUnmount() {
    this.removeListeners();
  }
  render() {
    const { content, contentClassName, swipeAreaClassName, hideTopBar, title } = this.props;
    const { deltaY, swipeAreaTouched, contentTouched, veilTouched, isAnimating, inWindowResizeScope } = this.state;
    const veilTransitionMod = {
      "with-transition": !deltaY || veilTouched
    };
    const sheetTransitionMod = {
      "with-transition": !inWindowResizeScope && veilTransitionMod["with-transition"]
    };
    const contentMod = {
      "without-scroll": deltaY > 0 && contentTouched || swipeAreaTouched
    };
    return import_react161.default.createElement(
      import_react161.default.Fragment,
      null,
      import_react161.default.createElement("div", { ref: this.veilRef, className: sheetBlock("veil", veilTransitionMod), onClick: isAnimating ? void 0 : this.onVeilClick, onTransitionEnd: this.onVeilTransitionEnd }),
      import_react161.default.createElement(
        "div",
        { ref: this.sheetRef, className: sheetBlock("sheet", sheetTransitionMod) },
        !hideTopBar && import_react161.default.createElement(
          "div",
          { ref: this.sheetTopRef, className: sheetBlock("sheet-top") },
          import_react161.default.createElement("div", { className: sheetBlock("sheet-top-resizer") })
        ),
        import_react161.default.createElement("div", { className: sheetBlock("sheet-swipe-area", swipeAreaClassName), onTouchStart: this.onSwipeAreaTouchStart, onTouchMove: this.onSwipeAriaTouchMove, onTouchEnd: this.onSwipeAriaTouchEnd }),
        import_react161.default.createElement(
          "div",
          { ref: this.sheetContentRef, className: sheetBlock("sheet-content", contentMod, contentClassName), onTouchStart: this.onContentTouchStart, onTouchMove: this.onContentTouchMove, onTouchEnd: this.onContentTouchEnd, onTransitionEnd: this.onContentTransitionEnd },
          title && import_react161.default.createElement("div", { ref: this.sheetTitleRef, className: sheetBlock("sheet-content-title") }, title),
          import_react161.default.createElement("div", { ref: this.sheetInnerContentRef }, content)
        )
      )
    );
  }
  get veilOpacity() {
    var _a;
    return ((_a = this.veilRef.current) === null || _a === void 0 ? void 0 : _a.style.opacity) || 0;
  }
  get sheetTopHeight() {
    var _a;
    return ((_a = this.sheetTopRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height) || 0;
  }
  get sheetHeight() {
    var _a;
    return ((_a = this.sheetRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height) || 0;
  }
  get innerContentHeight() {
    var _a;
    return ((_a = this.sheetInnerContentRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height) || 0;
  }
  get sheetTitleHeight() {
    var _a;
    return ((_a = this.sheetTitleRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height) || 0;
  }
  get sheetScrollTop() {
    var _a;
    return ((_a = this.sheetContentRef.current) === null || _a === void 0 ? void 0 : _a.scrollTop) || 0;
  }
  setInitialStyles() {
    if (this.sheetContentRef.current && this.sheetInnerContentRef.current) {
      this.transitionDuration = getComputedStyle(this.sheetContentRef.current).getPropertyValue("--yc-sheet-transition-duration");
      const initialHeight = this.sheetHeight - this.sheetTopHeight;
      this.sheetContentRef.current.style.height = `${initialHeight}px`;
    }
  }
  addListeners() {
    window.addEventListener("resize", this.onResizeWindow);
    if (this.sheetRef.current) {
      const config3 = { subtree: true, childList: true };
      this.observer = new MutationObserver(this.onResize);
      this.observer.observe(this.sheetRef.current, config3);
    }
  }
  removeListeners() {
    window.removeEventListener("resize", this.onResizeWindow);
    if (this.observer) {
      this.observer.disconnect();
    }
  }
  setHash() {
    const { id, platform, location, history } = this.props;
    if (platform === Platform.BROWSER) {
      return;
    }
    const newLocation = Object.assign(Object.assign({}, location), { hash: id });
    switch (platform) {
      case Platform.IOS:
        if (location.hash) {
          hashHistory.push(location.hash);
        }
        history.replace(newLocation);
        break;
      case Platform.ANDROID:
        history.push(newLocation);
        break;
    }
  }
  removeHash() {
    var _a;
    const { id, platform, location, history } = this.props;
    if (platform === Platform.BROWSER || location.hash !== `#${id}`) {
      return;
    }
    switch (platform) {
      case Platform.IOS:
        history.replace(Object.assign(Object.assign({}, location), { hash: (_a = hashHistory.pop()) !== null && _a !== void 0 ? _a : "" }));
        break;
      case Platform.ANDROID:
        history.goBack();
        break;
    }
  }
  shouldClose(prevProps) {
    const { id, platform, location, history } = this.props;
    return platform !== Platform.BROWSER && history.action === "POP" && prevProps.location.hash !== location.hash && location.hash !== `#${id}`;
  }
};
SheetContent.defaultProps = {
  id: "sheet",
  allowHideOnContentScroll: true
};
function withRouterWrapper(Component2) {
  const ComponentWithRouter = (props) => {
    const { useHistory, useLocation } = props, remainingProps = __rest(props, ["useHistory", "useLocation"]);
    return import_react161.default.createElement(Component2, Object.assign({}, remainingProps, { history: useHistory(), location: useLocation() }));
  };
  const componentName = Component2.displayName || Component2.name || "Component";
  ComponentWithRouter.displayName = `withRouterWrapper(${componentName})`;
  return ComponentWithRouter;
}
var SheetContentContainer = withMobile(withRouterWrapper(SheetContent));

// node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Sheet/Sheet.css";
var Sheet = ({ children: children2, onClose, visible, id, title, className, contentClassName, swipeAreaClassName, allowHideOnContentScroll, hideTopBar, qa }) => {
  const [open, setOpen] = import_react162.default.useState(visible);
  const [prevVisible, setPrevVisible] = import_react162.default.useState(visible);
  useBodyScrollLock({ enabled: open });
  if (!prevVisible && visible) {
    setOpen(true);
  }
  if (visible !== prevVisible) {
    setPrevVisible(visible);
  }
  const hideSheet = () => {
    if (onClose) {
      onClose();
    }
    setOpen(false);
  };
  if (!open) {
    return null;
  }
  return import_react162.default.createElement(
    Portal,
    null,
    import_react162.default.createElement(
      "div",
      { "data-qa": qa, className: sheetBlock(null, className) },
      import_react162.default.createElement(SheetContentContainer, { id, content: children2, contentClassName, swipeAreaClassName, title, visible, allowHideOnContentScroll, hideTopBar, hideSheet })
    )
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/modifiers.js
var adjustBorderWidth = (width) => {
  return width - BORDER_WIDTH * 2;
};
var getMinWidth = (referenceWidth, virtualized) => {
  if (virtualized) {
    return referenceWidth > POPUP_MIN_WIDTH_IN_VIRTUALIZE_CASE ? referenceWidth : POPUP_MIN_WIDTH_IN_VIRTUALIZE_CASE;
  }
  return adjustBorderWidth(referenceWidth);
};
var getPopupWidth = (width, controlWidth, virtualized) => {
  let popupWidth = controlWidth;
  if (typeof width === "number") {
    popupWidth = width;
  } else if (width === "fit") {
    popupWidth = adjustBorderWidth(controlWidth);
  } else {
    popupWidth = getMinWidth(controlWidth, virtualized);
  }
  return `${popupWidth}px`;
};
var getModifiers = (args) => {
  const { width, disablePortal, virtualized } = args;
  const sameWidth = {
    name: "sameWidth",
    enabled: true,
    phase: "beforeWrite",
    requires: ["computeStyles"],
    fn: ({ state, name }) => {
      var _a;
      if ((_a = state.modifiersData[`${name}#persistent`]) === null || _a === void 0 ? void 0 : _a.skip) {
        return;
      }
      const popupWidth = getPopupWidth(width, state.rects.reference.width, virtualized);
      if (typeof width !== "number" && width !== "fit") {
        state.styles.popper.minWidth = popupWidth;
        state.styles.popper.width = void 0;
      } else {
        state.styles.popper.minWidth = popupWidth;
        state.styles.popper.width = popupWidth;
      }
      state.styles.popper.maxWidth = `max(90vw, ${adjustBorderWidth(state.rects.reference.width)}px)`;
      state.modifiersData[`${name}#persistent`] = {
        skip: typeof width !== "number"
      };
    },
    effect: ({ state, name }) => {
      var _a;
      if ((_a = state.modifiersData[`${name}#persistent`]) === null || _a === void 0 ? void 0 : _a.skip) {
        return;
      }
      const popupWidth = getPopupWidth(width, state.elements.reference.offsetWidth, virtualized);
      if (typeof width !== "number" && width !== "fit") {
        state.elements.popper.style.minWidth = popupWidth;
      } else {
        state.elements.popper.style.minWidth = popupWidth;
        state.elements.popper.style.width = popupWidth;
      }
      state.elements.popper.style.maxWidth = `max(90vw, ${state.elements.reference.offsetWidth}px)`;
    }
  };
  const preventOverflow2 = {
    name: "preventOverflow",
    options: { padding: 10, altBoundary: disablePortal, altAxis: true }
  };
  return [sameWidth, preventOverflow2];
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/SelectPopup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/components/SelectPopup/SelectPopup.css";
var b59 = blockNew("select-popup");
var DEFAULT_PLACEMENT3 = ["bottom-start", "bottom-end", "top-start", "top-end"];
var SelectPopup = import_react163.default.forwardRef(({ handleClose, width, open, placement = DEFAULT_PLACEMENT3, controlRef, children: children2, className, disablePortal, virtualized, mobile, id }, ref2) => mobile ? import_react163.default.createElement(Sheet, { qa: SelectQa.SHEET, className, visible: Boolean(open), onClose: handleClose }, children2) : import_react163.default.createElement(Popup, { contentClassName: b59(null, className), qa: SelectQa.POPUP, anchorRef: ref2, placement, offset: [BORDER_WIDTH, BORDER_WIDTH], open, onClose: handleClose, disablePortal, restoreFocus: true, restoreFocusRef: controlRef, modifiers: getModifiers({ width, disablePortal, virtualized }), id }, children2));
SelectPopup.displayName = "SelectPopup";

// node_modules/@gravity-ui/uikit/build/esm/components/Select/hooks/useQuickSearch.js
var import_react164 = __toESM(require_react());
var useQuickSearch = (props) => {
  const { onChange, open, disabled } = props;
  const [search, setSearch] = import_react164.default.useState("");
  const [timer, setTimer] = import_react164.default.useState();
  const handleTimer = import_react164.default.useCallback((nextSearch) => {
    clearTimeout(timer);
    if (nextSearch) {
      const nextTimer = window.setTimeout(() => setSearch(""), QUICK_SEARCH_TIMEOUT);
      setTimer(nextTimer);
    }
  }, [timer]);
  const handleSearch = import_react164.default.useCallback((e) => {
    e.stopPropagation();
    const nextSearch = getNextQuickSearch(e.key, search);
    if (search !== nextSearch) {
      handleTimer(nextSearch);
      setSearch(nextSearch);
    }
  }, [handleTimer, search]);
  import_react164.default.useEffect(() => {
    if (open && !disabled) {
      document.addEventListener("keydown", handleSearch);
    } else if (!open && !disabled) {
      setSearch("");
    }
    return () => {
      if (open && !disabled) {
        document.removeEventListener("keydown", handleSearch);
      }
    };
  }, [handleSearch, open, disabled]);
  import_react164.default.useEffect(() => {
    if (!open) {
      clearTimeout(timer);
    }
    return () => clearTimeout(timer);
  }, [open, timer]);
  import_react164.default.useEffect(() => {
    onChange(search);
  }, [onChange, search]);
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/store/reducer.js
var initialState = { filter: "" };
var reducer2 = (state = initialState, action) => {
  switch (action.type) {
    case "SET_FILTER": {
      const { filter } = action.payload;
      return Object.assign(Object.assign({}, state), { filter });
    }
    default: {
      return state;
    }
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Select/tech-components.js
var Option = (_props) => null;
var OptionGroup = (_props) => null;

// node_modules/@gravity-ui/uikit/build/esm/components/Select/Select.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Select/Select.css";
var DEFAULT_RENDER_POPUP = ({ renderFilter, renderList }) => {
  return import_react165.default.createElement(
    import_react165.default.Fragment,
    null,
    renderFilter(),
    renderList()
  );
};
var Select = import_react165.default.forwardRef(function Select2(props, ref2) {
  const { onUpdate, onOpenChange, onFilterChange, renderControl, renderFilter, renderOption, renderOptionGroup, renderSelectedOption, renderEmptyOptions, renderPopup = DEFAULT_RENDER_POPUP, getOptionHeight, getOptionGroupHeight, filterOption, name, className, controlClassName, popupClassName, qa, value: propsValue, defaultValue, defaultOpen, open: propsOpen, label, placeholder: placeholder2, filterPlaceholder, width, popupWidth, popupPlacement, error: error2, virtualizationThreshold = DEFAULT_VIRTUALIZATION_THRESHOLD, view = "normal", size: size2 = "m", pin = "round-round", multiple = false, disabled = false, filterable = false, disablePortal, hasClear = false, onClose, id } = props;
  const [mobile] = useMobile();
  const [{ filter }, dispatch] = import_react165.default.useReducer(reducer2, initialState);
  const controlWrapRef = import_react165.default.useRef(null);
  const controlRef = import_react165.default.useRef(null);
  const filterRef = import_react165.default.useRef(null);
  const listRef = import_react165.default.useRef(null);
  const handleControlRef = useForkRef(ref2, controlRef);
  const handleFilterChange = import_react165.default.useCallback((nextFilter) => {
    onFilterChange === null || onFilterChange === void 0 ? void 0 : onFilterChange(nextFilter);
    dispatch({ type: "SET_FILTER", payload: { filter: nextFilter } });
  }, [onFilterChange]);
  const handleOpenChange = import_react165.default.useCallback((open2) => {
    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(open2);
    if (!open2 && filterable) {
      handleFilterChange("");
    }
  }, [filterable, onOpenChange, handleFilterChange]);
  const { value, open, activeIndex, toggleOpen, handleSelection, handleClearValue, setActiveIndex } = useSelect({
    onUpdate,
    value: propsValue,
    defaultValue,
    defaultOpen,
    multiple,
    open: propsOpen,
    onClose,
    onOpenChange: handleOpenChange
  });
  const uniqId = useUniqId();
  const selectId = id !== null && id !== void 0 ? id : uniqId;
  const options = props.options || getOptionsFromChildren(props.children);
  const flattenOptions = getFlattenOptions(options);
  const filteredFlattenOptions = filterable ? getFilteredFlattenOptions({
    options: flattenOptions,
    filter,
    filterOption
  }) : flattenOptions;
  const selectedOptionsContent = getSelectedOptionsContent(flattenOptions, value, renderSelectedOption);
  const virtualized = filteredFlattenOptions.length >= virtualizationThreshold;
  const { errorMessage, errorPlacement, validationState } = errorPropsMapper({
    error: error2,
    errorMessage: props.errorMessage,
    errorPlacement: props.errorPlacement || "outside",
    validationState: props.validationState
  });
  const errorMessageId = useUniqId();
  const isErrorMsgVisible = validationState === "invalid" && Boolean(errorMessage) && errorPlacement === "outside";
  const isErrorIconVisible = validationState === "invalid" && Boolean(errorMessage) && errorPlacement === "inside";
  const isErrorStateVisible = isErrorMsgVisible || isErrorIconVisible;
  const handleOptionClick = import_react165.default.useCallback((option) => {
    var _a, _b;
    if (!option || (option === null || option === void 0 ? void 0 : option.disabled) || "label" in option) {
      return;
    }
    if (multiple) {
      const activeItemIndex = (_a = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a === void 0 ? void 0 : _a.getActiveItem();
      (_b = filterRef.current) === null || _b === void 0 ? void 0 : _b.focus();
      if (typeof activeItemIndex === "number") {
        setTimeout(() => {
          var _a2;
          (_a2 = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a2 === void 0 ? void 0 : _a2.activateItem(activeItemIndex, true);
        }, 50);
      }
    }
    handleSelection(option);
  }, [handleSelection, multiple]);
  const handleControlKeyDown = import_react165.default.useCallback((e) => {
    var _a;
    if ([KeyCode.ENTER, KeyCode.SPACEBAR].includes(e.key) && open) {
      e.preventDefault();
      if (e.key === KeyCode.SPACEBAR) {
        handleOptionClick(getActiveItem(listRef));
      }
    }
    if ([KeyCode.ARROW_DOWN, KeyCode.ARROW_UP].includes(e.key) && !open) {
      e.preventDefault();
      toggleOpen();
    }
    (_a = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a === void 0 ? void 0 : _a.onKeyDown(e);
  }, [handleOptionClick, open, toggleOpen]);
  const handleFilterKeyDown = import_react165.default.useCallback((e) => {
    var _a;
    (_a = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a === void 0 ? void 0 : _a.onKeyDown(e);
  }, []);
  const handleQuickSearchChange = import_react165.default.useCallback((search) => {
    var _a;
    if (search) {
      const itemIndex = findItemIndexByQuickSearch(search, getListItems(listRef));
      if (typeof itemIndex === "number" && itemIndex !== -1) {
        (_a = listRef === null || listRef === void 0 ? void 0 : listRef.current) === null || _a === void 0 ? void 0 : _a.activateItem(itemIndex, true);
      }
    }
  }, []);
  useQuickSearch({
    onChange: handleQuickSearchChange,
    open,
    disabled: filterable
  });
  import_react165.default.useEffect(() => {
    var _a;
    if (open) {
      activateFirstClickableItem(listRef);
      if (filterable) {
        (_a = filterRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      }
    }
  }, [open, filterable]);
  const mods = Object.assign({}, width === "max" && { width });
  const inlineStyles = {};
  if (typeof width === "number") {
    inlineStyles.width = width;
  }
  const handleClose = import_react165.default.useCallback(() => toggleOpen(false), [toggleOpen]);
  const { onFocus, onBlur } = props;
  const { focusWithinProps } = useFocusWithin({
    onFocusWithin: onFocus,
    onBlurWithin: import_react165.default.useCallback((e) => {
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
      handleClose();
    }, [handleClose, onBlur])
  });
  const _renderFilter = () => {
    if (filterable) {
      return import_react165.default.createElement(SelectFilter, { ref: filterRef, size: size2, value: filter, placeholder: filterPlaceholder, onChange: handleFilterChange, onKeyDown: handleFilterKeyDown, renderFilter });
    }
    return null;
  };
  const _renderList = () => {
    if (filteredFlattenOptions.length || props.loading) {
      return import_react165.default.createElement(SelectList, { ref: listRef, size: size2, value, mobile, flattenOptions: filteredFlattenOptions, multiple, virtualized, onOptionClick: handleOptionClick, renderOption, renderOptionGroup, getOptionHeight, getOptionGroupHeight, loading: props.loading, onLoadMore: props.onLoadMore, selectId: `select-${selectId}`, onChangeActive: setActiveIndex });
    }
    return import_react165.default.createElement(EmptyOptions, { filter, renderEmptyOptions });
  };
  return import_react165.default.createElement(
    "div",
    Object.assign({ ref: controlWrapRef, className: selectBlock(mods, className) }, focusWithinProps, { style: inlineStyles }),
    import_react165.default.createElement(SelectControl, { toggleOpen, hasClear, clearValue: handleClearValue, ref: handleControlRef, className: controlClassName, qa, name, view, size: size2, pin, label, placeholder: placeholder2, selectedOptionsContent, isErrorVisible: isErrorStateVisible, errorMessage: isErrorIconVisible ? errorMessage : void 0, open, disabled, onKeyDown: handleControlKeyDown, renderControl, value, popupId: `select-popup-${selectId}`, selectId: `select-${selectId}`, activeIndex }),
    import_react165.default.createElement(SelectPopup, { ref: controlWrapRef, className: popupClassName, controlRef, width: popupWidth, open, handleClose, disablePortal, virtualized, mobile, id: `select-popup-${selectId}`, placement: popupPlacement }, renderPopup({ renderFilter: _renderFilter, renderList: _renderList })),
    import_react165.default.createElement(OuterAdditionalContent, { errorMessage: isErrorMsgVisible ? errorMessage : null, errorMessageId })
  );
});
Select.Option = Option;
Select.OptionGroup = OptionGroup;

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/utils.js
var import_uniq = __toESM(require_uniq());
function getNumerationList({ page, numberOfPages, mobile }) {
  return mobile ? getMobileNumerationList(page, numberOfPages) : getDesktopNumerationList(page, numberOfPages);
}
function getMobileNumerationList(page, numberOfPages) {
  const list = [page, "pageOf", numberOfPages];
  return list;
}
function getDesktopNumerationList(page, numberOfPages) {
  const prevPage = Math.max(page - 1, 1);
  let rightPage = Math.min(page + 1, numberOfPages);
  const list = [prevPage, page, rightPage];
  if (page === 1) {
    rightPage = Math.min(rightPage + 1, numberOfPages);
    list.push(rightPage);
  }
  if (numberOfPages - rightPage >= 2) {
    list.push("ellipsis");
  }
  if (numberOfPages - page === 1) {
    list.unshift(Math.max(page - 2, 1));
  }
  if (page === numberOfPages) {
    list.unshift(Math.max(page - 2, 1));
    list.unshift(Math.max(page - 3, 1));
  }
  list.push(numberOfPages);
  return (0, import_uniq.default)(list);
}
function getNumberOfPages(pageSize, total = 0) {
  return Math.floor((total - 1) / pageSize) + 1;
}
function getResultTotal(total) {
  return total === void 0 || total > 0 ? total : 1;
}
function getResultPage({ page, total, pageSize }) {
  return page > 0 && (total === void 0 || page <= getNumberOfPages(pageSize, total)) ? page : 1;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/components/PaginationPageSizer/PaginationPageSizer.js
var PaginationPageSizer = ({ onUpdate, pageSize, size: size2, page, pageSizeOptions, total, className }) => {
  const options = pageSizeOptions.map((pageSizeOption) => ({
    value: String(pageSizeOption),
    content: pageSizeOption
  }));
  const handleUpdate = ([newPageSizeOnUpdate]) => {
    const newPageSize = Number(newPageSizeOnUpdate);
    const numberOfPages = getNumberOfPages(newPageSize, total);
    const hasUpperLimit = numberOfPages > 0;
    if (!hasUpperLimit) {
      onUpdate(1, newPageSize);
      return;
    }
    const newPage = page > numberOfPages ? numberOfPages : page;
    onUpdate(newPage, newPageSize);
  };
  return import_react166.default.createElement(Select, { className, size: size2, onUpdate: handleUpdate, options, value: [String(pageSize)] });
};

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/hooks/usePagination.js
function usePagination({ page, pageSize, total, mobile }) {
  const numberOfPages = getNumberOfPages(pageSize, total);
  const hasTotal = numberOfPages !== 0;
  const isNextDisabled = hasTotal && page === numberOfPages || total === 0;
  let items;
  if (hasTotal) {
    const numerationList = getNumerationList({ page, numberOfPages, mobile });
    items = numerationList.map((item, index) => {
      if (item === "ellipsis") {
        return { type: "ellipsis" };
      }
      if (item === "pageOf") {
        return { type: "pageOf" };
      }
      const current = item === page;
      return {
        type: "page",
        current,
        page: item,
        simple: mobile ? current : false,
        key: mobile ? item + index : item
      };
    });
  } else {
    items = [{ type: "page", current: true, page, simple: true, key: page }];
  }
  items.unshift({
    type: "button",
    action: "previous",
    disabled: page <= 1
  });
  items.unshift({
    type: "button",
    action: "first",
    disabled: page <= 1
  });
  items.push({
    type: "button",
    action: "next",
    disabled: isNextDisabled
  });
  return { items, numberOfPages };
}

// node_modules/@gravity-ui/uikit/build/esm/components/Pagination/Pagination.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Pagination/Pagination.css";
var b60 = blockNew("pagination");
var Pagination = ({ page, pageSize, total, onUpdate, compact: propCompact = true, pageSizeOptions, showPages = true, showInput = false, className, qa }) => {
  const [mobile] = useMobile();
  const size2 = mobile ? "l" : "m";
  const compact = mobile ? true : propCompact;
  const resultTotal = getResultTotal(total);
  const resultPage = getResultPage({
    page,
    total: resultTotal,
    pageSize
  });
  const { items, numberOfPages } = usePagination({
    page: resultPage,
    pageSize,
    total: resultTotal,
    mobile
  });
  const pagination = items.map((item) => {
    switch (item.type) {
      case "page":
        return showPages && import_react167.default.createElement(PaginationPage, { key: item.key, size: size2, pageSize, item, onUpdate, className: b60("pagination-item") });
      case "ellipsis":
        return showPages && import_react167.default.createElement(PaginationEllipsis, { key: item.type, size: size2, className: b60("pagination-item") });
      case "pageOf":
        return showPages && import_react167.default.createElement(PaginationPageOf, { key: item.type, className: b60("pagination-item"), size: size2 });
      case "button":
        return import_react167.default.createElement(PaginationButton, { key: item.action, size: size2, item, page: resultPage, pageSize, onUpdate, compact, className: b60("pagination-item") });
      default:
        return null;
    }
  }).filter(Boolean);
  return import_react167.default.createElement(
    "div",
    { className: b60(null, className), "data-qa": qa },
    pagination,
    showInput && import_react167.default.createElement(PaginationInput, { numberOfPages, pageSize, size: size2, onUpdate, className: b60("input") }),
    pageSizeOptions && import_react167.default.createElement(PaginationPageSizer, { onUpdate, page: resultPage, pageSize, pageSizeOptions, size: size2, total: resultTotal, className: b60("page-sizer") })
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/Persona/Persona.js
var import_react169 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/PersonaWrap/PersonaWrap.js
var import_react168 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/PersonaWrap/PersonaWrap.css";
var b61 = block("persona");
function PersonaWrap({ size: size2 = "s", theme = "default", isEmpty: isEmpty2, onClick, onClose, className, avatar, children: children2, style: style3, closeButtonAriaAttributes, qa }) {
  const clickable = Boolean(onClick);
  const closeable = Boolean(onClose);
  const MainComponent = clickable ? "button" : "div";
  return import_react168.default.createElement(
    "div",
    { className: b61({ size: size2, theme, clickable, closeable, empty: isEmpty2 }, className), style: style3, "data-qa": qa },
    import_react168.default.createElement(
      MainComponent,
      { onClick, className: b61("main") },
      avatar && import_react168.default.createElement("div", { className: b61("avatar") }, avatar),
      import_react168.default.createElement("div", { className: b61("text") }, children2)
    ),
    onClose && import_react168.default.createElement(
      "button",
      Object.assign({ className: b61("close"), onClick: onClose }, closeButtonAriaAttributes),
      import_react168.default.createElement(Icon, { data: Xmark_default, size: 12, className: b61("close-icon") })
    )
  );
}
PersonaWrap.displayName = "PersonaWrap";

// node_modules/@gravity-ui/uikit/build/esm/components/Persona/i18n/en.json
var en_default8 = {
  "label_remove-button": "Remove {{persona}}"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Persona/i18n/ru.json
var ru_default8 = {
  "label_remove-button": "Удалить {{persona}}"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Persona/i18n/index.js
var i18n_default7 = addComponentKeysets({ en: en_default8, ru: ru_default8 }, `${NAMESPACE_NEW}persona-remove-button`);

// node_modules/@gravity-ui/uikit/build/esm/components/Persona/utils.js
var import_get = __toESM(require_get());
var extractTextValue = (text2 = "") => {
  if (text2 && typeof text2 === "object") {
    return text2.value;
  }
  return text2;
};
var extractTextView = (text2 = "") => {
  if (text2 && typeof text2 === "object") {
    return text2.content;
  }
  return text2;
};
function getTwoLetters(text2) {
  const words = text2.split(" ");
  return [(0, import_get.default)(words, "[0][0]"), (0, import_get.default)(words, "[1][0]")].filter(Boolean).join("");
}

// node_modules/@gravity-ui/uikit/build/esm/components/Persona/Persona.js
function Persona({ size: size2 = "s", theme = "default", hasBorder = theme === "default", type = "person", onClick, onClose, text: text2, image, className, style: style3, qa }) {
  const textValue = extractTextValue(text2);
  const textView = extractTextView(text2);
  const closeButtonAriaAttributes = {
    "aria-label": i18n_default7("label_remove-button", { persona: textValue })
  };
  let avatar;
  switch (type) {
    case "person":
      avatar = image ? import_react169.default.createElement("img", { alt: "", src: image }) : import_react169.default.createElement("span", null, getTwoLetters(textValue));
      break;
    case "email":
      avatar = import_react169.default.createElement(Icon, { data: Envelope_default, size: 14 });
      break;
    case "empty":
      avatar = null;
      break;
  }
  const handleClick = import_react169.default.useCallback(() => {
    onClick === null || onClick === void 0 ? void 0 : onClick(textValue);
  }, [textValue, onClick]);
  const handleClose = import_react169.default.useCallback(() => {
    onClose === null || onClose === void 0 ? void 0 : onClose(textValue);
  }, [textValue, onClose]);
  return import_react169.default.createElement(PersonaWrap, { size: size2, theme: hasBorder ? "default" : "clear", isEmpty: type === "empty", onClick: onClick && handleClick, onClose: onClose && handleClose, avatar, className, style: style3, closeButtonAriaAttributes, qa }, textView);
}
Persona.displayName = "Persona";

// node_modules/@gravity-ui/uikit/build/esm/components/Progress/Progress.js
var import_react170 = __toESM(require_react());
var import_sumBy = __toESM(require_sumBy());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Progress/Progress.css";
var b62 = block("progress");
var Progress = class _Progress extends import_react170.default.Component {
  static isFiniteNumber(value) {
    return isFinite(value) && !isNaN(value);
  }
  static isBetween(value, min2, max2) {
    return value >= min2 && value <= max2;
  }
  static getOffset(value) {
    return value < 100 ? value - 100 : 0;
  }
  static getValueFromStack(stack) {
    return (0, import_sumBy.default)(stack, (item) => item.value);
  }
  static isProgressWithStack(props) {
    return props.stack !== void 0;
  }
  render() {
    const { size: size2, className, qa } = this.props;
    return import_react170.default.createElement(
      "div",
      { className: b62({ size: size2 }, className), "data-qa": qa },
      this.renderText(),
      this.renderContent()
    );
  }
  getTheme() {
    const progressProps = this.props;
    if (_Progress.isProgressWithStack(progressProps)) {
      throw new Error("Unexpected behavior");
    }
    const { theme, colorStops, colorStopsValue, value } = progressProps;
    if (colorStops) {
      const matchingColorStopItem = colorStops.find((item, index) => {
        const currentValue = typeof colorStopsValue === "number" ? colorStopsValue : value;
        return _Progress.isBetween(currentValue, index > 1 ? colorStops[index - 1].stop : 0, index < colorStops.length - 1 ? item.stop : 100);
      });
      return matchingColorStopItem ? matchingColorStopItem.theme : theme;
    }
    return theme;
  }
  renderContent() {
    const progressProps = this.props;
    if (_Progress.isProgressWithStack(progressProps)) {
      return this.renderStack(progressProps);
    } else {
      return this.renderItem(progressProps);
    }
  }
  renderItem(props) {
    const { value } = props;
    const className = b62("item", { theme: this.getTheme(), loading: this.props.loading });
    const offset4 = _Progress.getOffset(value);
    const style3 = { transform: `translateX(${offset4}%)` };
    if (_Progress.isFiniteNumber(value)) {
      return import_react170.default.createElement("div", { className, style: style3 }, this.renderInnerText(offset4));
    }
    return null;
  }
  renderStack(props) {
    const { stack, stackClassName } = props;
    const className = b62("stack", stackClassName);
    const value = props.value || _Progress.getValueFromStack(stack);
    const offset4 = _Progress.getOffset(value);
    const style3 = { transform: `translateX(${offset4}%)` };
    let itemStyle = { width: `${-offset4}%` };
    return import_react170.default.createElement(
      "div",
      { className, style: style3 },
      import_react170.default.createElement("div", { className: b62("item"), style: itemStyle }),
      stack.map(({ value: itemValue, color, title, theme, loading = false, className: itemClassName, content }, index) => {
        itemStyle = { width: `${itemValue}%`, backgroundColor: color };
        const modifiers = {
          loading
        };
        if (typeof color === "undefined") {
          modifiers.theme = theme || "default";
        }
        if (_Progress.isFiniteNumber(value)) {
          return import_react170.default.createElement("div", { key: index, className: b62("item", modifiers, itemClassName), style: itemStyle, title }, content);
        }
        return null;
      }),
      this.renderInnerText(offset4)
    );
  }
  renderInnerText(offset4) {
    const { text: text2 } = this.props;
    if (!text2) {
      return null;
    }
    const className = b62("text-inner");
    const style3 = { transform: `translateX(${-offset4}%)` };
    return import_react170.default.createElement("div", { className, style: style3 }, text2);
  }
  renderText() {
    const { text: text2 } = this.props;
    const className = b62("text");
    return import_react170.default.createElement("div", { className }, text2);
  }
};
Progress.defaultProps = {
  text: "",
  theme: "default",
  size: "m",
  loading: false
};

// node_modules/@gravity-ui/uikit/build/esm/components/Radio/Radio.js
var import_react171 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Radio/Radio.css";
var b63 = block("radio");
var Radio = import_react171.default.forwardRef(function Radio2(props, ref2) {
  const { size: size2 = "m", disabled = false, content, children: children2, title, style: style3, className, qa } = props;
  const { checked, inputProps } = useRadio(props);
  const text2 = content || children2;
  const control = import_react171.default.createElement(
    "span",
    { className: b63("indicator") },
    import_react171.default.createElement("span", { className: b63("disc") }),
    import_react171.default.createElement("input", Object.assign({}, inputProps, { className: b63("control") })),
    import_react171.default.createElement("span", { className: b63("outline") })
  );
  return import_react171.default.createElement(ControlLabel, { ref: ref2, title, style: style3, size: size2, disabled, className: b63({
    size: size2,
    disabled,
    checked
  }, className), qa, control }, text2);
});

// node_modules/@gravity-ui/uikit/build/esm/components/RadioButton/RadioButton.js
var import_react173 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/RadioButton/RadioButtonOption.js
var import_react172 = __toESM(require_react());
var b64 = block("radio-button");
var RadioButtonOption = import_react172.default.forwardRef(function RadioButtonOption2(props, ref2) {
  const { disabled = false, content, children: children2 } = props;
  const { checked, inputProps } = useRadio(props);
  const inner = content || children2;
  const icon = isIcon(inner);
  return import_react172.default.createElement(
    "label",
    { className: b64("option", {
      disabled,
      checked
    }), ref: ref2 },
    import_react172.default.createElement("input", Object.assign({}, inputProps, { className: b64("option-control") })),
    import_react172.default.createElement("span", { className: b64("option-outline") }),
    inner && import_react172.default.createElement("span", { className: b64("option-text", { icon }) }, inner)
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/RadioButton/RadioButton.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/RadioButton/RadioButton.css";
var b65 = block("radio-button");
var RadioButton = import_react173.default.forwardRef(function RadioButton2(props, ref2) {
  const { size: size2 = "m", width, style: style3, className, qa, children: children2 } = props;
  let options = props.options;
  if (!options) {
    options = import_react173.default.Children.toArray(children2).map(({ props: props2 }) => ({
      value: props2.value,
      content: props2.content || props2.children,
      disabled: props2.disabled
    }));
  }
  const plateRef = import_react173.default.useRef(null);
  const optionRef = import_react173.default.useRef();
  const handleCheckedOptionMount = import_react173.default.useCallback((checkedOptionNode) => {
    if (!checkedOptionNode) {
      return;
    }
    const plateNode = plateRef.current;
    if (!plateNode) {
      return;
    }
    const uncheckedOptionNode = optionRef.current;
    if (uncheckedOptionNode && uncheckedOptionNode !== checkedOptionNode) {
      const setPlateStyle = (node) => {
        plateNode.style.left = `${node.offsetLeft}px`;
        plateNode.style.width = `${node.offsetWidth}px`;
      };
      setPlateStyle(uncheckedOptionNode);
      plateNode.hidden = false;
      setPlateStyle(checkedOptionNode);
    }
    optionRef.current = checkedOptionNode;
  }, []);
  const handlePlateTransitionEnd = import_react173.default.useCallback((event) => {
    event.currentTarget.hidden = true;
  }, []);
  const { containerProps, optionsProps } = useRadioGroup(Object.assign(Object.assign({}, props), { options }));
  return import_react173.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: ref2, style: style3, className: b65({ size: size2, width }, className), "data-qa": qa }),
    import_react173.default.createElement("div", { ref: plateRef, className: b65("plate"), onTransitionEnd: handlePlateTransitionEnd, hidden: true }),
    optionsProps.map((optionProps) => import_react173.default.createElement(RadioButtonOption, Object.assign({}, optionProps, { key: optionProps.value, ref: optionProps.checked ? handleCheckedOptionMount : void 0 })))
  );
});
RadioButton.Option = RadioButtonOption;

// node_modules/@gravity-ui/uikit/build/esm/components/RadioGroup/RadioGroup.js
var import_react174 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/RadioGroup/RadioGroup.css";
var b66 = block("radio-group");
var RadioGroup = import_react174.default.forwardRef(function RadioGroup2(props, ref2) {
  const { size: size2 = "m", direction = "horizontal", style: style3, className, optionClassName, qa, children: children2 } = props;
  let options = props.options;
  if (!options) {
    options = import_react174.default.Children.toArray(children2).map(({ props: props2 }) => ({
      value: props2.value,
      content: props2.content || props2.children,
      disabled: props2.disabled
    }));
  }
  const { containerProps, optionsProps } = useRadioGroup(Object.assign(Object.assign({}, props), { options }));
  return import_react174.default.createElement("div", Object.assign({}, containerProps, { ref: ref2, style: style3, className: b66({ size: size2, direction }, className), "data-qa": qa }), optionsProps.map((optionProps) => import_react174.default.createElement(Radio, Object.assign({}, optionProps, { key: optionProps.value, className: b66("option", optionClassName), size: size2 }))));
});
RadioGroup.Option = Radio;

// node_modules/@gravity-ui/uikit/build/esm/components/Skeleton/Skeleton.js
var import_react175 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Skeleton/Skeleton.css";
var b67 = block("skeleton");
function Skeleton({ className, style: style3, qa }) {
  return import_react175.default.createElement("div", { className: b67(null, className), style: style3, "data-qa": qa });
}

// node_modules/@gravity-ui/uikit/build/esm/components/Spin/Spin.js
var import_react176 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Spin/Spin.css";
var b68 = block("spin");
var Spin = import_react176.default.forwardRef(function Spin2(props, ref2) {
  const { size: size2 = "m", style: style3, className, qa } = props;
  return import_react176.default.createElement(
    "div",
    { ref: ref2, style: style3, className: b68({ size: size2 }, className), "data-qa": qa },
    import_react176.default.createElement("div", { className: b68("inner") })
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/Switch/Switch.js
var import_react177 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Switch/Switch.css";
var b69 = block("switch");
var Switch = import_react177.default.forwardRef(function Switch2(props, ref2) {
  const { size: size2 = "m", disabled = false, content, children: children2, title, style: style3, className, qa } = props;
  const { checked, inputProps } = useCheckbox(props);
  const text2 = content || children2;
  const control = import_react177.default.createElement(
    "span",
    { className: b69("indicator") },
    import_react177.default.createElement("input", Object.assign({}, inputProps, { className: b69("control") })),
    import_react177.default.createElement("span", { className: b69("outline") }),
    import_react177.default.createElement("span", { className: b69("slider") })
  );
  return import_react177.default.createElement(ControlLabel, { ref: ref2, title, style: style3, size: size2, disabled, className: b69({
    size: size2,
    disabled,
    checked
  }, className), labelClassName: b69("text"), qa, control }, text2);
});

// node_modules/@gravity-ui/uikit/build/esm/components/Table/Table.js
var import_react178 = __toESM(require_react());
var import_get2 = __toESM(require_get());
var import_has = __toESM(require_has2());
var import_isNumber = __toESM(require_isNumber());

// node_modules/@gravity-ui/uikit/build/esm/components/Table/i18n/en.json
var en_default9 = {
  label_empty: "No data"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/i18n/ru.json
var ru_default9 = {
  label_empty: "Нет данных"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/i18n/index.js
var COMPONENT6 = "Table";
var i18n_default8 = addComponentKeysets({ en: en_default9, ru: ru_default9 }, COMPONENT6);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/Table.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/Table.css";
var DASH = "—";
var b70 = block("table");
var Table = class _Table extends import_react178.default.Component {
  constructor() {
    super(...arguments);
    this.state = {
      activeScrollElement: "scrollContainer",
      columnsStyles: Array.from(this.props.columns, () => ({})),
      columnHeaderRefs: Array.from(this.props.columns, () => import_react178.default.createRef())
    };
    this.tableRef = import_react178.default.createRef();
    this.scrollContainerRef = import_react178.default.createRef();
    this.horizontalScrollBarRef = import_react178.default.createRef();
    this.horizontalScrollBarInnerRef = import_react178.default.createRef();
    this.renderRow = (item, rowIndex) => {
      const { columns, isRowDisabled, onRowClick, onRowMouseEnter, onRowMouseLeave, onRowMouseDown, getRowClassNames, verticalAlign, edgePadding, wordWrap, getRowDescriptor } = this.props;
      const { columnsStyles } = this.state;
      const descriptor = getRowDescriptor === null || getRowDescriptor === void 0 ? void 0 : getRowDescriptor(item, rowIndex);
      const disabled = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.disabled) || (isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(item, rowIndex)) || false;
      const additionalClassNames = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.classNames) || (getRowClassNames === null || getRowClassNames === void 0 ? void 0 : getRowClassNames(item, rowIndex)) || [];
      const interactive = Boolean(!disabled && onRowClick);
      return import_react178.default.createElement("tr", { key: _Table.getRowId(this.props, item, rowIndex), onClick: !disabled && onRowClick ? onRowClick.bind(null, item, rowIndex) : void 0, onMouseEnter: !disabled && onRowMouseEnter ? onRowMouseEnter.bind(null, item, rowIndex) : void 0, onMouseLeave: !disabled && onRowMouseLeave ? onRowMouseLeave.bind(null, item, rowIndex) : void 0, onMouseDown: !disabled && onRowMouseDown ? onRowMouseDown.bind(null, item, rowIndex) : void 0, className: b70("row", { disabled, interactive, "vertical-align": verticalAlign }, additionalClassNames.join(" ")) }, columns.map((column, colIndex) => {
        const { id, align, primary, className, sticky } = column;
        const content = _Table.getBodyCellContent(column, item, rowIndex);
        return import_react178.default.createElement("td", { key: id, style: columnsStyles[colIndex], className: b70("cell", {
          align,
          primary,
          sticky,
          ["edge-padding"]: edgePadding,
          ["word-wrap"]: wordWrap
        }, className) }, content);
      }));
    };
    this.handleScrollContainerMouseenter = () => {
      this.setState({ activeScrollElement: "scrollContainer" });
    };
    this.handleScrollContainerScroll = () => {
      if (this.state.activeScrollElement === "scrollContainer" && this.horizontalScrollBarRef.current && this.scrollContainerRef.current) {
        this.horizontalScrollBarRef.current.scrollLeft = this.scrollContainerRef.current.scrollLeft;
      }
    };
    this.handleHorizontalScrollBarMouseenter = () => {
      this.setState({ activeScrollElement: "scrollBar" });
    };
    this.handleHorizontalScrollBarScroll = () => {
      if (this.state.activeScrollElement === "scrollBar" && this.horizontalScrollBarRef.current && this.scrollContainerRef.current) {
        this.scrollContainerRef.current.scrollLeft = this.horizontalScrollBarRef.current.scrollLeft;
      }
    };
  }
  // Static methods may be used by HOCs
  static getRowId(props, item, rowIndex) {
    const { data, getRowId, getRowDescriptor } = props;
    const index = rowIndex !== null && rowIndex !== void 0 ? rowIndex : data.indexOf(item);
    const descriptor = getRowDescriptor === null || getRowDescriptor === void 0 ? void 0 : getRowDescriptor(item, index);
    if ((descriptor === null || descriptor === void 0 ? void 0 : descriptor.id) !== void 0) {
      return descriptor.id;
    }
    if (typeof getRowId === "function") {
      return getRowId(item, index);
    }
    if (getRowId && getRowId in item) {
      return String(item[getRowId]);
    }
    return String(index);
  }
  static getHeadCellContent(column) {
    const { id, name } = column;
    let content;
    if (typeof name === "function") {
      content = name();
    } else if (typeof name === "string") {
      content = name;
    } else {
      content = id;
    }
    return content;
  }
  static getBodyCellContent(column, item, rowIndex) {
    const { id, template, placeholder: placeholder2 } = column;
    let placeholderValue;
    if (typeof placeholder2 === "function") {
      placeholderValue = placeholder2(item, rowIndex);
    } else {
      placeholderValue = placeholder2 !== null && placeholder2 !== void 0 ? placeholder2 : DASH;
    }
    let value;
    if (typeof template === "function") {
      value = template(item, rowIndex);
    } else if (typeof template === "string") {
      value = (0, import_get2.default)(item, template);
    } else if ((0, import_has.default)(item, id)) {
      value = (0, import_get2.default)(item, id);
    }
    if ([void 0, null, ""].includes(value) && placeholderValue) {
      return placeholderValue;
    }
    return value;
  }
  static getDerivedStateFromProps(props, state) {
    if (props.columns.length === state.columnHeaderRefs.length) {
      return null;
    }
    return {
      columnHeaderRefs: Array.from(props.columns, () => import_react178.default.createRef())
    };
  }
  componentDidMount() {
    if (this.props.stickyHorizontalScroll) {
      this.tableResizeObserver = new ResizeObserver((entries) => {
        var _a;
        const { contentRect } = entries[0];
        (_a = this.horizontalScrollBarInnerRef.current) === null || _a === void 0 ? void 0 : _a.style.setProperty("width", `${contentRect.width}px`);
      });
      if (this.tableRef.current) {
        this.tableResizeObserver.observe(this.tableRef.current);
      }
      if (this.scrollContainerRef.current) {
        this.scrollContainerRef.current.addEventListener("scroll", this.handleScrollContainerScroll);
        this.scrollContainerRef.current.addEventListener("mouseenter", this.handleScrollContainerMouseenter);
      }
      if (this.horizontalScrollBarRef.current) {
        this.horizontalScrollBarRef.current.addEventListener("scroll", this.handleHorizontalScrollBarScroll);
        this.horizontalScrollBarRef.current.addEventListener("mouseenter", this.handleHorizontalScrollBarMouseenter);
      }
    }
    this.columnsResizeObserver = new ResizeObserver((entries) => {
      window.requestAnimationFrame(() => {
        if (!Array.isArray(entries) || !entries.length) {
          return;
        }
        this.updateColumnStyles();
      });
    });
    if (this.tableRef.current) {
      this.columnsResizeObserver.observe(this.tableRef.current);
    }
    this.updateColumnStyles();
  }
  componentDidUpdate(prevProps) {
    if (this.props.columns !== prevProps.columns) {
      this.updateColumnStyles();
    }
  }
  componentWillUnmount() {
    if (this.props.stickyHorizontalScroll) {
      if (this.tableResizeObserver) {
        this.tableResizeObserver.disconnect();
      }
      if (this.scrollContainerRef.current) {
        this.scrollContainerRef.current.removeEventListener("scroll", this.handleScrollContainerScroll);
        this.scrollContainerRef.current.removeEventListener("mouseenter", this.handleScrollContainerMouseenter);
      }
      if (this.horizontalScrollBarRef.current) {
        this.horizontalScrollBarRef.current.removeEventListener("scroll", this.handleHorizontalScrollBarScroll);
        this.horizontalScrollBarRef.current.removeEventListener("mouseenter", this.handleHorizontalScrollBarMouseenter);
      }
    }
    if (this.columnsResizeObserver) {
      this.columnsResizeObserver.disconnect();
    }
  }
  render() {
    const { columns, stickyHorizontalScroll, className, qa } = this.props;
    const withPrimary = columns.some(({ primary }) => primary);
    return import_react178.default.createElement("div", { className: b70({
      "with-primary": withPrimary,
      "with-sticky-scroll": stickyHorizontalScroll
    }, className), "data-qa": qa }, stickyHorizontalScroll ? import_react178.default.createElement(
      import_react178.default.Fragment,
      null,
      import_react178.default.createElement("div", { ref: this.scrollContainerRef, className: b70("scroll-container") }, this.renderTable()),
      this.renderHorizontalScrollBar()
    ) : this.renderTable());
  }
  renderHead() {
    const { columns, edgePadding, wordWrap } = this.props;
    const { columnsStyles } = this.state;
    return import_react178.default.createElement(
      "thead",
      { className: b70("head") },
      import_react178.default.createElement("tr", { className: b70("row") }, columns.map((column, index) => {
        const { id, align, primary, sticky, className } = column;
        const content = _Table.getHeadCellContent(column);
        return import_react178.default.createElement("th", { key: id, ref: this.state.columnHeaderRefs[index], style: columnsStyles[index], className: b70("cell", {
          align,
          primary,
          sticky,
          ["edge-padding"]: edgePadding,
          ["word-wrap"]: wordWrap
        }, className) }, content);
      }))
    );
  }
  renderBody() {
    const { data } = this.props;
    return import_react178.default.createElement("tbody", { className: b70("body") }, data.length > 0 ? data.map(this.renderRow) : this.renderEmptyRow());
  }
  renderTable() {
    return import_react178.default.createElement(
      "table",
      { ref: this.tableRef, className: b70("table") },
      this.renderHead(),
      this.renderBody()
    );
  }
  renderEmptyRow() {
    const { columns, emptyMessage } = this.props;
    return import_react178.default.createElement(
      "tr",
      { className: b70("row", { empty: true }) },
      import_react178.default.createElement("td", { className: b70("cell"), colSpan: columns.length }, emptyMessage ? emptyMessage : i18n_default8("label_empty"))
    );
  }
  renderHorizontalScrollBar() {
    const { stickyHorizontalScroll, stickyHorizontalScrollBreakpoint = 0 } = this.props;
    return import_react178.default.createElement(
      "div",
      { ref: this.horizontalScrollBarRef, className: b70("horizontal-scroll-bar", {
        "sticky-horizontal-scroll": stickyHorizontalScroll
      }), style: { bottom: `${stickyHorizontalScrollBreakpoint}px` }, "data-qa": "sticky-horizontal-scroll-breakpoint-qa" },
      import_react178.default.createElement("div", { ref: this.horizontalScrollBarInnerRef, className: b70("horizontal-scroll-bar-inner") })
    );
  }
  updateColumnStyles() {
    this.setState((prevState) => {
      const columnsWidth = prevState.columnHeaderRefs.map((ref2) => ref2.current === null ? void 0 : ref2.current.getBoundingClientRect().width);
      const columnsStyles = this.props.columns.map((_, index) => this.getColumnStyles(index, columnsWidth));
      return { columnsStyles };
    });
  }
  getColumnStyles(index, columnsWidth) {
    const { columns } = this.props;
    const column = columns[index];
    const style3 = {};
    if (typeof column.width === "string") {
      return { maxWidth: 0, width: column.width };
    }
    if (typeof column.width !== "undefined") {
      style3.width = column.width;
    }
    if (!column.sticky) {
      return style3;
    }
    const filteredColumns = column.sticky === "left" ? columnsWidth.slice(0, index) : columnsWidth.slice(index + 1);
    style3[column.sticky] = filteredColumns.reduce((left2, width) => {
      return (0, import_isNumber.default)(width) ? left2 + width : left2;
    }, 0);
    return style3;
  }
};
Table.defaultProps = {
  edgePadding: true
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSelection/withTableSelection.js
var import_react179 = __toESM(require_react());
var import_difference = __toESM(require_difference());
var import_get3 = __toESM(require_get());
var import_memoize = __toESM(require_memoize());
var import_union = __toESM(require_union());
var import_without = __toESM(require_without());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSelection/withTableSelection.css";
var b71 = block("table");
var selectionColumnId = "_selection";
function withTableSelection(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableSelection(${componentName})`;
  return _a = class extends import_react179.default.Component {
    constructor() {
      super(...arguments);
      this.renderHeadCell = () => {
        const { data, selectedIds } = this.props;
        let disabled = true;
        let checked = data.every((item, index) => {
          if (this.isDisabled(item, index)) {
            return true;
          } else {
            disabled = false;
          }
          const id = Table.getRowId(this.props, item, index);
          return selectedIds.includes(id);
        });
        if (disabled) {
          checked = false;
        }
        return this.renderCheckBox({
          disabled,
          checked,
          handler: this.handleAllCheckBoxUpdate,
          qa: withTableSelection.headerCheckboxQa
        });
      };
      this.renderBodyCell = (item, index) => {
        const { selectedIds } = this.props;
        const rowId = Table.getRowId(this.props, item, index);
        const checked = selectedIds.includes(rowId);
        return this.renderCheckBox({
          disabled: this.isDisabled(item, index),
          checked,
          handler: this.handleCheckBoxUpdate.bind(this, rowId, index),
          qa: withTableSelection.getCheckboxQa(rowId)
        });
      };
      this.handleCheckBoxUpdate = (id, index, event) => {
        const { checked } = event.target;
        const isShiftPressed = event.nativeEvent.shiftKey;
        const { data, selectedIds, onSelectionChange } = this.props;
        if (isShiftPressed && this.lastCheckedIndex !== void 0 && this.lastCheckedIndex >= 0) {
          const begin = Math.min(this.lastCheckedIndex, index);
          const end3 = Math.max(this.lastCheckedIndex, index);
          const dataIds = data.map((item, i) => Table.getRowId(this.props, item, i));
          const diffIds = dataIds.filter((_id, i) => begin <= i && i <= end3 && !this.isDisabled(data[i], i));
          onSelectionChange(checked ? (0, import_union.default)(selectedIds, diffIds) : (0, import_without.default)(selectedIds, ...diffIds));
        } else {
          onSelectionChange(checked ? [...selectedIds, id] : (0, import_without.default)(selectedIds, id));
        }
        this.lastCheckedIndex = index;
      };
      this.handleAllCheckBoxUpdate = (event) => {
        const { checked } = event.target;
        const { data, selectedIds, onSelectionChange } = this.props;
        const dataIds = data.map((item, index) => Table.getRowId(this.props, item, index));
        const notDisabledItemIds = dataIds.filter((_id, index) => !this.isDisabled(data[index], index));
        onSelectionChange(checked ? (0, import_union.default)(selectedIds, notDisabledItemIds) : (0, import_difference.default)(selectedIds, dataIds));
      };
      this.enhanceColumns = (0, import_memoize.default)((columns) => {
        const selectionColumn = {
          id: selectionColumnId,
          name: this.renderHeadCell,
          template: this.renderBodyCell,
          className: b71("checkbox_cell"),
          sticky: (0, import_get3.default)(columns, [0, "sticky"]) === "left" ? "left" : void 0
        };
        return [selectionColumn, ...columns];
      });
      this.enhanceOnRowClick = (0, import_memoize.default)((onRowClick) => {
        if (!onRowClick) {
          return onRowClick;
        }
        return (item, index, event) => {
          const checkboxClassName = b71("selection-checkbox");
          if (
            // @ts-ignore
            event.nativeEvent.target.matches(`.${checkboxClassName}, .${checkboxClassName} *`)
          ) {
            return void 0;
          }
          return onRowClick(item, index, event);
        };
      });
      this.enhanceGetRowDescriptor = (0, import_memoize.default)((getRowDescriptor) => {
        const currentGetRowDescriptor = (item, index) => {
          const { selectedIds, getRowClassNames } = this.props;
          const descriptor = (getRowDescriptor === null || getRowDescriptor === void 0 ? void 0 : getRowDescriptor(item, index)) || {};
          if (descriptor.classNames === void 0) {
            descriptor.classNames = (getRowClassNames === null || getRowClassNames === void 0 ? void 0 : getRowClassNames(item, index)) || [];
          }
          const id = Table.getRowId(this.props, item, index);
          const selected = selectedIds.includes(id);
          descriptor.classNames.push(b71("row", { selected }));
          return descriptor;
        };
        return currentGetRowDescriptor;
      });
      this.isDisabled = (item, index) => {
        var _a2;
        const { isRowDisabled, isRowSelectionDisabled, getRowDescriptor } = this.props;
        if (isRowSelectionDisabled && isRowSelectionDisabled(item, index)) {
          return true;
        }
        return ((_a2 = getRowDescriptor === null || getRowDescriptor === void 0 ? void 0 : getRowDescriptor(item, index)) === null || _a2 === void 0 ? void 0 : _a2.disabled) || (isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(item, index)) || false;
      };
    }
    render() {
      const _a2 = this.props, {
        selectedIds,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        onSelectionChange,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        columns,
        onRowClick,
        getRowDescriptor
      } = _a2, restTableProps = __rest(_a2, ["selectedIds", "onSelectionChange", "columns", "onRowClick", "getRowDescriptor"]);
      return import_react179.default.createElement(TableComponent, Object.assign({}, restTableProps, { columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick), getRowDescriptor: this.enhanceGetRowDescriptor(getRowDescriptor) }));
    }
    renderCheckBox({ disabled, checked, handler, qa }) {
      return import_react179.default.createElement(Checkbox, { size: "l", checked, disabled, onChange: handler, className: b71("selection-checkbox", {
        "vertical-align": this.props.verticalAlign
      }), qa });
    }
  }, _a.displayName = displayName, _a;
}
withTableSelection.headerCheckboxQa = "headerCheckboxQa";
withTableSelection.getCheckboxQa = (id) => `CheckboxQa_${id}`;

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableActions/withTableActions.js
var import_react180 = __toESM(require_react());
var import_memoize2 = __toESM(require_memoize());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableActions/withTableActions.css";
var actionsColumnId = "_actions";
function enhanceSystemColumn(columns, enhancer) {
  const existedColumn = columns.find(({ id }) => id === actionsColumnId);
  const systemColumn = existedColumn || {
    id: actionsColumnId,
    name: "",
    sticky: "right",
    width: 28,
    placeholder: ""
  };
  enhancer(systemColumn);
  return existedColumn ? columns : [...columns, systemColumn];
}
var b72 = block("table");
var bPopup = block("table-action-popup");
var BUTTON_CLASSNAME = b72("actions-button");
function withTableActions(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableActions(${componentName})`;
  return _a = class extends import_react180.default.Component {
    constructor() {
      super(...arguments);
      this.state = {
        popupOpen: false,
        popupData: null
      };
      this.anchorRef = import_react180.default.createRef();
      this.renderBodyCell = (item, index) => {
        var _a2;
        const { isRowDisabled, getRowActions, rowActionsSize, getRowDescriptor } = this.props;
        const actions = getRowActions(item, index);
        if (actions.length === 0) {
          return null;
        }
        const disabled = ((_a2 = getRowDescriptor === null || getRowDescriptor === void 0 ? void 0 : getRowDescriptor(item, index)) === null || _a2 === void 0 ? void 0 : _a2.disabled) || (isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(item, index)) || false;
        return import_react180.default.createElement(
          "div",
          { className: b72("actions") },
          import_react180.default.createElement(
            Button2,
            { view: "flat-secondary", disabled, className: BUTTON_CLASSNAME, onClick: this.handleActionsButtonClick.bind(this, { item, index }), size: rowActionsSize },
            import_react180.default.createElement(Icon, { data: Ellipsis_default })
          )
        );
      };
      this.renderPopupMenuItem = (action, index) => {
        const { popupData } = this.state;
        if (this.isActionGroup(action)) {
          return import_react180.default.createElement(Menu.Group, { key: index, label: action.title }, action.items.map(this.renderPopupMenuItem));
        } else {
          const { text: text2, icon, handler } = action, restProps = __rest(action, ["text", "icon", "handler"]);
          return import_react180.default.createElement(Menu.Item, Object.assign({ key: index, onClick: this.handleActionClick.bind(this, handler, popupData), iconStart: icon, className: bPopup("menu-item") }, restProps), text2);
        }
      };
      this.handleActionsButtonClick = (data, event) => {
        const { popupOpen } = this.state;
        const anchor = event.currentTarget;
        if (popupOpen && this.anchorRef.current === anchor) {
          this.closePopup();
        } else {
          this.openPopup(anchor, data);
        }
      };
      this.handleActionClick = (handler, data, event) => {
        handler(data.item, data.index, event);
        this.closePopup();
      };
      this.handlePopupClose = () => {
        this.closePopup();
      };
      this.enhanceColumns = (0, import_memoize2.default)((columns) => enhanceSystemColumn(columns, (systemColumn) => {
        systemColumn.template = this.renderBodyCell;
      }));
      this.enhanceOnRowClick = (0, import_memoize2.default)((onRowClick) => {
        if (!onRowClick) {
          return onRowClick;
        }
        return (item, index, event) => {
          if (
            // @ts-ignore
            event.nativeEvent.target.matches(`.${BUTTON_CLASSNAME}, .${BUTTON_CLASSNAME} *`)
          ) {
            return void 0;
          }
          return onRowClick(item, index, event);
        };
      });
    }
    render() {
      const _a2 = this.props, {
        getRowActions,
        // eslint-disable-line @typescript-eslint/no-unused-vars
        columns,
        onRowClick
      } = _a2, restTableProps = __rest(_a2, ["getRowActions", "columns", "onRowClick"]);
      return import_react180.default.createElement(
        import_react180.default.Fragment,
        null,
        import_react180.default.createElement(TableComponent, Object.assign({}, restTableProps, { columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick) })),
        this.renderPopup()
      );
    }
    renderPopup() {
      const { getRowActions, rowActionsSize } = this.props;
      const { popupOpen, popupData } = this.state;
      if (!popupData) {
        return null;
      }
      const actions = getRowActions(popupData.item, popupData.index);
      return import_react180.default.createElement(
        Popup,
        { open: popupOpen, anchorRef: this.anchorRef, placement: ["bottom-end", "top-end"], onClose: this.handlePopupClose },
        import_react180.default.createElement(Menu, { className: bPopup("menu"), size: rowActionsSize }, actions.map(this.renderPopupMenuItem))
      );
    }
    openPopup(anchor, data) {
      this.anchorRef.current = anchor;
      this.setState({ popupOpen: true, popupData: data });
    }
    closePopup() {
      this.setState({ popupOpen: false });
    }
    isActionGroup(config3) {
      return Array.isArray(config3.items);
    }
  }, _a.displayName = displayName, _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableCopy/withTableCopy.js
var import_react181 = __toESM(require_react());
var import_memoize3 = __toESM(require_memoize());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableCopy/withTableCopy.css";
var b73 = block("table");
function withTableCopy(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableCopy(${componentName})`;
  return _a = class extends import_react181.default.Component {
    constructor() {
      super(...arguments);
      this.enhanceColumns = (0, import_memoize3.default)((columns) => {
        return columns.map((column) => {
          const meta = column.meta;
          if (!meta || !meta.copy) {
            return column;
          }
          return Object.assign(Object.assign({}, column), { template: (item, index) => {
            const originContent = Table.getBodyCellContent(Object.assign(Object.assign({}, column), { placeholder: "" }), item, index);
            if (!originContent) {
              return originContent;
            }
            let copyText;
            if (typeof meta.copy === "function") {
              copyText = String(meta.copy(item, index));
            } else if (typeof originContent === "string" || typeof originContent === "number") {
              copyText = String(originContent);
            }
            if (!copyText) {
              return originContent;
            }
            return import_react181.default.createElement(
              "div",
              { className: b73("copy") },
              import_react181.default.createElement("div", { className: b73("copy-content") }, originContent),
              import_react181.default.createElement(
                "div",
                { className: b73("copy-button") },
                import_react181.default.createElement(ClipboardButton, { text: copyText, size: 14 })
              )
            );
          } });
        });
      });
      this.enhanceOnRowClick = (0, import_memoize3.default)((onRowClick) => {
        if (!onRowClick) {
          return onRowClick;
        }
        return (item, index, event) => {
          const buttonClassName = b73("copy-button");
          if (
            // @ts-ignore
            event.nativeEvent.target.matches(`.${buttonClassName}, .${buttonClassName} *`)
          ) {
            return void 0;
          }
          return onRowClick(item, index, event);
        };
      });
    }
    render() {
      const _a2 = this.props, { columns, onRowClick } = _a2, restTableProps = __rest(_a2, ["columns", "onRowClick"]);
      return import_react181.default.createElement(TableComponent, Object.assign({}, restTableProps, { columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick) }));
    }
  }, _a.displayName = displayName, _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/withTableSorting.js
var import_react183 = __toESM(require_react());
var import_get4 = __toESM(require_get());
var import_memoize4 = __toESM(require_memoize());

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/SortIndicator/SortIndicator.js
var import_react182 = __toESM(require_react());
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/SortIndicator/SortIndicator.css";
var b74 = block("sort-indicator");
function SortIndicator({ order: order2 = "asc" }) {
  return import_react182.default.createElement(
    "div",
    { className: b74() },
    import_react182.default.createElement(
      "div",
      { className: b74("caret"), style: { transform: order2 === "asc" ? "scale(1, -1)" : void 0 } },
      import_react182.default.createElement(
        "svg",
        Object.assign({ width: "6", height: "3", viewBox: "0 0 6 3", fill: "currentColor" }, a11yHiddenSvgProps),
        import_react182.default.createElement("path", { d: "M0.404698 0C0.223319 0 0.102399 0.0887574 0.0419396 0.230769C-0.0386733 0.372781 0.00163315 0.497041 0.122552 0.60355L2.72232 2.89349C2.80293 2.9645 2.88354 3 3.00446 3C3.10523 3 3.20599 2.9645 3.28661 2.89349L5.88637 0.60355C6.00729 0.497041 6.02745 0.372781 5.96699 0.230769C5.88637 0.0887574 5.76545 0 5.60423 0H0.404698Z" })
      )
    )
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/withTableSorting.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSorting/withTableSorting.css";
var TableSortIndicator = SortIndicator;
var b75 = block("table");
function withTableSorting(TableComponent) {
  var _a;
  const componentName = getComponentName(TableComponent);
  const displayName = `withTableSorting(${componentName})`;
  function defaultCompareFunction(itemA, itemB, columnId) {
    if ((0, import_get4.default)(itemA, columnId) === (0, import_get4.default)(itemB, columnId)) {
      return 0;
    } else {
      return (0, import_get4.default)(itemA, columnId) > (0, import_get4.default)(itemB, columnId) ? 1 : -1;
    }
  }
  return _a = class extends import_react183.default.Component {
    constructor() {
      var _a2;
      super(...arguments);
      this.state = {
        sort: (_a2 = this.props.defaultSortState) !== null && _a2 !== void 0 ? _a2 : []
      };
      this.enhanceColumns = (0, import_memoize4.default)((columns) => {
        return columns.map((column) => {
          const meta = column.meta;
          if (meta && meta.sort) {
            return Object.assign(Object.assign({}, column), { meta: Object.assign(Object.assign({}, column.meta), { _originalName: column.name }), name: () => {
              const sortState = this.getSortState();
              let sortOrder;
              if (sortState.length > 0) {
                const state = sortState.find((s) => s.column === column.id);
                if (state) {
                  sortOrder = state.order;
                }
              }
              const originContent = Table.getHeadCellContent(column);
              const content = [
                import_react183.default.createElement("div", { key: "content", className: b75("sort-content") }, originContent),
                import_react183.default.createElement("div", { key: "spacer", className: b75("sort-spacer") }),
                import_react183.default.createElement(
                  "div",
                  { key: "indicator", className: b75("sort-indicator") },
                  import_react183.default.createElement(TableSortIndicator, { order: sortOrder || this.getColumnDefaultSortOrder(column) })
                )
              ];
              if (column.align === "right") {
                content.reverse();
              }
              return (
                // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
                import_react183.default.createElement("div", { className: b75("sort", { active: Boolean(sortOrder) }), onClick: this.handleColumnSortClick.bind(this, column) }, content)
              );
            } });
          } else {
            return column;
          }
        });
      });
      this.handleColumnSortClick = (column, event) => {
        const sortState = this.getSortState();
        const currentStateIndex = sortState.findIndex((state) => state.column === column.id);
        const currentState = sortState[currentStateIndex];
        const nextColumnSort = this.getNextSortForColumn(column, currentState);
        if (!event.shiftKey) {
          this.handleSortStateChange(nextColumnSort);
          return;
        }
        if (currentState) {
          this.handleSortStateChange([
            ...sortState.slice(0, currentStateIndex),
            ...sortState.slice(currentStateIndex + 1),
            ...nextColumnSort
          ]);
        } else {
          this.handleSortStateChange([...sortState, ...nextColumnSort]);
        }
      };
    }
    render() {
      const _a2 = this.props, { columns } = _a2, restTableProps = __rest(_a2, ["columns"]);
      return import_react183.default.createElement(TableComponent, Object.assign({}, restTableProps, { data: this.getSortedData(), columns: this.enhanceColumns(columns) }));
    }
    getSortedData() {
      const { data, columns, disableDataSorting = this.isControlledState() } = this.props;
      const sortState = this.getSortState();
      if (disableDataSorting || sortState.length === 0) {
        return data;
      }
      return data.slice().sort((itemA, itemB) => {
        var _a2;
        let i = 0;
        while (i < sortState.length) {
          const state = sortState[i++];
          const column = columns.find((c) => c.id === state.column);
          const compareFunction = (_a2 = column === null || column === void 0 ? void 0 : column.meta) === null || _a2 === void 0 ? void 0 : _a2.sort;
          if (!compareFunction) {
            continue;
          }
          const compareValue = typeof compareFunction === "function" ? compareFunction(itemA, itemB) : defaultCompareFunction(itemA, itemB, state.column);
          if (compareValue !== 0) {
            return state.order === "asc" ? compareValue : -compareValue;
          }
        }
        return 0;
      });
    }
    getSortState() {
      const { sortState } = this.props;
      const { sort } = this.state;
      return this.isControlledState() ? sortState : sort;
    }
    handleSortStateChange(newSortState) {
      const { onSortStateChange } = this.props;
      if (!this.isControlledState()) {
        this.setState({ sort: newSortState });
      }
      if (onSortStateChange) {
        onSortStateChange(newSortState);
      }
    }
    isControlledState() {
      const { sortState, onSortStateChange } = this.props;
      return Boolean(sortState && onSortStateChange);
    }
    getColumnDefaultSortOrder(column) {
      var _a2;
      return ((_a2 = column.meta) === null || _a2 === void 0 ? void 0 : _a2.defaultSortOrder) || "asc";
    }
    getNextSortForColumn(column, currentState) {
      const defaultOrder = this.getColumnDefaultSortOrder(column);
      const orderStack = defaultOrder === "desc" ? ["desc", "asc", void 0] : ["asc", "desc", void 0];
      const currentIndex = orderStack.indexOf(currentState === null || currentState === void 0 ? void 0 : currentState.order);
      const nextIndex = (currentIndex + 1) % orderStack.length;
      const nextOrder = orderStack[nextIndex];
      if (!nextOrder) {
        return [];
      }
      return [{ column: column.id, order: nextOrder }];
    }
  }, _a.displayName = displayName, _a;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.js
var import_react187 = __toESM(require_react());
var import_get5 = __toESM(require_get());
var import_isString = __toESM(require_isString());
var import_last = __toESM(require_last());

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup.js
var import_react186 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/LockIcon.js
var import_react184 = __toESM(require_react());
function LockIcon(props) {
  return import_react184.default.createElement(
    "svg",
    Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "16", height: "16", fill: "currentColor" }, a11yHiddenSvgProps, props),
    import_react184.default.createElement("path", { d: "M5.75 6.232C5.75 3.811 6.953 3.5 8 3.5s2.25.31 2.25 2.732V7h-4.5v-.768zm6 .768v-.768C11.75 2.55 9.4 2 8 2s-3.75.55-3.75 4.232V7H3v7h10V7h-1.25z" })
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/TickIcon.js
var import_react185 = __toESM(require_react());
function TickIcon(props) {
  return import_react185.default.createElement(
    "svg",
    Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "16", height: "16", fill: "currentColor" }, a11yHiddenSvgProps, props),
    import_react185.default.createElement("path", { d: "M5.95 11.008L1.863 6.572.392 7.927l5.533 6.003 9.67-10.114-1.444-1.381z" })
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/i18n/en.json
var en_default10 = {
  button_switcher: "Columns",
  button_apply: "Apply"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/i18n/ru.json
var ru_default10 = {
  button_switcher: "Колонки",
  button_apply: "Применить"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/i18n/index.js
var COMPONENT7 = "TableColumnSetup";
var i18n_default9 = addComponentKeysets({ en: en_default10, ru: ru_default10 }, COMPONENT7);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup.css";
var b76 = block("table-column-setup");
var TableColumnSetup = (props) => {
  const { switcher, renderSwitcher, disabled, popupWidth, popupPlacement, className, items: propsItems, getItemTitle = (item) => item.title, sortable = true, filterable = false, showStatus } = props;
  const [focused, setFocused] = import_react186.default.useState(false);
  const [items, setItems] = import_react186.default.useState([]);
  const [currentItems, setCurrentItems] = import_react186.default.useState([]);
  const [requiredItems, setRequiredItems] = import_react186.default.useState([]);
  const refControl = import_react186.default.useRef(null);
  const LIST_ITEM_HEIGHT = 36;
  const getRequiredItems = (list) => list.filter(({ required: required2 }) => required2).map((column) => Object.assign(Object.assign({}, column), { disabled: true }));
  const getConfigurableItems = (list) => list.filter(({ required: required2 }) => !required2);
  import_react186.default.useEffect(() => {
    if (propsItems !== items) {
      setItems(propsItems);
      setRequiredItems(getRequiredItems(propsItems));
      setCurrentItems(getConfigurableItems(propsItems));
    }
  }, [items, propsItems]);
  const setInitialState = () => {
    setFocused(false);
    setRequiredItems(getRequiredItems(items));
    setCurrentItems(getConfigurableItems(items));
  };
  const getListHeight = (list) => {
    const itemHeight = LIST_ITEM_HEIGHT;
    return Math.min(5, list.length) * itemHeight + itemHeight / 2;
  };
  const getRequiredListHeight = (list) => list.length * LIST_ITEM_HEIGHT;
  const getCountSelected = () => items.reduce((acc, cur) => cur.selected ? acc + 1 : acc, 0);
  const makeOnSortEnd = (list) => ({ oldIndex, newIndex }) => {
    setCurrentItems(List.moveListElement(list.slice(), oldIndex, newIndex));
  };
  const handleUpdate = (value) => setCurrentItems(value);
  const handleClosePopup = () => setInitialState();
  const handleControlClick = import_react186.default.useCallback(() => {
    if (!disabled) {
      setFocused(!focused);
      setRequiredItems(getRequiredItems(items));
      setCurrentItems(getConfigurableItems(items));
    }
  }, [disabled, focused, items]);
  const handleApplyClick = () => {
    setInitialState();
    const newItems = requiredItems.concat(currentItems);
    if (items !== newItems) {
      props.onUpdate(newItems);
    }
  };
  const handleItemClick = (value) => {
    const newItems = currentItems.map((item) => item === value ? Object.assign(Object.assign({}, item), { selected: !item.selected }) : item);
    handleUpdate(newItems);
  };
  const renderItem = (item) => {
    return import_react186.default.createElement(
      "div",
      { className: b76("item-content") },
      item.required ? import_react186.default.createElement(
        "div",
        { className: b76("lock-wrap", { visible: item.selected }) },
        import_react186.default.createElement(Icon, { data: LockIcon })
      ) : import_react186.default.createElement(
        "div",
        { className: b76("tick-wrap", { visible: item.selected }) },
        import_react186.default.createElement(Icon, { data: TickIcon, className: b76("tick"), width: 10, height: 10 })
      ),
      import_react186.default.createElement("div", { className: b76("title") }, getItemTitle(item))
    );
  };
  const renderStatus = () => {
    if (!showStatus) {
      return null;
    }
    const selected = getCountSelected();
    const all = propsItems.length;
    const status = `${selected}/${all}`;
    return import_react186.default.createElement("span", { className: b76("status") }, status);
  };
  const renderRequiredColumns = () => {
    const hasRequiredColumns = requiredItems.length;
    if (!hasRequiredColumns) {
      return null;
    }
    return import_react186.default.createElement(List, { items: requiredItems, itemHeight: LIST_ITEM_HEIGHT, itemsHeight: getRequiredListHeight, filterable, renderItem, itemsClassName: b76("items"), itemClassName: b76("item"), virtualized: false });
  };
  const renderConfigurableColumns = () => {
    return import_react186.default.createElement(List, { items: currentItems, itemHeight: LIST_ITEM_HEIGHT, itemsHeight: getListHeight, sortable, filterable, sortHandleAlign: "right", onSortEnd: makeOnSortEnd(currentItems), onItemClick: handleItemClick, renderItem, itemsClassName: b76("items"), itemClassName: b76("item"), virtualized: false });
  };
  const { onKeyDown: handleControlKeyDown } = useActionHandlers(handleControlClick);
  const switcherProps = import_react186.default.useMemo(() => ({
    onClick: handleControlClick,
    onKeyDown: handleControlKeyDown
  }), [handleControlClick, handleControlKeyDown]);
  return import_react186.default.createElement(
    "div",
    { className: b76(null, className) },
    import_react186.default.createElement("div", Object.assign({ className: b76("control"), ref: refControl }, renderSwitcher ? {} : switcherProps), (renderSwitcher === null || renderSwitcher === void 0 ? void 0 : renderSwitcher(switcherProps)) || switcher || import_react186.default.createElement(
      Button2,
      { disabled },
      import_react186.default.createElement(Icon, { data: Gear_default }),
      i18n_default9("button_switcher"),
      renderStatus()
    )),
    import_react186.default.createElement(
      Popup,
      { anchorRef: refControl, placement: popupPlacement || ["bottom-start", "bottom-end", "top-start", "top-end"], open: focused, onClose: handleClosePopup, className: b76("popup"), style: { width: popupWidth } },
      renderRequiredColumns(),
      renderConfigurableColumns(),
      import_react186.default.createElement(
        "div",
        { className: b76("controls") },
        import_react186.default.createElement(Button2, { view: "action", width: "max", onClick: handleApplyClick }, i18n_default9("button_apply"))
      )
    )
  );
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/i18n/en.json
var en_default11 = {
  label_settings: "Table settings"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/i18n/ru.json
var ru_default11 = {
  label_settings: "Настройки таблицы"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/i18n/index.js
var COMPONENT8 = "withTableSettings";
var i18n_default10 = addComponentKeysets({ en: en_default11, ru: ru_default11 }, COMPONENT8);

// node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Table/hoc/withTableSettings/withTableSettings.css";
function filterColumns(columns, settings) {
  const filteredColumns = settings.map(({ id, isSelected }) => ({
    isSelected,
    columnSettings: columns.find((column) => id === column.id)
  })).filter(({ isSelected, columnSettings }) => isSelected && columnSettings).map(({ columnSettings }) => columnSettings);
  if (columns[0] && columns[0].id === selectionColumnId) {
    filteredColumns.unshift(columns[0]);
  }
  const lastColumn = (0, import_last.default)(columns);
  if (lastColumn && lastColumn.id === actionsColumnId) {
    filteredColumns.push(lastColumn);
  }
  return filteredColumns;
}
function getColumnStringTitle(column) {
  if ((0, import_isString.default)(column.name)) {
    return column.name;
  }
  const originalName = (0, import_get5.default)(column, ["meta", "_originalName"]);
  if ((0, import_isString.default)(originalName)) {
    return originalName;
  }
  return column.id;
}
function getActualItems(columns, settings) {
  const newColumnSettings = columns.filter(({ id }) => id !== actionsColumnId && id !== selectionColumnId && settings.every((setting) => setting.id !== id)).map((column) => {
    var _a;
    return {
      id: column.id,
      isSelected: ((_a = column.meta) === null || _a === void 0 ? void 0 : _a.selectedByDefault) !== false
    };
  });
  return settings.filter(({ id }) => columns.some((column) => id === column.id)).concat(newColumnSettings).map(({ id, isSelected }) => {
    var _a;
    const foundColumn = columns.find((column) => column.id === id);
    const isProtected = Boolean((_a = foundColumn === null || foundColumn === void 0 ? void 0 : foundColumn.meta) === null || _a === void 0 ? void 0 : _a.selectedAlways);
    return {
      id,
      isSelected: isProtected ? true : isSelected,
      isProtected,
      title: foundColumn ? getColumnStringTitle(foundColumn) : id
    };
  });
}
function prepareColumnSetupItems(items) {
  return items.map(({ id, title, isSelected, isProtected }) => ({
    id,
    title,
    selected: isSelected,
    required: isProtected
  }));
}
function prepareUpdateSettings(items) {
  return items.map(({ id, selected }) => ({
    id,
    isSelected: selected
  }));
}
var b77 = block("table");
function withTableSettings(ComponentOrOptions) {
  function tableWithSettingsFactory(TableComponent, { width, sortable } = {}) {
    const componentName = getComponentName(TableComponent);
    function TableWithSettings(_a) {
      var { updateSettings, settings, columns, settingsPopupWidth } = _a, restTableProps = __rest(_a, ["updateSettings", "settings", "columns", "settingsPopupWidth"]);
      const actualItems = import_react187.default.useMemo(() => getActualItems(columns, settings || []), [columns, settings]);
      const onUpdateColumns = import_react187.default.useCallback((newItems) => {
        updateSettings(prepareUpdateSettings(newItems));
      }, [updateSettings]);
      const columnSetupItems = import_react187.default.useMemo(() => prepareColumnSetupItems(actualItems), [actualItems]);
      const enhancedColumns = import_react187.default.useMemo(() => enhanceSystemColumn(filterColumns(columns, actualItems), (systemColumn) => {
        systemColumn.name = () => import_react187.default.createElement(
          "div",
          { className: b77("settings") },
          import_react187.default.createElement(TableColumnSetup, { popupWidth: settingsPopupWidth || width, popupPlacement: ["bottom-end", "bottom", "top-end", "top"], sortable, onUpdate: onUpdateColumns, items: columnSetupItems, renderSwitcher: ({ onClick }) => import_react187.default.createElement(
            Button2,
            { view: "flat", className: b77("settings-button"), extraProps: { "aria-label": i18n_default10("label_settings") }, onClick },
            import_react187.default.createElement(Icon, { data: Gear_default })
          ) })
        );
      }), [actualItems, columnSetupItems, columns, onUpdateColumns, settingsPopupWidth]);
      return import_react187.default.createElement(
        import_react187.default.Fragment,
        null,
        import_react187.default.createElement(TableComponent, Object.assign({}, restTableProps, { columns: enhancedColumns }))
      );
    }
    TableWithSettings.displayName = `withTableSettings(${componentName})`;
    return TableWithSettings;
  }
  if (typeof ComponentOrOptions === "function") {
    return tableWithSettingsFactory(ComponentOrOptions);
  } else {
    return (TableComponent) => tableWithSettingsFactory(TableComponent, ComponentOrOptions);
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/Tabs/Tabs.js
var import_react190 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Tabs/TabsContext.js
var import_react188 = __toESM(require_react());
var TabsContext = import_react188.default.createContext({
  activeTabId: void 0
});
TabsContext.displayName = "TabsContext";

// node_modules/@gravity-ui/uikit/build/esm/components/Tabs/TabsItem.js
var import_react189 = __toESM(require_react());
var b78 = block("tabs");
function TabsItem({ id, className, title, meta, hint, icon, counter, label, active, disabled, hasOverflow, extraProps, onClick }) {
  const { activeTabId } = import_react189.default.useContext(TabsContext);
  const isActive = typeof active === "boolean" ? active : activeTabId === id;
  const handleClick = () => {
    onClick(id);
  };
  const handleKeyDown = (event) => {
    if (event.key === " ") {
      onClick(id);
    }
  };
  const htmlTitle = import_react189.default.useMemo(() => {
    if (hint !== void 0) {
      return hint;
    }
    if (typeof title === "string") {
      return title;
    }
    return void 0;
  }, [hint, title]);
  return import_react189.default.createElement(
    "div",
    Object.assign({}, extraProps, { role: "tab", "aria-selected": isActive, "aria-disabled": disabled === true, tabIndex: disabled ? -1 : 0, className: b78("item", { active: isActive, disabled, overflow: Boolean(hasOverflow) }, className), title: htmlTitle, onClick: handleClick, onKeyDown: handleKeyDown }),
    import_react189.default.createElement(
      "div",
      { className: b78("item-content") },
      icon && import_react189.default.createElement("div", { className: b78("item-icon") }, icon),
      import_react189.default.createElement("div", { className: b78("item-title") }, title || id),
      typeof counter === "number" && import_react189.default.createElement("div", { className: b78("item-counter") }, counter),
      label && import_react189.default.createElement(Label, { className: b78("item-label"), theme: label.theme }, label.content)
    ),
    meta && import_react189.default.createElement("div", { className: b78("item-meta") }, meta)
  );
}
TabsItem.displayName = "Tabs.Item";

// node_modules/@gravity-ui/uikit/build/esm/components/Tabs/Tabs.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Tabs/Tabs.css";
var b79 = block("tabs");
var TabsDirection;
(function(TabsDirection2) {
  TabsDirection2["Horizontal"] = "horizontal";
  TabsDirection2["Vertical"] = "vertical";
})(TabsDirection || (TabsDirection = {}));
var getActiveTabId = (activeTab, allowNotSelected, items) => {
  var _a;
  if (activeTab) {
    return activeTab;
  }
  if (allowNotSelected || (items === null || items === void 0 ? void 0 : items.length) === 0) {
    return void 0;
  }
  return (_a = items === null || items === void 0 ? void 0 : items[0]) === null || _a === void 0 ? void 0 : _a.id;
};
var emptyTabsList = [];
var TabsComponent = import_react190.default.forwardRef(({ direction = TabsDirection.Horizontal, size: size2 = "m", activeTab, allowNotSelected = false, items = emptyTabsList, children: children2, className, onSelectTab, wrapTo, qa }, ref2) => {
  const activeTabId = getActiveTabId(activeTab, allowNotSelected, items);
  const tabsContextValue = import_react190.default.useMemo(() => ({ activeTabId }), [activeTabId]);
  const tabs = import_react190.default.useMemo(() => {
    const handleTabClick = (tabId) => {
      if (onSelectTab) {
        onSelectTab(tabId);
      }
    };
    return items.map((item, index) => {
      const tabItemNode = import_react190.default.createElement(TabsItem, Object.assign({ key: item.id }, item, { onClick: handleTabClick }));
      if (wrapTo) {
        return wrapTo(item, tabItemNode, index);
      }
      return tabItemNode;
    });
  }, [items, onSelectTab, wrapTo]);
  return import_react190.default.createElement(
    "div",
    { role: "tablist", className: b79({ direction, size: size2 }, className), "data-qa": qa, ref: ref2 },
    import_react190.default.createElement(TabsContext.Provider, { value: tabsContextValue }, children2 || tabs)
  );
});
TabsComponent.displayName = "Tabs";
var Tabs = Object.assign(TabsComponent, { Item: TabsItem });

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToasterSingleton.js
var import_react199 = __toESM(require_react());
var import_get6 = __toESM(require_get());
var import_react_dom6 = __toESM(require_react_dom());

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Provider/ToasterProvider.js
var import_react193 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/utilities/getToastIndex.js
function getToastIndex(toasts, name) {
  return toasts.findIndex((toast) => toast.name === name);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/utilities/hasToast.js
function hasToast(toasts, name) {
  return getToastIndex(toasts, name) !== -1;
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/utilities/removeToast.js
function removeToast(toasts, name) {
  if (!hasToast(toasts, name)) {
    return toasts;
  }
  return toasts.filter((toast) => toast.name !== name);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Provider/ToasterContext.js
var import_react191 = __toESM(require_react());
var ToasterContext = import_react191.default.createContext(null);
ToasterContext.displayName = "ToasterContext";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Provider/ToastsContext.js
var import_react192 = __toESM(require_react());
var ToastsContext = import_react192.default.createContext([]);
ToastsContext.displayName = "ToastsContext";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Provider/ToasterProvider.js
var ToasterProvider = import_react193.default.forwardRef(function ToasterProvider2({ children: children2 }, ref2) {
  const [toasts, setToasts] = import_react193.default.useState([]);
  const add3 = import_react193.default.useCallback((toast) => {
    const { name } = toast;
    setToasts((toasts2) => {
      let nextToasts = toasts2;
      if (hasToast(toasts2, name)) {
        nextToasts = removeToast(toasts2, name);
      }
      return [
        ...nextToasts,
        Object.assign(Object.assign({}, toast), { addedAt: Date.now(), ref: import_react193.default.createRef() })
      ];
    });
  }, []);
  const remove = import_react193.default.useCallback((toastName) => {
    setToasts((toasts2) => {
      return removeToast(toasts2, toastName);
    });
  }, []);
  const removeAll = import_react193.default.useCallback(() => {
    setToasts(() => []);
  }, []);
  const update2 = import_react193.default.useCallback((toastName, override) => {
    setToasts((toasts2) => {
      if (!hasToast(toasts2, toastName)) {
        return toasts2;
      }
      const index = getToastIndex(toasts2, toastName);
      return [
        ...toasts2.slice(0, index),
        Object.assign(Object.assign({}, toasts2[index]), override),
        ...toasts2.slice(index + 1)
      ];
    });
  }, []);
  const toastsRef = import_react193.default.useRef(toasts);
  import_react193.default.useEffect(() => {
    toastsRef.current = toasts;
  }, [toasts]);
  const has = import_react193.default.useCallback((toastName) => {
    return toastsRef.current ? hasToast(toastsRef.current, toastName) : false;
  }, []);
  const toasterContext = import_react193.default.useMemo(() => {
    return {
      add: add3,
      remove,
      removeAll,
      update: update2,
      has
    };
  }, [add3, remove, removeAll, update2, has]);
  import_react193.default.useImperativeHandle(ref2, () => ({
    add: add3,
    remove,
    removeAll,
    update: update2,
    has
  }));
  return import_react193.default.createElement(
    ToasterContext.Provider,
    { value: toasterContext },
    import_react193.default.createElement(ToastsContext.Provider, { value: toasts }, children2)
  );
});
ToasterProvider.displayName = "ToasterProvider";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToasterComponent/ToasterComponent.js
var import_react198 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToastList/ToastList.js
var import_react195 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Toast/Toast.js
var import_react194 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/i18n/en.json
var en_default12 = {
  "label_close-button": "Close"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/i18n/ru.json
var ru_default12 = {
  "label_close-button": "Закрыть"
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/i18n/index.js
var COMPONENT9 = "Toaster";
var i18n_default11 = addComponentKeysets({
  en: en_default12,
  ru: ru_default12
}, COMPONENT9);

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Toast/Toast.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toaster/Toast/Toast.css";
var b80 = block("toast");
var DEFAULT_TIMEOUT2 = 5e3;
var TITLE_ICONS = {
  info: CircleInfo_default,
  success: CircleCheck_default,
  warning: TriangleExclamation_default,
  error: TriangleExclamation_default,
  utility: Thunderbolt_default
};
function renderActions({ actions, onClose }) {
  if (!actions || !actions.length) {
    return null;
  }
  return import_react194.default.createElement("div", { className: b80("actions") }, actions.map(({ label, onClick, view = "outlined", removeAfterClick = true }, index) => {
    const onActionClick = () => {
      onClick();
      if (removeAfterClick) {
        onClose();
      }
    };
    return import_react194.default.createElement(Button2, { key: `${label}__${index}`, className: b80("action"), onClick: onActionClick, type: "button", size: "l", view, width: "auto" }, label);
  }));
}
function renderIconByType({ type }) {
  if (!type) {
    return null;
  }
  return import_react194.default.createElement(Icon, { data: TITLE_ICONS[type], size: 20, className: b80("icon", { [type]: true }) });
}
var Toast = import_react194.default.forwardRef(function Toast2(props, ref2) {
  const { name, content, actions, title, className, type, renderIcon, autoHiding: timeoutProp = DEFAULT_TIMEOUT2, isClosable = true, mobile = false, removeCallback } = props;
  const onClose = import_react194.default.useCallback(() => removeCallback(name), [removeCallback, name]);
  const timeout2 = typeof timeoutProp === "number" ? timeoutProp : void 0;
  const closeOnTimeoutProps = useCloseOnTimeout({ onClose, timeout: timeout2 });
  const mods = {
    mobile,
    [type || "default"]: true
  };
  const hasTitle = Boolean(title);
  const hasContent = Boolean(content);
  const icon = renderIcon ? renderIcon(props) : renderIconByType({ type });
  return import_react194.default.createElement(
    "div",
    Object.assign({ ref: ref2, className: b80(mods, className) }, closeOnTimeoutProps, { "data-toast": true }),
    icon && import_react194.default.createElement("div", { className: b80("icon-container") }, icon),
    import_react194.default.createElement(
      "div",
      { className: b80("container") },
      hasTitle && import_react194.default.createElement("h3", { className: b80("title") }, title),
      isClosable && import_react194.default.createElement(
        Button2,
        { size: "s", view: "flat", className: b80("btn-close"), onClick: onClose, extraProps: { "aria-label": i18n_default11("label_close-button") } },
        import_react194.default.createElement(Icon, { data: Xmark_default })
      ),
      hasContent && import_react194.default.createElement("div", { className: b80("content", { "without-title": !hasTitle }) }, content),
      renderActions({ actions, onClose })
    )
  );
});

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToastList/ToastList.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToastList/ToastAnimation.css";
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToastList/ToastList.css";
var desktopTransitionClassNames = getCSSTransitionClassNames(block("toast-animation-desktop"));
var mobileTransitionClassNames = getCSSTransitionClassNames(block("toast-animation-mobile"));
function ToastList(props) {
  const { toasts, mobile, removeCallback } = props;
  return import_react195.default.createElement(TransitionGroup_default, { component: null }, toasts.map((toast) => import_react195.default.createElement(
    CSSTransition_default,
    { key: `${toast.name}_${toast.addedAt}`, nodeRef: toast.ref, classNames: mobile ? mobileTransitionClassNames : desktopTransitionClassNames, addEndListener: (done) => {
      var _a, _b;
      return (_b = (_a = toast.ref) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.addEventListener("animationend", done);
    }, onEnter: () => updateToastHeightCssProperty(toast), onExit: () => updateToastHeightCssProperty(toast) },
    import_react195.default.createElement(Toast, Object.assign({}, toast, { mobile, removeCallback }))
  )));
}
function updateToastHeightCssProperty(toast) {
  var _a;
  if ((_a = toast.ref) === null || _a === void 0 ? void 0 : _a.current) {
    toast.ref.current.style.setProperty("--yc-toast-height", `${toast.ref.current.offsetHeight}px`);
  }
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/hooks/useToaster.js
var import_react196 = __toESM(require_react());
function useToaster() {
  const toaster = import_react196.default.useContext(ToasterContext);
  if (toaster === null) {
    throw new Error("Toaster: `useToaster` hook is used out of context");
  }
  return import_react196.default.useMemo(() => toaster, [toaster]);
}

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToasterComponent/ToasterPortal.js
var import_react197 = __toESM(require_react());
var b81 = block("toaster");
function ToasterPortal({ children: children2, className, mobile }) {
  const el = import_react197.default.useRef(typeof document === "undefined" ? void 0 : document.createElement("div"));
  import_react197.default.useEffect(() => {
    const container = el.current;
    if (!container) {
      return void 0;
    }
    document.body.appendChild(container);
    return () => {
      document.body.removeChild(container);
    };
  }, []);
  import_react197.default.useEffect(() => {
    if (!el.current) {
      return;
    }
    el.current.className = b81({ mobile }, className);
  }, [className, mobile]);
  return import_react197.default.createElement(Portal, { container: el.current }, children2);
}
ToasterPortal.displayName = "ToasterPortal";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToasterComponent/ToasterComponent.js
function ToasterComponent({ className, mobile, hasPortal = true }) {
  const [defaultMobile] = useMobile();
  const { remove } = useToaster();
  const list = import_react198.default.useContext(ToastsContext);
  const toaster = import_react198.default.createElement(ToastList, { toasts: list, removeCallback: remove, mobile: mobile !== null && mobile !== void 0 ? mobile : defaultMobile });
  if (!hasPortal) {
    return toaster;
  }
  return import_react198.default.createElement(ToasterPortal, { className: className || "", mobile: mobile !== null && mobile !== void 0 ? mobile : defaultMobile }, toaster);
}
ToasterComponent.displayName = "ToasterComponent";

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/ToasterSingleton.js
var TOASTER_KEY = Symbol("Toaster instance key");
var bToaster = block("toaster");
var ReactDOMClient;
var ToasterSingleton = class _ToasterSingleton {
  static injectReactDOMClient(client) {
    ReactDOMClient = client;
  }
  constructor(args) {
    this.className = "";
    this.mobile = false;
    this.componentAPI = null;
    this.add = (options) => {
      var _a;
      (_a = this.componentAPI) === null || _a === void 0 ? void 0 : _a.add(options);
    };
    this.remove = (name) => {
      var _a;
      (_a = this.componentAPI) === null || _a === void 0 ? void 0 : _a.remove(name);
    };
    this.removeAll = () => {
      var _a;
      (_a = this.componentAPI) === null || _a === void 0 ? void 0 : _a.removeAll();
    };
    this.update = (name, overrideOptions) => {
      var _a;
      (_a = this.componentAPI) === null || _a === void 0 ? void 0 : _a.update(name, overrideOptions);
    };
    this.has = (name) => {
      var _a, _b;
      return (_b = (_a = this.componentAPI) === null || _a === void 0 ? void 0 : _a.has(name)) !== null && _b !== void 0 ? _b : false;
    };
    const className = (0, import_get6.default)(args, ["className"], "");
    const mobile = (0, import_get6.default)(args, ["mobile"], false);
    if (window[TOASTER_KEY] instanceof _ToasterSingleton) {
      const me = window[TOASTER_KEY];
      me.className = className;
      me.mobile = mobile;
      me.setRootNodeClassName();
      return me;
    }
    this.className = className;
    this.mobile = mobile;
    this.createRootNode();
    this.createReactRoot();
    this.render();
    window[TOASTER_KEY] = this;
  }
  destroy() {
    import_react_dom6.default.unmountComponentAtNode(this.rootNode);
    document.body.removeChild(this.rootNode);
  }
  createRootNode() {
    this.rootNode = document.createElement("div");
    this.setRootNodeClassName();
    document.body.appendChild(this.rootNode);
  }
  createReactRoot() {
    if (ReactDOMClient) {
      this.reactRoot = ReactDOMClient.createRoot(this.rootNode);
    }
  }
  render() {
    const container = import_react199.default.createElement(
      ToasterProvider,
      { ref: (api) => {
        this.componentAPI = api;
      } },
      import_react199.default.createElement(ToasterComponent, { hasPortal: false, mobile: this.mobile })
    );
    if (this.reactRoot) {
      this.reactRoot.render(container);
    } else {
      import_react_dom6.default.render(container, this.rootNode, () => Promise.resolve());
    }
  }
  setRootNodeClassName() {
    this.rootNode.className = bToaster({ mobile: this.mobile }, this.className);
  }
};

// node_modules/@gravity-ui/uikit/build/esm/components/Toaster/withToaster.js
var import_react200 = __toESM(require_react());
function withToaster() {
  return function(WrappedComponent) {
    function WithToaster(props) {
      const toaster = useToaster();
      return import_react200.default.createElement(WrappedComponent, Object.assign({}, props, { toaster }));
    }
    WithToaster.displayName = `WithToaster(${getComponentName(WrappedComponent)})`;
    return WithToaster;
  };
}

// node_modules/@gravity-ui/uikit/build/esm/components/User/User.js
var import_react202 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/UserAvatar/UserAvatar.js
var import_react201 = __toESM(require_react());

// node_modules/@gravity-ui/uikit/build/esm/components/UserAvatar/constants.js
var SIZES = {
  xs: 24,
  s: 28,
  m: 32,
  l: 42,
  xl: 50
};

// node_modules/@gravity-ui/uikit/build/esm/components/UserAvatar/UserAvatar.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/UserAvatar/UserAvatar.css";
var b82 = block("user-avatar");
var UserAvatar = import_react201.default.forwardRef(({ imgUrl, fallbackImgUrl, size: size2 = "m", srcSet, sizes, title, className, loading, onClick, qa }, ref2) => {
  const [isErrored, setIsErrored] = import_react201.default.useState(false);
  const handleError = import_react201.default.useCallback(() => {
    setIsErrored(true);
  }, []);
  import_react201.default.useEffect(() => {
    setIsErrored(false);
  }, [imgUrl]);
  return (
    // FIXME OnClick deprecated, will be deleted
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    import_react201.default.createElement(
      "div",
      { className: b82({ size: size2 }, className), title, onClick, ref: ref2, "data-qa": qa },
      import_react201.default.createElement("img", { loading, className: b82("figure"), width: SIZES[size2], height: SIZES[size2], src: fallbackImgUrl && isErrored ? fallbackImgUrl : imgUrl, srcSet, sizes, alt: "", onError: handleError })
    )
  );
});
UserAvatar.displayName = "UserAvatar";

// node_modules/@gravity-ui/uikit/build/esm/components/User/User.js
import "C:/Users/user/Desktop/ALL_PROJECTS/mpa/app/node_modules/@gravity-ui/uikit/build/esm/components/User/User.css";
var b83 = block("user");
function User({ name, description, imgUrl, size: size2 = "m", className, qa }) {
  const compact = size2 === "xs";
  return import_react202.default.createElement(
    "div",
    { className: b83({ size: size2 }, className), "data-qa": qa },
    imgUrl && import_react202.default.createElement(UserAvatar, { imgUrl, size: size2, className: b83("avatar") }),
    (name || description) && import_react202.default.createElement(
      "div",
      { className: b83("info") },
      name && import_react202.default.createElement("span", { className: b83("name") }, name),
      !compact && description && import_react202.default.createElement("span", { className: b83("description") }, description)
    )
  );
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/class-transform.js
function parseClass(strClass) {
  const split2 = strClass.split("_").filter((str) => str);
  if (strClass.includes("__")) {
    return {
      block: split2[0],
      element: split2[1],
      mod: split2[2] ? {
        key: split2[2],
        value: split2[3] ? split2[3] : true
      } : void 0
    };
  }
  return {
    block: split2[0],
    mod: split2[1] ? {
      key: split2[1],
      value: split2[2] ? split2[2] : true
    } : void 0
  };
}
function formatClass(objClass) {
  var _a;
  let result = objClass.block;
  if (objClass.element) {
    result = `${result}__${objClass.element}`;
  }
  if ((_a = objClass.mod) === null || _a === void 0 ? void 0 : _a.value) {
    result = `${result}_${objClass.mod.key}`;
    if (typeof objClass.mod.value === "string") {
      result = `${result}_${objClass.mod.value}`;
    }
  }
  return result;
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/withEventBrokerDomHandlers.js
var import_react203 = __toESM(require_react());
function withEventBrokerDomHandlers(Component2, eventTypes, eventBrokerData) {
  const componentName = getComponentName(Component2);
  const displayName = `withEventBroker(${componentName})`;
  const LoggedComponent = import_react203.default.forwardRef((props, ref2) => {
    const decoratedHandlers = eventTypes.reduce((handlers, eventType) => {
      const originalHandler = props[eventType];
      return Object.assign(Object.assign({}, handlers), { [eventType]: (event) => {
        eventBroker.publish(Object.assign({ eventId: eventType.replace(/^on/, "").toLowerCase(), domEvent: event }, eventBrokerData));
        return originalHandler && originalHandler(event);
      } });
    }, {});
    return import_react203.default.createElement(Component2, Object.assign({}, props, decoratedHandlers, { ref: ref2 }));
  });
  LoggedComponent.displayName = displayName;
  return LoggedComponent;
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/useOnFocusOutside.js
var import_react204 = __toESM(require_react());
function useOnFocusOutside({ onFocusOutside, enabled = true }) {
  const capturedRef = import_react204.default.useRef(false);
  import_react204.default.useEffect(() => {
    if (!enabled) {
      return void 0;
    }
    const handleFocus = function(event) {
      capturedRef.current = false;
      window.setTimeout(() => {
        if (!capturedRef.current) {
          onFocusOutside(event);
        }
      }, 0);
    };
    window.addEventListener("focus", handleFocus, { capture: true });
    return () => {
      window.removeEventListener("focus", handleFocus, { capture: true });
    };
  }, [enabled, onFocusOutside]);
  const handleFocusIn = import_react204.default.useCallback(() => {
    capturedRef.current = true;
  }, []);
  const handleFocusOut = import_react204.default.useCallback((event) => {
    if (enabled && (event.relatedTarget === null || event.relatedTarget === document.body)) {
      onFocusOutside(event.nativeEvent);
    }
  }, [onFocusOutside, enabled]);
  return { onFocus: handleFocusIn, onBlur: handleFocusOut };
}

// node_modules/@gravity-ui/uikit/build/esm/components/utils/xpath.js
var import_blueimp_md5 = __toESM(require_md5());
function withoutClassMods(converter = (arg) => arg) {
  return (parsedClass, strClass) => parsedClass.mod ? void 0 : converter(parsedClass, strClass);
}
function isElement3(node) {
  return node.nodeType === Node.ELEMENT_NODE;
}
function getXpathByNode(node, options) {
  if (!node || !isElement3(node)) {
    return "";
  }
  const tag = node.tagName.toLowerCase();
  let token = `/${tag}`;
  const convertedId = node.id && !options.withoutId ? options.idConverter(node.id) : void 0;
  if (convertedId) {
    token += `[@id='${convertedId}']`;
  } else {
    const classes = [];
    node.classList.forEach((className) => {
      const currentClass = options.classConverter(Object.assign(Object.assign({}, parseClass(className)), { tag }), className);
      if (currentClass) {
        classes.push(formatClass(currentClass));
      }
    });
    if (classes.length) {
      token += `[@class='${classes.join(" ")}']`;
    }
  }
  return getXpathByNode(node.parentElement, options) + token;
}
var defaultXpathOptions = {
  classConverter: (arg) => arg,
  idConverter: (arg) => arg,
  withoutId: false
};
function getXpath(event, options) {
  const internalOptions = Object.assign(Object.assign({}, defaultXpathOptions), options || {});
  const xpath = getXpathByNode(event.currentTarget || event.target, internalOptions);
  return {
    xpath,
    hash: (0, import_blueimp_md5.default)(xpath)
  };
}
export {
  SIZES as AVATAR_SIZES,
  ActionTooltip,
  Alert,
  ArrowToggle,
  Breadcrumbs,
  Button2 as Button,
  Card,
  Checkbox,
  ClipboardButton,
  ClipboardIcon,
  Col,
  Container,
  CopyToClipboard,
  CopyToClipboardStatus,
  DEFAULT_RENDER_POPUP,
  Dialog,
  DialogBody,
  DialogDivider,
  DialogFooter,
  DialogHeader,
  Disclosure,
  DisclosureQa,
  DropdownMenuExport as DropdownMenu,
  EventBroker,
  FirstDisplayedItemsCount,
  Flex,
  Hotkey,
  Icon,
  Label,
  Lang,
  LastDisplayedItemsCount,
  LayoutProvider,
  Link,
  List,
  ListItem,
  ListQa,
  ListWrapper,
  Loader,
  Menu,
  MobileContext,
  MobileProvider,
  Modal,
  Pagination,
  Persona,
  Platform,
  Popover,
  PopoverBehavior,
  Popup,
  Portal,
  PortalProvider,
  Progress,
  Radio,
  RadioButton,
  RadioGroup,
  Row,
  Select,
  SelectQa,
  Sheet,
  Skeleton,
  Spin,
  Switch,
  TEXT_COLORS,
  TEXT_VARIANTS,
  Table,
  TableColumnSetup,
  TableSortIndicator,
  Tabs,
  TabsDirection,
  Text,
  TextArea,
  TextInput,
  ThemeContext,
  ThemeProvider,
  ThemeSettingsContext,
  Toast,
  ToasterSingleton as Toaster,
  ToasterComponent,
  ToasterProvider,
  Tooltip,
  User,
  UserAvatar,
  colorText,
  configure,
  defaultRenderItem,
  eventBroker,
  formatClass,
  getComponentName,
  getInitialRootClassName,
  getLayersCount,
  getThemeType,
  getUniqId,
  getXpath,
  layerManager,
  listDefaultProps,
  parseClass,
  parseHotkeys,
  rootMobileClassName,
  setRef,
  sp,
  spacing,
  text,
  useActionHandlers,
  useAsyncActionHandler,
  useBodyScrollLock,
  useEventBroker,
  useFileInput,
  useFocusWithin,
  useForkRef,
  useIntersection,
  useLayer,
  useLayoutContext,
  useListNavigation,
  useMobile,
  useOnFocusOutside,
  useOutsideClick,
  usePlatform,
  usePortalContainer,
  useSelect,
  useTheme,
  useThemeSettings,
  useThemeType,
  useThemeValue,
  useTimeout,
  useToaster,
  useUniqId,
  useViewportSize,
  useVirtualElementRef,
  withEventBrokerDomHandlers,
  withMobile,
  withTableActions,
  withTableCopy,
  withTableSelection,
  withTableSettings,
  withTableSorting,
  withTheme,
  withThemeValue,
  withToaster,
  withoutClassMods
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 7.6.5
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@gravity-ui_uikit.js.map
